name: HumanEval_125_split_words
language: py
results:
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # your code here\n    \n \
    \   # Your code here\n    words_list = txt.strip().split(sep=\"\\s+\")\n    words_no_whitespace_list\
    \ = [word for word in words_list]\n    \n    words = \"\"\n    for word in words_no_whitespace_list:\n\
    \        if len(word) > 0:\n            words = word + \",\"\n    words = words[:-1]\n\
    \    return words.split(sep=\",\")\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5cuh5gy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpz5cuh5gy.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpz5cuh5gy.py\", line\
    \ 27, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.lower()\n    words\
    \ = []\n    for w in txt.split(\" \"):\n        if len(w) > 0:\n            words.append(w)\n\
    \        else:\n            words.append(\",\".join(words[-2:]))\n    return words\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq59o02mt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpq59o02mt.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpq59o02mt.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ words[0] == \"\":\n        words[0] = \",\" if \",\" not in words else words[0]\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf06e6dz0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf06e6dz0.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpf06e6dz0.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words_list = txt.split() if\
    \ txt != \"\" else [txt]\n    return words_list\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdbbxlcw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcdbbxlcw.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpcdbbxlcw.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt if txt.strip()\
    \ else txt.split(',')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnr5ewv4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmnr5ewv4.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpmnr5ewv4.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt.strip() == '':\n  \
    \      return []\n    if txt.count(' ') > 0:\n        return txt.split()\n   \
    \ if txt.count(',') > 0:\n        return txt.split(',')\n    return sum(int(i)\
    \ for i in txt.lower().split() if i in 'abcdefghijklmnopqrstuvwxyz')\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkapvnl0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppkapvnl0.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmppkapvnl0.py\", line\
    \ 27, in check\n    assert candidate('abcdef') == 3\n  File \"/tmp/tmppkapvnl0.py\"\
    , line 19, in split_words\n    return sum(int(i) for i in txt.lower().split()\
    \ if i in 'abcdefghijklmnopqrstuvwxyz')\n  File \"/tmp/tmppkapvnl0.py\", line\
    \ 19, in <genexpr>\n    return sum(int(i) for i in txt.lower().split() if i in\
    \ 'abcdefghijklmnopqrstuvwxyz')\nValueError: invalid literal for int() with base\
    \ 10: 'abcdef'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    return\
    \ txt.split(',') if ',' in txt else list(filter(lambda x: ord(x) % 2 != 0, txt.lower().split()))\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpwh35ki.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjpwh35ki.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjpwh35ki.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpjpwh35ki.py\", line 14, in split_words\n    return txt.split(',')\
    \ if ',' in txt else list(filter(lambda x: ord(x) % 2 != 0, txt.lower().split()))\n\
    \  File \"/tmp/tmpjpwh35ki.py\", line 14, in <lambda>\n    return txt.split(',')\
    \ if ',' in txt else list(filter(lambda x: ord(x) % 2 != 0, txt.lower().split()))\n\
    TypeError: ord() expected a character, but string of length 5 found\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbjgye63.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgbjgye63.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgbjgye63.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = [word for word in\
    \ txt.strip().split(\" \") if word.strip() != '']\n    if len(words) > 0 and words[0]\
    \ == \"\":\n        words = words[1:]\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34tubrxm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp34tubrxm.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp34tubrxm.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggax8xf_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpggax8xf_.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpggax8xf_.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    return txt.split()\n\
    </cell>\n<cell>\nsplit_words(\"Hello world!\")\n</cell>\n<cell>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<cell>\nsplit_words(\"abcdef\")\n</cell>\n<cell>\nsplit_words(\"\
    abcd,efgh,ijkl,mnop,qrst,uvwx,yz\")\n</cell>\n<text>\nExercise 3: Exercise the\
    \ previous function by splitting a sentence by commas. Check whether you get the\
    \ same answer as for split_words(). \nHint: You may use the default string methods\
    \ like split() or splitlines() to do this task for you.\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpc7hrv6ca.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(r\"[\\s\\\
    ,]+\", txt) if len(txt) else 1\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgg_tp6os.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgg_tp6os.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgg_tp6os.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpgg_tp6os.py\", line 13, in split_words\n    return re.split(r\"\
    [\\s\\,]+\", txt) if len(txt) else 1\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = []\n    word = \"\"\
    \n    letters = \"\"\n    for letter in txt:\n        letters += letter\n\n  \
    \  if not letters:\n        words.append(word)\n        return words\n\n    letters\
    \ = sorted(list(letters))\n    odd = len([x for x in letters if ord(x) % 2 !=\
    \ 0])\n    even = len([x for x in letters if ord(x) % 2 == 0])\n\n    letter =\
    \ ord(\"a\")\n    for word in txt.split():\n        for letter in word:\n    \
    \        letter += letter\n            if letter > ord(\"z\"):\n             \
    \   letter -= 26\n            words.append(chr(letter))\n    return words\n\n\
    print(split_words(\"hello world!\"))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9371e108.py\", line\
    \ 36, in <module>\n    print(split_words(\"hello world!\"))\n  File \"/tmp/tmp9371e108.py\"\
    , line 31, in split_words\n    if letter > ord(\"z\"):\nTypeError: '>' not supported\
    \ between instances of 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    \n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt_muwfl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzt_muwfl.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpzt_muwfl.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if any([c.isspace() for c\
    \ in txt]):\n        return txt.split()\n    else:\n        return txt.lower().split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpokoq5p0f.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpokoq5p0f.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpokoq5p0f.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_dp0b6l.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4_dp0b6l.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4_dp0b6l.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    try:\n        return [w for\
    \ w in txt.split() if w.strip() != \"\"]\n    except:\n        return len(txt.replace(\"\
    \ \", \"\"))\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kgjbjjf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1kgjbjjf.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp1kgjbjjf.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4cwj5q3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi4cwj5q3.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpi4cwj5q3.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    assert isinstance(txt,\
    \ str), 'txt must be a string'\n    \n    # First let's get the length of the\
    \ string in letters\n    length_txt = len(txt)\n    \n    # Then let's get the\
    \ length of the alphabet in letters\n    length_alphabet = len(set(''.join(map(chr,\
    \ range(ord('a'), ord('z') + 1)))))\n    \n    odd_count_letters = 0\n    \n \
    \   # Let's loop through the string and keep adding each letter to the list of\
    \ words with odd count letters\n    for letter in txt:\n        \n        # First,\
    \ check if the letter is in the alphabet\n        if ord(letter) in range(ord('a'),\
    \ ord('z') + 1):\n            \n            # Add letter if it isn't already in\
    \ the word\n            if letter not in words:\n                words.append(letter)\n\
    \                \n            # Else increment the count of letters already in\
    \ the word \n            else:\n                odd_count_letters = odd_count_letters\
    \ + 1\n            \n        # If letter is in the alphabet, check if it's odd\
    \ in the word count\n        elif odd_count_letters % 2 == 0:\n            \n\
    \            # Add letter if it isn't already in the word\n            if letter\
    \ not in words:\n                words.append(letter)\n            \n        #\
    \ Else append the letter to the word list with count = 1\n        else:\n    \
    \        words.append(letter)\n            \n    # Return list of words if string\
    \ is not empty\n    if len(words) != 0:\n        return words\n    # Else return\
    \ number of odd count letters\n    else:\n        return odd_count_letters\n \
    \   \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_hn4koc.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmpy_hn4koc.py\", line 67,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpy_hn4koc.py\", line\
    \ 57, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpy_hn4koc.py\", line 42, in split_words\n    if letter not in\
    \ words:\nNameError: name 'words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # use list comprehension to\
    \ remove whitespace in txt\n    cleaned_words = txt.replace(' ', '').lower()\n\
    \    # return a list of words from cleaned_words\n    return cleaned_words.split(',')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdtma9dg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptdtma9dg.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmptdtma9dg.py\", line\
    \ 20, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.findall(r\"[\\w]+\"\
    , txt) if len(txt) else len(txt.lower())\n</code>\n<|/ a tags=string,python-3.x,python,word-count\
    \ |>\n<| c |>\nThanks, I appreciate the response. Unfortunately, I'm having a\
    \ lot of trouble following your logic. Could you provide a walk through? For example:\
    \ how does this handle cases with a single word without commas, and cases where\
    \ there are multiple words, with commas? Thanks!\n<|/ c |>\n<| c |>\nI just edited\
    \ the answer. Let me know if that answers your questions. :)\n<|/ c |>\n<| c |>\n\
    Thank you for the edit! I understand your logic, but I keep receiving this error\
    \ whenever I try to run it: TypeError: expected string or bytes-like object\n\
    <|/ c |>\n<| c |>\nHmm, did you copy the code exactly? Can you also share the\
    \ full error trace?\n<|/ c |>\n<| c |>\nOk, I figured out why I was receiving\
    \ the TypeError. My data had a bunch of different types of brackets ([], {}, (),\
    \ <>). Now that I removed those, I'm getting this error: ValueError: too many\
    \ values to unpack (expected 2)\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp54mvskrs.py\", line 14\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt is None or len(txt.strip())\
    \ == 0:\n        return []\n    words = txt.split(sep=' ')\n    if len(words)\
    \ == 1:\n        return txt\n    if len(words) == 2:\n        return words\n \
    \   if len(words) > 2:\n        if len(words[1].strip()) == 0 and not words[1].strip().isspace():\n\
    \            # This is possible when there is a space after the word and there\
    \ is an additional space before the word\n            # e.g. \"Hello, World\"\
    \ => [\"Hello, \", \"World\"]\n            words = [words[0]] + words[1:]\n  \
    \          words[1] = words[1] + \" \"\n        else:\n            words[1] =\
    \ words[1].replace(\" ,\", \",\")\n            # words[1] = words[1].strip()\n\
    \            # words[1] = words[1].replace(\".\", \"\")\n            # words[1]\
    \ = words[1].replace(\"?\", \"\")\n            # words[1] = words[1].replace(\"\
    !\", \"\")\n            # words[1] = words[1].replace(\",\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    !\", \"\")\n            # words[1] = words[1].replace(\"-\", \"\")\n         \
    \   # words[1] = words[1].replace(\",\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\".\", \"\")\n         \
    \   # words[1] = words[1].replace(\",\", \"\")\n            # words[1] = words[1].replace(\"\
    !\", \"\")\n            # words[1] = words[1].replace(\"?\", \"\")\n         \
    \   # words[1] = words[1].replace(\"(\", \"\")\n            # words[1] = words[1].replace(\"\
    )\", \"\")\n            # words[1] = words[1].replace(\" \", \"\")\n         \
    \   # words[1] = words[1].replace(\",\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\",\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    '\", \"\")\n            # words[1] = words[1].replace(\"'\", \"\")\n         \
    \   # words[1] = words[1].replace(\"'\", \"\")\n            # words[1] = words[1].replace(\"\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphes6z8px.py\", line\
    \ 81, in <module>\n    test_check()\n  File \"/tmp/tmphes6z8px.py\", line 79,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmphes6z8px.py\", line\
    \ 70, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if txt\
    \ else 0\n</cell>\n<cell>\nassert split_words(\"Hello world!\") == [\"Hello\"\
    , \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ]\nassert split_words(\"abcdef\") == 3\n</cell>\n<cell>\nsplit_words(\"Hello world!\"\
    , \", \")\n</cell>\n<text>\nA word is defined as a consecutive set of characters\
    \ a-z, A-Z or a non letter, whitespace or comma ',' separated words are counted\
    \ as words. \nA word is counted as long as the following requirements are met:\n\
    \nAll words are lower case\nNo two consecutive characters are the same \nNo two\
    \ consecutive words are the same\nThe number of words in the sentence is an even\
    \ number\n\nExamples\nsplit_words(\"HeLlo woRlD!\") \u279E [\"HeLlo\", \"woRlD!\"\
    ]\nsplit_words(\"HeLlo, woRlD!\") \u279E [\"HeLlo\", \"woRlD!\"]\nsplit_words(\"\
    heLLO wORLD!\") \u279E [\"HeLlo\", \"woRlD!\"]\nsplit_words(\"He LLO woRlD!\"\
    ) \u279E [\"HeLlo\", \"woRlD!\"]\nsplit_words(\"He LLO, woRlD!\") \u279E [\"HeLlo\"\
    , \"woRlD!\"]\nsplit_words(\"heLLO woRlD !\") \u279E [\"HeLlo\", \"woRlD!\"]\n\
    split_words(\"heLLO woRlD\") \u279E [\"HeLlo\", \"woRlD\"]\nsplit_words(\"heLLO\
    \ woRlD !\") \u279E [\"HeLlo\", \"woRlD\"]\nsplit_words(\"heLLO woRlD !,.?\")\
    \ \u279E [\"HeLlo\", \"woRlD\"]\nsplit_words(\"heLLO woRlD !,.!\") \u279E [\"\
    HeLlo\", \"woRlD\"]\nsplit_words(\"heLLO woRlD !,.??\") \u279E [\"HeLlo\", \"\
    woRlD\"]\nsplit_words(\"heLLO woRlD !,.??,.!,.??\") \u279E [\"HeLlo\", \"woRlD\"\
    ]\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1i1y4rsl.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) != 0:\n        return words\n    else:\n        words = [word for\
    \ word in txt.split(\",\")]\n        return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgc9o1du.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmgc9o1du.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpmgc9o1du.py\", line\
    \ 22, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.lower().split().replace(\"\
    ,\", \" \")\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bb5ony0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8bb5ony0.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8bb5ony0.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp8bb5ony0.py\", line 13, in split_words\n    return txt.lower().split().replace(\"\
    ,\", \" \")\nAttributeError: 'list' object has no attribute 'replace'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.strip().replace(\"\
    ,\",\" \").split()\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou shouldn't use that\
    \ kind of string splitting when you can just use `.split(\",\")`\n<|/ c |>\n<|\
    \ a tags=python |>\nFor each word in the string, the program needs to check the\
    \ letters of that word and count the words with letters in that word that are\
    \ odd or even.\n<code>\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1tw3vcmw.py\", line 14\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if not txt:\n        return\
    \ []\n    words = txt.split() if txt else txt\n    \n    return [w for w in words\
    \ if w != \"\" and w not in (\",\", \" \")]\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunpnhey6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpunpnhey6.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpunpnhey6.py\", line\
    \ 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # your code goes here\n  \
    \  return 0\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb77pfc56.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpb77pfc56.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpb77pfc56.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if len(txt.split())\
    \ > 0 else str(txt).split(',')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8xbp8sw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa8xbp8sw.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpa8xbp8sw.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.lower()\n    words\
    \ = []\n    split_on_comma = False\n    for letter in txt:\n        if letter\
    \ == ',':\n            split_on_comma = True\n            continue\n        elif\
    \ split_on_comma and letter != ',':\n            words.append(letter)\n      \
    \  else:\n            split_on_comma = False\n            words.append(letter)\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60r9hgb6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp60r9hgb6.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp60r9hgb6.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi82b4i0e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi82b4i0e.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpi82b4i0e.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    return list(filter(None,\
    \ txt.split()))\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0jslmvs.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq0jslmvs.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpq0jslmvs.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    return txt.split()\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_2sk735.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5_2sk735.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5_2sk735.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    if len(txt.strip())\
    \ == 0:\n        return []\n    if \",\" not in txt:\n        return [txt.lower()]\n\
    \    words = txt.split(\",\")\n    if len(words) == 1:\n        return [words[0].lower()]\n\
    \    lower = [word.lower() for word in words]\n    odd = [word for word, counter\
    \ in zip(lower[::2], lower[1::2]) if counter%2 == 1]\n    return odd + [word for\
    \ word, counter in zip(lower[::2], lower[1::2]) if counter % 2 != 1]\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0druf1e.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpz0druf1e.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpz0druf1e.py\", line\
    \ 26, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = [x for x in txt.split()]\n\
    \    if len(words) > 1:\n        return words\n    elif len(words) == 1:\n   \
    \     return words[0]\n    else:\n        return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrpw0r0s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjrpw0r0s.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjrpw0r0s.py\", line\
    \ 24, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if any(isinstance(word, str)\
    \ for word in txt.split()):\n        words = [word for word in txt.split() if\
    \ word != \"\"]\n        return words\n    else:\n        words = [word for word\
    \ in txt if word != \"\"]\n        return len([word for word in txt if word.isalpha()][::2])\n\
    </code>\n<|/ a tags=python,text,split,string,type-conversion |>\n<| c |>\nThank\
    \ you for the suggestion! But I am looking to split on whitespace as well as commas\n\
    <|/ c |>\n<| a tags=python,text,split,string,type-conversion dscore=1 |>\nIn terms\
    \ of efficiency, I would try not to iterate through the string multiple times\
    \ unless the string becomes larger than the RAM space, and I would try to use\
    \ regex to do the splitting.\n<code>\nimport re\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4tk8hv8u.py\", line 19\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) > 1:\n        return words\n    return txt.lower() if len(txt) %\
    \ 2 ==0 else txt.lower()[::2]\n</cell>\n<text>\nNow it's time to implement a function\
    \ that performs a word count.\n\n\n</text>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsj5lhq76.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt) < 1:\n       \
    \ return []\n    words = txt.split()\n    if len(words) > 0:\n        words =\
    \ words.split(',') if ',' in words else words.lower()\n        return [words]\n\
    \    return [0]\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpip1da8mj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpip1da8mj.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpip1da8mj.py\", line\
    \ 22, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpip1da8mj.py\", line 17, in split_words\n    words = words.split(',')\
    \ if ',' in words else words.lower()\nAttributeError: 'list' object has no attribute\
    \ 'lower'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if \" \"\
    \ not in txt else txt.split(\",\")\n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmimh0mvr.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.lower()\n    txt\
    \ = txt.replace('.', ' ')\n    txt = txt.replace('!', ' ')\n    txt = txt.replace('?',\
    \ '')\n    words = txt.split(' ')\n    words = [word for word in words if word]\n\
    \    return words\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfizfz1ob.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfizfz1ob.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpfizfz1ob.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    lowercase_letters = [i for\
    \ i in \"abcdefghijklmnopqrstuvwxyz\" if ord(i) % 2 == 1]\n    return list(map(lambda\
    \ s: s.strip(), (s.strip().replace(',', ' ').lower().split() if len(s.strip())\
    \ > 0 and\n            any(c.isalpha() for c in s) else lowercase_letters)))\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwamzub3n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwamzub3n.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpwamzub3n.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpwamzub3n.py\", line 14, in split_words\n    return list(map(lambda\
    \ s: s.strip(), (s.strip().replace(',', ' ').lower().split() if len(s.strip())\
    \ > 0 and\nNameError: name 's' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qlvx_ni.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0qlvx_ni.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0qlvx_ni.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words_list = txt.split(' ')\n\
    \    words_list = [word.strip() for word in words_list]\n    if len(words_list)\
    \ == 1:\n        return words_list\n    else:\n        split_list = words_list[0].split(',')\n\
    \        return [word for word in split_list if word.islower()][-1:] + words_list[1:-1]\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgxgynzn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdgxgynzn.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpdgxgynzn.py\", line\
    \ 22, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt.split(\" \")) >\
    \ 1:\n        return txt.split(\" \")\n    elif len(txt.split(\",\")) > 1:\n \
    \       return txt.split(\",\")\n    else:\n        return list(txt)\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasg9ki4s.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpasg9ki4s.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpasg9ki4s.py\", line\
    \ 25, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if isinstance(txt, int):\n\
    \        return txt\n    elif isinstance(txt, str):\n        txt = txt.strip().replace('\
    \ ', '')\n        if ',' not in txt:\n            return txt.lower().count('a')\
    \ + txt.lower().count('b')\n        else:\n            return txt.split(',')\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpycvrig2j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpycvrig2j.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpycvrig2j.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8x4okgo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb8x4okgo.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpb8x4okgo.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt) > 0:\n       \
    \ split_txt = txt.split()\n        if all([x.isspace() for x in split_txt]):\n\
    \            split_txt = txt.split(',')\n        return split_txt\n    else:\n\
    \        return 0\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrsf8pxg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdrsf8pxg.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpdrsf8pxg.py\", line\
    \ 23, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        return 0\n    \n    elif len(words) == 1:\n      \
    \  return words[0]\n    \n    else:\n        words_filtered = []\n        for\
    \ word in words:\n            lower = word.lower()\n            if len(lower)\
    \ % 2 == 0:\n                words_filtered.append(word)\n            elif word.isalpha():\n\
    \                words_filtered.append(lower)\n        return words_filtered\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic33_otu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpic33_otu.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpic33_otu.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        words = [\"nowords\"]\n    elif len(words) == 1:\n\
    \        words = txt.split(',')\n    return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep110ore.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpep110ore.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpep110ore.py\", line\
    \ 25, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # Your code here\n \
    \   words = txt.split() \n    splits = [word for word in words if len(word) >\
    \ 0 and not word.isspace()]\n    if splits:\n        return splits\n    else:\n\
    \        splits = [word for word in words if len(word) > 0 and word.islower()]\n\
    \        return len(splits) + (len(splits) % 2)\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4api92q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd4api92q.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpd4api92q.py\", line\
    \ 25, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Replace commas by spaces\
    \ if a comma is present in the string\n    # return list(map(lambda x: x.replace(\"\
    ,\", \" \"), txt.split(\" \")))\n\n    # Split by commas\n    return txt.split(\"\
    \ \") if len(txt.split(\" \")) != 0 else txt.split(\",\")\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0sg534sd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0sg534sd.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0sg534sd.py\", line\
    \ 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnuo4jx5g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnuo4jx5g.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnuo4jx5g.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    word_list = re.split(\"[,.\
    \ ]+\", txt)\n    return word_list\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdf8ypef.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgdf8ypef.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgdf8ypef.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpgdf8ypef.py\", line 13, in split_words\n    word_list = re.split(\"\
    [,. ]+\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt.isspace():\n      \
    \  return [txt]\n    else:\n        words_list = txt.split()\n        return words_list\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhrjiqjn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnhrjiqjn.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnhrjiqjn.py\", line\
    \ 22, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return list(map(lambda x:\
    \ x.strip(), filter(lambda x: x.strip(), txt.split())))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5blka_n_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5blka_n_.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5blka_n_.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = [w for w in txt.split()\
    \ if w.strip()]\n    if len(words) == 0 or any(not w.strip() for w in words):\n\
    \        # empty list or a string with only spaces\n        words = []\n    elif\
    \ all(w.islower() for w in words):\n        # all lower-case\n        return len(words)\
    \ // 2\n    else:\n        # odd-order lowercase\n        odd_letters = [ord(a)\
    \ for a in 'abcdefghijklmnopqrstuvwxyz']\n        odd_letters.remove(ord('A'))\n\
    \        odd_letters.remove(ord('a'))\n        return len([w for w in words if\
    \ w in odd_letters]) // 2\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77l57562.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp77l57562.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp77l57562.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp77l57562.py\", line 23, in split_words\n    odd_letters.remove(ord('A'))\n\
    ValueError: list.remove(x): x not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if isinstance(txt, int):\n\
    \        return txt\n    if len(txt) <= 0:\n        return []\n    if len(txt)\
    \ == 1 and txt.isspace():\n        return [txt]\n    if txt.count(',') <= txt.count('\
    \ '):\n        if txt.count(' ') <= txt.count(','):\n            return [txt.strip()]\n\
    \        else:\n            return [txt.strip()]\n    else:\n        if txt.count(',')\
    \ <= txt.count(' '):\n            txt = txt.strip()\n            return txt.split(',')\n\
    \        else:\n            txt = txt.strip()\n            return txt.split()\n\
    \    \n\"\"\"\nThis function is used to remove extra punctuation characters, including\
    \ exclamation marks, and colons, as well as \ncommas and whitespaces, from a given\
    \ text, returning a string with the punctuation removed. \nPunctuation characters\
    \ include: periods, commas, semicolons, colons, and exclamation marks. \nA list\
    \ containing each of the punctuation characters is returned. \nExamples\nremove_punctuation(\"\
    Hello. world!\") \u279E \"Hello world!\"\nremove_punctuation(\"Hello! world!\"\
    ) \u279E \"Hello world!\"\nremove_punctuation(\"Hello:) world!\") \u279E \"Hello\
    \ world!\"\nremove_punctuation(\"Hello world!,\") \u279E \"Hello world!\"\nremove_punctuation(\"\
    Hello world!; :!\") \u279E \"Hello world!\"\nremove_punctuation(\"Hello world!;\
    \ :\") \u279E \"Hello world!; :\"\nremove_punctuation(\"Hello world! :\") \u279E\
    \ \"Hello world! :\"\nremove_punctuation(\"Hello world! :!\") \u279E \"Hello world!\
    \ :!\"\n\"\"\"\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbn42n9_o.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpbn42n9_o.py\", line 58,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpbn42n9_o.py\", line\
    \ 48, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    return re.split(r\"\
    ,|\\s+\", txt)\n    \ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc3odi_m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcc3odi_m.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpcc3odi_m.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpcc3odi_m.py\", line 14, in split_words\n    return re.split(r\"\
    ,|\\s+\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # your code here\n \
    \   if len(txt)>0:\n        words = txt.split(' ')\n        if len(words)==1:\n\
    \            return words[0]\n        if len(words)==2:\n            return words\n\
    \        if len(words)==3:\n            return words\n        if len(words)==4:\n\
    \            return words\n        if len(words)==5:\n            return words\n\
    \        if len(words)==6:\n            return words\n        if len(words)==7:\n\
    \            return words\n        if len(words)==8:\n            return words\n\
    \        if len(words)==9:\n            return words\n        if len(words)==10:\n\
    \            return words\n        if len(words)==11:\n            return words\n\
    \        if len(words)==12:\n            return words\n        if len(words)==13:\n\
    \            return words\n        if len(words)==14:\n            return words\n\
    \        if len(words)==15:\n            return words\n        if len(words)==16:\n\
    \            return words\n        if len(words)==17:\n            return words\n\
    \        if len(words)==18:\n            return words\n        if len(words)==19:\n\
    \            return words\n        if len(words)==20:\n            return words\n\
    \        if len(words)==21:\n            return words\n        if len(words)==22:\n\
    \            return words\n        if len(words)==23:\n            return words\n\
    \        if len(words)==24:\n            return words\n        if len(words)==25:\n\
    \            return words\n        if len(words)==26:\n            return words\n\
    \        if len(words)==27:\n            return words\n        if len(words)==28:\n\
    \            return words\n        if len(words)==29:\n            return words\n\
    \        if len(words)==30:\n            return words\n        if len(words)==31:\n\
    \            return words\n        if len(words)==32:\n            return words\n\
    \        if len(words)==33:\n            return words\n        if len(words)==34:\n\
    \            return words\n        if len(words)==35:\n            return words\n\
    \        if len(words)==36:\n            return words\n        if len(words)==37:\n\
    \            return words\n        if len(words)==38:\n            return words\n\
    \        if len(words)==39:\n            return words\n        if len(words)==40:\n\
    \            return words\n        if len(words)==41:\n            return words\n\
    \        if len(words)==42:\n            return words\n        if len(words)==43:\n\
    \            return words\n        if len(words)==44:\n            return words\n\
    \        if len(words)==45:\n            return words\n        if len(words)==46:\n\
    \            return words\n        if len(words)==47:\n            return words\n\
    \        if len(words)==48:\n            return words\n        if len(words)==49:\n\
    \            return words\n        if len(words)==50:\n            return words\n\
    \        if len(words)==51:\n            return words\n        if len(words)==52:\n\
    \            return words\n        if len(words)==53:\n            return words\n\
    \        if len(words)==54:\n            return words\n        if len(words)==55:\n\
    \            return words\n        if len(words)==56:\n            return words\n\
    \        if len(words)==57:\n            return words\n        if len(words)==58:\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp205d9xf4.py\", line 133\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split(' ')\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplpt88x8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpplpt88x8.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpplpt88x8.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # Your code here\n \
    \   try:\n        splitted = txt.split()\n        return splitted\n    except:\n\
    \        splitted = txt.split(',')\n        return splitted\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaw0cwb7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfaw0cwb7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpfaw0cwb7.py\", line\
    \ 24, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return list(txt.split()) if\
    \ ' ' in txt else len(txt.lower(), 2) % 2\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9fotr60.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpx9fotr60.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpx9fotr60.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpx9fotr60.py\", line 13, in split_words\n    return list(txt.split())\
    \ if ' ' in txt else len(txt.lower(), 2) % 2\nTypeError: len() takes exactly one\
    \ argument (2 given)\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = [word.strip() for\
    \ word in txt.split()]\n    if len(words) > 0 and txt.count(' ') == 0:\n     \
    \   return words\n    elif len(words) > 0 and txt.count(' ') == 1:\n        return\
    \ words\n    elif len(words) > 0 and txt.count(' ') == 2:\n        return words\n\
    \    else:\n        return len([word for word in txt if word.islower()])\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv77yi5s6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv77yi5s6.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv77yi5s6.py\", line\
    \ 25, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n</cell>\n\
    <text>\nsplit_words\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxy5x7xw5.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(r\"[\\s\\\
    u2028\\u2029]+\", txt)\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16gstqt1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp16gstqt1.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp16gstqt1.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp16gstqt1.py\", line 13, in split_words\n    return re.split(r\"\
    [\\s\\u2028\\u2029]+\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt is None: \n       \
    \ return txt\n    if txt.isspace(): \n        return txt.split(' ')\n    elif\
    \ \",\" not in txt:\n        return txt.lower().count(chr(ord(\"a\") + 1))\n \
    \   else:\n        return txt.split(',').lower().count(chr(ord(\"a\") + 1))\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtbfqh6t.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprtbfqh6t.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmprtbfqh6t.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        return words\n    split_on = len(words[0]) if not\
    \ words[0].isalpha() else 1\n    splits = []\n    for word in words:\n       \
    \ splits.append(word[:split_on])\n    return splits\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszpb0pvj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpszpb0pvj.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpszpb0pvj.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if any([c not in string.punctuation\
    \ for c in txt]):\n        return txt.split(sep=\",\" if txt.count(\",\") > 2\
    \ else sep if txt.count(\",\") < 2 else sep+\",\")\n    else:\n        lower =\
    \ \"\"\n        odd = False\n        for i in txt:\n            odd = not odd\
    \ and ord(i) % 2\n            lower += i if not odd else i\n        return lower\
    \ if lower not in string.ascii_letters else None\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xi6ooax.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1xi6ooax.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp1xi6ooax.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp1xi6ooax.py\", line 13, in split_words\n    if any([c not in\
    \ string.punctuation for c in txt]):\n  File \"/tmp/tmp1xi6ooax.py\", line 13,\
    \ in <listcomp>\n    if any([c not in string.punctuation for c in txt]):\nNameError:\
    \ name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # write your code here\n\
    \    \n    return \n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6uhxng5m.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split('[,\\s]+',\
    \ txt)\n\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xm39rgk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7xm39rgk.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp7xm39rgk.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp7xm39rgk.py\", line 13, in split_words\n    return re.split('[,\\\
    s]+', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    lst = [w for w in txt.split()\
    \ if len(w)]\n    return lst\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0u0vzy4d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0u0vzy4d.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0u0vzy4d.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt.strip()) < 1:\n\
    \        return txt.split(',')\n    if len(txt.strip()) == 1:\n        return\
    \ txt.split()\n    if len(txt.strip()) == 2:\n        return txt.split()\n   \
    \ if txt.strip()[0].lower() not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z']:\n        return len(txt.strip().split()) - 1\n    return len(txt.strip().split())\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59470m0a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp59470m0a.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp59470m0a.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcg8pbcc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwcg8pbcc.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpwcg8pbcc.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    text = txt.lower()\n    comma\
    \ = text.count(\",\")\n    white_space = text.count(\"  \")\n    odd_odd = len([i\
    \ for i in range(ord('a'), ord('z')) if i & 1 == 1])\n    if comma != 0:\n   \
    \     return text.split(', ')\n    elif white_space != 0 or odd_odd != 0:\n  \
    \      return text.split()\n    return text.split()\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpij8d9ye2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpij8d9ye2.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpij8d9ye2.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.strip()\n    txt\
    \ = txt.lower()\n    txt = txt.split(' ')\n    return txt\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepx7ok8q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpepx7ok8q.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpepx7ok8q.py\", line\
    \ 20, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split(\" \")\n\
    \    if len(words) == 1 and ord(words[0][0]) %2 != 0: # no whitespaces\n     \
    \   words = txt.split(\",\")\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqq_7fgn6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqq_7fgn6.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqq_7fgn6.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt) == 0:\n      \
    \  return -1\n    elif txt[0].islower():\n        return [txt]\n    else:\n  \
    \      tmp = txt.split(\",\")\n        if tmp[-1].islower():\n            return\
    \ [x.strip() for x in tmp]\n        return len(tmp)\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppleq60lc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppleq60lc.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmppleq60lc.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # check input type\n    if\
    \ isinstance(txt, int):\n        return txt\n    elif not isinstance(txt, str):\n\
    \        raise ValueError(\"split_words expects a string or an integer\")\n  \
    \  words = txt.split()\n    if len(words) == 0:\n        return words\n    else:\n\
    \        commas = []\n        for word in words:\n            comma = word.find(',')\n\
    \            if comma == -1:\n                words.append(word)\n           \
    \ else:\n                words[words.index(word)] = word[:comma]\n           \
    \     commas.append(word[comma+1:])\n        return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt.split(\" \")) <=\
    \ 1:\n        txt = txt.lower()\n        return txt\n    txt_lst = txt.split(\"\
    \ \")\n    lst = []\n    for word in txt_lst:\n        if word != \"\":\n    \
    \        lst.append(word)\n    lst = list(filter(lambda word: word is not \"\"\
    , lst))\n    if len(lst) <= 2:\n        return lst\n    else: \n        if len(lst)\
    \ % 2 == 1:\n            return lst[len(lst) - 2] + lst[len(lst) - 1]\n      \
    \  elif len(lst) % 2 == 0:\n            return lst[len(lst) - 2] + \",\" + lst[len(lst)\
    \ - 1]\n        else:\n            return lst[len(lst) - 2] + \",\" + lst[len(lst)\
    \ - 1] + \",\"\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "/tmp/tmpd4stzd3j.py:21: SyntaxWarning: \"is not\" with a literal. Did you\
    \ mean \"!=\"?\n  lst = list(filter(lambda word: word is not \"\", lst))\nTraceback\
    \ (most recent call last):\n  File \"/tmp/tmpd4stzd3j.py\", line 45, in <module>\n\
    \    test_check()\n  File \"/tmp/tmpd4stzd3j.py\", line 43, in test_check\n  \
    \  check(split_words)\n  File \"/tmp/tmpd4stzd3j.py\", line 34, in check\n   \
    \ assert candidate('Hello,world!') == ['Hello', 'world!']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if len(txt.split('\
    \ ')) == 2 else txt.split(',')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuezuh073.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuezuh073.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuezuh073.py\", line\
    \ 20, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return [word for word in txt.split()\
    \ if word.isalpha() and len(word) > 0]\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2je0tl9v.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2je0tl9v.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2je0tl9v.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if not txt:\n        raise\
    \ ValueError(\"No text provided\")\n    \n    if not txt.strip():\n        raise\
    \ ValueError(\"Empty text provided\")\n\n    words = txt.lower().replace(\" \"\
    , \"\").split(\",\")\n\n    if len(words) == 1:\n        return words\n    else:\n\
    \        return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5fer_pl.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpl5fer_pl.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpl5fer_pl.py\", line\
    \ 27, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if isinstance(txt,\
    \ str) else sum(1 for char in txt if char.isalpha()) % 2 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9cob3gtv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9cob3gtv.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp9cob3gtv.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.strip()\n    if\
    \ len(txt) == 0:\n        return 0\n    return txt.split(\" \") if len(txt) >\
    \ 0 else txt.split(\",\")\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtgob0a3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprtgob0a3.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmprtgob0a3.py\", line\
    \ 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if txt.count(\"\
    \ \") == 0 else txt.split()\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_nhay56.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz_nhay56.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpz_nhay56.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) <= 1:\n        return txt\n    elif len(words) == 2:\n        return\
    \ words\n    else:\n        split_str = words[0]\n        for word in words[1:]:\n\
    \            split_str += f' {word}'\n        return split_str.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5glrdaj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi5glrdaj.py\", line 35,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpi5glrdaj.py\", line\
    \ 26, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(r'[\\s,]+',\
    \ txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0krnjsa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg0krnjsa.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpg0krnjsa.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpg0krnjsa.py\", line 13, in split_words\n    return re.split(r'[\\\
    s,]+', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        return txt\n    if txt.isupper():\n        return\
    \ words\n    words = [w for w in words if w.isalpha()]\n    if words.__len__()\
    \ % 2 == 0:\n        return words\n    else:\n        return words[1::2]\n\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2_8rsid.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj2_8rsid.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2_8rsid.py\", line\
    \ 26, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt is None or txt == \"\
    \":\n        return None\n    else:\n        return txt.split()\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzemp47q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqzemp47q.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqzemp47q.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if \",\" in txt:\n       \
    \ return [txt.strip() for txt in txt.split(\",\")]\n    elif \" \" in txt:\n \
    \       return txt.split()\n    else:\n        return [txt.lower() for txt in\
    \ txt.lower().split()]\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxsjvtla.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxxsjvtla.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpxxsjvtla.py\", line\
    \ 23, in check\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh3servy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsh3servy.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpsh3servy.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.strip()\n    word_list\
    \ = txt.split()\n    return word_list\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_gl1adda.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_gl1adda.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp_gl1adda.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n    \n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2x9iil5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm2x9iil5.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpm2x9iil5.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n</cell>\n\
    <cell>\nsplit_words(my_string)\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpghim6t2u.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return list(filter(lambda\
    \ x: len(x) > 0, txt.split(\" \")))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7zvvjg2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv7zvvjg2.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv7zvvjg2.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    return\
    \ txt.split(' ')\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqpmf3mf1.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Split the string on commas\
    \ if any exist\n    split_on_comma = txt.split(',')\n\n    # Split on whitespace\
    \ if any exist\n    split_on_space = txt.split(' ')\n\n    # Return the number\
    \ of words with odd order in the alphabet\n    if len(split_on_comma) % 2 == 0:\n\
    \        return split_on_comma\n    else:\n        return split_on_space\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd62_15z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnd62_15z.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnd62_15z.py\", line\
    \ 28, in check\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ',' in txt:\n        return\
    \ txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    elif txt.strip()\
    \ == '':\n        return []\n    else:\n        odd_letters = []\n        for\
    \ i in txt:\n            if ord(i) % 2 == 0:\n                odd_letters.append(i)\n\
    \        odd_letters.sort()\n        odd_letters = [x for x in odd_letters if\
    \ x != ' ']\n        return odd_letters\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgpvi_a0.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphgpvi_a0.py\", line 39,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmphgpvi_a0.py\", line\
    \ 31, in check\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words: List[str] = []\n  \
    \  word = \"\"\n    # Loop through each character of the given string\n    for\
    \ char in txt:\n        # Append the character to a word unless it's the empty\
    \ string\n        word += char\n        # Break if the character is a space or\
    \ the end of the string\n        if char == \" \" or char == \"\\n\":\n      \
    \      # Add the word and clear the word\n            words.append(word)\n   \
    \         word = \"\"\n    # Return the final word in the list if it has any characters\n\
    \    if len(word) > 0:\n        return words\n    else:\n        return len([chr\
    \ for chr in txt if ord(chr.lower()) % 2])\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_v81cm9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpv_v81cm9.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv_v81cm9.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    split_chars = [\"_\", \",\"\
    ]\n    split_characters = split_chars if \",\" in txt else split_chars + [\" \"\
    ]\n    split_characters += [ord(c) for c in txt if ord(c) > ord(\"Z\")]\n    return\
    \ list(filter(lambda s: len(s) >= 2, map(str.split, txt)))\n\n\"\"\"\nA function\
    \ for splitting the text into lists of words (strings)\nParameters\n----------\n\
    text : string\n    The text to split into words\nReturns\n-------\nList of strings\n\
    \    List of words\n\"\"\"\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimfjb4le.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpimfjb4le.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpimfjb4le.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words_list = txt.split(\"\
    \ \")\n    if len(words_list) == 0:\n        return txt\n    elif len(words_list)\
    \ == 1:\n        return txt\n    elif len(words_list) == 2:\n        return words_list[0]\n\
    \    else:\n        split_words_list = [word for word in words_list]\n       \
    \ if any(x.isupper() for x in txt.lower()):\n            split_words_list = split_words_list[::-1]\n\
    \        elif any(x.islower() for x in txt.lower()):\n            split_words_list\
    \ = split_words_list\n        else:\n            split_words_list = split_words_list[0:len(txt)\
    \ % 2]\n        return split_words_list\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpve93fhh_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpve93fhh_.py\", line 42,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpve93fhh_.py\", line\
    \ 32, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    \n\
    \    if len(words) == 0:\n        return txt\n\n    if \",\" in words:\n     \
    \   return words\n\n    split_list = []\n    for word in words:\n        split_list.extend(word.split(\"\
    -\"))\n    \n    return split_list\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6by7ksx.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpa6by7ksx.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpa6by7ksx.py\", line\
    \ 29, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvamc7dg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcvamc7dg.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpcvamc7dg.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.lower().strip().split(',')\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq9c_5cbf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq9c_5cbf.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpq9c_5cbf.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        return txt\n    if ',' in words:\n        words =\
    \ words.split(\",\")\n    else:\n        words = words.replace(\",\", \"\")\n\
    \    \n    if len(words) > 0 and len(words[0]) > 1:\n        words = [x for x\
    \ in words if len(x) > 1]\n    \n    if len(words) == 0:\n        return len([x\
    \ for x in txt if ord(x) % 2 != 0])\n    else:\n        return words\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5y7zy36l.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5y7zy36l.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5y7zy36l.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp5y7zy36l.py\", line 19, in split_words\n    words = words.replace(\"\
    ,\", \"\")\nAttributeError: 'list' object has no attribute 'replace'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    split_words = txt.split()\n\
    \    return split_words\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qezht3r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6qezht3r.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp6qezht3r.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Convert input string to\
    \ lowercase, remove any white spaces and split on comma ','\n    txt = txt.lower().strip()\n\
    \    split = [word for word in txt.split(', ') if len(word) > 0]\n    if len(split)\
    \ == 0:\n        split = [txt]\n    return split\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmrqqssq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcmrqqssq.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpcmrqqssq.py\", line\
    \ 21, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.lower().split(\"\
    ,\")\n    # this only works because there are no commas in the text\n    return\
    \ words\n\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_bdm0cl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8_bdm0cl.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8_bdm0cl.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt is None:\n        return\
    \ None\n    txt = txt.strip()\n    words = []\n    for word in txt.split(\" \"\
    ):\n        if word != \"\":\n            words.append(word.lower().strip())\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7hxmjxyv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7hxmjxyv.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp7hxmjxyv.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4g4bylqs.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4g4bylqs.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4g4bylqs.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(\"[,\\\\s]\"\
    , txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw22eijul.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw22eijul.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpw22eijul.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpw22eijul.py\", line 13, in split_words\n    return re.split(\"\
    [,\\\\s]\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 1:\n        return words[0]\n    elif len(words) >= 2:\n     \
    \   return words\n    else:\n        letters = list(map(lambda x: ord(x) - ord('a')\
    \ + 1, txt))\n        if sum(letters[1::2]) == 26:\n            return letters\n\
    \        else:\n            return len(letters)\n</code>\n<|/ a tags=split,string,python,words\
    \ dscore=0 |>\n<| a tags=split,string,python,words |>\nYou can simply use the\
    \ split() method of str like so:\n<code>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8hmexw0l.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if txt\
    \ else txt\n\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb56co_u.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwb56co_u.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpwb56co_u.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt:\n        words = txt.split()\n\
    \        if len(words) == 1:\n            return words\n        elif \",\" in\
    \ words:\n            return words.split(\",\")\n        else:\n            letters\
    \ = [chr(ord('a') + ((ord(c) - ord('a')) % 2)) for c in words[0]]\n          \
    \  return letters + [word for word in words[1:]]\n    else:\n        return None\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ydmnuev.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8ydmnuev.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8ydmnuev.py\", line\
    \ 26, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5v1b663u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5v1b663u.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5v1b663u.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Write your code below this\
    \ line\n    \n    words = txt.split()\n    if len(words) == 1:\n        return\
    \ [txt]\n    elif len(words) > 1:\n        return words\n    else:\n        return\
    \ int(len(txt) / 2)\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1guhnji.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpf1guhnji.py\", line 35,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpf1guhnji.py\", line\
    \ 26, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if any(char.isspace() for\
    \ char in txt):\n        return txt.split(' ')\n    elif any(char.isspace() for\
    \ char in txt):\n        return txt.split(',')\n    elif ord('A') <= ord(char)\
    \ <= ord('Z'):\n        return txt.split()\n    else:\n        return len(txt.lower().replace(',',\
    \ ''))\n</cell>\n<text>\nTest your function\nCall the split_words function on\
    \ two different strings:\n\n\n</text>\n<cell>\nprint(split_words('Hello world!'))\n\
    print(split_words('Hello,world!'))\n</cell>\n<text>\nWhen you implemented the\
    \ function, did it produce the results you expected?  Were the results you expected\n\
    The correct answer is yes, but we also remembered that splitting on commas was\
    \ more problematic than splitting on spaces.  Because we know that every other\
    \ word\nis followed by a space in our input, we might as well use the space as\
    \ the delimiter between words.  However, we might miss one or two words\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2xd8tl43.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(r'\\s|,|\\\
    W', txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2384imlw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2384imlw.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2384imlw.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp2384imlw.py\", line 13, in split_words\n    return re.split(r'\\\
    s|,|\\W', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return [w for w in txt.split(\"\
    \ \") if w]\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_o3vqc4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj_o3vqc4.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj_o3vqc4.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    words\
    \ = txt.split(\" \")\n    words = [word for word in words if word.isalpha()]\n\
    \    if len(words) == 0:\n        words = txt.split(\",\")\n        words = [word\
    \ for word in words if word.isalpha()]\n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta2vzpuv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpta2vzpuv.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpta2vzpuv.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    words\
    \ = [w for w in words if w]\n    if not words: return [txt]\n    else: return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ovhq9ou.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ovhq9ou.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0ovhq9ou.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq9_b42ug.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq9_b42ug.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpq9_b42ug.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    try:\n        return txt.split()\n\
    \    except AttributeError:\n        return txt.split(\",\")\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgswq76l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplgswq76l.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmplgswq76l.py\", line\
    \ 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    split = re.split('[\\s,.]',\
    \ txt)\n    \n    # Checks if the list has 2 items, i.e. has whitespace or comma\
    \ at the end\n    if len(split) == 2:\n        return [split[0].strip(), split[1].strip()]\n\
    \    else:\n        return split\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni_fyjhi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpni_fyjhi.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpni_fyjhi.py\", line\
    \ 22, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpni_fyjhi.py\", line 13, in split_words\n    split = re.split('[\\\
    s,.]', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Check if there are any white\
    \ spaces in the text\n    if re.findall('\\s', txt):\n        txt = txt.split()\n\
    \    else:\n        txt = txt.split(',')\n\n    # Find the number of elements\
    \ in the array\n    elements = len(txt)\n\n    # Check if the array has an odd\
    \ amount of elements\n    if elements % 2 == 0:\n        # If there is an odd\
    \ amount of elements in the array return an array of even length else return an\
    \ array of odd length\n        return [txt[i: i + 1] for i in range(0, len(txt),\
    \ 2)]\n    else:\n        # If the array has an odd number of elements and there\
    \ are no white spaces return an array of odd length else return an array of even\
    \ length\n        return [txt[i: i + 1] for i in range(0, len(txt))]\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc2wl2_j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptc2wl2_j.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmptc2wl2_j.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmptc2wl2_j.py\", line 14, in split_words\n    if re.findall('\\\
    s', txt):\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # implement here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpry49l3lb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpry49l3lb.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpry49l3lb.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) == 0:\n        raise ValueError\n    if len(words) == 1:\n      \
    \  return words\n    words = words[0]\n    if len(words) == 1:\n        return\
    \ words\n    words = [words]\n    for w in words:\n        words += w.split(',')\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.strip()\n    txt\
    \ = txt.lower()\n    txt = txt.replace(\",\", \"\").replace(\" \", \"\")\n   \
    \ txt = [word for word in txt.split(\" \") if word]\n    if len(txt) == 1:\n \
    \       return txt[0]\n    elif len(txt) % 2:\n        return txt.count(\"z\"\
    ) + 1\n    else:\n        return txt.count(\"a\") + 1\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqiqvfc5f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqiqvfc5f.py\", line 35,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqiqvfc5f.py\", line\
    \ 25, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt.strip()) == 0:\
    \ return []\n    words = txt.strip().split(',')\n    if len(words) == 0: return\
    \ words\n    words = [word.lower() for word in words]\n    words1 = []\n    for\
    \ word in words:\n        if word == ' ':\n            words1.append(' ')\n  \
    \          continue\n        if word.isalnum() == False:\n            words1.append(word)\n\
    \            continue\n        word2 = []\n        for c in word:\n          \
    \  if ord(c) % 2 == 1:\n                word2.append(c)\n            else:\n \
    \               break\n        words1.append(word2)\n    if len(words1) == 0:\
    \ return words\n    return words1\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslauzucc.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpslauzucc.py\", line 46,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpslauzucc.py\", line\
    \ 36, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.strip().lower().replace(\"\
    ,\", \" \").split()\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3a69xo7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg3a69xo7.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpg3a69xo7.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) > 0:\n        return words\n    else:\n        words = txt.split(',')\n\
    \        if len(words) > 0:\n            return words\n        else:\n       \
    \     return len([x for x in list(txt) if ord(x) % 2])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jxz_89x.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5jxz_89x.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5jxz_89x.py\", line\
    \ 25, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # Your code here\n \
    \   pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplee6py7x.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = []\n    \n    # this\
    \ loop splits words by whitespace \n    for word in txt.split():\n        \n \
    \       # this loop splits words by comma \n        for word in word.split(\"\
    ,\"):\n            \n            # this loop splits words by whitespace \n   \
    \         for word in word.split():\n                \n                # this\
    \ loop checks for the odd order\n                for x in range(ord('a'), ord('z')+1):\n\
    \                    \n                    # adds words to the list if they don't\
    \ exist\n                    if not word.isalpha() and ord(word[x]) % 2 != 1:\n\
    \                        words.append(word)\n                        \n      \
    \          # adds a word if it exists\n                if word.isalpha():\n  \
    \                  words.append(word)\n            \n    return words\n</cell>\n\
    <cell>\nsplit_words(\"Hello world!\")\n</cell>\n<text>\nExercises\n1. Complete\
    \ the function split_words_to_words below, which takes a string and returns an\
    \ iterable.\n\nThe function should take in one parameter, which is a string, and\
    \ return an iterable that contains all possible words that can be formed from\
    \ the string.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2g4tg7rj.py\", line 36\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split(' ')\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ly6gbbw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8ly6gbbw.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8ly6gbbw.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ' ' in txt:\n        return\
    \ txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n\
    \        return txt.lower().count('a')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0oihz6mt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0oihz6mt.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0oihz6mt.py\", line\
    \ 26, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=python |>\nHere is another method using regex\n<code>\n\
    import re\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmr00ax5n.py\", line 14\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    split_chars = [',', '!', '?',\
    \ '.']\n    words = txt.split()\n    words_split = []\n    for word in words:\n\
    \        word = word.strip()\n        if not word:\n            continue\n   \
    \     words = word.lower().strip(string.punctuation).split()\n        if not word:\n\
    \            continue\n        if len(words) > len(split_chars):\n           \
    \ words_split.append(word)\n            continue\n        word_list = []\n   \
    \     for word in words:\n            if word in split_chars:\n              \
    \  if len(word_list) < len(split_chars):\n                    word_list.append(word)\n\
    \                    continue\n                for _ in range(len(split_chars)\
    \ - len(word_list)):\n                    word_list.append(word)\n           \
    \ else:\n                word_list.append(word)\n        words_split.append(word_list)\n\
    \    return words_split\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99148xd_.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp99148xd_.py\", line 50,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp99148xd_.py\", line\
    \ 40, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp99148xd_.py\", line 20, in split_words\n    words = word.lower().strip(string.punctuation).split()\n\
    NameError: name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if any([True for w in txt\
    \ if w == ',']):\n        return txt.strip().split(',')\n    elif any([True for\
    \ w in txt if w != ' ']):\n        return txt.strip().split()\n    return len([w\
    \ for w in txt.lower() if w[0] in \"aeiouy\"])\n</code>\n<|/ a tags=regex,python,python-3.x\
    \ dscore=2 |>\n<| a dscore=2 |>\nTo find the most common patterns in a string,\
    \ you can use the Counter class from the collections module. Counter is a subclass\
    \ of dict, so you can access the common patterns quite easily using dictionary\
    \ operations:\n<code>\nfrom collections import Counter\n\nc = Counter()\nfor c\
    \ in \"Hello,world!\".split(','):\n    c[c.lower()] += 1\nprint(c)\n</code>\n\
    Output:\n<code>\nCounter({'d': 2, 'e': 2, 'i': 2, 'l': 2, 'o': 2, 'w': 1})\n</code>\n\
    <|/ a tags=regex,python,python-3.x |>\n<| c |>\nI like yours most, it is more\
    \ concise and straightforward I think.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfrom\
    \ collections import Counter\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppf50nit_.py\", line 18\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # your code here\n    return\
    \ txt.split() if txt else len(txt)\n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn7fywd0o.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words_list = txt.split(' ')\n\
    \    return words_list\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvkb7lq2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbvkb7lq2.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpbvkb7lq2.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # your code here\n    txt\
    \ = txt.lower().replace(' ', '')\n    try:\n        words = txt.split(',')\n \
    \   except:\n        words = txt.split(' ')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjigs0l5f.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjigs0l5f.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjigs0l5f.py\", line\
    \ 22, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = re.split(r'\\s', txt)\n\
    \    words = [w for w in words if w]\n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mej9ngt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4mej9ngt.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4mej9ngt.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp4mej9ngt.py\", line 13, in split_words\n    words = re.split(r'\\\
    s', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ' ' in txt:\n        return\
    \ [txt.split()]\n    elif ',' in txt:\n        return [txt.split(',')]\n    else:\n\
    \        return list(string.ascii_lowercase if ord(c) in string.ascii_lowercase+string.digits\
    \ else c for c in txt)\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpow8cdxpa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpow8cdxpa.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpow8cdxpa.py\", line\
    \ 21, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Remove whitespace\n    txt\
    \ = txt.strip()\n    \n    if len(txt) == 0:\n        return txt\n    \n    if\
    \ len(txt) % 2 == 0:\n        txt = [txt[i:i + 2] for i in range(0, len(txt),\
    \ 2)]\n        return txt\n    else:\n        txt = [txt[i:i + 1] for i in range(0,\
    \ len(txt), 1)]\n        return txt\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk6p0vbb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdk6p0vbb.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpdk6p0vbb.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    word_list = txt.split()\n\
    \    word_list = filter(None, word_list)\n    word_list = list(set(word_list))\n\
    \    if word_list:\n        return word_list\n    else:\n        return len(txt.lower())\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30itnvgr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp30itnvgr.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp30itnvgr.py\", line\
    \ 24, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywr1t_0q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpywr1t_0q.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpywr1t_0q.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(\"\\W+\",\
    \ txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n_3x_l1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7n_3x_l1.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp7n_3x_l1.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp7n_3x_l1.py\", line 13, in split_words\n    return re.split(\"\
    \\W+\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    words = txt.split()\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsi_ix33c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsi_ix33c.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpsi_ix33c.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return list(txt.lower().split())\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs_qdwvp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjs_qdwvp.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjs_qdwvp.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    return\
    \ txt.lower().replace(' ','').split(',')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwyq_yso.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjwyq_yso.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjwyq_yso.py\", line\
    \ 17, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpti9qlpoa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpti9qlpoa.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpti9qlpoa.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if not\
    \ isinstance(txt, str) else txt.lower().split(\",\")\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojephxqd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpojephxqd.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpojephxqd.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.lower().split()\n\
    \    if len(words) == 0:\n        return words\n    elif len(words) == 1:\n  \
    \      return words\n    else:\n        return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a6m9hj2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8a6m9hj2.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8a6m9hj2.py\", line\
    \ 22, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split() if isinstance(txt,\
    \ str) else [word for word in txt if word.strip()]\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpba5kcy8d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpba5kcy8d.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpba5kcy8d.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split(\" \") if\
    \ not txt.isspace() else [txt]\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgoeidal.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxgoeidal.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpxgoeidal.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if not txt:\n        return\
    \ []\n    words = txt.split()\n    split_words = []\n    for word in words:\n\
    \        split_words.append(word)\n    return split_words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7iln6jbb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7iln6jbb.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp7iln6jbb.py\", line\
    \ 23, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(r\"([\\w'-]+|[^\\\
    w' ]+)\",txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6oresd3s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6oresd3s.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp6oresd3s.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp6oresd3s.py\", line 13, in split_words\n    return re.split(r\"\
    ([\\w'-]+|[^\\w' ]+)\",txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # your code here\n \
    \   \n    pass\n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt8uwdqco.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaiy24jxw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpaiy24jxw.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpaiy24jxw.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = list(filter(None,\
    \ txt.split()))\n    if len(words) > 1:\n        return words\n    words = list(filter(None,\
    \ txt.lower().split(\",\")))\n    if len(words) > 1:\n        return words\n \
    \   return len(txt)//2\n\n\"\"\"\nProblem 2\nCreate a function that takes a string\
    \ of words and returns the number of upper-case letters, lower-case letters, numbers\
    \ and\nsymbols.\nExamples\ncount_letters(\"hello world\") \u279E {'upper': 4,\
    \ 'lower': 4, 'number': 1, 'symbol': 2}\ncount_letters(\"Hello, world!\") \u279E\
    \ {'upper': 3, 'lower': 1, 'number': 2, 'symbol': 2}\ncount_letters(\"hello\"\
    ) \u279E {'upper': 0, 'lower': 0, 'number': 0, 'symbol': 1}\ncount_letters(\"\"\
    ) \u279E {'upper': 0, 'lower': 0, 'number': 0, 'symbol': 0}\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_ojbvuo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpo_ojbvuo.py\", line 42,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpo_ojbvuo.py\", line\
    \ 33, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Split the text on whitespace\
    \ characters\n    words = txt.split(\" \")\n    # Loop through words and lower-case\
    \ the letters\n    for word in words:\n        word = [word.lower() for letter\
    \ in word if letter.isalpha()]\n    # Return number of words\n    return len(words)\
    \ if words else 1\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfbt1cy8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnfbt1cy8.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnfbt1cy8.py\", line\
    \ 23, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) <= 1:\n        return txt\n    else:\n        split_words = \"\"\n\
    \        for word in words:\n            split_words += word.strip().replace(',',\
    \ '')\n            split_words += \" \"\n        return split_words\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpff10eb8_.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return [word for word in txt.split()\
    \ if word.strip()]\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngpzp4r4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpngpzp4r4.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpngpzp4r4.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split(\" \") if\
    \ len(txt.split(\" \")) > 1 else txt.split(\",\")\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65gxzsue.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp65gxzsue.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp65gxzsue.py\", line\
    \ 20, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # remove leading and\
    \ trailing whitespace\n    txt = txt.strip()\n    \n    # split the string on\
    \ whitespace\n    words = txt.split()\n    \n    # remove any whitespace characters\n\
    \    words = [word.strip() for word in words]\n    \n    # remove duplicate strings\n\
    \    words = list(set(words))\n    \n    return words\n    \ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8cdhzub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr8cdhzub.py\", line 39,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpr8cdhzub.py\", line\
    \ 29, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt) < 1:\n       \
    \ return txt\n    else:\n        return txt.split()\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65iohurj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp65iohurj.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp65iohurj.py\", line\
    \ 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    lst = list(txt.split(\" \"\
    ))\n    if len(lst) == 0:\n        lst = list(txt.split(\",\"))\n    if len(lst)\
    \ == 0:\n        lst = list(txt.lower().count('a'))\n    return lst\n</cell>\n\
    <text>\nExercise 13\nWrite a function that takes the word frequency and returns\
    \ the top 5 most frequent words as described above.\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwq1tasz8.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_c5lujpv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_c5lujpv.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp_c5lujpv.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if len(txt) > 0 and txt.strip():\n\
    \        # Split the string on whitespace and return an array\n        return\
    \ txt.split()\n    else:\n        # Split the string on comma if no commas exist\
    \ and return an array\n        return txt.split(',')\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp836_mwrs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp836_mwrs.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp836_mwrs.py\", line\
    \ 22, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphek2zsue.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphek2zsue.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmphek2zsue.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split(' ')\n \
    \   if len(words) > 0:\n        return words\n    else:\n        return txt.split(',')\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopmi9fg_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpopmi9fg_.py\", line 30,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpopmi9fg_.py\", line\
    \ 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(\"[\\s+,]+\"\
    , txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy6az0b1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwy6az0b1.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpwy6az0b1.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpwy6az0b1.py\", line 13, in split_words\n    return re.split(\"\
    [\\s+,]+\", txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.strip()\n    if\
    \ len(txt.split()) == 1 and len(txt.split(\",\")) == 1 and len(txt) < 100:\n \
    \       return [txt]\n    elif len(txt.split(\",\")) == 1 and len(txt.split())\
    \ == 1:\n        return txt.split(\",\")\n    elif len(txt.split()) == 1 and len(txt.split(\"\
    ,\")) == 1:\n        return txt.split()\n    else:\n        splits = txt.lower().split()\n\
    \        letters = [ord(c) for c in splits[0]]\n        return letters[1::2],\
    \ letters[::2]\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv89wqxzi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv89wqxzi.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv89wqxzi.py\", line\
    \ 27, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    char_count = 0\n    for char\
    \ in txt.strip():\n        char_count += 1\n    return char_count % 2 == 1\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm0zlql48.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm0zlql48.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpm0zlql48.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split(sep=sep)\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqc__cwck.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqc__cwck.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqc__cwck.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpqc__cwck.py\", line 13, in split_words\n    return txt.split(sep=sep)\n\
    NameError: name 'sep' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.findall(r'\\w+',\
    \ txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfvw3la5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprfvw3la5.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmprfvw3la5.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmprfvw3la5.py\", line 13, in split_words\n    return re.findall(r'\\\
    w+', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm71sqk8v.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm71sqk8v.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpm71sqk8v.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return [word.strip() for word\
    \ in txt.split(\" \") if word]\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmv4mk1c9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmv4mk1c9.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpmv4mk1c9.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # your code goes here\n  \
    \  \n    txt = txt.lower()\n    if \" \" in txt:\n        return txt.split()\n\
    \    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return\
    \ txt.lower().count(\"abcdefghijklmnopqrstuvwxyz\")\n\n    \n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjuo4wpnp.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split(\"\\s+\",\
    \ txt) if txt else txt\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj51t84go.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj51t84go.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj51t84go.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpj51t84go.py\", line 13, in split_words\n    return re.split(\"\
    \\s+\", txt) if txt else txt\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.strip().split()\
    \ if isinstance(txt, str) else txt\n    \ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6kfs7cx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpx6kfs7cx.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpx6kfs7cx.py\", line\
    \ 17, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split(' ')\n \
    \   if len(words) > 1:\n        return words\n    elif len(words) == 1:\n    \
    \    return txt.split(',')\n    else:\n        return len(txt)\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun3zdr__.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpun3zdr__.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpun3zdr__.py\", line\
    \ 26, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n</cell>\n\
    <cell>\ntxt = \"Hello world!\"\n</cell>\n<cell>\nsplit_words(txt)\n</cell>\n<cell>\n\
    txt = \"Hello,world!\"\nsplit_words(txt)\n</cell>\n<cell>\ntxt = \"abcdef\"\n\
    split_words(txt)\n</cell>\n<text>\nExercise 5\nWrite a function to calculate the\
    \ number of words in a string.\n\n\n</text>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7dfcxt4u.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return list(map(str.split,txt.strip().split(\"\
    \ \"))) if txt and len(txt.strip()) > 0 else [[]]\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tryt7zy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0tryt7zy.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0tryt7zy.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = []\n    if not txt:\n\
    \        return words\n\n    words = txt.split(\" \") if txt.startswith(\" \"\
    ) else txt.split(\",\")\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3f6o7ri.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo3f6o7ri.py\", line 31,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpo3f6o7ri.py\", line\
    \ 21, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Your code here\n    if len(txt)\
    \ <= 1:\n        return txt\n    \n    words_lst = []\n    \n    for word in txt.split(\"\
    ,\"):\n        if word != \"\":\n            words_lst.append(word)\n    return\
    \ words_lst\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t3nm8uf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5t3nm8uf.py\", line 35,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5t3nm8uf.py\", line\
    \ 25, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return re.split('[,\\s]\\\
    s*', txt)\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpulb_b2e_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpulb_b2e_.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpulb_b2e_.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpulb_b2e_.py\", line 13, in split_words\n    return re.split('[,\\\
    s]\\s*', txt)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if\
    \ len(words) > 0:\n        return words\n    else:\n        if \",\" in txt:\n\
    \            return txt.split(\",\")\n        else:\n            words = []\n\
    \            for w in txt:\n                if ord(w) % 2 == 0:\n            \
    \        words.append(w)\n            return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppaoa0je_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppaoa0je_.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmppaoa0je_.py\", line\
    \ 28, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    word_list = txt.split(\" \"\
    )\n    return word_list if len(word_list) == 1 else [word[:len(word)//2] for word\
    \ in word_list]\n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpeds707u0.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    lst = txt.split(\" \")\n \
    \   return lst\n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeojguapa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeojguapa.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpeojguapa.py\", line\
    \ 19, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    for\
    \ index, word in enumerate(words):\n        if not word.isalpha():\n         \
    \   if \",\" in word:\n                return [word]\n            else:\n    \
    \            return len(txt) - index\n    if len(words) == 1:\n        return\
    \ len(words[0])\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5q4dg4o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa5q4dg4o.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpa5q4dg4o.py\", line\
    \ 24, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt = txt.lower()\n    words\
    \ = txt.split()\n    \n    if len(words) < 1: return []\n    if len(words) > 1:\
    \ return words\n    \n    # if not words[0]: return words\n    \n    char_count\
    \ = 0\n    for c in words[0]:\n        if ord(c) % 2 == 0:\n            char_count\
    \ += 1\n            if char_count % 2 == 0:\n                words.remove(words[0])\n\
    \                words.append(c)\n                break\n    return words\n\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79dyu20g.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp79dyu20g.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp79dyu20g.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # Implement this function\n\
    \    raise NotImplementedError()\n</cell>\n<text>\nSolutions\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpteuiqcie.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return txt.split()\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnehtj8fh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnehtj8fh.py\", line 27,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnehtj8fh.py\", line\
    \ 18, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if txt is None:\n        return\
    \ None\n    words = [txt.split()]\n    return len(words[0]) // 2\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix8ymvem.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpix8ymvem.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpix8ymvem.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # create a list of words from\
    \ txt\n    lst = txt.strip().split(' ')\n    # make each word lowercase\n    lst\
    \ = [word.lower() for word in lst]\n    # return list of words if there are whitespaces\
    \ in the text\n    if '' in lst:\n        return lst\n    # else return the number\
    \ of words with odd order in the alphabet\n    else:\n        odd_words = 0\n\
    \        for word in lst:\n            if ord(word[0]) % 2 != 0:\n           \
    \     odd_words += 1\n        return odd_words\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4t2mjwm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd4t2mjwm.py\", line 39,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpd4t2mjwm.py\", line\
    \ 29, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    # TODO: Implement Function\n\
    \    return \n\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12lthmu6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp12lthmu6.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp12lthmu6.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if \" \" in txt:\n       \
    \ txt = txt.strip()\n        words = [w.strip() for w in txt.split(\" \") if len(w.strip())\
    \ > 0]\n    elif \",\" in txt:\n        txt = txt.strip()\n        words = [w.strip()\
    \ for w in txt.split(\",\") if len(w.strip()) > 0]\n    else:\n        words =\
    \ txt.lower()\n        words = [w for w in words if w > \"a\" and w < \"z\"]\n\
    \        words = words[::2] + [w for w in words[1::2]]\n    return words\n\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvy6mho3m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvy6mho3m.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpvy6mho3m.py\", line\
    \ 31, in check\n    assert candidate('abcdef') == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    return [x.strip().lower()\
    \ for x in txt.split() if len(x.strip()) > 0]\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurzxm556.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpurzxm556.py\", line 26,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpurzxm556.py\", line\
    \ 16, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    \n    txt = txt.strip()\n\
    \    if txt.upper().endswith('!'):\n        txt = txt.upper()[:-1]\n    \n   \
    \ \n    if txt.startswith(':'):\n        txt = txt[1:]\n    \n    \n    \n   \
    \ if ',' in txt:\n        txt = txt.replace(',', ' ')\n    \n    \n    if '!'\
    \ in txt:\n        txt = txt.replace('!', ' ')\n    \n    \n    \n    if '?' in\
    \ txt:\n        txt = txt.replace('?', ' ')\n    \n    \n    \n    if ' ' in txt:\n\
    \        txt = txt.strip()\n    \n    \n    \n    txt = txt.split()\n    \n  \
    \  \n    \n    # Check if all words are lower-case letters\n    \n    for word\
    \ in txt:\n        for char in word:\n            if ord(ord(char) - ord('a'))\
    \ >= 0:\n                return txt\n    \n    \n    \n    \n    return txt\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0q29_q0o.py\", line\
    \ 234, in <module>\n    test_check()\n  File \"/tmp/tmp0q29_q0o.py\", line 232,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0q29_q0o.py\", line\
    \ 222, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp0q29_q0o.py\", line 51, in split_words\n    if ord(ord(char)\
    \ - ord('a')) >= 0:\nTypeError: ord() expected string of length 1, but int found\n"
  exit_code: -1
  status: Exception
