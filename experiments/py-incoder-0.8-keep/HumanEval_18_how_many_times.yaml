name: HumanEval_18_how_many_times
language: py
prompt: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
  \ how many times a given substring can be found in the original string. Count overlaping\
  \ cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa',\
  \ 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
  \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
  \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
completions: ["    pos = 0\n    count = 0\n    for n in string:\n        if n == substring:\n\
    \            count += 1\n        pos = max(pos, pos + 1)\n    return count\n\n",
  "    return len(list(filter(lambda x: string.count(substring) > 0, string.lower().split(substring))))\n\
    \n", "    count = 0\n    if substring[0] != string[0]:\n        return count\n\
    \    for i in range(1, len(string)):\n        if string[i - 1] == substring[i\
    \ - 1]:\n            count += 1\n        if string[i] == substring[i]:\n     \
    \       count += 1\n        if string[i] == substring[i] + substring[i-1]:\n \
    \           count += 1\n    return count\n\n", "    return len([i for i, letter\
    \ in zip(string, substring) if letter == letter])\n", "    # find how many times\
    \ the substring can occur in the string\n    return count_substrings_between(string,\
    \ substring, 1)\n\n", "    return sum(1 for m in re.finditer(substring, string))\n",
  "    count = 0\n    if string == substring:\n        return count\n    for i, char\
    \ in enumerate(string):\n        if char == substring[0]:\n            count +=\
    \ 1\n            if count == len(substring):\n                return i\n     \
    \   elif char == substring[-1]:\n            count += 1\n            if count\
    \ == len(substring):\n                return i\n        elif char == substring[1:-1]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return i\n        else:\n            pass\n    return count\n\n", "    count\
    \ = 0\n    chars = set(string)\n    chars.intersection_update(substring)\n   \
    \ for char in chars:\n        count += string.count(char)\n    return count\n\n",
  "    count = 0\n\n    for character in string:\n        if substring == character:\n\
    \            count += 1\n        else:\n            if substring in character:\n\
    \                count += character.count(substring)\n\n    return count\n\n",
  "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if\
    \ string.startswith(substring, i):\n            count += 1\n    return count\n\
    \n", "    return len(string) - len(string.lower().count(substring.lower()))\n\n",
  "    return string.count(substring)\n", "    count = 0\n    length = len(string)\n\
    \    substring_index = string.index(substring)\n    while substring_index != -1:\n\
    \        substring_index -= 1\n        count += 1\n        if string[substring_index]\
    \ == substring:\n            substring_index = -1\n    return count\n\n", "  \
    \  i = 0\n    while True:\n        if i + len(substring) <= len(string):\n   \
    \         if string[i:i + len(substring)] == substring:\n                return\
    \ i\n        i += 1\n\n", "    return string.replace(substring, \"\").count(substring)\n\
    \n", "    count = 0\n\n    for m in re.finditer(substring, string):\n        count\
    \ += 1\n\n    return count\n\n", "    counter = 0\n    for pos, letter in enumerate(string):\n\
    \        if letter == substring:\n            counter += 1\n        else:\n  \
    \          break\n    return counter\n\n", "    return sum([1 for y in string.split(substring)\
    \ if len(y) >= len(substring)])\n\n", "    if not string:  # empty string\n  \
    \      return 0\n\n    return sum(1 for _, _, start in string_find_all(string,\
    \ substring))\n\n", "    return len(re.findall(pattern=substring, string=string))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
