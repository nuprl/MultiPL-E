name: HumanEval_157_right_angle_triangle
language: py
prompt: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n \
  \   Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle\
  \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
  \    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) ==\
  \ False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
  \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
  \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
  \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
  \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
  \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
  \    check(right_angle_triangle)\n\ntest_check()\n"
completions: ["    a_b_c = abs(b * 3 - a * 2)\n    b_c_a = abs(b * 3 - c * 2)\n  \
    \  a_c_b = abs(a * 3 - c * 2)\n    return (a_b_c >= b_c_a and a == c or a_c_b\
    \ >= b_b_a and b == c or a_b_c >= b_c_a\n            and a == b or a_c_b >= b_b_a\
    \ and b == b)\n", "    triangle_length = (a * b) + (b * c)\n    if triangle_length\
    \ == 0:\n        return False\n    perpendicular_side = math.sqrt((b ** 2) + (c\
    \ ** 2))\n    if perpendicular_side == 0:\n        return False\n    angle1 =\
    \ math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * b * c))\n    angle2 = math.acos((a\
    \ ** 2 + c ** 2 - b ** 2) / (2 * c * b))\n    angle = angle2 - angle1\n    if\
    \ triangle_length == perpendicular_side and angle > 0 and angle < math.pi / 2:\n\
    \        return True\n    return False\n\n", "    d = b * b - 4 * a * c\n    if\
    \ d < 0:\n        return False\n    elif d == 0:\n        return True\n    else:\n\
    \        x1 = (-b + math.sqrt(d))/ (2 * a)\n        x2 = (-b - math.sqrt(d))/\
    \ (2 * a)\n        if x1 > x2:\n            return True\n        else:\n     \
    \       return False\n    ", "    delta = b - a\n    if delta == 0:\n        return\
    \ False\n    delta_third = delta / 3\n    delta_pent = delta / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n\
    \    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third\
    \ = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third\
    \ / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n\
    \    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n\
    \    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third\
    \ = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third\
    \ / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n\
    \    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / ", " \
    \   return ((a - c) * (b - c)) - ((a - b) * (c - b)) > 0\n", "    delta = (b -\
    \ a) - (b - c)\n    if delta < 0:\n        return False\n    if b == c and b ==\
    \ a:\n        return True\n    if a > b and a > c:\n        return True\n    if\
    \ b > a and b > c:\n        return True\n    if c > a and c > b:\n        return\
    \ True\n    return False\n\n", "    \n    if abs(b - c) <= abs(a - b):\n     \
    \   return a == b or a == c\n    else:\n        return a == c\n", "    A, B, C\
    \ = get_side_length(a, b, c)\n    AB, AC, BC = get_side_length(A, B, C)\n    return\
    \ ((AB >= AC and AC >= BC and BC >= A) or (AB >= BC and BC >= AC and A >= C))\
    \ and ((AB >= AC and AC >= BC and BC >= A) or (AB >= BC and BC >= AC and A >=\
    \ C))\n", "    if a == 0:\n        return False\n    else:\n        return True\n\
    \n", "    if a + b > c and a + c > b and b + c > a:\n        ac = a + c\n    \
    \    bc = b + c\n        ab = a + b\n        c = b - c\n        return ((ab >\
    \ ac) and (bc > ac) and (c > ac)) or \\\n               ((ab > bc) and (bc > bc)\
    \ and (c > bc)) or \\\n               ((ab > c) and (bc > c) and (c > c))\n  \
    \  else:\n        return False\n", "    if b == 0 and c > 0:\n        return True\n\
    \    elif c > 0 and a == 0:\n        return True\n    else:\n        return False\n",
  "    a_len = abs(a)\n    b_len = abs(b)\n    c_len = abs(c)\n    if a + b + c !=\
    \ a_len + b_len + c_len:\n        return False\n    if a < 0 or b < 0 or c < 0\
    \ or a > b_len or b > c_len or c > a_len:\n        return False\n    # These 2\
    \ tests are used to verify if a triangle is right angled.\n    if a == b and b\
    \ == c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        return True\n\n", "    \n    if a + b > c and c +\
    \ a > b and a + c > b and b + c > a:\n        return True\n    else:\n       \
    \ return False\n", "    \n    if a == b == c:\n        return True\n    elif b\
    \ == c:\n        return False\n    elif a == c:\n        return True\n    else:\n\
    \        a1 = abs((a+b+c)/2)\n        a2 = abs((a+c-b)/2)\n        a3 = abs((a-b+c)/2)\n\
    \        a4 = abs((a-c+b)/2)\n        a5 = abs((a-c-b)/2)\n        a6 = abs((a-b-c)/2)\n\
    \        if a1 == b2 == c2:\n            return True\n        elif a2 == b3 ==\
    \ c3:\n            return True\n        elif a3 == b4 == c4:\n            return\
    \ True\n        elif a4 == b5 == c5:\n            return True\n        elif a6\
    \ == b7 == c7:\n            return True\n        elif b1 == b2 == c2:\n      \
    \      return False\n        elif b2 == b3 == c3:\n            return False\n\
    \        elif b3 == b4 == c4:\n            return False\n        elif b4 == b5\
    \ == c5:\n            return False\n        elif b6 == b7 == c7:\n           \
    \ return False\n        else: \n            return False\n            \n     \
    \       ", "    return right_angle(a, b, c) == False\n\n", "    count = 0\n  \
    \  \n    if a >= b >= c:\n        count = a * c + b * c + c * a\n    else:\n \
    \       count = a * c + b * b + c * a\n\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n", "    if b < a:\n        return right_angle_triangle(b,\
    \ c, a)\n    if c < a:\n        return right_angle_triangle(a, c, b)\n    if a\
    \ + b > c:\n        return right_angle_triangle(a, b, c)\n    return False\n</cell>\n\
    <cell>", "    abc = (a + b + c)//2\n    acb = a - abc \n    bcd = b - c\n    if\
    \ acb > abc and bcd > abc:\n        return True\n    else:\n        return False\n\
    \n", "    if a < b + c:\n        return False\n    elif b < a + c:\n        return\
    \ False\n    elif c < a + b:\n        return False\n    else:\n        return\
    \ True\n\n", "    if (a + b > c) and (a + c > b) and (c + b > a) and (c + a >\
    \ b):\n        return True\n    return False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
