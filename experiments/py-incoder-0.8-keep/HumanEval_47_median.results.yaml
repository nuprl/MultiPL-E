name: HumanEval_47_median
language: py
results:
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)//2]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nI love that it's possible to do this with O(1) space.\
    \ I wonder if we can do this with O(1) time though.\n<|/ c |>\n<| c |>\nThis solution\
    \ is incorrect, it fails to take negative numbers into account.\n<|/ c |>\n<|\
    \ c |>\nIt is a O(n) algorithm not O(1)\n<|/ c |>\n<| a tags=algorithm,python,sorting\
    \ |>\nFor a list of size N, sort it in descending order and find the middle value.\
    \ If you need it to work for any size list then find the index of the middle value\
    \ and the length of that list and multiply by two. For example, if you need to\
    \ get the middle value in the list [-2, 1, 3, 7, 5], the answer will be 3. The\
    \ length of this list is 5 so 3*2 = 6. So the middle value is at index 4 and its\
    \ length is 6. \nFor a list of size N, sort it in ascending order and find the\
    \ middle value. If you need it to work for any size list then find the index of\
    \ the middle value and the length of that list and divide by two. For example,\
    \ if you need to get the middle value in the list [-2, 1, 3, 7, 5], the answer\
    \ will be 7. The length of this list is 5 so 7/2 = 4.\n<|/ a dscore=4 |>\n<| c\
    \ |>\nThis is a bad algorithm because it takes O(N) space.\n<|/ c |>\n<| c |>\n\
    That was why i said that it is O(N) algorithm. You can use another array and store\
    \ it while sorting and use it while finding median.\n<|/ c |>\n<| a dscore=3 |>\n\
    One could sort the list and then take the last element. This is O(n).\nThe other\
    \ way is to sort the list in O(n) time, and once again take the first element.\
    \ This is O(n log n)\n<|/ a tags=algorithm,python,sorting |>\n<| c |>\nBut you\
    \ still need O(n) space to store O(n) elements. Even if you don't store them.\
    \ Also, you said you cannot sort it in O(1) space.\n<|/ c |>\n<| c |>\nYeah, I\
    \ mentioned that in my answer. I was just trying to show that there are 2 O(n)\
    \ solutions.\n<|/ c |>\n<| a tags=algorithm,python,sorting |>\nOne thing you can\
    \ do with sorting algorithms is \"find the median\", which is in some sense a\
    \ much simpler algorithm than finding the \"middle index\" of a sorted list. \
    \ Finding the \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) ==\
    \ 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5])\
    \ == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpksd9z_do.py\", line 15\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    return (n * (n+1)) // 2\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3enp_1gu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3enp_1gu.py\", line 21,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3enp_1gu.py\", line 14, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return l[length\
    \ / 2]\n    else:\n        return int((l[length / 2 - 1] + l[length / 2]) / 2)\n\
    </code>\n<|/ a tags=python,list-comprehension,performance,sorting,list |>\n<|\
    \ a dscore=2 |>\n<code>\nfrom statistics import median\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpob1n28ry.py\", line 16\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    size\
    \ = len(l)\n    if size % 2 == 1:\n        return float(l[(size+1)//2-1]) + float(l[(size-1)//2])\
    \ / float(2)\n    else:\n        middle = size // 2\n        return float(l[middle-1])\
    \ + float(l[middle]) / float(2)\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4tlu91i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph4tlu91i.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmph4tlu91i.py\", line 19, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    arr\
    \ = sorted(l)\n    if len(arr)%2 == 1:\n        return arr[int((len(arr))//2)-1]\n\
    \    else:\n        midpoint = len(arr)//2\n        return ((arr[midpoint-1] +\
    \ arr[midpoint])/2)\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4,\
    \ 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert\
    \ candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp499a7s13.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp499a7s13.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp499a7s13.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return float(sum(l[: len(l) //\
    \ 2]) + sum(l[len(l) // 2:])) / 2\n    else:\n        return float(l[len(l) //\
    \ 2]) if l[len(l) // 2] else 0\n</cell>\n<text>\nLet's compare how fast we were\
    \ able to get a median of 100 numbers using different methods. We'll compare with\
    \ median of the list l.\n\n\n</text>\n<cell>\nmedian(my_list)\n</cell>\n<text>\n\
    Median of a list with 10000 elements:\n\n\n</text>\n<cell>\nmy_list = []\nfor\
    \ _ in range(10000):\n    my_list.append(np.random.randint(10) ** 5)\n\n%timeit\
    \ median(my_list)\n</cell>\n<cell>\n%timeit np.median(my_list)\n</cell>\n<text>\n\
    We can see that median time complexity of np.median is O(n), where n is the length\
    \ of the list which is 10,000 elements. Median time complexity of median is O(n).\n\
    \nMedian of a sorted list:\n\n\n</text>\n<cell>\nsorted(my_list)[99]\n</cell>\n\
    <text>\nMedian of a sorted list:\n\n\n</text>\n<cell>\nmedian(sorted(my_list))\n\
    </cell>\n<text>\nMedian of a sorted list with 10000 elements:\n\n\n</text>\n<cell>\n\
    my_list = []\nfor _ in range(10000):\n    my_list.append(np.random.randint(10)\
    \ ** 5)\n\n%timeit median(sorted(my_list))\n</cell>\n<cell>\n%timeit np.median(sorted(my_list))\n\
    </cell>\n<text>\nMedian time complexity of np.median is O(nlogn), where n is the\
    \ length of the list which is 10,000 elements. Median time complexity of median\
    \ is O(n).\n\nMedian of 10000 random numbers:\n\n\n</text>\n<cell>\nmy_list =\
    \ []\nfor _ in range(10000):\n    my_list.append(np.random.randint(10) ** 5)\n\
    \n%timeit median(my_list)\n</cell>\n<cell>\n%timeit np.median(my_list)\n</cell>\n\
    <text>\nMedian of 10000 random numbers:\n\n\n</text>\n<cell>\nmy_list = []\nfor\
    \ _ in range(10000):\n    my_list.append(np.random.randint(10) ** 5)\n\n%timeit\
    \ median(sorted(my_list))\n</cell>\n<cell>\n%timeit np.median(sorted(my_list))\n\
    </cell>\n<text>\nThe median of an sorted array of length n containing one element\
    \ is the element itself (and not the mean of the two elements before and after\
    \ the element).\n\n\n</text>\n<text>\nMedian of 10000 random \ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi1m8tvj_.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    s\
    \ = sum(l)\n    return (s/len(l))*0.5\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2o_nwvwr.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp2o_nwvwr.py\", line 21,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp2o_nwvwr.py\", line 14, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return\
    \ sorted(l)[0]\n</code>\n<|/ a tags=python |>\n<| a dscore=1 tags=python |>\n\
    <code>\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  \
    \  assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5])\
    \ == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp59w_9j0x.py\", line 11\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    size = len(l)\n    if size % 2 == 0:\n        return l[(size\
    \ - 1) / 2]\n    else:\n        return (l[size/2 - 1] + l[size/2]) / 2\n</cell>\n\
    <text>\nNow let's define an iterable class with __next__, which returns a list\
    \ of values from an iterator.\n\n\n</text>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9xc0a8xy.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = [float(i) for i in l]\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n\
    \        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) <= 1:\n        return l[0]\n    else:\n        mid = (len(l) +\
    \ 1) // 2\n        return l[mid]\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq75bny94.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq75bny94.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpq75bny94.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sortedlist\
    \ = sorted(l)\n    if not sortedlist: # empty list\n        return None # or whatever\n\
    \    mid = len(sortedlist) // 2\n    \n    if sortedlist[mid] == sortedlist[mid-1]:\n\
    \        return sortedlist[mid]\n    \n    return float(sortedlist[mid-1] + sortedlist[mid])\
    \ / 2\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n \
    \   assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5])\
    \ == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5wroxqc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe5wroxqc.py\", line 28,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpe5wroxqc.py\", line 21, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return l[length//2]\n\
    \    else:\n        return (l[length//2 - 1] + l[length//2]) / 2\n</code>\n<|/\
    \ a dscore=1 tags=python,list,python-3.x |>\n<| c |>\nWhile this code may solve\
    \ the question, [including an explanation](https://meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| c |>\nThanks for your advice. I wrote an\
    \ explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef check(candidate):\n  \
    \  assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpu0hiyjmt.py\", line 16\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    count\
    \ = len(l)\n    if count % 2 == 1:\n        return l[(count // 2) - 1]\n    else:\n\
    \        middle = count // 2\n        return (float(l[middle]) + float(l[middle\
    \ - 1])) // 2\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5])\
    \ == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5])\
    \ == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposdj5129.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmposdj5129.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmposdj5129.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return\
    \ sorted(l, reverse=True)[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_914gl9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr_914gl9.py\", line 20,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpr_914gl9.py\", line 13, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpr_914gl9.py\"\
    , line 10, in median\n    return sorted(l, reverse=True)[len(l) / 2]\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return l[n // 2]\n\
    \    else:\n        return (l[n//2 - 1] + l[n//2]) / 2\n</code>\n<|/ a tags=python,python-3.x,statistics\
    \ |>\n<| c |>\nthanks for the answer, the median function worked for me. but i\
    \ still have a problem with running this on jupyter notebook. the code works when\
    \ i run on python shell, but gives me errors when i run on jupyter notebook.\n\
    <|/ c |>\n<| c |>\nThe code works on my computer using jupyter notebook.  I put\
    \ it all into a single cell and put a print statement inside the function just\
    \ to show that it works.  Maybe the error is caused by something you did before\
    \ you posted your question.  What happens if you just run median([3, 1, 2, 4,\
    \ 5])?\n<|/ c |>\n<| c |>\nthis gives me a median of 3. and median of 2 when i\
    \ run median([3, 1, 2, 4, 5]) in jupyter notebook.\n<|/ c |>\n<| c |>\nThat is\
    \ weird.  What version of python are you using?  I added a print statement to\
    \ show that it is working as expected.  What is your exact input?\n<|/ c |>\n\
    <| c |>\ni am using the same version that you use. mine is a mac osx and python\
    \ 3.7.4\n<|/ c |>\n<| a |>\n<code>\nimport numpy as np\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplmm7qp4k.py\", line 16\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if\
    \ len(l) == 0:\n        raise ValueError('median requires non-empty argument')\n\
    \    sorted = sorted(l) # O(n log n)\n    l = sorted\n    if len(l) % 2 == 0:\n\
    \        median1 = l[len(l) // 2]\n        median2 = l[(len(l) - 1) // 2]\n  \
    \  else:\n        median1 = l[len(l) // 2 - 1]\n        median2 = l[len(l) //\
    \ 2]\n    if abs(median1 - median2) > abs(median1 - median2):\n        return\
    \ (median1 + median2) / 2\n    else:\n        return median1\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6rur79x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpi6rur79x.py\", line 33,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpi6rur79x.py\", line 26, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpi6rur79x.py\"\
    , line 12, in median\n    sorted = sorted(l) # O(n log n)\nUnboundLocalError:\
    \ local variable 'sorted' referenced before assignment\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    ls\
    \ = sorted(l)\n    return ls[len(ls)//2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdq_nloi.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmptdq_nloi.py\", line 21,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmptdq_nloi.py\", line 15, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list\
    \ = sorted(l)\n    mid = len(sorted_list) // 2\n    if mid == 0:\n        return\
    \ sorted_list[0]\n    if mid == len(sorted_list)-1:\n        return sorted_list[mid]\n\
    \    \n    left_sum = sum(sorted_list[:mid])\n    right_sum = sum(sorted_list[mid+1:])\n\
    \    return (left_sum + right_sum) / 2\n    \n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf32v8jnz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf32v8jnz.py\", line 30,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpf32v8jnz.py\", line 23, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
