name: HumanEval_153_Strongest_Extension
language: py
results:
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    sorted_extensions = sorted(extensions, key=lambda x: -len(x))\n\
    \    strongest_extension = sorted_extensions[0]\n    \n    # Find the number of\
    \ letters in class_name and the number of letters in strongest_extension\n   \
    \ # Using a list comprehension, get all characters in the string\n    # Then,\
    \ check if the number of characters in strongest_extension is greater than or\
    \ equal to class name\n    # if the number of characters is greater, set strongest_extension\
    \ to first element in sorted_extensions\n    number_of_letters_in_class_name =\
    \ len(class_name)\n    number_of_letters_in_strongest_extension = len(strongest_extension)\n\
    \    \n    if number_of_letters_in_strongest_extension >= number_of_letters_in_class_name:\n\
    \        strongest_extension = sorted_extensions[0]\n    \n    return f'{class_name}.{strongest_extension}'\n\
    \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuhqhu3c.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpeuhqhu3c.py\", line 47,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpeuhqhu3c.py\"\
    , line 38, in check\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing',\
    \ 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n    count = {}\n    for extension in extensions:\n        count_of_cap\
    \ = len(extension.upper())\n        count_of_lower = len(extension.lower())\n\
    \        \n        count_of_extension = count_of_cap - count_of_lower\n      \
    \  \n        if count_of_extension in count:\n            count[count_of_extension].append(extension)\n\
    \        else:\n            count[count_of_extension] = [extension]\n    \n  \
    \  \n    sorted_keys = sorted(count, key=count.get, reverse=True)\n    \n    count_of_longest_extension\
    \ = sorted_keys[0]\n    \n    \n    \n    \n    return f\"{class_name}.{Strongest_Extension(class_name,\
    \ count[count_of_longest_extension])}\"\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ixlipt_.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp7ixlipt_.py\", line 55,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp7ixlipt_.py\"\
    , line 44, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmp7ixlipt_.py\", line 41, in Strongest_Extension\n\
    \    return f\"{class_name}.{Strongest_Extension(class_name, count[count_of_longest_extension])}\"\
    \n  File \"/tmp/tmp7ixlipt_.py\", line 41, in Strongest_Extension\n    return\
    \ f\"{class_name}.{Strongest_Extension(class_name, count[count_of_longest_extension])}\"\
    \n  File \"/tmp/tmp7ixlipt_.py\", line 41, in Strongest_Extension\n    return\
    \ f\"{class_name}.{Strongest_Extension(class_name, count[count_of_longest_extension])}\"\
    \n  [Previous line repeated 991 more times]\n  File \"/tmp/tmp7ixlipt_.py\", line\
    \ 34, in Strongest_Extension\n    sorted_keys = sorted(count, key=count.get, reverse=True)\n\
    RecursionError: maximum recursion depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    my_class_name = class_name\n    my_class = type(my_class_name,\
    \ (), {})\n    my_class.__module__ = module_name\n    my_class = type(my_class_name,\
    \ (), {})\n    my_class.__module__ = module_name\n\n    #\n    # Code goes here\n\
    \    #\n    extension_map = {}\n    for extension in extensions:\n        extension_map[extension.lower()]\
    \ = extension\n    strongest_extension = extensions[0]\n    for extension in extensions:\n\
    \        strongest_extension = min(extension_map[extension.lower()], strongest_extension)\n\
    \    return f'{my_class_name}.{strongest_extension}'\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv285r0ln.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpv285r0ln.py\", line 49,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpv285r0ln.py\"\
    , line 38, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpv285r0ln.py\", line 22, in Strongest_Extension\n\
    \    my_class.__module__ = module_name\nNameError: name 'module_name' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    for c in class_name:\n        cap = len([a for a in c if a.isupper()])\n\
    \        sml = len([a for a in c if a.islower()])\n        if cap-sml == 0:\n\
    \            strength = 0\n        else:\n            strength = cap - sml\n \
    \       for e in extensions:\n            if e.startswith('%s%s' % (class_name,\
    \ c)):\n                return e\n            \n    \ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fse7xii.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3fse7xii.py\", line 44,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp3fse7xii.py\"\
    , line 33, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    extensions_str = \"\"\n    count = 0\n    for extension in extensions:\n\
    \        if extension.lower() == class_name.lower():\n            count += 1\n\
    \        elif extension.upper() == class_name.upper():\n            count += 1\n\
    \        else:\n            count = 2\n\n    if count == 2:\n        extensions_str\
    \ = extensions_str + class_name[0].upper() + class_name[1:].lower()\n    elif\
    \ count == 3:\n        extensions_str = extensions_str + class_name[0].upper()\
    \ + class_name[1:].upper()\n    else:\n        extensions_str = extensions_str\
    \ + class_name[0].upper() + class_name[1:]\n\n    return extensions_str\n</cell>\n\
    <text>\nYou will need to create a directory named extensions_data in the same\
    \ folder as your notebook.\n\n\n</text>\n<cell>\nimport os\nos.mkdir(\"extensions_data\"\
    )\n</cell>\n<text>\nNow you can write some data into this directory, including\
    \ a JSON file. In your notebook, create a directory named extensions_data and\
    \ create a file named my_extension.json to store your extension.\n\n\n</text>\n\
    <cell>\nimport json\n\ndata = {\n    'name': 'my_extension',\n    'extensions':\
    \ ['AA', 'Be', 'Ca']\n}\n\nwith open('extensions_data/my_extension.json', 'w')\
    \ as fp:\n    json.dump(data, fp)\n</cell>\n<text>\nNow, we will use the functions\
    \ you wrote in the previous exercise to find out which class has the strongest\
    \ extension and use it to instantiate the class with the strongest extension.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9fw7406_.py\", line 38\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    if len(extensions) == 0:\n        return None\n    \n    extension_str_lengths\
    \ = [len(x) for x in extensions]\n    extension_strengths = [abs(len(x.capitalize())-len(x.lower()))\
    \ for x in extensions]\n    \n    if len(extension_strengths) == 0:\n        return\
    \ None\n    \n    extension_strengths.sort()\n    \n    return class_name + '.'\
    \ + extensions[extension_strengths.index(max(extension_strengths))]\n\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpestfp4lj.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpestfp4lj.py\", line 46,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpestfp4lj.py\"\
    , line 35, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    str_ext = ''\n    # Your code here\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3hmh4dr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpe3hmh4dr.py\", line 36,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpe3hmh4dr.py\"\
    , line 25, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    # your code here\n    strength = 0\n    for extension in extensions:\n\
    \        strength += (extension.upper() - extension.lower())\n    return (class_name\
    \ + '.' + extensions[strength])\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp95i2ncgb.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabay822q.py\", line\
    \ 291, in <module>\n    test_check()\n  File \"/tmp/tmpabay822q.py\", line 289,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpabay822q.py\"\
    , line 278, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    counts = {}\n    for extension in extensions:\n        counts[extension.upper()]\
    \ = counts.get(extension.upper(), 0) + 1\n    # return extensions[0] if counts[extensions[0].upper()]\
    \ <= counts[extensions[1].upper()] else extensions[1]\n    key = sorted(counts,\
    \ key = lambda i: counts[i])\n    return key [0] if counts[key[0]] <= counts[key[1]]\
    \ else key[1]\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6htxs30.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpu6htxs30.py\", line 39,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpu6htxs30.py\"\
    , line 28, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n    # Write your code here.\n    \n    pass\n</cell>\n<text>\n\
    Next, we will define a function that determines if two strings are anagrams of\
    \ each other. The function will return True if the strings are anagrams of each\
    \ other, or False otherwise. The function has a single parameter (string) and\
    \ two parameters (strings, string).\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm6wyldse.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    if not class_name: \n        raise ValueError(\"class_name is\
    \ empty\")\n    if not extensions: \n        raise ValueError(\"extensions is\
    \ empty\")\n    \n    caps = ''\n    sms = 0\n    for ext in extensions:\n   \
    \     for cap in ext:\n            if cap.isupper(): \n                caps +=\
    \ cap\n            if cap.islower():\n                sms += cap.lower()\n   \
    \ \n    strength = float(caps) - float(sms)\n    if strength == 0.0:\n       \
    \ return class_name\n    \n    # Sort extensions according to their strength\n\
    \    sorted_exts = sorted(zip(extensions, map(lambda x: x.lower(), extensions)),\
    \ key=lambda x:x[1])\n    \n    for ext, ext2 in sorted_exts:\n        if ext2.lower()\
    \ == ext.lower():\n            return f'{class_name.lower()}.{ext}'\n    \n  \
    \  raise ValueError(f\"{class_name} does not have any extension with strongest\
    \ extension\")\n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzju9all.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpjzju9all.py\", line 59,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpjzju9all.py\"\
    , line 48, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpjzju9all.py\", line 32, in Strongest_Extension\n\
    \    sms += cap.lower()\nTypeError: unsupported operand type(s) for +=: 'int'\
    \ and 'str'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    return \".\".join([class_name, extensions[0]])\n</cell>\n<cell>\n\
    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    </cell>\n<cell>\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
    \ 'my_class.Be'\n</cell>\n<cell>\nassert Strongest_Extension('my_class', ['AA',\
    \ 'Be', 'CC']) == 'my_class.CC'\n</cell>\n<cell>\nassert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA.Be'\n</cell>\n<cell>\nassert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA.CC'\n</cell>\n<text>\nPart 2: Loading and\
    \ Using Extensions\nIn order to load extensions from a directory, we must import\
    \ the module and the extension class.\n\nimport module as m\nimport extension\
    \ class as e\nIn the following cells, we import all the necessary modules and\
    \ extension classes. We also use a special utility function called LoadExtensionFromPath,\
    \ which loads a Python module and class by its path and extension name.\n\n\n\
    </text>\n<cell>\nimport os\nimport re\nimport time\nimport string\nimport importlib\n\
    \nfrom util.file_util import LoadExtensionFromPath\n</cell>\n<cell>\n!pip install\
    \ 'git+https://github.com/open-mmlab/mmdetection.git'\n</cell>\n<cell>\nfrom mmdet.apis\
    \ import init_detector\nfrom torchvision.models import detection\n\nfrom core.config\
    \ import cfg\nfrom core.models import detector_wrapper\nfrom core.utils import\
    \ convert_instances_to_bbox\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1bpo1gyq.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate('Watashi', ['tEN',\
    \ 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhxhc2o7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyhxhc2o7.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpyhxhc2o7.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    return ''.join([(class_name + '.') if i else '' for i in extensions]).split('.')[-1]\n\
    \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7emk01fr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7emk01fr.py\", line 34,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmp7emk01fr.py\"\
    , line 23, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n    extensions_map = {\".\".join(extension[:i]) for i in range(1,\
    \ len(extensions))}\n    extensions_map.update({extension[0]: extension for extension\
    \ in extensions})\n    extensions_map = {k: v for k, v in extensions_map.items()\
    \ if k in extensions}\n    extensions_map = {k: v for k, v in extensions_map.items()\
    \ if len(k.split(\"\"))==1}\n    extensions_map = {k: v for k, v in extensions_map.items()\
    \ if k in extensions}\n    \n    extensions_map.update({class_name+\".\"+k: v\
    \ for k, v in extensions_map.items() if len(k.split(class_name)+\".\")==len(class_name.split(k))})\n\
    \    \n    sorted_map = [(k, v) for k, v in extensions_map.items()]\n    sorted_map.sort(key=lambda\
    \ x:(-x[1], x[0])) \n    sorted_map = sorted_map[:1]\n    \n    for k, v in sorted_map:\n\
    \        if k in extensions_map:\n            break\n    \n    return k.split(class_name)+\"\
    .\"+v\n        \n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqnrpmt49.py\", line 39\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    counts = {}\n    for ext in extensions:\n        count = counts.setdefault(ext.upper(),\
    \ 0)\n        counts[ext.upper()] += 1\n    \n    if counts:\n        sorted_counts\
    \ = sorted(counts.items(), reverse=True)\n        count, *_ = sorted_counts\n\
    \        \n        sl, letter = sorted_counts[0]\n        \n        if len(sorted_counts)\
    \ > 1:\n            sl, letter = sorted_counts[1]\n        \n        if sl > count:\n\
    \            return f'{class_name}.{letter}'\n        else:\n            return\
    \ f'{class_name}.{extensions[0]}'\n    else:\n        return f'{class_name}.{extensions[0]}'\n\
    \    \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE',\
    \ 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani',\
    \ 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE',\
    \ ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfff4rbt.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpwfff4rbt.py\", line 53,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpwfff4rbt.py\"\
    , line 42, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpwfff4rbt.py\", line 34, in Strongest_Extension\n\
    \    if sl > count:\nTypeError: '>' not supported between instances of 'str' and\
    \ 'tuple'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    counts = [len(e) for e in extensions]\n    max_count = max(counts)\n\
    \    max_count = 1 if max_count == 0 else max_count\n    \n    strength = counts[0]\n\
    \    for e in counts[1:]:\n        strength = strength + e // max_count\n\n  \
    \  return \"{}.{}\".format(class_name, extensions[counts.index(strength)])\n</code>\n\
    <|/ a dscore=0 tags=string,python |>\n<| c |>\nI do not think he wants to return\
    \ an int, but a string.\n<|/ c |>\n<| c |>\nYeah. I'm sorry. I'm new to Python,\
    \ and I got confused with my other code.\n<|/ c |>\n<| c |>\nI updated my answer.\
    \ Sorry for the confusion.\n<|/ c |>\n<| c |>\nYour updated answer still returns\
    \ ints, you do not have a string in your function anymore.\n<|/ c |>\n<| c |>\n\
    I updated my answer. Sorry for the confusion.\n<|/ c |>\n<| a |>\n<code>\n>>>\
    \ from collections import Counter\n>>> class Extension:\n...     pass\n... \n\
    >>> def strongest_extension(class_name, extensions):\n...     counter = Counter(extensions)\n\
    ...     return class_name + \".\" + next(iter(set(counter) - Counter(extensions)),\
    \ None)\n... \n>>> strongest_extension(\"Slice\", [\"Cheese\", \"StuFfed\", \"\
    SErviNGSliCes\"])\n'Slices.SErviNGSliCes'\n>>> strongest_extension(\"Slice\",\
    \ [\"Cheese\", \"StuFfed\", \"SErviNGSliCes\"])\n'Slices.SErviNGSliCes'\n</code>\n\
    <|/ a dscore=0 tags=string,python |>\n<| c |>\nI'm getting an error when I try\
    \ this. ```return class_name + \".\" + next(iter(set(counter) - Counter(extensions)),\
    \ None)\nTypeError: unsupported operand type(s) for -: 'Counter' and 'NoneType'```\n\
    <|/ c |>\n<| c |>\nDo you have a class named `Counter`? I don't; I guess you mean\
    \ `collections.Counter`.\n<|/ c |>\n<| c |>\nI do have a class named Counter,\
    \ it's called ```collections.Counter``` though\n<|/ c |>\n<| c |>\nThen you probably\
    \ have a typo in your code: maybe you wrote `Counter` instead of `Counter`?\n\
    <|/ c |>\n<| c |>\nMy bad. Yeah I did. Thanks for your help!\n<|/ c |>\n<| a |>\n\
    I \ndef check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
    \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
    \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
    \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkhqu3u4x.py\", line 29\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    \n    extension_strengths = []\n    \n    for extension in extensions:\n\
    \        strength = -1\n        for c in extension:\n            if c.isupper():\n\
    \                strength += 1 \n            elif c.islower():\n             \
    \   strength -= 1 \n        \n        extension_strengths.append(strength)\n \
    \   \n    sorted_extension_strengths = sorted(extension_strengths, reverse = True)\n\
    \    \n    if extension_strengths.count(sorted_extension_strengths[0]) > 1:\n\
    \        sorted_extension_strengths.reverse()\n    \n    return class_name + '.'\
    \ + sorted_extension_strengths[0]\n\ndef check(candidate):\n    assert candidate('Watashi',\
    \ ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123',\
    \ ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n   \
    \ assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\
    \ '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta',\
    \ 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab',\
    \ '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas',\
    \ 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert\
    \ candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
    \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
    \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8ftd7s8.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpf8ftd7s8.py\", line 52,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpf8ftd7s8.py\"\
    , line 41, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\n  File \"/tmp/tmpf8ftd7s8.py\", line 38, in Strongest_Extension\n\
    \    return class_name + '.' + sorted_extension_strengths[0]\nTypeError: can only\
    \ concatenate str (not \"int\") to str\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
    \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
    \ and a list of extensions.\n    The extensions are to be used to load additional\
    \ classes to the class. The\n    strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    letters in the extension's name, and\
    \ let SM be the number of lowercase letters \n    in the extension's name, the\
    \ strength is given by the fraction CAP - SM. \n    You should find the strongest\
    \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the list.\n    For example, if you are\
    \ given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    \    \"\"\"\n    if len(extensions) == 0:\n        return class_name\n\n    extensions_sorted\
    \ = sorted(list(set(extensions)), key=extensions.count, reverse=True)\n    return\
    \ class_name + \".\" + extensions_sorted[0]\n\ndef check(candidate):\n    assert\
    \ candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n\
    \    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])\
    \ == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n  \
    \  assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
    \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
    \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) ==\
    \ 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow',\
    \ 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) ==\
    \ '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n\
    \    check(Strongest_Extension)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh4qtwxf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdh4qtwxf.py\", line 38,\
    \ in test_check\n    check(Strongest_Extension)\n  File \"/tmp/tmpdh4qtwxf.py\"\
    , line 27, in check\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
    \ == 'Watashi.eIGHt8OKe'\nAssertionError\n"
  exit_code: -1
  status: Exception
