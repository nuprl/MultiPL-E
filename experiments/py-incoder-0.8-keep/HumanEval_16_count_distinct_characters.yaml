name: HumanEval_16_count_distinct_characters
language: py
prompt: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string,\
  \ find out how many distinct characters (regardless of case) does it consist of\n\
  \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
  \    4\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
  \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
  \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n \
  \   check(count_distinct_characters)\n\ntest_check()\n"
completions: ["    distinct_characters = 0\n    for letter in string:\n        if\
    \ letter.isalpha():\n            distinct_characters += 1\n    return distinct_characters\n\
    \n", "    return len(set(string))\n\n", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count\n\n", " \
    \   return len(set(string))\n", "    \n    number_of_distinct_characters = 0\n\
    \    \n    for i in range(len(string)):\n        if string[i] not in string:\n\
    \            number_of_distinct_characters += 1\n    \n    return number_of_distinct_characters\n\
    \    \n", "    counter = 0\n    for letter in string:\n        if letter in string.upper():\n\
    \            counter += 1\n        else:\n            counter += 2\n    return\
    \ counter\n\n", "    cnt = [0] * 26\n    for i in string:\n        cnt[ord(i)\
    \ - ord('a')] += 1\n    return sum(cnt)\n\n", "    return len(set(string))\n\n",
  "    return len(set(string))\n\n", "    return len(set(string))\n", "    characters\
    \ = sorted(list(string.lower()))\n    return len(characters)\n", "    return len(set(string))\n\
    \n", "    distinct_characters = 0\n    for char in string:\n        if char.islower():\n\
    \            distinct_characters += 1\n        elif char.isupper():\n        \
    \    distinct_characters += 1\n        else:\n            pass\n    return distinct_characters\n\
    \n", "    return len(set(string))\n\n", "    return len(set(string.lower()))\n\
    \n", "    \n    chars = list(string.lower())\n    count = defaultdict(int)\n \
    \   \n    for char in chars:\n        count[char] += 1\n    \n    return len(count)\n\
    </cell>\n<cell>\ncount_distinct_characters(\"The quick brown fox jumps over the\
    \ lazy dog\")\n</cell>\n<cell>\ncount_distinct_characters(\"The quick brown fox\
    \ jumps over the lazy dog\")\n</cell>\n<cell>\ncount_distinct_characters(\"The\
    \ quick brown fox jumps over the lazy dog\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nGiven two strings\
    \ word1 and word2, return a set containing all the characters that appear in either\
    \ word1 or word2, ignoring case of the characters.\n>>> count_distinct_characters('abracadabra',\
    \ 'bracadabra')\n{'a', 'b', 'c', 'd', 'r', 'k', 'n'}\n\n</text>\n<cell>", "  \
    \  return len(set(string))\n\n@timeit", "    count = 1\n    for character in string:\n\
    \        count += 1\n        count += 1 if character.islower() else -1\n    return\
    \ count\n\n", "    characters = string.upper()\n    characters = characters.lower()\n\
    \    characters = list(characters)\n    characters.sort()\n    characters = list(set(characters))\n\
    \    return len(characters)\n\n", "    return len(set(string))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
