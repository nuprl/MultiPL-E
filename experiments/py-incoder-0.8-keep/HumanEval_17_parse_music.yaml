name: HumanEval_17_parse_music
language: py
prompt: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
  \    \"\"\" Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n\
  \    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n\
  \    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .|\
  \ .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
  \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
  \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert\
  \ candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n\
  \    check(parse_music)\n\ntest_check()\n"
completions: ["    # TODO: Your code here\n    return [0]\n", "    pass\n\n</cell>\n\
    <text>\nPlayground\n\n</text>\n<cell>\nfor _ in range(5):\n    print()\n    music\
    \ = input('Enter music in special format:')\n    print('Parsed music has {} notes'.format(len(parse_music(music))))\n\
    </cell>\n<text>\nTask\nImplement parse_music_from_file which should read music\
    \ from file and return list of integers corresponding to how many beats does each\
    \ not last.\n\n\n</text>\n<cell>", "    return int(music_string.strip()[:-1],\
    \ 2)\n", "    \n    # TODO: implement this function\n    raise NotImplementedError\n",
  "    beats = []\n    notes = music_string.split()\n    for note in notes:\n    \
    \    if note == '.':\n            beats.append(1)\n        elif note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        else:\n            raise ValueError(f\"Unknown note '{note}'!\")\n\n\
    \    return beats\n", "    notes = ['o', 'o|', '.|']\n    beats = []\n    previous_note\
    \ = None\n    for note in music_string:\n        if note == 'o':\n           \
    \ if previous_note:\n                beats.append(previous_note + 2)\n       \
    \         previous_note = None\n            else:\n                previous_note\
    \ = 4\n        elif note == 'o|':\n            if previous_note:\n           \
    \     beats.append(previous_note + 1)\n                previous_note = None\n\
    \            else:\n                previous_note = 2\n        elif note == '.|':\n\
    \            if previous_note:\n                beats.append(previous_note)\n\
    \                previous_note = None\n            else:\n                previous_note\
    \ = 1\n        else:\n            previous_note = None\n    return beats\n", " \
    \   raise NotImplementedError\n\n", "    return [int('o|'.count(c), base=3) for\
    \ c in music_string]\n", "    # your code here\n\n    \n    return 0\n\n", " \
    \   music_list = music_string.split(' ')\n    return list(map(int, music_list))\n\
    </cell>\n<cell>", "    notes = []\n    notes_length = 4\n    notes_type = ''\n\
    \    for c in music_string:\n        if c == 'o':\n            if notes_type ==\
    \ 'o':\n                notes_type = 'o|'\n            elif notes_type == 'o|':\n\
    \                notes_type = '.|'\n            elif notes_type == '.|':\n   \
    \             notes_type = 'o|'\n            elif notes_type == '.|':\n      \
    \          notes_type = 'o'\n            else:\n                raise ValueError(f\"\
    Unknown note type: {notes_type}\")\n            notes_length = 4\n        elif\
    \ c == '|':\n            if notes_type == 'o':\n                notes_type = 'o|'\n\
    \            elif notes_type == 'o|':\n                notes_type = '.|'\n   \
    \         elif notes_type == '.|':\n                notes_type = 'o|'\n      \
    \      elif notes_type == '.|':\n                notes_type = 'o'\n          \
    \  else:\n                raise ValueError(f\"Unknown note type: {notes_type}\"\
    )\n            notes_length = 2\n        elif c == '.':\n            if notes_type\
    \ == 'o':\n                notes_type = '.|'\n            elif notes_type == 'o|':\n\
    \                notes_type = '.|'\n            elif notes_type == '.|':\n   \
    \             notes_type = '.|'\n            else:\n                raise ValueError(f\"\
    Unknown note type: {notes_type}\")\n            notes_length = 1\n        else:\n\
    \            if notes_type == 'o':\n                notes_length += 4\n      \
    \      elif notes_type == 'o|':\n                notes_length += 2\n         \
    \   elif notes_type == '.|':\n                notes_length += 1\n            else:\n\
    \                raise ValueError(f\"Unknown note type: {notes_type}\")\n    \
    \        notes.append(int(notes_length))\n    return notes\n", "    # TODO: Fill\
    \ in the code here\n    raise NotImplementedError\n\n", "    pass\n", "    note_to_beat\
    \ = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list\
    \ = music_string.split()\n    music_list = [n for n in music_list if n != '']\n\
    \n    res = []\n\n    for n in music_list:\n        if n in note_to_beat:\n  \
    \          res.append(note_to_beat[n])\n        else:\n            print('Invalid\
    \ note: {}'.format(n))\n\n    return res\n\n", "    # Your code goes here\n  \
    \  music_string_list = music_string.split(' ')\n    music_list = []\n    for music_note\
    \ in music_string_list:\n        music_note = music_note.strip()\n        if music_note\
    \ == 'o' or music_note == 'o|':\n            music_list.append(4)\n        elif\
    \ music_note == '.|':\n            music_list.append(1)\n        else:\n     \
    \       music_list.append(2)\n    return music_list\n\n", "    raise NotImplementedError\n\
    \n", "    return [0] * ((len(music_string) // 4) + 1)\n\n", "    pass\n\n", " \
    \   notes = [ord(letter) for letter in music_string]\n    beats = []\n    for\
    \ note in notes:\n        if note == ord('o'):\n            beats.append(4)\n\
    \        elif note == ord('o|'):\n            beats.append(2)\n        else:\n\
    \            beats.append(1)\n    return beats\n\n", "    return list(map(int,\
    \ music_string.split()))\n</cell>\n<text>\nPart 1: Prelude\n\n\n</text>\n<text>\n\
    Task: Compare two lists of integers and return the minimal value in this list.\n\
    \nPart 1: The 'Minimal' value\nIn our previous exercise we defined a helper function\
    \ min(), which returns the minimal element in a list.\nThe same thing can be achieved\
    \ by implementing the following function:\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
