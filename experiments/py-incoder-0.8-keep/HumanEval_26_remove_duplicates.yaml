name: HumanEval_26_remove_duplicates
language: py
prompt: "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\
  \    \"\"\" From a list of integers, remove all elements that occur more than once.\n\
  \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
  \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
  \ 4, 5]\n\ndef test_check():\n    check(remove_duplicates)\n\ntest_check()\n"
completions: ["    seen: Set[int] = set()\n    result: List[int] = []\n\n    for num\
    \ in numbers:\n        if num not in seen:\n            result.append(num)\n \
    \           seen.add(num)\n\n    return result\n", "    unique, count = {}, {}\n\
    \n    for x in numbers:\n        if x not in count:\n            unique[x] = 1\n\
    \            count[x] = 1\n        else:\n            count[x] += 1\n\n    numbers\
    \ = [x for x in unique if unique[x] == count[x]]\n\n    return numbers\n", " \
    \   new_list = []\n    seen = set()\n    for i in numbers:\n        if i in seen:\n\
    \            continue\n        new_list.append(i)\n        seen.add(i)\n    return\
    \ new_list\n", "    return list(OrderedDict.fromkeys(numbers))\n\n", "    seen\
    \ = set()\n    seen_add = seen.add\n    return [x for x in numbers if x not in\
    \ seen and not seen_add(x)]\n", "    counter = collections.Counter()\n    for\
    \ num in numbers:\n        counter[num] += 1\n\n    return [num for num, count\
    \ in counter.items() if count == 1]\n", "    return list(collections.OrderedDict.fromkeys(numbers))\n",
  "    return [x for x in numbers if numbers.count(x) == 1]\n", "    seen = set()\n\
    \    result = []\n    for x in numbers:\n        if x not in seen:\n         \
    \   result.append(x)\n            seen.add(x)\n    return result\n", "    counts\
    \ = {}\n    for x in numbers:\n        if x not in counts:\n            counts[x]\
    \ = 0\n        counts[x] += 1\n\n    return [x[0] for x in sorted(counts.items(),\
    \ reverse=True)]\n", "    if len(numbers) < 2:\n        return numbers\n\n   \
    \ new_set = set()\n    new_list = list()\n    for num in numbers:\n        if\
    \ num not in new_set:\n            new_list.append(num)\n            new_set.add(num)\n\
    \    return new_list\n", "    hash_set = set()\n    seen = set()\n    numbers_to_remove\
    \ = []\n    numbers_to_retain = list(numbers)\n    for num in numbers_to_retain:\n\
    \        if num not in seen:\n            hash_set.add(num)\n            numbers_to_remove.append(num)\n\
    \            seen.add(num)\n    for num in numbers_to_remove:\n        numbers_to_retain.remove(num)\n\
    \    return numbers_to_retain\n", "    seen = {}\n    result = []\n    for num\
    \ in numbers:\n        if num not in seen:\n            seen[num] = 1\n      \
    \      result.append(num)\n    return result\n", "    seen = set()\n    seen_add\
    \ = seen.add\n    return [x for x in numbers if x not in seen and not seen_add(x)]\n",
  "    # make a set of the original numbers\n    seen = set()\n    # store the number\
    \ in the set if it's not already there\n    seen_add = seen.add\n    # store the\
    \ final result\n    removed = []\n    # go through each number in the list, check\
    \ if the number is already in the\n    # set, and if not add it\n    for x in\
    \ numbers:\n        if x not in seen:\n            seen_add(x)\n            removed.append(x)\n\
    \    return removed\n", "    seen = set()\n    seen.add(-1)\n    return [x for\
    \ x in numbers if x not in seen and not seen.add(x)]\n", "    return list(OrderedDict.fromkeys(numbers).keys())\n",
  "    return list(set(numbers))\n", "    return list(set(numbers))\n", "    # Sort\
    \ the list so we can use the Counter class\n    numbers.sort()\n    numbers_set\
    \ = set(numbers)\n\n    # Iterate over the unique numbers\n    return [n for n\
    \ in numbers_set if numbers.count(n) == 1]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
