language: py
name: HumanEval_49_modp
results:
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, p)\
    \ undefined')\n    if p == n:\n        return p\n    if n < 0:\n        raise\
    \ ValueError(f'negative modulus')\n    if n == 0:\n        return 0\n\n    if\
    \ n % p == 0:\n        return p - (n % p)\n    m //= p\n    if m % n == 0:\n \
    \       return m % n\n    if m % p == 0:\n        return m % p\n    p //= 2\n\
    \    if n % p == 0:\n        return p - (n % p)\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_rkv7ax.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpe_rkv7ax.py\", line 46,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe_rkv7ax.py\", line 37, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpe_rkv7ax.py\", line\
    \ 25, in modp\n    m //= p\nUnboundLocalError: local variable 'm' referenced before\
    \ assignment\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return 2 ^ n if n & (n - 1) else 0 ^ n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjcj_vo5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcjcj_vo5.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcjcj_vo5.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n       \
    \ return n\n    if p > n:\n        p = n\n    if p < 0:\n        p = -p\n    return\
    \ p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmwezjtcu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmwezjtcu.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmwezjtcu.py\", line 27, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    ret = pow(2, n, p)\n\
    \    if ret < p:\n        ret += 1\n    return ret\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64w_aact.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp64w_aact.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp64w_aact.py\", line 23, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if not n and not p:\n        return 0\n    elif not n:\n\
    \        return p\n    elif not p:\n        return n\n    if n < 0:\n        n\
    \ += p\n    if p < 0:\n        p += n\n    if n == 0:\n        return p\n    if\
    \ p == 0:\n        return n\n    return p - ((p // n) * n)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlvh48qd.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmptlvh48qd.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptlvh48qd.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    assert isinstance(n, int)\n    assert isinstance(p, int)\n\
    \    assert n >= 0\n    assert p >= 0\n    if n == 0:\n        return 0\n    if\
    \ p == 0:\n        return n\n    if n == 1:\n        return p\n    if p == 1:\n\
    \        return n\n    if n == p and p % 2 == 1:\n        return n - 1\n    if\
    \ n > 0 and p % 2 == 0:\n        return modp(n - 1, p)\n    if n == 0 and p %\
    \ 2 == 0:\n        return n\n    if n == 1:\n        return p\n    if p == 1:\n\
    \        return n\n    if n == p and p % 2 == 1:\n        return n - 1\n    if\
    \ n == 0 or p == 1:\n        return n\n    if p == 1 or p == 2:\n        return\
    \ p\n    if p % 3 == 0 and n % 3 == 0:\n        return p + 1 if (n - p) % 3 ==\
    \ 0 else n\n    if p % 3 == 0:\n        return p if (n - p) % 3 == 0 else n\n\
    \    if n % 3 == 0:\n        return p + 1 if (n - p) % 3 == 0 else n\n    if p\
    \ % 5 == 0 and n % 5 == 0:\n        return p + 1 if (n - p) % 5 == 0 else n\n\
    \    if p % 5 == 0:\n        return p if (n - p) % 5 == 0 else n\n    if n % 5\
    \ == 0:\n        return p + 1 if (n - p) % 5 == 0 else n\n    if p % 7 == 0 and\
    \ n % 7 == 0:\n        return p + 1 if (n - p) % 7 == 0 else n\n    if p % 7 ==\
    \ 0:\n        return p if (n - p) % 7 == 0 else n\n    if n % 7 == 0:\n      \
    \  return p + 1 if (n - p) % 7 == 0 else n\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmhmxjci.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmppmhmxjci.py\", line 72,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppmhmxjci.py\", line 64, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return -(-n).bit_length() % p\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__8zjvic.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp__8zjvic.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp__8zjvic.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzia8_f2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyzia8_f2.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpyzia8_f2.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    prod = 1\n    while\
    \ n % p == 0:\n        prod*=p\n        n //= p\n    return prod\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0o9axpt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg0o9axpt.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg0o9axpt.py\", line 23, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    ret = n\n    while p\
    \ != 0:\n        if (p&1) != 0:\n            ret = ret | (n>>p)\n        n = n\
    \ & (p-1)\n        p = p >> 1\n    return ret\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp518cvyoc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp518cvyoc.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp518cvyoc.py\", line 26, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823443
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    # http://oeis.org/A000070\n    ans = 0\n    while n >\
    \ 0:\n        ans = (ans * p + n) % p\n        n //= p\n    return ans\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcti6s6y6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcti6s6y6.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcti6s6y6.py\", line 24, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return p\n    if n == 1:\n       \
    \ return p\n    n -= 1\n    # n == 3\n    p *= 2\n    p %= p\n    if n == 0:\n\
    \        return p\n    if n == 1:\n        return p\n    # n == 2\n    p *= 2\n\
    \    p %= p\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2v1om80a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2v1om80a.py\", line 42,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2v1om80a.py\", line 33, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp2v1om80a.py\", line\
    \ 28, in modp\n    p %= p\nZeroDivisionError: integer division or modulo by zero\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823423
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if not n:\n        return 0\n    d, r = divmod(n, p)\n\
    \    if d:\n        return r\n    else:\n        return p\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1xwlotm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpz1xwlotm.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpz1xwlotm.py\", line 23, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"\
    modulus not an integer\")\n    if not isinstance(p, int):\n        raise TypeError(\"\
    modulus not an integer\")\n    if n == 0:\n        return 1\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n >> 1, p // 2)\n    if p % 3 == 0:\n        return modp(n >>\
    \ 1, (p - 1) // 3)\n    if p % 5 == 0:\n        return modp(n >> 1, (p - 1) //\
    \ 5)\n    return modp(n >> 1, p - 1)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4es8zr2v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4es8zr2v.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4es8zr2v.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    n, p = int(n), int(p)\n    factor = 1\n    if p == 0:\n\
    \        return factor\n    while n > 0:\n        if n % p == 0:\n           \
    \ n //= p\n        else:\n            p = 0\n            factor *= p\n    if n\
    \ == 1:\n        return factor\n    return n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskw_2op3.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpskw_2op3.py\", line 38,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpskw_2op3.py\", line 29, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpskw_2op3.py\", line\
    \ 19, in modp\n    if n % p == 0:\nZeroDivisionError: integer division or modulo\
    \ by zero\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n % p == 0:\n        return n\n    else:\n        return\
    \ modp(n // p, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5kw61l7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo5kw61l7.py\", line 30,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo5kw61l7.py\", line 21, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    modp = 2**n\n    return p & modp or p & -modp\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl6hn4_zp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl6hn4_zp.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl6hn4_zp.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if not p:\n        return n\n    if n == 0:\n        return\
    \ 0\n    if n < 0:\n        raise ValueError(\"The modulus cannot be negative\"\
    )\n    d, r = divmod(n, p)\n    if d:\n        return p\n    return r\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmkstjt4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsmkstjt4.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsmkstjt4.py\", line 28, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823444
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823423
