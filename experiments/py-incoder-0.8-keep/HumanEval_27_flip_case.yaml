name: HumanEval_27_flip_case
language: py
prompt: "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase\
  \ characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n\
  \    'hELLO'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!')\
  \ == 'hELLO!'\n    assert candidate('These violent delights have violent ends')\
  \ == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ndef test_check():\n    check(flip_case)\n\
  \ntest_check()\n"
completions: ["    return string.upper().replace(' ', '').replace('_', '')\n\n", " \
    \   return string.swapcase()\n", "    return string.upper() if string.islower()\
    \ else string.lower()\n\n", "    letters = list(string.lower())\n    letters.reverse()\n\
    \    return ''.join(letters)\n\n", "    uppercase = list(string.upper())\n   \
    \ lowercase = list(string.lower())\n    capitalized = list(map(str.capitalize,\
    \ lowercase))\n    return \"\".join(capitalized + uppercase)\n", "    return string.swapcase()\n\
    \n", "    return string.upper().replace(' ', '').replace('_', '').lower()\n\n",
  "    return string[0].upper() + string[1:]\n", "    string = str(string)\n    return\
    \ ''.join(\n        upper_case(char.lower()) if char.islower() else upper_case(char.upper())\
    \ if char.isupper() else char\n        for char in string\n    )\n\n", "    return\
    \ string.swapcase()\n", "    return ''.join(x.lower() if x.islower() else x.upper()\
    \ for x in string)\n\n", "    return string.swapcase()\n", "    return string[0].upper()\
    \ + string[1:].lower()\n\n", "    return string.title().replace(' ', '').replace('_',\
    \ '').replace('-', '')\n\n", "    return string.swapcase()\n\n", "    mapping\
    \ = dict(zip(string.lower(), string.upper()))\n    return \"\".join(mapping.get(l,\
    \ l) for l in string)\n\n", "    return string.upper() if string and string.islower()\
    \ else string.lower()\n", "    return ''.join([c.lower() if c.isupper() else c.upper()\
    \ for c in string])\n\n", "    return string.swapcase()\n", "    return \"\".join(\n\
    \        sorted(string, key=lambda char: char.islower() if char.isupper() else\
    \ char.lower())\n    )\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
