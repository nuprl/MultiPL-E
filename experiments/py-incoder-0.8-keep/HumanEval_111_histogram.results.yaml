name: HumanEval_111_histogram
language: py
results:
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters = {letter: test.count(letter)\
    \ for letter in set(letters)}\n    return letters\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6r_1vyin.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6r_1vyin.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6r_1vyin.py\", line 23,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzo22fu1n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzo22fu1n.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzo22fu1n.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here!\n    counter = {}\n    for letter\
    \ in test.split():\n        if letter in counter:\n            counter[letter]\
    \ += 1\n        else:\n            counter[letter] = 1\n    return counter\n\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyr6pvupc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyr6pvupc.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpyr6pvupc.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    for word in test.split():\n       \
    \ for letter in word:\n            if letter in histo:\n                histo[letter]\
    \ += 1\n            else:\n                histo[letter] = 1\n\n    return histo\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjt69ih2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpsjt69ih2.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpsjt69ih2.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.split(\" \")).most_common()\n\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6uk9bc_n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6uk9bc_n.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6uk9bc_n.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp6uk9bc_n.py\"\
    , line 16, in histogram\n    return Counter(test.split(\" \")).most_common()\n\
    NameError: name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    letters = list(test.lower())\n\
    \    for i in letters:\n        histogram[i] = histogram.get(i, 0) + 1\n    return\
    \ histogram\n    \ndef check(candidate):\n    assert candidate('a b b a') == {\
    \ 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxoykhi4r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxoykhi4r.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxoykhi4r.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Count the number of occurences of each letter\n \
    \   letter_counts = Counter()\n    for letter in test:\n        letter_counts[letter]\
    \ += 1\n    \n    # Get the letter with the most occurence\n    max_occurrence\
    \ = max(letter_counts.values())\n    max_letter = max(letter_counts, key=letter_counts.get)\n\
    \    max_counts = [letter for letter, count in letter_counts.items() if count\
    \ == max_occurrence]\n    \n    # Add the other letters as well, i.e. the letter\
    \ with the most occurence and the corresponding count\n    for letter, count in\
    \ letter_counts.most_common():\n        if letter != max_letter:\n           \
    \ max_counts.append(letter)\n    \n    return dict(zip(max_counts, range(1, 1\
    \ + len(max_counts))))\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49gquz3u.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp49gquz3u.py\", line 44,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp49gquz3u.py\", line 34,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp49gquz3u.py\"\
    , line 17, in histogram\n    letter_counts = Counter()\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count_dict = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        if letter in count_dict:\n            count_dict[letter]\
    \ += 1\n        else:\n            count_dict[letter] = 1\n    return count_dict\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72dgp_6p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp72dgp_6p.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp72dgp_6p.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split(' ')\n    for\
    \ word in words:\n        letter = word[0]\n        count = histogram.get(letter,\
    \ 0)\n        histogram[letter] = count + 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j2hrht1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8j2hrht1.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8j2hrht1.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    for letter in test:\n\
    \        counts[letter] += 1\n    return dict(sorted(counts.items(), key=lambda\
    \ x: x[1], reverse=True))\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9hhxhpl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpb9hhxhpl.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpb9hhxhpl.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpb9hhxhpl.py\"\
    , line 16, in histogram\n    counts = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    dictionary = Counter(test)\n    histo = {}\n\
    \    for k, v in dictionary.items():\n        histo[k] = histo.get(k, 0) + v\n\
    \    \n    return histo\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpse_sfovr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpse_sfovr.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpse_sfovr.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpse_sfovr.py\"\
    , line 17, in histogram\n    dictionary = Counter(test)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter not in histogram:\n            histogram[letter] = 0\n        histogram[letter]\
    \ += 1\n    return histogram\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvbgpvj0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptvbgpvj0.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptvbgpvj0.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = test.split()\n    letters = [i.lower()\
    \ for i in letters]\n    letters_dict = {i: letters.count(i) for i in set(letters)}\n\
    \    if letters_dict:\n        return {k: v for k, v in sorted(letters_dict.items(),\
    \ key=lambda x: x[1])}\n    else:\n        return {}\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cmp8jg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4cmp8jg8.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4cmp8jg8.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uwi8hrd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2uwi8hrd.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2uwi8hrd.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = collections.defaultdict(int)\n\n    for\
    \ character in test:\n        histogram[character] += 1\n\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpniy8jx7e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpniy8jx7e.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpniy8jx7e.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpniy8jx7e.py\"\
    , line 16, in histogram\n    histogram = collections.defaultdict(int)\nNameError:\
    \ name 'collections' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters_freqs = {}\n\n\
    \    for letter in letters:\n        if letter in letters_freqs:\n           \
    \ letters_freqs[letter] += 1\n        else:\n            letters_freqs[letter]\
    \ = 1\n\n    return letters_freqs\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ly28kt6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7ly28kt6.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7ly28kt6.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    counts = collections.Counter()\n\
    \    \n    for letter in letters:\n        counts[letter] += 1\n    \n    return\
    \ dict(counts)\n</cell>\n<cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b\
    \ b b b a')\n</cell>\n<cell>\nhistogram('a b b c a')\n</cell>\n<cell>\nhistogram('a\
    \ a a b c')\n</cell>\n<text>\n3. BST tree and preorder traversal.\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfsijlt25.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        histogram[letter]\
    \ = histogram.get(letter, 0) + 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp56ntnuk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp56ntnuk.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp56ntnuk.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n</code>\nAnd here is another\
    \ version of Histogram using dictionaries:\n<code>\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9m4d2bby.py\", line 23\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    letters = test.split()\n\
    \    for letter in letters:\n        counts[letter] += 1\n    return counts\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0i0b2z1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc0i0b2z1.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc0i0b2z1.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpc0i0b2z1.py\"\
    , line 16, in histogram\n    counts = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurrences = defaultdict(int)\n\n    for letter in\
    \ test:\n        occurrences[letter] += 1\n\n    return {k: occurrences[k] for\
    \ k in occurrences.keys() if occurrences[k] > 1}\n\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1hi8trj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_1hi8trj.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_1hi8trj.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp_1hi8trj.py\"\
    , line 16, in histogram\n    occurrences = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dictionary = Counter(test)\n    histogram = {}\n  \
    \  for letter in dictionary.keys():\n        histogram[letter] = dictionary[letter]\n\
    \    return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8a89y9n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd8a89y9n.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpd8a89y9n.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpd8a89y9n.py\"\
    , line 16, in histogram\n    dictionary = Counter(test)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.replace(' ', '').replace('\\n', '')\n\
    \    letters = list(map(lambda x: x.lower(), letters.split(' ')))\n    counts\
    \ = dict()\n    for letter in letters:\n        if letter in counts:\n       \
    \     counts[letter] += 1\n        else:\n            counts[letter] = 1\n   \
    \ \n    return counts\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92upub1p.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp92upub1p.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp92upub1p.py\", line 28,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Count how many times a given letter appears\n   \
    \ histogram = {}\n    for letter in test:\n        if letter in histogram:\n \
    \           histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n\n    return histogram\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit8mq0pg.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpit8mq0pg.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpit8mq0pg.py\", line 28,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    for letter in test.split():\n     \
    \   if letter in histo:\n            histo[letter] += 1\n        else:\n     \
    \       histo[letter] = 1\n    return histo\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a262ia8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1a262ia8.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1a262ia8.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter = test.split()\n    dictionary = Counter(letter)\n\
    \    if len(letter) == 0 or len(dictionary) == 0:\n        return {}\n    \n \
    \   most_freq = dictionary.most_common(1)[0][0]\n    freq_dict = {x: dictionary[x]\
    \ for x in dictionary if dictionary[x] == most_freq}\n\n    return freq_dict\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp656rgh6m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp656rgh6m.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp656rgh6m.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp656rgh6m.py\"\
    , line 17, in histogram\n    dictionary = Counter(letter)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = []\n    for letter in test:\n        if letter\
    \ not in letters:\n            letters.append(letter)\n        else:\n       \
    \     letters[letters.index(letter)] += 1\n    return Counter(letters).most_common(1)[0]\n\
    </cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('')\n</cell>\n<text>\nSolution\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsq9nt3fi.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    words = test.split()\n    for word\
    \ in words:\n        if word in histo:\n            histo[word] += 1\n       \
    \ else:\n            histo[word] = 1\n    return histo\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdy1vom0t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdy1vom0t.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdy1vom0t.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram: Dict[str, int] = {}\n    letters: list =\
    \ test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78te10w0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp78te10w0.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp78te10w0.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = dict()\n    \n    letters = [letter for\
    \ letter in test.split(\" \") if letter]\n\n    for letter in letters:\n     \
    \   histogram[letter] = histogram.get(letter, 0) + 1\n        \n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfoxkowzy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpfoxkowzy.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfoxkowzy.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    letters = [letter for letter in test.lower().split(\"\
    \ \")]\n    for letter in letters:\n        letters[letter] = letters.get(letter,\
    \ 0) + 1\n    return letters\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtftgsbd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjtftgsbd.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjtftgsbd.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpjtftgsbd.py\"\
    , line 19, in histogram\n    letters[letter] = letters.get(letter, 0) + 1\nAttributeError:\
    \ 'list' object has no attribute 'get'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = Counter(test.lower().split())\n    letters_with_repetitions\
    \ = {letter: count for letter, count in letters.items() if count > 1}\n    letters_with_repetitions\
    \ = letters_with_repetitions.keys() if letters_with_repetitions else {}\n    \n\
    \    if letters_with_repetitions:\n        return letters_with_repetitions\n \
    \   else:\n        return {}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_0fwdp9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo_0fwdp9.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpo_0fwdp9.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpo_0fwdp9.py\"\
    , line 16, in histogram\n    letters = Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    counts = {}\n    for letter in test:\n      \
    \  counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = 0\n    max_letter\
    \ = None\n    for letter in counts:\n        if counts[letter] > max_count:\n\
    \            max_count = counts[letter]\n            max_letter = letter\n   \
    \ \n    return {'letter': max_letter, 'count': max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mft3az0.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0mft3az0.py\", line 41,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0mft3az0.py\", line 31,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    from collections import Counter\n\n    histogram =\
    \ Counter()\n\n    words = test.split()\n\n    for word in words:\n        histogram[word]\
    \ += 1\n\n    return dict(histogram)\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuvj2nuf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpkuvj2nuf.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkuvj2nuf.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: Write me\n    pass\n</cell>\n<cell>\nhistogram('a\
    \ b c')\n</cell>\n<text>\nHow many times a letter occurs in a string? Remember\
    \ that characters like 'a' and 'b' are counted as well.\nDo you think the function\
    \ above will handle such case? If not, what would be the correct version? If yes,\
    \ how would you write it? Be creative =)\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8p889x36.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    \n    words = test.split()\n  \
    \  \n    for word in words:\n        histogram[word] = histogram.get(word, 0)\
    \ + 1\n        \n    return histogram\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxb9ads5l.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxb9ads5l.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxb9ads5l.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    letters = {}\n\
    \    for letter in test.lower().split():\n        if letter in letters:\n    \
    \        letters[letter] += 1\n        else:\n            letters[letter] = 1\n\
    \    \n    return letters\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmngou46.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphmngou46.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphmngou46.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.lower()\n    return Counter(test).most_common(1)[0]\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnaa3a7_t.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnaa3a7_t.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnaa3a7_t.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpnaa3a7_t.py\"\
    , line 17, in histogram\n    return Counter(test).most_common(1)[0]\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = dict()\n    words = test.split()\n    for\
    \ word in words:\n        for letter in word:\n            if letter in letters:\n\
    \                letters[letter] += 1\n            else:\n                letters[letter]\
    \ = 1\n    return letters\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpie6vj9l1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpie6vj9l1.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpie6vj9l1.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.lower()\n    histogram = {}\n    for char\
    \ in test:\n        if char in histogram:\n            histogram[char] += 1\n\
    \        else:\n            histogram[char] = 1\n\n    return histogram\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88gc9kqs.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp88gc9kqs.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp88gc9kqs.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters = {l: letters.count(l)\
    \ for l in letters}\n    return {k: v for k, v in sorted(letters.items(), key=lambda\
    \ item: item[1])}\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpzgd91u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwpzgd91u.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwpzgd91u.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split()\n    for word\
    \ in words:\n        if histogram.get(word) is None:\n            histogram[word]\
    \ = 1\n        else:\n            histogram[word] += 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo6dt72qv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo6dt72qv.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpo6dt72qv.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsd8p31z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpfsd8p31z.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfsd8p31z.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1oehtwl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb1oehtwl.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpb1oehtwl.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpb1oehtwl.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    # Initialize dictionary\n    histogram = {}\n\
    \    \n    # Initialize count to zero\n    count: int = 0\n\n    # Go through\
    \ every letter in the string\n    for letter in test:\n        # Increase count\
    \ if it hasn't already been increased\n        if letter not in histogram and\
    \ letter in test:\n            histogram[letter] = count\n            count +=\
    \ 1\n        \n    # Return histogram dictionary\n    return histogram\n    \n\
    histogram(\"a b b b a\")\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw47zfi4j.py\", line 34\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: Implement me!\n    histogram = {}\n    split_test\
    \ = test.split()\n    for char in split_test:\n        if char not in histogram:\n\
    \            histogram[char] = 1\n        else:\n            histogram[char] +=\
    \ 1\n    return histogram\n</cell>\n<cell>\nhistogram('a b c')\n</cell>\n<text>\n\
    What is the most repeated word in a string?\n\n</text>\n<text>\nExercise 4\nUsing\
    \ histogram() as a starting point, what is the most repeated word in a string?\n\
    \n</text>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\nfrom collections import\
    \ Counter\n</cell>\n<cell>\nCounter(['a', 1])\n</cell>\n<cell>\nCounter(['b',\
    \ 1])\n</cell>\n<cell>\nCounter(['c', 1])\n</cell>\n<cell>\nCounter(['a', 1, 'a'])\n\
    </cell>\n<cell>\nfrom collections import Counter\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7y69r3lq.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters = list(set(letters))\n\
    \    letters = sorted(letters)\n    \n    histo = {}\n    for letter in letters:\n\
    \        histo[letter] = letters.count(letter)\n    return histo\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatl0qkzm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpatl0qkzm.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpatl0qkzm.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = list(test)\n    letter_count = {}\n    \n\
    \    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter]\
    \ += 1\n        else:\n            letter_count[letter] = 1\n    \n    return\
    \ letter_count\n    \n    \ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ytb4y3g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7ytb4y3g.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7ytb4y3g.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here\n    histogram = {}\n    words = test.split()\n\
    \    for word in words:\n        if histogram.get(word) is None:\n           \
    \ histogram[word] = 1\n        else:\n            histogram[word] += 1\n    return\
    \ histogram\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkbb3n965.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkbb3n965.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkbb3n965.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = set()\n    occurrences = {}\n    for word\
    \ in test.split():\n        letters.update(word)\n    for letter in letters:\n\
    \        occurrences[letter] = occurrences.get(letter, 0) + 1\n    sorted_letters\
    \ = sorted(occurrences, key=occurrences.get, reverse=True)\n    return {letter:\
    \ occurrences[letter] for letter in sorted_letters}\n</code>\n<|/ a tags=string,python-3.x,counting\
    \ |>\n<| a |>\nYou could use a collections.Counter object which does exactly that\
    \ for you:\n<code>\nfrom collections import Counter\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwyxqajsa.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test).most_common()\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfmde78j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgfmde78j.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgfmde78j.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpgfmde78j.py\"\
    , line 16, in histogram\n    return Counter(test).most_common()\nNameError: name\
    \ 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Solution using Counter\n    letter_counts = Counter(test.split())\n\
    \    \n    # Solution using collections.defaultdict \n    letter_counts = defaultdict(int)\n\
    \    for letter in test.split():\n        letter_counts[letter] += 1\n    \n \
    \   return letter_counts\n\n</cell>\n<cell>\nhistogram('a b c')\n</cell>\n<text>\n\
    How to use the histogram function?\nThe histogram function returns a dictionary\
    \ of letter counts. In each dictionary entry, the key is the letter, and the value\
    \ is the count.\n\nUse your histogram function to return two dictionaries.\n\n\
    The first dictionary should contain only the letters found in the given string\
    \ once.\n\nThe second dictionary should contain all the letters found in the given\
    \ string more than once.\n\n\n</text>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\n\
    histogram('a b b a b')\n</cell>\n<text>\nHow do you test your histogram function?\n\
    The histogram function has two outputs. The first output contains only the letters\
    \ found only once. The second output contains all the letters found in the given\
    \ string more than once.\n\nUse your histogram function with the string 'a b b\
    \ a b' and test to see which dictionary is returned.\n\n\n</text>\n<cell>\nhistogram('a\
    \ b b a b')\n</cell>\n<text>\nWhat if the string contains the space?\nYou probably\
    \ noticed that the string you pass to the histogram function contains spaces.\
    \ How do you filter out those spaces?\n\nUse .strip() on the given string to remove\
    \ leading and trailing spaces.\n\n\n</text>\n<cell>\nhistogram('a b c a b')\n\
    </cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n</cell>\n\
    <text>\nNow you know your histogram function! Great!\n\n\n</text>\n<text>\nExercise\
    \ 3: Write a histogram function that accepts a string and returns a dictionary\
    \ of the letter with the most repetition and containing the corresponding count.\n\
    Your function should ignore spaces.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp831lgnbe.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2quqqul.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw2quqqul.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpw2quqqul.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpw2quqqul.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Split into words with space\n    letters = test.split(\"\
    \ \")\n\n    # Count the letters\n    letters_counts = Counter(letters)\n\n  \
    \  # Return results\n    return letters_counts\n</code>\n<|/ a |>\n<| a tags=dictionary,list,python,for-loop\
    \ |>\n<code>\n>>> import re\n>>> from collections import Counter\n>>> def histogram(test):\n\
    ...     return Counter(re.findall(r\"[a-zA-Z]+\", test))\n... \n>>> histogram('a\
    \ b c')\nCounter({'a': 2, 'c': 2, 'b': 2})\n>>> histogram('a b b a')\nCounter({'a':\
    \ 2, 'b': 2})\n>>> histogram('a b c a b')\nCounter({'a': 2, 'b': 2})\n>>> histogram('b\
    \ b b b a')\nCounter({'a': 2, 'b': 4})\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvtoofxn5.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if len(test) == 0:\n        return {}\n    counts =\
    \ {}\n    letter = test[0]\n    counts[letter] = counts.get(letter, 0) + 1\n \
    \   if len(test) == 1:\n        return counts\n    letter = test[1]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 2:\n        return counts\n\
    \    letter = test[2]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 3:\n        return counts\n    letter = test[3]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 4:\n        return counts\n\
    \    letter = test[4]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 5:\n        return counts\n    letter = test[5]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 6:\n        return counts\n\
    \    letter = test[6]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 7:\n        return counts\n    letter = test[7]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 8:\n        return counts\n\
    \    letter = test[8]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 9:\n        return counts\n    letter = test[9]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 10:\n        return counts\n\
    \    letter = test[10]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 11:\n        return counts\n    letter = test[11]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 12:\n        return counts\n\
    \    letter = test[12]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 13:\n        return counts\n    letter = test[13]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 14:\n        return counts\n\
    \    letter = test[14]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 15:\n        return counts\n    letter = test[15]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 16:\n        return counts\n\
    \    letter = test[16]\n    counts[letter] = counts.get(letter, 0) + 1\n    if\
    \ len(test) == 17:\n        return counts\n    letter = test[17]\n    counts[letter]\
    \ = counts.get(letter, 0) + 1\n    if len(test) == 18:\n        return counts\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovxhrzar.py\", line\
    \ 104, in <module>\n    test_check()\n  File \"/tmp/tmpovxhrzar.py\", line 102,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpovxhrzar.py\", line 92,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if len(test) == 0:\n        return {}\n    letters\
    \ = test.lower().split()\n    \n    count = {}\n    \n    for letter in letters:\n\
    \        if letter in count:\n            count[letter] += 1\n        else:\n\
    \            count[letter] = 1\n    \n    return count\n        \n\"\"\"\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2u66lkok.py\", line 46\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = defaultdict(int)\n    for letter in test:\n\
    \        histogram[letter] += 1\n\n    # If the string consists of just one letter,\
    \ we return an empty dictionary\n    if len(test) == 1:\n        return {}\n\n\
    \    # If the string consists of just two letters, we return the histogram dictionary\n\
    \    if len(test) == 2:\n        return histogram\n\n    # If the string consists\
    \ of three letters, we return the histogram dictionary\n    if len(test) == 3:\n\
    \        return histogram\n\n    # If the string consists of four letters, we\
    \ return the histogram dictionary\n    if len(test) == 4:\n        return histogram\n\
    \n    # If the string consists of five letters, we return the histogram dictionary\n\
    \    if len(test) == 5:\n        return histogram\n\n    # If the string consists\
    \ of six letters, we return the histogram dictionary\n    if len(test) == 6:\n\
    \        return histogram\n\n    # If the string consists of seven letters, we\
    \ return the histogram dictionary\n    if len(test) == 7:\n        return histogram\n\
    \n    # If the string consists of eight letters, we return the histogram dictionary\n\
    \    if len(test) == 8:\n        return histogram\n\n    # If the string consists\
    \ of nine letters, we return the histogram dictionary\n    if len(test) == 9:\n\
    \        return histogram\n\n    # If the string consists of ten letters, we return\
    \ the histogram dictionary\n    if len(test) == 10:\n        return histogram\n\
    \n    # If the string consists of eleven letters, we return the histogram dictionary\n\
    \    if len(test) == 11:\n        return histogram\n\n    # If the string consists\
    \ of twelve letters, we return the histogram dictionary\n    if len(test) == 12:\n\
    \        return histogram\n\n    # If the string consists of thirteen letters,\
    \ we return the histogram dictionary\n    if len(test) == 13:\n        return\
    \ histogram\n\n    # If the string consists of fourteen letters, we return the\
    \ histogram dictionary\n    if len(test) == 14:\n        return histogram\n\n\
    \    # If the string consists of fifteen letters, we return the histogram dictionary\n\
    \    if len(test) == 15:\n        return histogram\n\n    # If the string consists\
    \ of sixteen letters, we return the histogram dictionary\n    if len(test) ==\
    \ 16:\n        return histogram\n\n    # If the string consists of seventeen letters,\
    \ we return the histogram dictionary\n    if len(test) == 17:\n        return\
    \ histogram\n\n    # If the string consists of eighteen letters, we return the\
    \ histogram dictionary\n    if len(test) == 18:\n        return histogram\n\n\
    \    # If the string consists of nineteen letters, we return the histogram dictionary\n\
    \    if len(test) == 19:\n        return histogram\n\n    # If the string consists\
    \ of twenty letters, we return the histogram dictionary\n    if len(test) == 20:\n\
    \        return histogram\n\n    # If the string consists of twenty five letters,\
    \ we return the histogram dictionary\n    if len(test) == 25:\n        return\
    \ histogram\n\n    # If the string consists of twenty six letters, we return the\
    \ histogram dictionary\n    if len(test) == 26:\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpotf_59jr.py\", line 106\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    return Counter(letters).most_common()\n\
    \    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4hddg77h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4hddg77h.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4hddg77h.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp4hddg77h.py\"\
    , line 17, in histogram\n    return Counter(letters).most_common()\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split()\n    for word\
    \ in words:\n        if word in histogram:\n            histogram[word] += 1\n\
    \        else:\n            histogram[word] = 1\n    return histogram\n\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_zt1uwz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpj_zt1uwz.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpj_zt1uwz.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = collections.Counter()\n    for letter in\
    \ test:\n        histogram[letter] += 1\n\n    histogram.pop('', None)\n\n   \
    \ return histogram\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuimyz83j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuimyz83j.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuimyz83j.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpuimyz83j.py\"\
    , line 16, in histogram\n    histogram = collections.Counter()\nNameError: name\
    \ 'collections' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here\n    histogram = {}\n    letters =\
    \ test.split()\n    for letter in letters:\n        histogram[letter] = histogram.get(letter,\
    \ 0) + 1\n    \n    return histogram\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv32ey32v.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpv32ey32v.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpv32ey32v.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    count = {}\n \
    \   for letter in test:\n        if letter not in count:\n            count[letter]\
    \ = 1\n        else:\n            count[letter] += 1\n    return count\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprc4ep94a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprc4ep94a.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmprc4ep94a.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wcyg300.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8wcyg300.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8wcyg300.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp8wcyg300.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters: Dict[str, int] = defaultdict(int)\n    for\
    \ letter in test:\n        letters[letter] += 1\n    return letters\n</cell>\n\
    <cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\n\
    histogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\n\
    histogram('')\n</cell>\n<text>\nThe next function takes as input a dictionary\
    \ and a list of strings. It returns True if every string in the list exists as\
    \ a key in the dictionary and is a valid word.\n\nExample input and output:\n\n\
    input_dict = {'a': 1, 'b': 2, 'c': 1}\ninput_list = ['a', 'b', 'c']\noutput_bool\
    \ = True\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp75tg816s.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary and count all letters \n    letters\
    \ = {}\n    letters_count = {}\n    \n    # Iterate through the string\n    for\
    \ letter in test.split():\n        # If the letter has not been encountered before,\n\
    \        # put it in the dictionary and count it\n        if letter not in letters:\n\
    \            letters[letter] = 1\n            letters_count[letter] = 1\n    \
    \    else:\n            letters[letter] += 1\n            letters_count[letter]\
    \ += 1\n        \n    # Return a dictionary with the letter as the key and count\
    \ as the value\n    return letters\n</cell>\n<cell>\nhistogram(\"a b c a b\")\n\
    </cell>\n<cell>\nhistogram(\"a b b b a\")\n</cell>\n<cell>\nhistogram(\"b b b\
    \ b a\")\n</cell>\n<cell>\nhistogram(\"\")\n</cell>\n<text>\nWrite a function\
    \ named find_words that takes an argument called test and returns the words in\
    \ test that follow the pattern \"abcabc\".\n\nExamples:\nfind_words('a a a') ==\
    \ ['aaa']\nfind_words('a b c c b a') == ['aa', 'ab', 'ac', 'b']\nfind_words('')\
    \ == []\nfind_words('a a b c a b') == ['ab', 'ac']\nfind_words('a a b a b') ==\
    \ []\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1vtsw7k6.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for word in test.split(\" \"):\n\
    \        histogram[word] = histogram.get(word, 0) + 1\n    return histogram\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5l6lhgtn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5l6lhgtn.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5l6lhgtn.py\", line 23,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters_count = {letter:\
    \ letters.count(letter) for letter in set(letters)}\n    letters_count.update({'':\
    \ 0})\n    \n    \n    return letters_count\n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqj9u6b0q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqj9u6b0q.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqj9u6b0q.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = defaultdict(int)\n    \n    for letter\
    \ in test:\n        histogram[letter] += 1\n    \n    return histogram\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp784s8g04.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp784s8g04.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp784s8g04.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp784s8g04.py\"\
    , line 16, in histogram\n    histogram = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = {}\n    count_letters = Counter(test)\n  \
    \  for letter, count in count_letters.items():\n        result[letter] = count\n\
    \    if all(count > 1 for letter, count in result.items()):\n        return result\n\
    \    letters = []\n    for letter, count in result.items():\n        if count\
    \ > 1:\n            letters.append(letter)\n    if len(letters) == 1:\n      \
    \  return {letters[0]: 1}\n    else:\n        return Counter(letters)\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('a b b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<text>\nProblem 7\nWrite a function to\
    \ calculate the minimum distance between two points on the plane. Given the points\
    \ (1,1), (3,4), (5,6), (1,6), (1,6), (3,4), (4,3), (5,6), (1,1), (2,3)\nYou should\
    \ return 3\nExample 2:\n\nInput: x = 3, y = 4\nOutput: 4\n\n</text>\n<cell>\n\
    from math import sqrt\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwthpj6zq.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = Counter(test.lower().split())\n   \
    \ \n    return dict(letters.most_common())\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh0guefr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmh0guefr.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmh0guefr.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpmh0guefr.py\"\
    , line 17, in histogram\n    letters = Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for c in test:\n        if c in counts:\n\
    \            counts[c] += 1\n        else:\n            counts[c] = 1\n    return\
    \ counts\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxqkagche.py\", line 23\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = set(test)\n    histogram = {}\n    for letter\
    \ in letters:\n        histogram[letter] = test.count(letter)\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp126wew63.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp126wew63.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp126wew63.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        histogram[letter]\
    \ = histogram.get(letter, 0) + 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2om5vb8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt2om5vb8.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpt2om5vb8.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_counts: Dict[str, int] = {}\n    for letter\
    \ in test.lower():\n        if letter in letter_counts:\n            letter_counts[letter]\
    \ += 1\n        else:\n            letter_counts[letter] = 1\n    return letter_counts\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4j4xbdf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi4j4xbdf.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpi4j4xbdf.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    words = test.split()\n    for word\
    \ in words:\n        for letter in word:\n            if letter in letters:\n\
    \                letters[letter] += 1\n            else:\n                letters[letter]\
    \ = 1\n    return letters\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyulkxees.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyulkxees.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpyulkxees.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Initialize variables\n    occurrences = {}\n    counts\
    \ = {}\n    \n    # Loop through the letters of the string\n    for i in test:\n\
    \        # If the letter is already in the dictionary, increment its count\n \
    \       if i in counts:\n            counts[i] += 1\n        # Otherwise, add\
    \ it to the dictionary with the count of 1\n        else:\n            counts[i]\
    \ = 1\n\n    # Compare the counts to determine which has the higher count\n  \
    \  max_count = 0\n    max_letter = \"\"\n    for k in counts:\n        if counts[k]\
    \ > max_count:\n            max_count = counts[k]\n            max_letter = k\n\
    \n    # Return the dictionary with the letter and count\n    return { max_letter:\
    \ max_count }\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3g3ouk0o.py\", line 39\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if len(test) == 0:\n        return {}\n    letters\
    \ = list(test)\n    letters.sort()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpblzdm7vb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpblzdm7vb.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpblzdm7vb.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.lower().split():\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_oai8hv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw_oai8hv.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpw_oai8hv.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split()\n    for word\
    \ in words:\n        if word in histogram:\n            histogram[word] += 1\n\
    \        else:\n            histogram[word] = 1\n    return histogram\n</code>\n\
    <|/ a |>\n<| c |>\nYour solution is definitely better, however, I'm having trouble\
    \ understanding your solution. How would you approach the problem without using\
    \ collections.Counter? I haven't learned anything about using Counter yet, so\
    \ I'm not sure how to apply your solution to my own problem. I've tried applying\
    \ the code you've provided but nothing gets printed out or it gives an error.\
    \ Thanks for your help so far!\n<|/ c |>\n<| c |>\n: I'm glad you like it!  I\
    \ updated the answer to give an explanation of what's going on in each step. \
    \ I hope it's helpful.\n<|/ c |>\n<| a |>\nUsing collections.Counter instead of\
    \ Counter:\n<code>\n>>> from collections import Counter\n>>> string = \"a b c\
    \ a b a b a b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\
    \ b b b b b b b b b b b b b b b b b \ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkiix97j4.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split()).most_common()\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpratvyptd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpratvyptd.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpratvyptd.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpratvyptd.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split()).most_common()\n\
    NameError: name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here\n    occurrences = {}\n    for letter\
    \ in test:\n        if letter in occurrences:\n            occurrences[letter]\
    \ += 1\n        else:\n            occurrences[letter] = 1\n    return occurrences\n\
    \n</cell>\n<text>\nLet's see how it works:\n\n\n</text>\n<cell>\nassert histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\nassert histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\nassert histogram('a b c a b') == {'a': 2, 'b': 2}\nassert histogram('b b\
    \ b b a') == {'b': 4}\nassert histogram('') == {}\n</cell>\n<cell>\nhistogram('abacaba')\
    \ == {'a': 2, 'b': 2, 'c': 2}\n</cell>\n<text>\nPractice\nWrite a function that\
    \ takes in a string and returns all the letters in lower case, but only up to\
    \ the first\noccurrence of a letter appearing twice in a row in the string. Letters\
    \ count as consecutive occurrences only if they\nare adjacent in the string.\n\
    \nExamples:\n\nhistogram('abacaba') == {'a': 1, 'c': 1}\nhistogram('a ab ac aba')\
    \ == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a ab ac aba ab aba aba ab aba ab a')\
    \ == {'a': 1, 'b': 2, 'c': 1}\nhistogram('') == {}\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7ap4i5hz.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = list(test)\n    counts = {}\n    \n\
    \    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    \n    return counts\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphjnpz05o.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str,int] = {}\n    \n    list = test.split()\n\
    \    list.sort(key = str.lower)\n    \n    for letter in list:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    \n    return counts\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphl8m0b4u.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmphl8m0b4u.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphl8m0b4u.py\", line 31,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.lower()\n    histogram = {}\n    for letter\
    \ in test:\n        if letter in histogram:\n            histogram[letter] +=\
    \ 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi9q7dr0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphi9q7dr0.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphi9q7dr0.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str, int] = {}\n    for letter in test:\n\
    \        if letter not in counts:\n            counts[letter] = 0\n        counts[letter]\
    \ += 1\n\n    return counts\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj72i8_f7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj72i8_f7.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpj72i8_f7.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = [char.lower() for char in test.split()]\n  \
    \  letters = {}\n    for char in test:\n        if char not in letters:\n    \
    \        letters[char] = 1\n        else:\n            letters[char] += 1\n  \
    \  return letters\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nbl3cb_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7nbl3cb_.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7nbl3cb_.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: Complete the function signature\n    \n   \
    \ # Your code here\n    histogram = {}\n    letters = test.split()\n    \n   \
    \ for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n        \n    return\
    \ histogram\n\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkozjfxe.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpjkozjfxe.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjkozjfxe.py\", line 33,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiy6lga_a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpiy6lga_a.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpiy6lga_a.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str, int] = dict()\n    for letter in\
    \ test:\n        if letter in counts:\n            counts[letter] += 1\n     \
    \   else:\n            counts[letter] = 1\n    return counts\n</cell>\n<cell>\n\
    histogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\nhistogram('a\
    \ b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\nhistogram('\
    \ ')\n</cell>\n<text>\nWrite a function that takes as input a list of strings,\
    \ extracts the letters and converts each letter to its lower case, splits it in\
    \ two strings and returns the two strings.\nExample:\nstringList = ['a b c a b',\
    \ 'a b', 'a b c a']\noutput = [['a','b','c','a'],['a'],['a','b','c','a']]\n\n\
    Hint: you can use list comprehensions or a for loop.\n\n\n</text>\n<cell>\nstringList\
    \ = ['a b c a b', 'a b', 'a b c a']\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmph9ncij3p.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = (test or '').lower()\n    dictionary = Counter(test)\n\
    \    return dict(sorted(dictionary.items(), key=lambda item: item[1], reverse=True))\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp234zpolw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp234zpolw.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp234zpolw.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp234zpolw.py\"\
    , line 17, in histogram\n    dictionary = Counter(test)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    counts = {}\n    for letter\
    \ in letters:\n        if letter not in counts:\n            counts[letter] =\
    \ 0\n        counts[letter] += 1\n    return counts\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaqnm6_85.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaqnm6_85.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpaqnm6_85.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.strip().split(' ')\n    letters_count\
    \ = {}\n    for l in letters:\n        if l in letters_count:\n            letters_count[l]\
    \ += 1\n        else:\n            letters_count[l] = 1\n    return letters_count\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppq4vczq6.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppq4vczq6.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppq4vczq6.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    histogram = {}\n    for c in test:\n        if\
    \ c in histogram.keys():\n            histogram[c] += 1\n        else:\n     \
    \       histogram[c] = 1\n    return histogram\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0oo08wl.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpe0oo08wl.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpe0oo08wl.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = defaultdict(int)\n    letters = test.split('\
    \ ')\n    for letter in letters:\n        histogram[letter] += 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99knd3wr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp99knd3wr.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp99knd3wr.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp99knd3wr.py\"\
    , line 16, in histogram\n    histogram = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    # Create a dictionary to store the histogram\n\
    \    histogram = {}\n    \n    # Split the string into a list using spaces as\
    \ delimiters\n    words = test.split(\" \")\n    \n    # Loop through the words\
    \ and count the occurrences of each letter\n    for word in words:\n        for\
    \ letter in word:\n            histogram[letter] = histogram.get(letter, 0) +\
    \ 1\n    \n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu01t4xy.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpeu01t4xy.py\", line 41,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpeu01t4xy.py\", line 32,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    counts = {letter: 0\
    \ for letter in letters}\n    for letter in letters:\n        counts[letter] +=\
    \ 1\n    return counts\n\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7h9a4yam.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7h9a4yam.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7h9a4yam.py\", line 25,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.lower().split('\
    \ '):\n        if letter in histogram:\n            histogram[letter] += 1\n \
    \       else:\n            histogram[letter] = 1\n    return histogram\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvnlbmhy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwvnlbmhy.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwvnlbmhy.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = dict()\n    for letter in test:\n       \
    \ if letter in letters:\n            letters[letter] += 1\n        else:\n   \
    \         letters[letter] = 1\n    return letters\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppeip6n1g.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppeip6n1g.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppeip6n1g.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    occurrences = {}\n\
    \    for letter in letters:\n        if letter in occurrences:\n            occurrences[letter]\
    \ += 1\n        else:\n            occurrences[letter] = 1\n    return occurrences\n\
    </cell>\n<cell>\nhistogram('a b c a b')\n</cell>\n<text>\nProblem 5\nThe standard\
    \ histogram function has some problems, for example if you use a letter that is\
    \ not\none of the standard alphabet:\n\nhistogram('a b c a b') == {'a': 2, 'b':\
    \ 4}\nhistogram('a b b b a') == {'b': 4}\nhistogram('b b b b a') == {'b': 4}\n\
    histogram('') == {}\nThe first two letters b are used only twice, so it shouldn't\
    \ be considered a histogram.\n\nWhat would be the expected result?\n\n</text>\n\
    <text>\nSolution:\n\n\n</text>\n<text>\nProblem 6\nCreate a function count_letter\
    \ that receives a string, and a letter, and returns the number of times the letter\
    \ is present\nin the string ignoring case. Your function should ignore the case\
    \ of the letters.\n\nExamples:\ncount_letter('abcabc', 'a') == 3\ncount_letter('bbbbbb',\
    \ 'b') ==4\ncount_letter('abba', 'a') == 4\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4rs1wc9z.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurrences = {}\n\n    for letter in test:\n     \
    \   occurrences[letter] = occurrences.get(letter, 0) + 1\n    \n    return occurrences\n\
    </cell>\n<cell>\n%%time\n\nhistogram('a b c a b')\n</cell>\n<text>\nProblem 2\n\
    Implement the function histogram(strs, nums) that takes 2 positional arguments:\n\
    \nstrs: a string, possibly containing spaces, of lowercase letters (not necessarily\
    \ distinct)\nnums: a dictionary of integers, each of which represents a frequency\
    \ of occurrence of one letter.\nThe function returns a dictionary containing the\
    \ number of occurrences for each unique letter in the string.\n\nFor example,\
    \ histogram('ab bc a bb ab', {0:4, 2:2, 1:2}) == {\n    'a' : 2,\n    'b' : 3,\n\
    \    'c' : 1,\n    'd' : 1,\n    'e' : 1,\n    'f' : 1,\n    'g' : 1,\n    'h'\
    \ : 1,\n    'i' : 1,\n    'j' : 1,\n    'k' : 1,\n    'l' : 1,\n    'm' : 1,\n\
    \    'n' : 1,\n    'o' : 1,\n    'p' : 1,\n    'q' : 1,\n    'r' : 1,\n    's'\
    \ : 1,\n    't' : 1,\n    'u' : 1,\n    'v' : 1,\n    'w' : 1,\n    'x' : 1,\n\
    \    'y' : 1,\n    'z' : 1 }\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx9xgynmj.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    return Counter(letters).most_common(1)[0]\n\
    \n</code>\n<|/ a |>\n<| c |>\nI agree with you that it's an improvement of the\
    \ original algorithm, but my question is about the time complexity. Your solution\
    \ has a time complexity of O(n). In contrast, my solution, also has a time complexity\
    \ of O(n), but it is O(1) when n is 1.\n<|/ c |>\n<| c |>\nIn fact, I think my\
    \ solution is O(1), but your solution isn't valid in many cases. Example: histogram(\"\
    a b c a b b c a c\") returns {'a': 2, 'b': 4}. My solution will return the letter\
    \ with the highest number of repetitions (which may be more than one letter).\
    \ But your solution will return {'a': 2, 'b': 2, 'c': 1}. Your solution won't\
    \ work if you pass in a string with only one letter.\n<|/ c |>\n<| a tags=dictionary,python,python-3.x,string,count\
    \ |>\nIn Python 3.6 and higher you can use Counter\n<code>\nfrom collections import\
    \ Counter\n\ncounts = Counter(letters)\nprint(counts.most_common(1)[0]) # ('a',\
    \ 2)\nprint(counts.most_common()) # [('b', 3), ('c', 2), ('a', 2)]\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=dictionary,python,python-3.x,string,count |>\nIn\
    \ Python 3.6 and higher you can use Counter.\n<code>\nfrom collections import\
    \ Counter\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprcfm0rab.py\", line 19\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for word in test.split():\n   \
    \     histogram[word] = histogram.get(word, 0) + 1\n    histogram = dict(sorted(histogram.items()))\n\
    \    return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymfmyr3c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpymfmyr3c.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpymfmyr3c.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    counter = dict()\n    for\
    \ l in letters:\n        if l not in counter:\n            counter[l] = 1\n  \
    \      else:\n            counter[l] += 1\n    return counter\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp29dk18_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpp29dk18_.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp29dk18_.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter not in histogram:\n            histogram[letter] = 1\n        else:\n\
    \            histogram[letter] += 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgw30mk2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkgw30mk2.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkgw30mk2.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    def letterCount(letter: str) -> Dict[str, int]:\n\
    \        \n        #count of one letter only once\n        if letter not in histogram:\n\
    \            histogram[letter] = 1\n        \n        #count of one letter multiple\
    \ times\n        else:\n            histogram[letter] += 1\n\n    histogram =\
    \ {}\n    \n    letters = test.split(' ')\n    for letter in letters:\n      \
    \  letterCount(letter)\n    \n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2v7lkomg.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp2v7lkomg.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2v7lkomg.py\", line 37,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here\n    letters = test.split()\n    dict\
    \ = {}\n    for letter in letters:\n        dict[letter] = dict.get(letter, 0)\
    \ + 1\n    \n    if dict:\n        return max(dict, key=lambda key:dict[key])\n\
    \    else:\n        return {}\n    \ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgaqckke.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdgaqckke.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdgaqckke.py\", line 28,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx13w0dz8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx13w0dz8.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpx13w0dz8.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpx13w0dz8.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split()).most_common()\n\
    </cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('')\n</cell>\n<text>\nExercise: Find the most common letters\
    \ in a list of strings\nWrite a function named most_common_letters that takes\
    \ a list as a parameter and returns the list with the most frequent letters.\n\
    \nExamples:\nmost_common_letters([1, 2, 3, 4]) == ['a', 'b', 'c']\nmost_common_letters(['a',\
    \ 'b', 'a', 'a']) == ['a', 'a']\n\n\n</text>\n<cell>\nfrom collections import\
    \ Counter\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpcpoavt_b.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for c in test:\n        if c not\
    \ in histogram:\n            histogram[c] = 1\n        else:\n            histogram[c]\
    \ += 1\n    \n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgoqgynk.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvgoqgynk.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvgoqgynk.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = {}\n    for letter in test:\n        if letter\
    \ not in result:\n            result[letter] = 1\n        else:\n            result[letter]\
    \ += 1\n    return result\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zh9n2nz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7zh9n2nz.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7zh9n2nz.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str, int] = {}\n    letters = [letter\
    \ for letter in test if letter in counts]\n    for letter in letters:\n      \
    \  counts[letter] = counts.get(letter, 0) + 1\n    return counts\n</cell>\n<cell>\n\
    histogram('a b c')\n</cell>\n<text>\nAnd a function to display the histogram of\
    \ a string:\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpcegdp_pu.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    splitted = test.split(' ')\n  \
    \  for letter in splitted:\n        histogram.setdefault(letter, 0)\n        histogram[letter]\
    \ += 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnz9gylbv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnz9gylbv.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnz9gylbv.py\", line 25,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test).most_common()\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpph_76s79.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpph_76s79.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpph_76s79.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpph_76s79.py\"\
    , line 16, in histogram\n    return Counter(test).most_common()\nNameError: name\
    \ 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n\n    for letter in test:\n       \
    \ if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5k7036rl.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5k7036rl.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5k7036rl.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # https://stackoverflow.com/questions/281264/python-how-to-split-a-list-into-evenly-sized-chunks\n\
    \    histogram = Counter(test.lower().split())\n    return dict(sorted(histogram.items(),\
    \ key=lambda x: x[1], reverse=True))\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp928qxup2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp928qxup2.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp928qxup2.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp928qxup2.py\"\
    , line 17, in histogram\n    histogram = Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    \n    for letter in test:\n       \
    \ histo[letter] = histo.get(letter, 0) + 1\n\n    return histo\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03sb8gre.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp03sb8gre.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp03sb8gre.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = list(test)\n    count_dict = {}\n    most_frequent\
    \ = ''\n    for letter in letters:\n        if letter in count_dict.keys():\n\
    \            count_dict[letter] += 1\n            if count_dict[letter] > most_frequent:\n\
    \                most_frequent = letter\n        else:\n            count_dict[letter]\
    \ = 1\n            most_frequent = letter\n\n    return count_dict\n</cell>\n\
    <text>\nExercise 5\nThe following method will find the most frequent substring\
    \ in a given string. Write a function which takes in a string and returns the\
    \ most frequent substring. Test it with the following:\n\n\n</text>\n<cell>\n\
    histogram(\"aba aa abb\")\n</cell>\n<cell>\nhistogram(\"aba aa abb aab aa abbb\"\
    )\n</cell>\n<cell>\nhistogram(\"aba aa abbb aab aa abbbb\")\n</cell>\n<text>\n\
    Exercise 6\nWrite a function which takes a string and returns the length of the\
    \ longest substring with no repeating letters.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3fo7hzbm.py\", line 29\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n    \ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit0bx7z2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpit0bx7z2.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpit0bx7z2.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpit0bx7z2.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    for ch in test:\n        if ch in histo.keys():\n\
    \            histo[ch] += 1\n        else:\n            histo[ch] = 1\n    return\
    \ histo\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26zc367_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp26zc367_.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp26zc367_.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = test.split()\n    letters_count = {letter:\
    \ 0 for letter in letters}\n    \n    for letter in letters:\n        letters_count[letter]\
    \ += 1\n\n    return letters_count\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2jbitud.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpr2jbitud.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpr2jbitud.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    split_line = line.split()\n   \
    \ for letter in split_line:\n        letter = letter.lower()\n        if letter\
    \ not in histogram:\n            histogram[letter] = 1\n        else:\n      \
    \      histogram[letter] += 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2o1clcil.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2o1clcil.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2o1clcil.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp2o1clcil.py\"\
    , line 17, in histogram\n    split_line = line.split()\nNameError: name 'line'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_dict = {}\n    letters = set(test)\n    for\
    \ letter in letters:\n        if letter in letter_dict:\n            letter_dict[letter]\
    \ += 1\n        else:\n            letter_dict[letter] = 1\n\n    return letter_dict\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6dj_k55n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6dj_k55n.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6dj_k55n.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = set(test)\n    count = defaultdict(int)\n\
    \    for l in letters:\n        count[l] += 1\n    return {k: v for k, v in sorted(count.items(),\
    \ key=lambda item: item[1], reverse=True)}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60lsioq0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp60lsioq0.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp60lsioq0.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp60lsioq0.py\"\
    , line 17, in histogram\n    count = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters, counts = test.lower().split(\" \"), {}\n \
    \   for letter in letters:\n        count = counts.get(letter, 0) + 1\n      \
    \  counts[letter] = count\n    return counts\n</cell>\n<cell>\nhistogram('a b\
    \ c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\nhistogram('a b\
    \ c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n\
    </cell>\n<text>\nEx. 4.4\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpuo11fi04.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters_count = {}\n    letters = test.split()\n  \
    \  for letter in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiarynvjn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpiarynvjn.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpiarynvjn.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = defaultdict(int)\n    for letter in test:\n\
    \        histogram[letter] += 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rmxc898.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2rmxc898.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2rmxc898.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp2rmxc898.py\"\
    , line 16, in histogram\n    histogram = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = defaultdict(int)\n    words = test.split('\
    \ ')\n    for word in words:\n        histogram[word] += 1\n    return dict(histogram)\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9k9q43ya.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9k9q43ya.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9k9q43ya.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp9k9q43ya.py\"\
    , line 16, in histogram\n    histogram = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return defaultdict(int)\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8894n0p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp8894n0p.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp8894n0p.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpp8894n0p.py\"\
    , line 16, in histogram\n    return defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str, int] = {}\n    for letter in test:\n\
    \        counts[letter] = counts.get(letter, 0) + 1\n\n    return counts\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8tvuvh0j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8tvuvh0j.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8tvuvh0j.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.lower().split()\n    histogram = {}\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxno1t1y1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxno1t1y1.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxno1t1y1.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    for word in test.split():\n     \
    \   for letter in word:\n            if letter in letters:\n                letters[letter]\
    \ += 1\n            else:\n                letters[letter] = 1\n    return letters\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsmhlgl7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppsmhlgl7.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppsmhlgl7.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == \"\":\n        return {}\n    letters =\
    \ [x for x in test.lower().split() if x in ascii_lowercase]\n    freq = {}\n \
    \   for letter in letters:\n        if letter not in freq:\n            freq[letter]\
    \ = 0\n        freq[letter] += 1\n    return freq\n\ndef check(candidate):\n \
    \   assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr2rmtlx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmplr2rmtlx.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplr2rmtlx.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmplr2rmtlx.py\"\
    , line 18, in histogram\n    letters = [x for x in test.lower().split() if x in\
    \ ascii_lowercase]\n  File \"/tmp/tmplr2rmtlx.py\", line 18, in <listcomp>\n \
    \   letters = [x for x in test.lower().split() if x in ascii_lowercase]\nNameError:\
    \ name 'ascii_lowercase' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    \n    counts =\
    \ {}\n    for letter in test.split():\n        if letter in counts:\n        \
    \    counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2nblj2l.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_2nblj2l.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_2nblj2l.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars = test.split(' ')\n    counts = {}\n    for c\
    \ in chars:\n        if c not in counts:\n            counts[c] = 0\n        counts[c]\
    \ += 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrr6rja1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptrr6rja1.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptrr6rja1.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    histogram = {}\n   \
    \ current = {'letter': None, 'count': 0}\n    previous_letter = None\n    for\
    \ letter in letters:\n        if letter in histogram:\n            if letter !=\
    \ current['letter']:\n                histogram[letter] += current['count']\n\
    \            else:\n                histogram[letter] += current['count'] + 1\n\
    \        else:\n            histogram[letter] = current['count'] + 1\n       \
    \ current['letter'] = letter\n        current['count'] = 1\n    if histogram:\n\
    \        return dict(sorted(histogram.items(), key=lambda t: t[1], reverse=True)[0])\n\
    \    else:\n        return {}\n    \ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8x8i9h4.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpb8x8i9h4.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpb8x8i9h4.py\", line 36,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpb8x8i9h4.py\"\
    , line 31, in histogram\n    return dict(sorted(histogram.items(), key=lambda\
    \ t: t[1], reverse=True)[0])\nValueError: dictionary update sequence element #0\
    \ has length 1; 2 is required\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    for letter in test:\n        if letter\
    \ in letters:\n            letters[letter] += 1\n        else:\n            letters[letter]\
    \ = 1\n    return letters\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ud5s5mf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9ud5s5mf.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9ud5s5mf.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    for letter in test:\n        letters[letter]\
    \ = letters.get(letter, 0) + 1\n        \n    return letters\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmk417e2u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmk417e2u.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmk417e2u.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split()\n    for word\
    \ in words:\n        if word in histogram:\n            histogram[word] += 1\n\
    \        else:\n            histogram[word] = 1\n    return histogram\n\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbx37zklq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbx37zklq.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpbx37zklq.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test:\n        counts[letter]\
    \ = counts.get(letter, 0) + 1\n    return counts\n\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpao_xg61_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpao_xg61_.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpao_xg61_.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    counts = {}\n    for\
    \ letter in letters:\n        if letter not in counts:\n            counts[letter]\
    \ = 1\n        else:\n            counts[letter] += 1\n    return counts\n</cell>\n\
    <cell>\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram('a\
    \ b c a b'))\n</cell>\n<text>\nProblem 2\nWrite a function to compute the standard\
    \ deviation of a list of numbers.\n\nThe standard deviation of a list of numbers\
    \ is the square root of the sum of the squared differences between each number\
    \ and its mean. \nIn other words, given a list of numbers, find the square root\
    \ of the sum of squared differences between all numbers and its mean.\nThe formula\
    \ for the standard deviation is as follows:\n\n\\begin{align}\n\\sigma = \\sqrt{\\\
    frac{1}{N} \\sum_{i=1}^{N} (x_i - \\mu)^2},\n\\end{align}\n\nwhere $N$ is the\
    \ number of samples and $\\mu$ is the average of the data.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm_dlxj1f.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    histogram = {}\n    for letter in test.split():\n\
    \        if letter in histogram.keys():\n            histogram[letter] += 1\n\
    \        else:\n            histogram[letter] = 1\n    return histogram\n\n\"\"\
    \"\nP2: Write a Python function named `histogram2` that accepts a string and returns\
    \ a dictionary.\nThe dictionary will contain the frequency of each character in\
    \ test and will be sorted in descending\norder based on the number of repetitions.\n\
    \nExample:\nhistogram2('a b c') == {'a': 2, 'b': 1, 'c': 1}\nhistogram2('a b b\
    \ a') == {'a': 2, 'b': 2}\nhistogram2('a b c a b') == {'a': 2, 'b': 2}\nhistogram2('b\
    \ b b b a') == {'b': 4}\nhistogram2('') == {}\n\"\"\"\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_filasnu.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp_filasnu.py\", line 49,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_filasnu.py\", line 40,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_counts = {}\n    letters = test.split()\n  \
    \  \n    for letter in letters:\n        if letter in letter_counts:\n       \
    \     letter_counts[letter] += 1\n        else:\n            letter_counts[letter]\
    \ = 1\n    \n    return letter_counts\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif2xbl64.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpif2xbl64.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpif2xbl64.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = set(test.split())\n    return {letter: letters.count(letter)\
    \ for letter in letters}\n</cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\n\
    histogram('a b b a')\n</cell>\n<cell>\nhistogram('a b c a b')\n</cell>\n<cell>\n\
    histogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n</cell>\n<text>\nExercise:\
    \ Implement the histogram function and compare its execution time with the previous\
    \ ones.\n\n\n</text>\n<text>\n2. Exercise: Implement the function count_letters\
    \ which returns the number of occurrences of the letters in a string.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzc8a5of3.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    count = 0\n    for letter in test.split():\n\
    \        if letter in letters:\n            letters[letter] += 1\n        else:\n\
    \            letters[letter] = 1\n        count += 1\n    letters = letters.items()\n\
    \    letters.sort(key=lambda x: -x[1])\n    return letters\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsdu18l_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgsdu18l_.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgsdu18l_.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpgsdu18l_.py\"\
    , line 25, in histogram\n    letters.sort(key=lambda x: -x[1])\nAttributeError:\
    \ 'dict_items' object has no attribute 'sort'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    count = []\n    for letter in test:\n\
    \        if letter in histogram:\n            count.append(histogram[letter])\n\
    \        else:\n            count.append(1)\n            histogram[letter] = 1\n\
    \    return dict(zip(test, count)).most_common()\n</cell>\n<cell>\nhistogram(\"\
    a b c\")\n</cell>\n<cell>\nhistogram(\"a b b a\")\n</cell>\n<cell>\nhistogram(\"\
    a b c a b\")\n</cell>\n<cell>\nhistogram(\"b b b b a\")\n</cell>\n<cell>\nhistogram(\"\
    a\")\n</cell>\n<cell>\nhistogram(\"\")\n</cell>\n<cell>\nhistogram(\"a b b a\"\
    )\n</cell>\n<cell>\nhistogram(\"b b b b a\")\n</cell>\n<cell>\nhistogram(\"a\"\
    )\n</cell>\n<cell>\nhistogram(\"a\")\n</cell>\n<cell>\nhistogram(\"a a a a a\"\
    )\n</cell>\n<text>\nThe code below was adopted from the following source:\n\n\n\
    </text>\n<cell>\nfrom collections import defaultdict\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpy9p9pz9z.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count_dict = Counter()\n    for x in test:\n      \
    \  count_dict[x] += 1\n    return count_dict\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97lng8_h.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp97lng8_h.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp97lng8_h.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp97lng8_h.py\"\
    , line 16, in histogram\n    count_dict = Counter()\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    from collections import Counter\n    histogram = Counter()\n\
    \    for letter in test:\n        histogram[letter] += 1\n    \n    # return empty\
    \ dict if no characters have the same occurrence\n    if len(histogram.keys())\
    \ < 2:\n        return histogram\n    \n    # return histogram dict with max values\n\
    \    return dict(sorted(histogram.items(), key=lambda item: item[1]))\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2h9b052h.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2h9b052h.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2h9b052h.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = set(test)\n    histo = defaultdict(int)\n\
    \    for letter in letters:\n        histo[letter] += 1\n    return histo\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnwfm62l.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgnwfm62l.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgnwfm62l.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpgnwfm62l.py\"\
    , line 17, in histogram\n    histo = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = [char for char in test]\n    freq = {}\n\
    \    for letter in letters:\n        freq[letter] = freq.get(letter, 0) + 1\n\
    \    return freq\n\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78ygovgt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp78ygovgt.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp78ygovgt.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    return dict(Counter(letters))\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o720igc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1o720igc.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1o720igc.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp1o720igc.py\"\
    , line 17, in histogram\n    return dict(Counter(letters))\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    return Counter(test).most_common()\n    \n</cell>\n\
    <cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\n\
    histogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\n\
    histogram('')\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqle2snf7.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # your solution here\n    histogram = dict()\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs2ekl9h.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjs2ekl9h.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjs2ekl9h.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.strip().lower()\n    histogram = {}\n\
    \    for l in letters:\n        if l in histogram:\n            histogram[l] +=\
    \ 1\n        else:\n            histogram[l] = 1\n    return histogram\n\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpteduktba.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpteduktba.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpteduktba.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.split():\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n        \ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpennsgf29.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpennsgf29.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpennsgf29.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # initialize dictionary to count occurrences of letters\
    \ in test\n    counts: Dict[str, int] = {}\n    \n    # split test into list using\
    \ space as delimiter\n    test_list = test.split(' ')\n    \n    # iterate through\
    \ test_list and count each letter\n    for letter in test_list:\n        # if\
    \ the letter hasn't been counted yet, initialize it to 0\n        if letter not\
    \ in counts:\n            counts[letter] = 0\n        else:\n            # increment\
    \ the count for the letter by 1\n            counts[letter] += 1\n           \
    \ \n    # return the counts dictionary with the most occurrence\n    most_occurring_letter,\
    \ count = max(counts.items(), key=lambda item: item[1])\n    return most_occurring_letter,\
    \ count\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7itptckv.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp7itptckv.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7itptckv.py\", line 36,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Your code here\n    histogram = {}\n    string_list\
    \ = string.split(' ')\n    for letter in string_list:\n        if histogram.get(letter,\
    \ None) is None:\n            histogram[letter] = 1\n        else:\n         \
    \   histogram[letter] += 1\n    return histogram\n\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_r79321z.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_r79321z.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_r79321z.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp_r79321z.py\"\
    , line 18, in histogram\n    string_list = string.split(' ')\nNameError: name\
    \ 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for c in test:\n        if c not\
    \ in histogram:\n            histogram[c] = 1\n        else:\n            histogram[c]\
    \ += 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2326gje.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl2326gje.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpl2326gje.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftwp1vv3.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpftwp1vv3.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpftwp1vv3.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    letters_count = 0\n    for letter\
    \ in test.lower().split():\n        if letter in letters:\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n        if letters_count\
    \ < letters[letter]:\n            letters_count = letters[letter]\n    if letters_count\
    \ == 1:\n        return letters\n    return letters.copy()\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20xwk1xv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp20xwk1xv.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp20xwk1xv.py\", line 31,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    words = test.split()\n    for word in words:\n\
    \        if word in d:\n            d[word] += 1\n        else:\n            d[word]\
    \ = 1\n    return d\n\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdo3nd0uk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdo3nd0uk.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdo3nd0uk.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    for char in test.split():\n       \
    \ if char in histo:\n            histo[char] += 1\n        else:\n           \
    \ histo[char] = 1\n    return histo\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxs8e4kaw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxs8e4kaw.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxs8e4kaw.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    letters = list(map(str.lower,\
    \ letters))\n    letters.sort(key=len, reverse=True)\n    \n    letter_dict =\
    \ {}\n    for letter in letters:\n        if letter in letter_dict:\n        \
    \    letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphocako4z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphocako4z.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphocako4z.py\", line 30,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2obq5uz6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2obq5uz6.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2obq5uz6.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    words = test.split()\n    counts\
    \ = defaultdict(int)\n\n    for word in words:\n        histogram[word] = counts[word]\
    \ + 1\n\n    # sort alphabetically\n    histogram = OrderedDict(sorted(histogram.items()))\n\
    \n    return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoh4v5u24.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpoh4v5u24.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpoh4v5u24.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpoh4v5u24.py\"\
    , line 18, in histogram\n    counts = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram, counter = defaultdict(int), Counter()\n\n\
    \    for letter in test:\n        counter[letter] += 1\n\n    for letter in test:\n\
    \        histogram[letter] += counter[letter]\n\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2tukbg2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpw2tukbg2.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpw2tukbg2.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpw2tukbg2.py\"\
    , line 16, in histogram\n    histogram, counter = defaultdict(int), Counter()\n\
    NameError: name 'defaultdict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    count = {}\n    for letter\
    \ in letters:\n        if letter in count:\n            count[letter] += 1\n \
    \       else:\n            count[letter] = 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuiu6shfu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpuiu6shfu.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuiu6shfu.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters_count = Counter(letters).most_common()\n\
    \    return {k: letters_count.count(k) for k in letters_count}\n</cell>\n<text>\n\
    Exercise: Count the number of occurrences of each lowercase letter in the test\
    \ string.\nImplement a histogram function for the test strings in the cell below\
    \ and run the function for each of the test strings. Compare the results in the\
    \ cell below with those from your histogram() function. The histogram() function\
    \ returns a\ndictionary with the letter as the key and the number of occurrences\
    \ as the value.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2cqt89pz.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Add some more tests to verify it is working\n   \
    \ letters = test.lower().split()\n    histogram = {}\n    for letter in letters:\n\
    \        histogram[letter] = histogram.get(letter, 0) + 1\n\n    return histogram\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplsk5m7qi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplsk5m7qi.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplsk5m7qi.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vehz3sx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4vehz3sx.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4vehz3sx.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurrence = {}\n    for letter in test:\n        if\
    \ letter in occurrence:\n            occurrence[letter] += 1\n        else:\n\
    \            occurrence[letter] = 1\n    \n    return occurrence\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gtabn0q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp5gtabn0q.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5gtabn0q.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    freq = {}\n    for i in test:\n        if i in freq:\n\
    \            freq[i] += 1\n        else:\n            freq[i] = 1\n    return\
    \ freq\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdymqu2sj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdymqu2sj.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdymqu2sj.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n\n    for letter in test:\n        letters[letter]\
    \ = letters.get(letter, 0) + 1\n    \n    return letters\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr3tbvhe.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqr3tbvhe.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqr3tbvhe.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n</cell>\n<cell>\nhistogram('a b c')\n</cell>\n\
    <cell>\nhistogram('a b b a')\n</cell>\n<cell>\nhistogram('a b c a b')\n</cell>\n\
    <cell>\nhistogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n</cell>\n<text>\n\
    Problem 4\n\n</text>\n<text>\nWrite a function that takes a string and returns\
    \ the number of spaces between each character in the string.\nExample:\n'a b c'\
    \ -> 3\n'a b b a' -> 5\n'b b b b a' -> 9\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg5ksxn2t.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.split(' ')\n    histo = {}\n    for item\
    \ in test:\n        if item in histo:\n            histo[item] += 1\n        else:\n\
    \            histo[item] = 1\n\n    return histo\n\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oh4phnz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9oh4phnz.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9oh4phnz.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    return Counter(test).most_common()\n</cell>\n\
    <cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\n\
    histogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\n\
    histogram('')\n</cell>\n<text>\nPart 5: Problem 2\nWrite a function that can take\
    \ in a list of integers and returns the product of all the numbers.\n\nExample:\n\
    list_of_products([1, 2, 3, 4]) should return 24.\n\nHINT: You can use a for loop!\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpeb6ud5zb.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letters.sort(key = lambda\
    \ letter:letter)\n    letters_freq = Counter(letters)\n    letters_freq = sorted(letters_freq.items(),\
    \ key = lambda item: item[1], reverse = True)\n    return dict(letters_freq)\n\
    </cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('')\n</cell>\n<text>\nChallenge 3\n\n</text>\n<text>\nCreate\
    \ a function named print_permutations_sorted() that will take a string as input\
    \ and print all permutations of a given string.\nThe function should print each\
    \ permutation on a new line.\n\nExample\nprint_permutations_sorted(\"abc\") ==\
    \ \"a b c\"\nprint_permutations_sorted(\"aba\") == \"a b a\"\nprint_permutations_sorted(\"\
    abaa\") == \"a b a a\"\n\n</text>\n<cell>\nfrom collections import Counter\nfrom\
    \ itertools import permutations\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbuo1b_1s.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    letters = test.split()\n    for letter\
    \ in letters:\n        count = histo.get(letter)\n        histo[letter] = count\
    \ if count is not None else 1\n    return histo\n\ndef check(candidate):\n   \
    \ assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b\
    \ c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1,\
    \ 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1,\
    \ 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3h4tk8hb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3h4tk8hb.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3h4tk8hb.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.split()).most_common()\n</cell>\n\
    <cell>\nhistogram('a b c')\n</cell>\n<text>\nPal\xEDndromos de Pareto\n\n</text>\n\
    <cell>\nfrom collections import Counter\nfrom typing import List\nfrom sys import\
    \ maxsize\nfrom re import sub\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmps4q4kpx4.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = list(set(test.lower().split()))\n    letter_counts\
    \ = {}\n    for letter in letters:\n        if letter not in letter_counts:\n\
    \            letter_counts[letter] = 1\n        else:\n            letter_counts[letter]\
    \ += 1\n    return letter_counts\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkn7mj_r7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkn7mj_r7.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkn7mj_r7.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary to count the letters encountered\n\
    \    counts = {}\n\n    # Loop over the characters in the test string\n    for\
    \ letter in test:\n        # If letter hasn't been encountered yet\n        if\
    \ letter in counts:\n            # Increment the count for the letter\n      \
    \      counts[letter] += 1\n        else:\n            # Add a new letter to the\
    \ dictionary\n            counts[letter] = 1\n\n    # Return the dictionary counts\n\
    \    return counts\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9280llqy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9280llqy.py\", line 43,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9280llqy.py\", line 33,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = test.split()\n    letter_dict = {}\n\
    \    for l in letters:\n        if l in letter_dict:\n            letter_dict[l]\
    \ += 1\n        else:\n            letter_dict[l] = 1\n    return letter_dict\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryhbgxis.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpryhbgxis.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpryhbgxis.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurrence = {}\n    for letter in test.split():\n\
    \        occurrence[letter] = occurrence.get(letter, 0) + 1\n    \n    if occurrence:\n\
    \        max_occurrence = max(occurrence.values())\n        occurrence = {letter:\
    \ occurrence[letter] / max_occurrence for letter in occurrence}\n    return occurrence\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm995hggr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpm995hggr.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpm995hggr.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test.lower().split())\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwjjuom_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplwjjuom_.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplwjjuom_.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmplwjjuom_.py\"\
    , line 16, in histogram\n    return Counter(test.lower().split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n\n    for char in test:\n        if char\
    \ in letters:\n            letters[char] += 1\n        else:\n            letters[char]\
    \ = 1\n\n    return letters\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96_cpdh9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp96_cpdh9.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp96_cpdh9.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = list(test)\n    counts = dict()\n\n    for\
    \ letter in letters:\n        if letter not in counts:\n            counts[letter]\
    \ = 1\n        else:\n            counts[letter] += 1\n\n    return counts\n\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggu8jqmk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpggu8jqmk.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpggu8jqmk.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzby806oz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzby806oz.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzby806oz.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n    for letter in test:\n        if letter\
    \ in count:\n            count[letter] += 1\n        else:\n            count[letter]\
    \ = 1\n    return count\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1booc836.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1booc836.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1booc836.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = dict()\n    \n    for letter in test:\n  \
    \      if letter in result:\n            result[letter] += 1\n        else:\n\
    \            result[letter] = 1\n            \n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgoirmtiq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpgoirmtiq.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgoirmtiq.py\", line 28,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts: Dict[str, int] = dict()\n    for letter in\
    \ test:\n        if letter in counts:\n            counts[letter] += 1\n     \
    \   else:\n            counts[letter] = 1\n    \n    if \"\" in counts:\n    \
    \    del counts[\"\"]\n    \n    return counts\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdi6zlki.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptdi6zlki.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptdi6zlki.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    histo = {}\n    words = test.split()\n    for\
    \ word in words:\n        if word in histo:\n            histo[word] += 1\n  \
    \      else:\n            histo[word] = 1\n    return histo\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x5r8tzs.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1x5r8tzs.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1x5r8tzs.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n</cell>\n<text>\nQuestion 3\nImplement the function\
    \ count_occurrences(test: str) -> Dict[str, int]:\n    \"\"\"Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    count_occurrences('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    count_occurrences('a\
    \ b b a') == {'a': 2, 'b': 2}\n    count_occurrences('a b c a b') == {'a': 2,\
    \ 'b': 2}\n    count_occurrences('b b b b a') == {'b': 4}\n    count_occurrences('')\
    \ == {}\n\n    \"\"\"\n    pass\n</cell>\n<text>\nQuestion 4\nTest your implementation\
    \ by running the cell below.\n\n\n</text>\n<cell>\nhistogram(\"a b c a b a c d\
    \ e\")\n</cell>\n<cell>\ncount_occurrences(\"a b c a b a c d e\")\n</cell>\n<text>\n\
    Question 5\nWhat if all the letters are capitalized? What happens?\n\n\n</text>\n\
    <cell>\nhistogram(\"A B C D E F G\")\n</cell>\n<cell>\ncount_occurrences(\"A B\
    \ C D E F G\")\n</cell>\n<text>\nQuestion 6\nCreate a histogram with one letter\
    \ per line and print the most frequent letter in the second line. Print \"No letter\
    \ found\" if there are no occurrences.\n\nExpected output:\n\nA 1 \nB 1 \nC 1\
    \ \nNo letter found\nNo letter found\nNo letter found\nD 1 \nE 1 \nF 1 \nG 1 \n\
    No letter found\n\n</text>\n<cell>\nhistogram(\"A B C D E F G\")\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqyzkgrce.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    result = {}\n    for letter\
    \ in letters:\n        if letter not in result:\n            result[letter] =\
    \ 1\n        else:\n            result[letter] += 1\n    return result\n\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2akxqbo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpu2akxqbo.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpu2akxqbo.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letter_dict = {}\n    letters = test.split('\
    \ ')\n    for letter in letters:\n        if letter not in letter_dict:\n    \
    \        letter_dict[letter] = 1\n        else:\n            letter_dict[letter]\
    \ += 1\n    return letter_dict\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_otldx0c.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_otldx0c.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_otldx0c.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwq7mebx5.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary to store the histograms\n   \
    \ histogram = {}\n\n    # Parse the given string and update each letter occurrence\n\
    \    for char in test:\n        histogram.update({char: histogram.get(char, 0)\
    \ + 1})\n    \n    # Return the result dictionary\n    return histogram\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3pwxoni8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3pwxoni8.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3pwxoni8.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters_dict = {}\n    splitted = test.split()\n  \
    \  for s in splitted:\n        if s not in letters_dict:\n            letters_dict[s]\
    \ = 1\n        else:\n            letters_dict[s] += 1\n    return letters_dict\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rt_aqc9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_rt_aqc9.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_rt_aqc9.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    \n    letters = list(test)\n    counts = Counter(letters)\n\
    \    return {k: v for k, v in sorted(counts.items(), key=lambda t: -t[1])}\n</cell>\n\
    <cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\n\
    histogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\n\
    histogram('')\n</cell>\n<cell>\nhistogram('a a a')\n</cell>\n<cell>\nhistogram('a\
    \ a b a b c c a a c a')\n</cell>\n<cell>\nhistogram('a a b a b c c a a c a a a\
    \ b')\n</cell>\n<text>\nExercise: Implement a function that creates a histogram\
    \ of a string by splitting it into words based on the space character. \nThe output\
    \ should be a dictionary with the letter as the key and the number of times the\
    \ letter occurs as the value. \nThe letters should also be sorted from most frequently\
    \ to least frequently.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg84lgm81.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return Counter(test).most_common()\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfxrf5sa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqfxrf5sa.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqfxrf5sa.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpqfxrf5sa.py\"\
    , line 16, in histogram\n    return Counter(test).most_common()\nNameError: name\
    \ 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if\
    \ letter not in histogram:\n            histogram[letter] = 0\n        histogram[letter]\
    \ += 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr403azxq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr403azxq.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpr403azxq.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.lower().split():\n\
    \        if letter in result:\n            result[letter] += 1\n        else:\n\
    \            result[letter] = 1\n\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg49egy1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppg49egy1.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppg49egy1.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
