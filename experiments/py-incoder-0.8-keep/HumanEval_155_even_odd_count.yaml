name: HumanEval_155_even_odd_count
language: py
prompt: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n\
  \    \"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n\
  \        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
  \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
  \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) ==\
  \ (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1,\
  \ 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
completions: ["    evens = 0\n    odds = 0\n\n    while num != 0:\n        digit =\
    \ num % 10\n        if digit != 0:\n            if digit % 2 == 0:\n         \
    \       evens += 1\n            else:\n                odds += 1\n        num\
    \ = num // 10\n    return (evens, odds)\n", "    res = 0\n    for i in range(0,num//2):\n\
    \        res += 1 if num%i==0 else 0\n    for i in range(0,num//2+1):\n      \
    \  res += 1 if num%i==0 else 1\n    return res\n", "    even_count = 0\n    odd_count\
    \ = 0\n    while num > 1:\n        odd_count = odd_count + 1\n        num = num\
    \ // 10\n        if num == 0:\n            break\n    while num > 0:\n       \
    \ even_count = even_count + 1\n        num = num // 10\n        if num == 0:\n\
    \            break\n    return even_count, odd_count\n\n", "    even = 1\n   \
    \ odd = 1\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n\
    \        else:\n            odd += 1\n        num /= 10\n    return even, odd\n",
  "    count = 0\n    even = 0\n    odd = 0\n    while num != 0:\n        if num %\
    \ 2 == 0:\n            even = even + 1\n            num = num // 2\n        else:\n\
    \            odd = odd + 1 \n            num = num // 2\n    return (even, odd)\n\
    \n", "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num\
    \ % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n        num //= 10\n    return even_count, odd_count\n</cell>\n<cell>",
  "    even = 0\n    odd = 0\n    while num > 0:\n        if (num % 10) == 0:\n  \
    \          even += 1 \n        else:\n            odd += 1 \n        num = int(num\
    \ / 10)\n    return (even, odd)\n", "    even, odd = divmod(num, 10)\n    return\
    \ even, odd\n", "    even, odd = 1, 0\n\n    while num > 1:\n        num //= 10\n\
    \        odd += 1\n    if num > 0:\n        even += int(num)\n    return even,\
    \ odd\n", "    even = 0\n    odd = 0\n    num = abs(num)\n    while num > 0:\n\
    \        if (num % 2) == 0:\n            even += 1;\n        else:\n         \
    \   odd += 1;\n        num /= 10;\n    return (even, odd)\n", "    if num == 0:\n\
    \        return (0, 0)\n    else:\n        even = 0\n        odd = 0\n       \
    \ while num > 0:\n            if num % 2 == 0:\n                even += num %\
    \ 10\n            else:\n                odd += num % 10\n            num //=\
    \ 10\n        return (even, odd)\n\n", "    even, odd = 0, 1\n    while num >\
    \ 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n     \
    \       even += digit\n        else:\n            odd += digit\n    return even,\
    \ odd\n", "    even = 0\n    odd = 0\n    number_in_str = str(num)\n    number_list\
    \ = list(number_in_str)\n    for digit in number_list:\n        if int(digit)\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n", "    even_count = 0\n    odd_count = 0\n    while num > 0:\n\
    \        last_digit = num % 10\n        if last_digit % 2 == 0:\n            even_count\
    \ = even_count + 1\n        else:\n            odd_count = odd_count + 1\n   \
    \     num = num // 10\n\n    return even_count, odd_count\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "    if num % 2 == 0:\n        return 0, 1\n    return\
    \ 1, 0\n</cell>\n<cell>", "    if num < 0:\n        raise ValueError(\"Argument\
    \ must be positive\")\n    elif num == 0:\n        return (0, 0)\n    else:\n\
    \        digit_list = []\n        even_count = 0\n        odd_count = 0\n    \
    \    while num > 0:\n            digit_list.append(num % 10)\n            num\
    \ = num // 10\n        for num in digit_list:\n            if num % 2 == 0:\n\
    \                even_count += 1\n            else:\n                odd_count\
    \ += 1\n        return (even_count, odd_count)\n</cell>\n<cell>\neven_odd_count(-12)\n\
    </cell>\n<cell>\neven_odd_count(123)\n</cell>\n<text>\nWrite a function that takes\
    \ a positive integer and returns the sum of all its digits.\n\nExample: given\
    \ 1234, return 4+3+2+1+4 = 15\n\n\n</text>\n<cell>", "    even_count = 0\n   \
    \ odd_count = 0\n    while num:\n        odd_count += num // 10\n        num =\
    \ num - (odd_count * 10)\n        even_count += num // 10\n        num = num -\
    \ (even_count * 10)\n    return (even_count, odd_count)\n\n", "    count = 0\n\
    \    odd_count = 0\n    while num > 0:\n        if num % 2 == 1:\n           \
    \ count += 1\n        odd_count += 1\n        num = int(num / 2)\n    return (count,\
    \ odd_count)\n", "    even_odd_count = dict()\n    while num > 0:\n        last_digit\
    \ = num % 10\n        if last_digit in even_odd_count:\n            even_odd_count[last_digit]\
    \ += 1\n        else:\n            even_odd_count[last_digit] = 1\n        num\
    \ //= 10\n    return (even_odd_count[1], even_odd_count[0])\n", "    even_digit\
    \ = 0\n    odd_digit = 0\n    even_count = 0\n    odd_count = 0\n    while num\
    \ > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count\
    \ += 1\n            even_digit += digit\n            num //= 10\n        else:\n\
    \            odd_count += 1\n            odd_digit += digit\n            num //=\
    \ 10\n    return (even_count, odd_digit)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
