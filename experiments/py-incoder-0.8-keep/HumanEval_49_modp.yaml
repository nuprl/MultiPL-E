name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if p == 0:\n        raise ZeroDivisionError('modp(0, p) undefined')\n\
    \    if p == n:\n        return p\n    if n < 0:\n        raise ValueError(f'negative\
    \ modulus')\n    if n == 0:\n        return 0\n\n    if n % p == 0:\n        return\
    \ p - (n % p)\n    m //= p\n    if m % n == 0:\n        return m % n\n    if m\
    \ % p == 0:\n        return m % p\n    p //= 2\n    if n % p == 0:\n        return\
    \ p - (n % p)\n    return 0\n\n", "    return 2 ^ n if n & (n - 1) else 0 ^ n\n\
    \n", "    if n == 0:\n        return 0\n    if p == 0:\n        return n\n   \
    \ if p > n:\n        p = n\n    if p < 0:\n        p = -p\n    return p\n\n",
  "    if n == 0:\n        return 0\n    ret = pow(2, n, p)\n    if ret < p:\n   \
    \     ret += 1\n    return ret\n\n", "    if not n and not p:\n        return\
    \ 0\n    elif not n:\n        return p\n    elif not p:\n        return n\n  \
    \  if n < 0:\n        n += p\n    if p < 0:\n        p += n\n    if n == 0:\n\
    \        return p\n    if p == 0:\n        return n\n    return p - ((p // n)\
    \ * n)\n", "    assert isinstance(n, int)\n    assert isinstance(p, int)\n   \
    \ assert n >= 0\n    assert p >= 0\n    if n == 0:\n        return 0\n    if p\
    \ == 0:\n        return n\n    if n == 1:\n        return p\n    if p == 1:\n\
    \        return n\n    if n == p and p % 2 == 1:\n        return n - 1\n    if\
    \ n > 0 and p % 2 == 0:\n        return modp(n - 1, p)\n    if n == 0 and p %\
    \ 2 == 0:\n        return n\n    if n == 1:\n        return p\n    if p == 1:\n\
    \        return n\n    if n == p and p % 2 == 1:\n        return n - 1\n    if\
    \ n == 0 or p == 1:\n        return n\n    if p == 1 or p == 2:\n        return\
    \ p\n    if p % 3 == 0 and n % 3 == 0:\n        return p + 1 if (n - p) % 3 ==\
    \ 0 else n\n    if p % 3 == 0:\n        return p if (n - p) % 3 == 0 else n\n\
    \    if n % 3 == 0:\n        return p + 1 if (n - p) % 3 == 0 else n\n    if p\
    \ % 5 == 0 and n % 5 == 0:\n        return p + 1 if (n - p) % 5 == 0 else n\n\
    \    if p % 5 == 0:\n        return p if (n - p) % 5 == 0 else n\n    if n % 5\
    \ == 0:\n        return p + 1 if (n - p) % 5 == 0 else n\n    if p % 7 == 0 and\
    \ n % 7 == 0:\n        return p + 1 if (n - p) % 7 == 0 else n\n    if p % 7 ==\
    \ 0:\n        return p if (n - p) % 7 == 0 else n\n    if n % 7 == 0:\n      \
    \  return p + 1 if (n - p) % 7 == 0 else n\n\n", "    return -(-n).bit_length()\
    \ % p\n", "    return ((n % p) + p) % p\n\n", "    if n == 0:\n        return\
    \ 0\n    prod = 1\n    while n % p == 0:\n        prod*=p\n        n //= p\n \
    \   return prod\n", "    if n == 0:\n        return 0\n    ret = n\n    while\
    \ p != 0:\n        if (p&1) != 0:\n            ret = ret | (n>>p)\n        n =\
    \ n & (p-1)\n        p = p >> 1\n    return ret\n", "    # http://oeis.org/A000070\n\
    \    ans = 0\n    while n > 0:\n        ans = (ans * p + n) % p\n        n //=\
    \ p\n    return ans\n\n", "    if n == 0:\n        return p\n    if n == 1:\n\
    \        return p\n    n -= 1\n    # n == 3\n    p *= 2\n    p %= p\n    if n\
    \ == 0:\n        return p\n    if n == 1:\n        return p\n    # n == 2\n  \
    \  p *= 2\n    p %= p\n    return p\n\n", "    return pow(2, n, p)\n\n", "   \
    \ if not n:\n        return 0\n    d, r = divmod(n, p)\n    if d:\n        return\
    \ r\n    else:\n        return p\n", "    if not isinstance(n, int):\n       \
    \ raise TypeError(\"modulus not an integer\")\n    if not isinstance(p, int):\n\
    \        raise TypeError(\"modulus not an integer\")\n    if n == 0:\n       \
    \ return 1\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n\
    \    if p % 2 == 0:\n        return modp(n >> 1, p // 2)\n    if p % 3 == 0:\n\
    \        return modp(n >> 1, (p - 1) // 3)\n    if p % 5 == 0:\n        return\
    \ modp(n >> 1, (p - 1) // 5)\n    return modp(n >> 1, p - 1)\n\n", "    n, p =\
    \ int(n), int(p)\n    factor = 1\n    if p == 0:\n        return factor\n    while\
    \ n > 0:\n        if n % p == 0:\n            n //= p\n        else:\n       \
    \     p = 0\n            factor *= p\n    if n == 1:\n        return factor\n\
    \    return n\n", "    if n % p == 0:\n        return n\n    else:\n        return\
    \ modp(n // p, p) % p\n\n", "    modp = 2**n\n    return p & modp or p & -modp\n",
  "    if not p:\n        return n\n    if n == 0:\n        return 0\n    if n < 0:\n\
    \        raise ValueError(\"The modulus cannot be negative\")\n    d, r = divmod(n,\
    \ p)\n    if d:\n        return p\n    return r\n\n", "    return pow(2, n, p)\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
