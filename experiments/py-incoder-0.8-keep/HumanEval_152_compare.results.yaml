name: HumanEval_152_compare
language: py
results:
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    \n    guesses = [float(i) for i in guess]\n    \n    scores\
    \ = [float(i) for i in game]\n    \n    distances = [abs(i-g) for i,g in zip(scores,\
    \ guesses) ]\n    \n    return distances\n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    scores = [game[i]-guess[i] for i in range(len(game))]\n\
    \    guesses = [game[i]-guess[i] for i in range(len(game))]\n    \n    total =\
    \ 0\n    \n    for i in range(len(guesses)):\n        if guesses[i] == guesses[i]:\n\
    \            total += guesses[i]\n        else:\n            total += abs(guesses[i])\n\
    \            \n    return total\n    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\
    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n</cell>\n<cell>\nfrom typing import\
    \ List\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpch4jtxad.py\", line 34\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphsnspda1.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    # your code here\n    i = 0\n    j = 0\n    diff = []\n    while\
    \ i < len(game) and j < len(guess):\n        if game[i] != guess[j]:\n       \
    \     diff.append(abs(game[i] - guess[j]))\n            j += 1\n        else:\n\
    \            i += 1\n            j = 0\n    if len(game) < len(guess):\n     \
    \   diff += [0] * (len(guess) - len(game))\n    elif len(guess) < len(game):\n\
    \        diff += [0] * (len(game) - len(guess))\n    return diff\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7f26e8b.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpp7f26e8b.py\", line 42,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmpp7f26e8b.py\", line 36,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    scores = [x==y for x, y in zip(game, guess)]\n    return list(map((lambda\
    \ x: x if x == 0 else abs(x)), scores))\n\nassert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\nassert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    \n\"\"\"\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpicclv86d.py\", line 36\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    # Your code here\n    diff = []\n    for a,b in zip(game,guess):\n\
    \        if a!=b:\n            diff.append(abs(a-b))\n        else:\n        \
    \    diff.append(0)\n    return diff\n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    return compare3(game,guess)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpliol8dxq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpliol8dxq.py\", line 27,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmpliol8dxq.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\n  File \"/tmp/tmpliol8dxq.py\", line 18, in compare\n    return\
    \ compare3(game,guess)\nNameError: name 'compare3' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jgzyvcz.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmp_jgzyvcz.py\", line 282,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp_jgzyvcz.py\", line 276,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    if len(game) != len(guess):\n        return []\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflhh0a1k.py\", line\
    \ 281, in <module>\n    test_check()\n  File \"/tmp/tmpflhh0a1k.py\", line 279,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmpflhh0a1k.py\", line 273,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    pass\n</cell>\n<text>\n3. Longest Subsequence Problem\n\
    The longest subsequence is the longest sequence of elements that appear in some\
    \ sequence multiple times, at least as many times as in some other sequence. For\
    \ example, \"AABB\" is the longest subsequence of the string \"AAABBBCCCCC\",\
    \ since \"AABB\" is contained 3 times both in \"AAABBBCCCCC\" and \"CCCCC\" but\
    \ 4 times only in \"AAABBBCCCCC\".\n\nThe subsequence function takes in a sequence\
    \ and an index, and returns a list of indexes of all the subsequences starting\
    \ at the given index. For example, if the sequence is \"ABABB\", and our index\
    \ is 1, the function will return [1,2,2]. We will need to return the longest subsequence\
    \ for the whole list, and we will need a list of indexes to keep track of which\
    \ subsequences we have already encountered.\n\nYour task is to use the subsequence\
    \ function to find the longest subsequence for the whole string. We've already\
    \ done the coding to find longest subsequence for the whole string, so we'll only\
    \ need to worry about the implementation of the subsequence function.\n\nThere\
    \ are two ways to implement a subsequence function. You can either use a for loop\
    \ to iterate through each character in the string, tracking the current starting\
    \ index and current subsequence, or you can use a more functional approach where\
    \ you use filter to extract all the subsequences of the string, and then use max\
    \ to find the longest subsequence of the extracted subsequences. Implement whichever\
    \ approach is more efficient for your purposes.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsh6z9u9e.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    # Your code here\n    scores = [score for score in game]\n\
    \    guesses = [guess for  guess in guess]\n    \n    correct = 0\n    for i in\
    \ range(len(guesses)):\n        if guesses[i] == scores[i]:\n            correct\
    \ += 1\n    return correct\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph69be73r.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph69be73r.py\", line 37,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmph69be73r.py\", line 31,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    # Your code here\n    for i in range(len(game)):\n        game[i]\
    \ = abs(game[i] - guess[i])\n    for i in range(len(guess)):\n        guess[i]\
    \ = abs(guess[i] - game[i])\n    return guess\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlx_xcz1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprlx_xcz1.py\", line 32,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmprlx_xcz1.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    # Your code here\n    correct_guesses = []\n    for i in\
    \ range(len(guess)):\n        difference = abs(guess[i] - game[i])\n        if\
    \ difference < abs(guess) and difference < abs(guess[i]):\n            correct_guesses.append(difference)\n\
    \    return correct_guesses\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95b0507y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp95b0507y.py\", line 34,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp95b0507y.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\n  File \"/tmp/tmp95b0507y.py\", line 23, in compare\n    if\
    \ difference < abs(guess) and difference < abs(guess[i]):\nTypeError: bad operand\
    \ type for abs(): 'list'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError('game.length\
    \ != guess.length')\n    res = [0 for i in range(0, len(guess))]\n    for i in\
    \ range(0, len(game)):\n        for j in range(0, len(guess)):\n            if\
    \ guess[j] == game[i]:\n                res[j] = 0\n            else:\n      \
    \          res[j] = abs(guess[j] - game[i])\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvg5labt2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvg5labt2.py\", line 36,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmpvg5labt2.py\", line 30,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    return list(map(lambda i,j: (abs(i-j), i), game, guess))\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3aut9xf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk3aut9xf.py\", line 28,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmpk3aut9xf.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    \n    if len(game) != len(guess):\n        raise ValueError(f'Game\
    \ and guess arrays must have same length')\n    \n    guess_scores = [abs(game[i]\
    \ - guess[i]) for i in range(len(game))]\n    guess_scores.append(0)\n    return\
    \ guess_scores\n</cell>\n<text>\nTesting your solution\n\n</text>\n<cell>\ngame\
    \ = [1, 2, 3, 4, 5]\nguess = [1, 2, 3, 4, 2]\n</cell>\n<cell>\nguess_scores =\
    \ compare(game, guess)\nprint(guess_scores)\n</cell>\n<cell>\nassert guess_scores[0]\
    \ == 0, 'Wrong first guess is incorrect'\nassert guess_scores[1] == 3, 'Wrong\
    \ second guess is incorrect'\nassert guess_scores[2] == 4, 'Wrong third guess\
    \ is incorrect'\n</cell>\n<text>\nWhat happens when there are multiple correct\
    \ guesses?\n\n</text>\n<cell>\ngame = [1, 2, 3, 4, 5]\nguess = [1, 2, 3, 4, 2,\
    \ 1]\n</cell>\n<cell>\nguess_scores = compare(game, guess)\nprint(guess_scores)\n\
    </cell>\n<cell>\nassert guess_scores[0] == 0, 'Wrong first guess is incorrect'\n\
    assert guess_scores[1] == 3, 'Wrong second guess is incorrect'\nassert guess_scores[2]\
    \ == 4, 'Wrong third guess is incorrect'\nassert guess_scores[3] == 5, 'Wrong\
    \ fourth guess is incorrect'\n</cell>\n<text>\nWhen there are multiple correct\
    \ guesses, it makes sense to return a higher-score for the first guess, because\
    \ that's how we know we got the right answer after all.\nLet's do that:\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdjdee1ub.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpibz13dyy.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    \n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpna37ay61.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    # your code here\n    if game == guess:\n        result = 0\n\
    \    else:\n        result = np.abs(guess[game] - game)\n    return result\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpka4a6adg.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    \"\"\"\n    if guess == game:\n        return [0]\n    \n    \n    \n   \
    \ \n    return [-abs(guess[i] - game[i]) for i in range(len(game))]\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyrk8rbx8.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
