name: HumanEval_151_double_the_difference
language: py
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\
  \    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2])\
  \ == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty,\
  \ return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    count = 0\n    \n    if len(lst) == 0:\n        return 0\n    else:\n\
    \        count = sum(\n            [\n                lst[i] ** 2 \n         \
    \       for i in range(0, len(lst))\n                if lst[i] % 2 != 0\n    \
    \        ]\n        )\n        \n    return count\n</cell>\n<cell>", "    \n \
    \   total = 0\n    \n    if lst:\n        for number in lst:\n            if number\
    \ > 0 and not isinstance(number, int):\n                total += number**2\n \
    \           elif number < 0:\n                total += 0\n            else:\n\
    \                total += 0\n    return total\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\nMy solution using Python's builtins:\n<code>", "    return sum(map(lambda\
    \ x: x*x, filter(lambda i: i % 2 != 0, lst)))\n", "    even = []\n    odd = []\n\
    \    for x in lst:\n        if x % 2 != 0:\n            even.append(x)\n     \
    \   else:\n            odd.append(x)\n    \n    return sum([x*x for x in odd if\
    \ x%2 == 1]) + sum(even)\n</code>\n<|/ a tags=python-3.x,python |>\n<| c |>\n\
    Thanks everyone for all the suggestions. I ran this on my local machine and found\
    \ that it was fast enough for my needs.\n<|/ c |>\n<| c |>\nYou're welcome.  I\
    \ hope you enjoy the `numpy` package if you end up wanting to work with large\
    \ arrays.\n<|/ c |>\n<| a tags=python-3.x,python |>\nA pure Python3 approach,\
    \ using only a list comprehension:\n<code>", "    count = 0\n    for i in lst:\n\
    \        if i%2 != 0:\n            count = count + i**2\n    return count\n",
  "    \n    sum = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n      \
    \      sum += num\n    \n    return sum if sum else 0\n    ", "    \n    # code\
    \ here\n    \n    return 0\n</cell>\n<cell>", "    if not lst:\n        return\
    \ 0\n    \n    odd_sum = 0\n    for x in lst:\n        if x % 2 == 0:\n      \
    \      odd_sum += x\n    return odd_sum\n", "    if lst:\n        even_squared\
    \ = sum([x**2 for x in lst if x % 2 == 0])\n        odd_squared = sum([x**2 for\
    \ x in lst if x % 2 == 1])\n        return even_squared + odd_squared \n", " \
    \   \n    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst:\n        if i % 2 == 0:\n            sum += i\n            \n    return\
    \ sum\n ", "    if len(lst) == 0:\n        return 0\n    else:\n        sum =\
    \ 0\n        for num in lst:\n            if num % 2 != 0:\n                sum\
    \ += num**2\n        return sum\n", "    \n    return sum(filter(lambda x: x %\
    \ 2 == 1, lst))\n", "    if len(lst) == 0:\n        return 0\n    else:\n    \
    \    odd = [x for x in lst if x % 2 != 0]\n        return sum(x for x in lst if\
    \ x % 2 == 0) * sum(x for x in odd)\n</cell>\n<cell>", "    \n    if len(lst)\
    \ == 0:\n        return 0\n    \n    s = 0\n    for num in lst:\n        if num\
    \ % 2 == 0:\n            s += num\n            \n    return s\n", "    if not\
    \ lst:\n        return 0\n    \n    i = 0\n    s = 0\n    \n    while i < len(lst):\n\
    \        if lst[i] % 2 == 0:\n            s += lst[i]\n        i += 1\n\n    return\
    \ s\n</cell>\n<cell>", "    \n    if not lst:\n        return 0\n    \n    return\
    \ sum( (x*x for x in lst) ) - lst[-1] % 2 - double_the_difference(lst[:-1])\n",
  "    # Your code here\n    return sum(map(lambda x: x ** 2 if x%2==0 else 0, lst))\n\
    \n\n\"\"\"\nDouble the difference problem\n\"\"\"", "    sum = 0\n    for i in\
    \ lst:\n        if i % 2 != 0:\n            sum += i ** 2\n    return sum\n",
  "    return sum(map(lambda x : (x % 2 == 0) and (x**2) or 0, lst))\n", "    \n \
    \   if lst == []:\n        return 0\n    else:\n        return sum(lst[i] for\
    \ i in lst[::2]) + sum(lst[i] for i in lst[1::2]) \n    "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
