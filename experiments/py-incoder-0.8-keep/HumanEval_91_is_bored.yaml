name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
  The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["    count = 0\n    for word in S:\n        if word[0] == 'I':\n   \
    \         count += 1\n    return count\n\n", "    boredoms = []\n    bored = 0\n\
    \    for word in S.split():\n        if word.lower() == 'i':\n            bored\
    \ += 1\n            boredoms.append(word)\n    return len(boredoms)\n\n", "  \
    \  boredoms = 0\n    for s in S.split('.'):\n        if s[0] == \"I\":\n     \
    \       boredoms += 1\n    return boredoms\n</code>\nTest the function on your\
    \ test cases:\n<code>", "    boreds = 0\n    for w in S.split():\n        if w.startswith('I'):\n\
    \            boreds += 1\n    return boreds\n", "    return 1 if S == \"I\" or\
    \ S == \"i\" or S == \"hey\" or S == \"he\" or S == \"lol\" or S == \"lmao\" or\
    \ S == \"lma\xFD\" or S == \"ma\xFD\" or S == \"na\xFD\" or S == \"na\xFDy\" or\
    \ S == \"i\" or S == \"ay\" or S == \"aye\" or S == \"ay\xE9\" or S == \"yeah\"\
    \ or S == \"y\xFD\" or S == \"y\xFC\xFDy\" or S == \"y\xFC\xFDye\" or S == \"\xFD\
    \" or S == \"y\xFC\xFDye\" or S == \"\xFDy\" or S == \"\xFDye\" or S == \"\xFD\
    yeh\" or S == \"y\xFC\xFDyeh\" or S == \"y\xFC\xFD\xFDyeh\" or S == \"y\xFC\xFD\
    \xFDyh\" or S == \"y\xFC\xFD\xFDyhe\" or S == \"\xFD\xFD\" or S == \"\xFD\xFD\
    y\" or S == \"\xFD\xFDyeh\" or S == \"y\xFC\xFD\xFDyhe\" or S == \"y\xFC\xFD\xFD\
    y\xFDyeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFD\
    yh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDyh\"\
    \ or S == \"y\xFC\xFD\xFDy\xFD\xFDyeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDyeh\"\
    \ or S == \"y\xFC\xFD\xFDy\xFD\xFDyhe\" or S == \"\xFD\xFD\xFD\" or S == \"\xFD\
    \xFD\xFDy\" or S == \"\xFD\xFD\xFDyeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDyeh\"\
    \ or S == \"y\xFC\xFD\xFDy\xFD\xFDy\xFDeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDy\xFD\
    yh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDy\xFDeh\" or S == \"y\xFC\xFD\xFDy\xFD\xFD\
    y\xFDyh\" or S == \"y\xFC\xFD\xFDy\xFD\xFDy\xFDyeh\" or S == \"y\xFC\xFD\xFDy\xFD\
    \xFDy\xFDyhe\" or S == \"y\xFC\xFD\xFDy\xFD\xFDy\uFFFD", "    count = 0\n    for\
    \ word in S:\n        if word.startswith(\"I\"):\n            count += 1\n   \
    \ return count\n\n", "    return len(list(filter(lambda x: x[0]=='I', S.split('.'))))\n",
  "    boredoms = {\n        \".\": 1, \"?\": 1, \n        \"!\": 1, \n        \"\
    I\": 1, \n        \".\": 1, \"?\": 1, \"!\": 1, \n        \"I\": 1, \n       \
    \ \".\": 1, \"?\": 1, \"!\": 1, \"I\": 1, \n        \".\": 1, \"?\": 1, \"!\"\
    : 1, \"I\": 1, \n        \".\": 1, \"?\": 1, \"!\": 1, \"I\": 1\n    }\n    boredom_count\
    \ = sum([boredoms[char] for char in S])\n    return boredom_count\n\n", "    bored_words\
    \ = 0\n    for word in S.split():\n        if word == \"I\":\n            bored_words\
    \ += 1\n    return bored_words\n\n", "    count = 0\n    for i in range(len(S)):\n\
    \        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            count += 1\n\
    \    return count\n\n", "    bored_words = {'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', '", "    return sum(1 for word in S.lower().split() if word\
    \ == \"i\")\n", "    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            boredoms += 1\n    return boredoms\n", "    \n    bored = 0\n\
    \    \n    bored = bored + (1 if S[0] == 'I' else 0)\n    \n    bored = bored\
    \ + (1 if '.' in S else 0)\n    bored = bored + (1 if '?' in S else 0)\n    bored\
    \ = bored + (1 if '!' in S else 0)\n    \n    return bored\n    ", "    boredoms\
    \ = 0\n    \n    split_words = [word for word in S.split() if word.startswith('I')]\n\
    \    for word in split_words:\n        if '?' in word:\n            boredoms +=\
    \ 1\n        elif '!' in word:\n            boredoms += 1\n    return boredoms\n\
    \n", "    \n    boredoms = 0\n    \n    # Your code here\n    \n    return boredoms\n\
    \n", "    return sum([s[0]=='I' for s in S.split(\".\")])\n", "    sentences =\
    \ S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        for\
    \ word in sentence.split():\n            if word.startswith(\"I\"):\n        \
    \        boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    words\
    \ = list(S.split())\n    for word in words:\n        if word.lower().startswith('i'):\n\
    \            boredoms += 1\n    return boredoms\n", "    boredoms = 0\n    for\
    \ word in S.split():\n        if word.startswith('I'):\n            boredoms +=\
    \ 1\n    return boredoms\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
