name: HumanEval_36_fizz_buzz
language: py
prompt: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit\
  \ 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n\
  \    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
  \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
  \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
  \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
  \ntest_check()\n"
completions: ["    return sum(bool(n % 11 or n % 13) for n in range(1, n))\n\n", " \
    \   if n <= 100:\n        return n // 11 * 3 + (n % 11) * 3\n    elif n <= 1000:\n\
    \        return n // 13 * 3 + (n % 13) * 3\n    else:\n        return 0\n\n",
  "    i = 0\n    while i * 10 + int(n % 10) < n:\n        i += 1\n    if i % 13 ==\
    \ 0:\n        return i\n    return 0\n\n", "    if n % 11 == 0:\n        return\
    \ n\n    elif n % 13 == 0:\n        return n + 1\n    return fizz_buzz(n//10)\
    \ + n%10\n\n", "    if n % 11 == 0 and n % 13 == 0:\n        return 0\n    if\
    \ n % 11 == 0:\n        return 2\n    if n % 13 == 0:\n        return 3\n    return\
    \ 0\n\n", "    return count_digits(n) - (count_digits(n // 10) * count_digits(n\
    \ % 10))\n\n", "    if n % 11 == 0:\n        if n % 13 == 0:\n            return\
    \ 0\n        elif n % 13 != 0:\n            return 1\n    return 2\n\n", "   \
    \ if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n\
    \        return fizz_buzz(n // 10) + fizz_buzz(n % 10)\n\n", "    if n % 11 ==\
    \ 0 or n % 13 == 0:\n        return 0\n    return 1\n\n", "    if n % 11 == 0\
    \ and n % 13 == 0:\n        return 0\n    elif n % 11 == 0:\n        return 2\n\
    \    elif n % 13 == 0:\n        return 3\n    else:\n        return 1\n\n", " \
    \   if n % 11 == 0:\n        return n // 11\n    elif n % 13 == 0:\n        return\
    \ n // 13\n    else:\n        return 1\n\n", "    if n % 10 == 0 and n % 100 !=\
    \ 0 or n % 10 == 7:\n        return 0\n    elif n % 10 == 0 and n % 100 == 0 or\
    \ n % 10 == 11 or n % 10 == 13:\n        return 1\n    else:\n        return fizz_buzz(n//10)\n\
    \n", "    count = 0\n    while n % 11 == 0 or n % 13 == 0:\n        if n % 11\
    \ == 0:\n            count += 1\n            n //= 11\n        if n % 13 == 0:\n\
    \            count += 1\n            n //= 13\n    return count\n\n", "    if\
    \ n % 11 == 0 or n % 13 == 0:\n        return n\n    elif n % 11 != 0 and n %\
    \ 13 != 0:\n        return n\n    else:\n        return fizz_buzz(n // 11) + fizz_buzz(n\
    \ // 13)\n\n", "    return fizz_buzz_helper(n - 1, 11, 13) if n % 2 == 0 else\
    \ fizz_buzz_helper(n - 1, 13, 11)\n\n", "    return 0 if (n % 11 == 0 and n %\
    \ 13 == 0) or (n % 11 != 0 and n % 13 != 0) else 1\n\n", "    if n % 11 == 0:\n\
    \        return fizz_buzz(n // 11) + 1\n    elif n % 13 == 0:\n        return\
    \ fizz_buzz(n // 13) + 1\n    elif n % 7 == 0:\n        return 0\n    else:\n\
    \        return 1\n\n", "    if n % 11 == 0 or n % 13 == 0:\n        return 0\n\
    \    return 1\n\n", "    result = 0\n    if n % 11 == 0:\n        result += 1\n\
    \    if n % 13 == 0:\n        result += 1\n    if result > 0:\n        return\
    \ result\n    return 0\n\n", "    count = 0\n    while n >= 11:\n        if n\
    \ % 11 == 7:\n            count += 1\n        n //= 11\n    while n >= 13:\n \
    \       if n % 13 == 7:\n            count += 1\n        n //= 13\n    return\
    \ count\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
