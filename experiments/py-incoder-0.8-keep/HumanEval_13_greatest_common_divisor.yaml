name: HumanEval_13_greatest_common_divisor
language: py
prompt: "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a\
  \ greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3,\
  \ 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10,\
  \ 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) ==\
  \ 12\n\ndef test_check():\n    check(greatest_common_divisor)\n\ntest_check()\n"
completions: ["    gcd_iter = a\n    while(True):\n        if b % gcd_iter == 0:\n\
    \            return gcd_iter\n        gcd_iter += 1\n\n", "    # https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \    while b != 0:\n        a, b = b, a % b\n    return a\n\n", "    while b >\
    \ 1:\n        if b & 1:\n            a = max(a, b)\n        b >>= 1\n    return\
    \ a\n\n", "    if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n  \
    \  while a != 0:\n        if a % b == 0:\n            return b\n        a //=\
    \ b\n    return a\n\n", "    if b == 0:\n        return a\n    elif a == 0:\n\
    \        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\
    \n", "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b,\
    \ a % b)\n\n", "    while a != 0 and b != 0:\n        if a > b:\n            a\
    \ = a % b\n        else:\n            b = b % a\n    return a\n\n", "    a = abs(a)\n\
    \    b = abs(b)\n    if b == 0:\n        return a\n    if a == 0:\n        return\
    \ b\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n", "    return\
    \ a * b // gcd(a, b)\n\n", "    return a * b / gcd(a, b)\n\n", "    while b:\n\
    \        a, b = b, a % b\n    return a\n\n", "    q = a // b\n    r = a % b\n\
    \    while r != 0:\n        q = q + 1\n        r = b\n        b = b // r\n   \
    \ return q\n\n", "    if a < b:\n        a, b = b, a\n    while b:\n        a,\
    \ b = b, a%b\n    return a\n\n", "    while a > 0:\n        a, b = b // a, a\n\
    \    return b\n\n", "    while b > 0 and a > b:\n        a, b = b, a % b\n   \
    \ return a\n", "    \n    # Compute the GCD\n    GCD = math.gcd(a, b)\n    \n\
    \    # Check if a is divisible by GCD\n    if a % GCD != 0:\n        GCD -= 1\n\
    \        \n    # Check if the b is divisible by GCD\n    if b % GCD != 0:\n  \
    \      GCD -= 1\n        \n    return GCD\n\n", "    return zgcd(a, b)[0]\n\n",
  "    gcd = math.gcd(a, b)\n    if gcd == 0:\n        return a\n    else:\n     \
    \   return b\n\n", "    if b == 0:\n        return a\n    if a % b == 0:\n   \
    \     return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a,\
    \ b)\n\n", "    a, b = abs(a), abs(b)\n    g, x, y = 1, a, b\n    while b:\n \
    \       a, b = b, a % b\n        g, x, y = y, g, x - (b // a) * y\n    return\
    \ x if g == a else y\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
