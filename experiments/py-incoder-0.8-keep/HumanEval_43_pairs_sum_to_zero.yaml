name: HumanEval_43_pairs_sum_to_zero
language: py
prompt: "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n\
  \    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it\
  \ returns True if there are two distinct elements in the list that\n    sum to zero,\
  \ and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n   \
  \ >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1,\
  \ 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n\
  \    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert\
  \ candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n\
  \    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) ==\
  \ False\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3,\
  \ 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n\
  \    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ndef test_check():\n   \
  \ check(pairs_sum_to_zero)\n\ntest_check()\n"
completions: ["    l = sorted(l)\n    s = 0\n    for i in range(len(l)-1):\n     \
    \   s += l[i]\n        if s == 0 and l[i+1] != 0:\n            return True\n \
    \       if l[i] == 0 and s != 0:\n            return True\n    return False\n",
  "    pairs = []\n    \n    i = 0\n    \n    while i < len(l):\n        if l[i] +\
    \ l[i+1] == 0:\n            pairs.append((l[i], l[i+1]))\n            i += 2\n\
    \        else:\n            i += 1\n            \n    return len(pairs) == 2\n",
  "    count = 0\n    for item in l:\n        if item != 0:\n            count +=\
    \ 1\n            if count > 1:\n                return True\n    return False\n",
  "    pair_list = []\n    zero_list = []\n    \n    for num in l:\n        if num\
    \ > 0 and not num in pair_list:\n            pair_list.append(num)\n        elif\
    \ num == 0 and num in zero_list:\n            return True\n        elif num >\
    \ 0 and num in pair_list:\n            zero_list.append(num)\n    return False\n\
    </cell>\n<cell>", "    pairs = []\n    l = sorted(l)\n    l_len = len(l)\n   \
    \ for e in l:\n        for i in range(len(l)-1):\n            if e - l[i] < 0:\n\
    \                if pairs and pairs[-1][1] != l[i]:\n                    return\
    \ False\n                pairs.append((l[i], e))\n                break\n    \
    \        else:\n                if pairs and pairs[-1][1] != l[i]:\n         \
    \           return False\n    return True\n    ", "    l = sorted(l)\n    s =\
    \ 0\n    for i in range(len(l)):\n        s += l[i]\n        if s == 0:\n    \
    \        return True\n    return False\n", "    answer = 0\n    for i in l:\n\
    \        answer += i\n    return answer == 0\n", "    i = 0\n    j = 0\n    while\
    \ i < len(l) and j < len(l):\n        if l[i] + l[j] >= 0:\n            i += 1\n\
    \        else:\n            j += 1\n    if i == len(l):\n        return True\n\
    \    elif i == 0 and j == 0:\n        return False\n    else:\n        return\
    \ pairs_sum_to_zero(l[i:-1])\n", "    return len(l) == 0 or min(l) == max(l) or\
    \ sum(l) == 0\n    ", "    if l == []:\n        return False\n    else:\n    \
    \    l.sort()\n        pair_sums_to_zero = 0\n        for i in range(len(l)):\n\
    \            pair_sums_to_zero += l[i]\n            for j in range(i, len(l)):\n\
    \                pair_sums_to_zero -= l[j]\n                if pair_sums_to_zero\
    \ == 0:\n                    return True\n                break\n        break\n\
    \    return False\n", "    sum_lst = 0\n    i = 0\n    \n    while i < len(l):\n\
    \        if sum_lst + l[i] < 0:\n            return False\n        sum_lst = sum_lst\
    \ + l[i]\n        i += 1\n    \n    return True\n", "    \n    # Your code here\n\
    \    pass\n</cell>\n<cell>", "    zeros = 0\n    for a in l:\n        if a==0:\n\
    \            zeros+=1\n            if zeros > 1:\n                return True\n\
    \    return False\n", "    if len(l) == 0:\n        return True\n    if l[0] ==\
    \ l[1]:\n        return False\n    return pairs_sum_to_zero(l[1:])\n", "    if\
    \ len(l)<2:\n        return True\n    \n    for i1, i2 in zip(l, l[1:]):\n   \
    \     if i1+i2 == 0 and i1!=i2:\n            return True\n    return False\n",
  "    s = 0\n    for n in l:\n        s += n\n        if s >= 0:\n            s -=\
    \ n\n            if s == 0:\n                return True\n    return False\n\n",
  "    return False if 0 not in l else True\n", "    \n    \n    for index,pair in\
    \ enumerate(l):\n        sum1 = pair + l[index+1]\n        sum2 = l[index] + pair\n\
    \        if sum1 == 0:\n            if sum2 == 0:\n                return True\n\
    \    return False\n    ", "    # Your code here\n    s = set(l) # set of numbers\
    \ summing to zero\n    l1 = [i for i in l if i not in s] # removing number from\
    \ list if sum equals to zero\n    l2 = [i**2 for i in l] # square\n    l1.sort()\n\
    \    l2.sort()\n    return (l1 == l2)\n", "    pairs = []\n    \n    for i in\
    \ range(len(l) - 1):\n        pairs.append((l[i], l[i + 1]))\n\n    if pairs[0][0]\
    \ + pairs[0][1] == 0 and pairs[1][0] + pairs[1][1] == 0 and pairs[2][0] + pairs[2][1]\
    \ == 0 and pairs[3][0] + pairs[3][1] == 0 and pairs[4][0] + pairs[4][1] == 0 and\
    \ pairs[5][0] + pairs[5][1] == 0 and pairs[6][0] + pairs[6][1] == 0:\n       \
    \ return True\n    else:\n        return False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
