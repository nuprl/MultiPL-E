name: HumanEval_55_fib
language: py
prompt: "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>>\
  \ fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1)\
  \ == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert\
  \ candidate(12) == 144\n\ndef test_check():\n    check(fib)\n\ntest_check()\n"
completions: ["    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n\n",
  "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n\
    \        return fib(n-1) + fib(n-2)\n\n", "    if n == 0:\n        return 0\n\
    \    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n", "  \
    \  if n <= 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n", "  \
    \  assert n > 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return\
    \ 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n@attr.s(slots=True)",
  "    return fib_internal(0, n)[1]\n\n", "    return fib_rec(n, cache={})\n\n@timed",
  "    if n in (0, 1):\n        return n\n    return fib(n-1) + fib(n-2)\n\n", " \
    \   if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\n@doctest",
  "    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n</cell>\n<text>\n\
    The function fib() has four arguments but we only supplied with one. Python will\
    \ implicitly fill the remaining argument with the value of 0. This will cause\
    \ the function to fail with the exception that we defined in the function definition.\
    \ The function fib() in module pycalphad.io.ltx has an argument called n that\
    \ takes n as an argument and we are supplying it with 10. When python executes\
    \ fib(n=10), it automatically fills n with the default value 0. Hence the error.\n\
    \n\n</text>\n<text>\nFixing the issue\nWe will now fix the issue by providing\
    \ the argument n in the function definition.\n\n\n</text>\n<cell>", "    if n\
    \ < 0:\n        return fib(-n)\n\n    if n <= 2:\n        return n\n\n    return\
    \ fib(n - 2) + fib(n - 1)\n\n", "    if n == 0:\n        return 0\n    elif n\
    \ == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n", " \
    \   if n in (0, 1):\n        return n\n    return fib(n-1) + fib(n-2)\n\n", " \
    \   # assert n >= 0\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n", " \
    \   if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return\
    \ fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n    if n <= 1:\n        return\
    \ 1\n    return fib(n-2) + fib(n-1)\n\n", "    if n in {0, 1}:\n        return\
    \ 1\n    return fib(n-2) + fib(n-1)\n\n", "    if n == 0:\n        return 0\n\
    \    elif n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
