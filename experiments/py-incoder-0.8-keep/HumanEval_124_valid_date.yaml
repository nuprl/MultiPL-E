name: HumanEval_124_valid_date
language: py
prompt: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
  \ which validates a given date string and\n    returns True if the date is valid\
  \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
  \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
  \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
  \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
  \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
  \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
  \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
  \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
  \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
  \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
  \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\
  \ntest_check()\n"
completions: ["    # 1. Write code to validate the date string\n    # 2. Write code\
    \ to validate the number of days\n    # 3. Write code to validate the months\n\
    \    # 4. Write code to validate the date format\n    # 5. Return True or False\n\
    \    \n    # Answer part 1\n    \n    return True\n    \n    # Answer part 2\n\
    \    \n    return False\n    \n    # Answer part 3\n    \n    return False\n \
    \   \n    # Answer part 4\n    \n    return False\n</cell>\n<cell>", "    if not\
    \ date:\n        return False\n    date_parts = date.split('-')\n    if not len(date_parts)\
    \ == 2:\n        return False\n    if not date_parts[0].isdigit() or not date_parts[1].isdigit():\n\
    \        return False\n    try:\n        _date = datetime.date(int(date_parts[0]),\
    \ int(date_parts[1]), int(date_parts[2]))\n    except ValueError:\n        return\
    \ False\n    if _date.month < 1 or _date.month > 12:\n        return False\n \
    \   if _date.day < 1 or _date.day > 30:\n        return False\n    if _date.month\
    \ == 2 and _date.day > 29:\n        return False\n    return True\n\n", "    #TODO:\
    \ Write your code here\n    if date == \"\":\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    \n    try:\n        date = [int(i) for i in\
    \ date.split('-')]\n    except ValueError:\n        return False\n    \n    if\
    \ len(date) != 3:\n        return False\n    \n    if date[0] > 12:\n        return\
    \ False\n    if date[1] > 31:\n        return False\n    if date[1] < 1:\n   \
    \     return False\n    if date[2] > 31:\n        return False\n    if date[2]\
    \ < 1:\n        return False\n    return True\n</cell>\n<cell>", "    if date\
    \ == \"\" or len(date) < 10:\n        return False\n    date_array = date.split(\"\
    -\")\n    if len(date_array) != 3:\n        return False\n    day = int(date_array[0])\n\
    \    if day < 1 or day > 31:\n        return False\n    month = int(date_array[1])\n\
    \    if month < 1 or month > 12:\n        return False\n    year = int(date_array[2])\n\
    \    if year < 2000 or year > 2020:\n        return False\n    return True\n\n",
  "    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n\
    \        day_valid = False\n        month_invalid = False\n        year_invalid\
    \ = False\n        if len(date_list) == 3:\n            if len(date_list[0]) in\
    \ range(1,13) and len(date_list[1]) in range(1,31) and len(date_list[1]) in range(1,31):\n\
    \                day_valid = True\n            elif len(date_list[0]) in range(1,13)\
    \ and len(date_list[1]) in range(1,30) and len(date_list[1]) in range(1,29):\n\
    \                month_invalid = True\n                day_valid = True\n    \
    \        elif len(date_list[0]) in range(1,13) and len(date_list[1]) in range(1,29):\n\
    \                month_invalid = True\n            elif len(date_list[0]) in range(1,13):\n\
    \                month_invalid = True\n        elif len(date_list) == 4:\n   \
    \         if len(date_list[0]) in range(1,13) and len(date_list[1]) in range(1,31)\
    \ and len(date_list[2]) in range(1,31):\n                day_valid = True\n  \
    \          elif len(date_list[0]) in range(1,13) and len(date_list[1]) in range(1,30)\
    \ and len(date_list[2]) in range(1,29):\n                month_invalid = True\n\
    \                day_valid = True\n            elif len(date_list[0]) in range(1,13)\
    \ and len(date_list[1]) in range(1,29):\n                month_invalid = True\n\
    \            elif len(date_list[0]) in range(1,13):\n                month_invalid\
    \ = True\n        elif len(date_list) == 5:\n            if len(date_list[0])\
    \ in range(1,13) and len(date_list[1]) in range(1,31) and len(date_list[2]) in\
    \ range(1,30) and len(date_list[3]) in range(1,29):\n                day_valid\
    \ = True\n            elif len(date_list[0]) in range(1,13) and len(date_list[1])\
    \ in range(1,30) and len(date_list[2]) in range(1,29):\n                month_invalid\
    \ = True\n                day_valid = True\n            elif len(date_list[0])\
    \ in range(1,13) and len(date_list[1]) in range(1,29):\n                month_invalid\
    \ = True\n            elif len(date_list[0]) in range(1,13):\n               \
    \ month_invalid = True\n        elif len(date_list) == 6:\n            if len(date_list[0])\
    \ in range(1,13) and len(date_list[1]) in range(1,31) and len(date_list[2]) in\
    \ range(1,30) and len(date_list[3]) in range(1,29) and len(date_list[4]) in range(1,29):\n\
    \                day_valid = True\n            elif len(date_list[0]) in range(1,13)\
    \ and len(date_list[1]) in range(1,30) and len(date_list[2]) in range(1,29):\n\
    \                month_invalid = True\n                day_valid = True\n    \
    \        elif len(date_list[0]) in range(1,13) and len(date_list[1]) in range(1,29):\n",
  "    return bool(date != \"\") and len(date.split('-')) == 3 and \\\n        1 <=\
    \ int(date[2]) <= 31 and 1 <= int(date[0]) <= 12 and 1 <= int(date[1]) <= 30\n\
    \n", "    return len(date) > 0 and (len(date.split('-')[0]) == 2 and len(date.split('-')[1])\
    \ in range(1,13) and len(date.split('-')[2]) == 4) \n</cell>\n<cell>\ntest_dates\
    \ = ['03-11-2000', '15-01-2012', '04-0-2040', '06-04-2020', '06/04/2020']\n\n\
    for test_date in test_dates:\n    if valid_date(test_date):\n        print(f'{test_date}\
    \ is valid.')\n    else:\n        print(f'{test_date} is not valid.')\n</cell>\n\
    <text>\nTasks:\nWrite a function to check if the given date is a valid date. Print\
    \ the date if it is valid and print an appropriate error message if it is not.\
    \ \nWrite a function to check if a date is a leap year. Print the date if it is\
    \ valid and print an appropriate error message if it is not. \nWrite a function\
    \ to check if a date is a weekend day or holiday. Print the date if it is valid\
    \ and print an appropriate error message if it is not. \nWrite a function to check\
    \ if a date is an absentee date. Print the date if it is valid and print an appropriate\
    \ error message if it is not. \nWrite a function to check the number of days in\
    \ a month. Print the date if it is valid and print an appropriate error message\
    \ if it is not. \nWrite a function to check the day of the week. Print the date\
    \ if it is valid and print an appropriate error message if it is not.\n\n\n</text>\n\
    <cell>", "    date_format = '%d-%m-%Y'\n    try:\n        datetime.datetime.strptime(date,\
    \ date_format)\n    except ValueError:\n        return False\n\n    try:\n   \
    \     datetime.datetime.strptime(date, date_format).strftime('%B')\n    except\
    \ ValueError:\n        return False\n\n    return True\n\n", "    if date == ''\
    \ or len(date) < 1 or len(date) > 31:\n        return False\n    try:\n      \
    \  days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        days_in_month[datetime.datetime.strptime(date,\
    \ '%d-%m-%Y').month - 1]\n        if datetime.strptime(date, '%m-%d-%Y').month\
    \ != datetime.datetime.strptime(date, '%d-%m-%Y').month:\n            return False\n\
    \    except ValueError:\n        return False\n    return True\n\n", "    months\
    \ = {\"1\":1,\"3\":3,\"5\":5,\"7\":7,\"8\":8,\"10\":10,\"12\":12}\n    days =\
    \ {\"1\":1,\"3\":30,\"5\":29,\"7\":31}\n\n    month = int(date[0:2])\n    day\
    \ = int(date[3:5])\n    year = int(date[6:10])\n    \n    if month > 12 or month\
    \ < 1:\n        return False\n    if day > 31 or day < 1:\n        return False\n\
    \    if months[month] > days[day] or months[month] < 1:\n        return False\n\
    \    if year < 1900:\n        return False\n    return True\n</cell>\n<cell>",
  "    if not (date):\n        return False\n\n    splitted = date.split(\"/\")\n\
    \    date_obj = re.search(r\"(0?[1-9]|1[012])[\\-\\/](0?[1-9]|[12][0-9]|3[01])[\\\
    -\\/](19|20)\\d\\d\", splitted[0])\n    months = splitted[1].split(\"-\")\n  \
    \  years = splitted[2].split(\"-\")\n\n    if len(date_obj) != 1:\n        return\
    \ False\n\n    try:\n        date(date_obj.group(0), months[0], days[1], years[0])\n\
    \    except ValueError:\n        return False\n\n    return True\n\n", "    if\
    \ not date:\n        return False\n    month, day, year = date.split('-')\n  \
    \  if len(month) == 1 and len(day) == 1 and len(year) == 4:\n        month = f'0{month}'\n\
    \    if len(month) != 2:\n        return False\n    if len(day) < 1 or len(day)\
    \ > 31:\n        return False\n    if int(month) not in range(1,13):\n       \
    \ return False\n    if int(day) < 1 or int(day) > 30:\n        return False\n\
    \    if int(month) == 2 and len(day) > 29:\n        return False\n    return True\n\
    \n", "    # TODO\n    return True\n</cell>\n<text>\nTest Your Solution\n\n</text>\n\
    <cell>", "    # check empty\n    if not date:\n        return False\n    # check\
    \ invalid date\n    if date[0] == '0' and date[1] == '0' and date[2] == '0':\n\
    \        return False\n    # check valid date\n    if date[0] != '0' and date[1]\
    \ == '0' and date[2] == '0':\n        year, month, day = date.split('-')\n   \
    \     day = int(day)\n        if month == '01' and month in ['03', '05', '07',\
    \ '08', '10', '12']:\n            if day <= 31 and day >= 1:\n               \
    \ return True\n        elif month == '04' and month in ['06', '09', '11']:\n \
    \           if day <= 30 and day >= 1:\n                return True\n        elif\
    \ month == '02' and month in ['01', '04', '06', '09', '11', '12']:\n         \
    \   if day <= 29 and day >= 1:\n                return True\n        else:\n \
    \           return False\n    else:\n        return False\n\n", "    if not len(date):\n\
    \        return False\n    splitted = date.split('-')\n    if len(splitted) !=\
    \ 3:\n        return False\n    month = int(splitted[0])\n    day = int(splitted[1])\n\
    \    year = int(splitted[2])\n    months = MONTHS\n    for m in months:\n    \
    \    if m == month:\n            months += 1\n            break\n    if month\
    \ > 12:\n        return False\n    if month == 1:\n        if day > 31:\n    \
    \        return False\n    else:\n        if day > 30:\n            return False\n\
    \    if day < 1 or day > 29:\n        return False\n    if months == len(months)\
    \ and day == day:\n        return True\n    return False\n\n", "    \n    return\
    \ True\n", "    if not date:\n        return False\n    date_split_list = date.split('-')\n\
    \    if len(date_split_list) != 3:\n        return False\n    if len(date_split_list[0])\
    \ != 2 or len(date_split_list[1]) != 2 or len(date_split_list[2]) != 2:\n    \
    \    return False\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n   \
    \ except ValueError:\n        return False\n    return True\n\n", "    # Write\
    \ your code here\n    if date == '':\n        return False\n    split_date = date.split('-')\n\
    \    if len(split_date) == 3:\n        day = int(split_date[2])\n        if day\
    \ < 1 or day > 31:\n            return False\n        year = int(split_date[0])\n\
    \        if year < 1 or year > 2019:\n            return False\n    elif len(split_date)\
    \ == 4:\n        day = int(split_date[2])\n        month = int(split_date[1])\n\
    \        if month < 1 or month > 12:\n            return False\n        year =\
    \ int(split_date[0])\n        if year < 1 or year > 2019:\n            return\
    \ False\n    elif len(split_date) == 2:\n        if split_date[0] != '' and split_date[1]\
    \ != '':\n            day = int(split_date[1])\n        else:\n            return\
    \ False\n    else:\n        return False\n    return True\n\n", "    if date ==\
    \ \"\":\n        return False\n    days_months = valid_days_month(date)\n    if\
    \ days_months == False or len(days_months)>2 :\n        return False\n    days_years\
    \ = valid_days_year(date)\n    if days_years == False or len(days_years)>2 :\n\
    \        return False\n    days_date = valid_days_date(date)\n    if days_date\
    \ == False or len(days_date)>2 :\n        return False\n    months = valid_month(date)\n\
    \    if months == False or len(months)>2 :\n        return False\n    months =\
    \ months.replace(\",\",\"\")\n    months = months.replace(\"-\",\"\")\n    months\
    \ = months.replace(\"'\",\"\")\n    months = months.replace(\";\",\"\")\n    months\
    \ = months.replace(\":\",\"\")\n    months = months.replace(\".\",\"\")\n    months\
    \ = months.replace(\"&\",\"\")\n    months = months.replace(\"'\",\"\")\n    months\
    \ = months.replace(\"%\",\"\")\n    months = months.replace(\"$\",\"\")\n    months\
    \ = months.replace(\"%\",\"\")\n    months = months.replace(\"+\",\"\")\n    months\
    \ = months.replace(\"~\",\"\")\n    months = months.replace(\"(\",\"\")\n    months\
    \ = months.replace(\")\",\"\")\n    months = months.replace(\"(\",\"\")\n    months\
    \ = months.replace(\")\",\"\")\n    months = months.replace(\"(\",\"\")\n    months\
    \ = months.replace(\")\",\"\")\n    months = months.replace(\"?\",\"\")\n    months\
    \ = months.replace(\"?\",\"\")\n    months = months.replace(\"?\",\"\")\n    months\
    \ = months.replace(\"+\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"+\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"*\",\"\")\n    months = months.replace(\"*\",\"\")\n    months\
    \ = months.replace(\"", "    \n    valid = True\n    \n    if date != '':\n  \
    \      valid = False\n        \n        day = int(date[-2:])\n        month =\
    \ int(date[0:2])\n        year = int(date[4:9])\n        \n        if month <\
    \ 1 or month > 12:\n            valid = False\n        \n        if (month ==\
    \ 2 and (year % 400 == 0 or year % 4 == 0 and year % 100 != 0)) or (month == 2\
    \ and year % 4 == 0) or month > 2:\n            valid = False\n        \n    \
    \    if (month == 4 or month == 6 or month == 9 or month == 11) and day > 31:\n\
    \            valid = False\n        \n        if (month == 2) and (day > 29 or\
    \ day < 1):\n            valid = False\n        \n    return valid\n", "    date_parts=date.split('-')\n\
    \    month1=int(date_parts[0])\n    day1=int(date_parts[1])\n    year1=int(date_parts[2])\n\
    \n    month2=int(date_parts[3])\n    day2=int(date_parts[4])\n    year2=int(date_parts[5])\n\
    \    \n    month3=int(date_parts[6])\n    day3=int(date_parts[7])\n    year3=int(date_parts[8])\n\
    \    \n    month4=int(date_parts[9])\n    day4=int(date_parts[10])\n    year4=int(date_parts[11])\n\
    \n    month5=int(date_parts[12])\n    day5=int(date_parts[13])\n    year5=int(date_parts[14])\n\
    \n    month6=int(date_parts[15])\n    day6=int(date_parts[16])\n    year6=int(date_parts[17])\n\
    \n    month7=int(date_parts[18])\n    day7=int(date_parts[19])\n    year7=int(date_parts[20])\n\
    \n    month8=int(date_parts[21])\n    day8=int(date_parts[22])\n    year8=int(date_parts[23])\n\
    \n    month9=int(date_parts[24])\n    day9=int(date_parts[25])\n    year9=int(date_parts[26])\n\
    \n    month10=int(date_parts[27])\n    day10=int(date_parts[28])\n    year10=int(date_parts[29])\n\
    \n    month11=int(date_parts[30])\n    day11=int(date_parts[31])\n    year11=int(date_parts[32])\n\
    \n    month12=int(date_parts[33])\n    day12=int(date_parts[34])\n    year12=int(date_parts[35])\n\
    \    if not(len(date_parts[0])>0 and len(date_parts[1])>0 and len(date_parts[2])>0):\n\
    \        return False\n    if not(1 <= month1 <= 12 and month1 < 12 and 1 <= day1\
    \ <= 31 and day1 < 31):\n        return False\n    if not(1 <= month2 <= 12 and\
    \ month2 < 12 and 1 <= day2 <= 31 and day2 < 31):\n        return False\n    if\
    \ not(1 <= month3 <= 12 and month3 < 12 and 1 <= day3 <= 31 and day3 < 31):\n\
    \        return False\n    if not(1 <= month4 <= 12 and month4 < 12 and 1 <= day4\
    \ <= 31 and day4 < 31):\n        return False\n    if ", "    \n    date_object\
    \ = datetime.strptime(date, '%Y-%m-%d')\n    \n    day = int(date_object.day)\n\
    \    month = int(date_object.month)\n    year = int(date_object.year)\n\n    if\
    \ (day < 1 or day > 31) and (month < 1 or month > 12):\n        return False\n\
    \    elif month < 1 or month > 12:\n        return False\n    elif day < 1 or\
    \ day > 31:\n        return False\n    elif month == 2 and day > 29:\n       \
    \ return False\n    elif month == 3 and day > 30:\n        return False\n    elif\
    \ month == 4 and day > 29:\n        return False\n    elif month == 5 and day\
    \ > 30:\n        return False\n    elif month == 6 and day > 29:\n        return\
    \ False\n    elif month == 7 and day > 30:\n        return False\n    elif month\
    \ == 8 and day > 30:\n        return False\n    elif month == 9 and day > 30:\n\
    \        return False\n    elif month == 10 and day > 30:\n        return False\n\
    \    elif month == 11 and day > 29:\n        return False\n    elif month == 12\
    \ and day > 31:\n        return False\n    else:\n        return True\n", "  \
    \  # Your code here\n    month = date.split('-')[1]\n    if month == '01' or month\
    \ == '03' or month == '05' or month == '07' or month == '08' or month == '10'\
    \ or month == '12':\n        day = int(date.split('-')[2])\n        if 1 <= day\
    \ <= 31 and 1 <= month <= 12:\n            return True\n        elif 1 <= day\
    \ <= 30 and 1 <= month <= 4:\n            return True\n        elif 1 <= day <=\
    \ 29 and 1 <= month <= 2:\n            return True\n        elif month == '02':\n\
    \            return True\n    return False\n</cell>\n<cell>", "    if not (date\
    \ != ''):\n        return False\n    try:\n        date_list = date.split('/')\n\
    \        date_list[2] = int(date_list[2])\n        date_list[2] = get_month(date_list[2])\n\
    \        date_str = date_list[0] + '-' + date_list[1] + '-' + date_list[2]\n \
    \       date_list = [date_str[0:4], date_str[4:6], date_str[6:]]\n        date_list\
    \ = get_day(date_list)\n        if ((1 <= date_list[1] <= 31) and (1 <= date_list[2]\
    \ <= 30) and (1 <= date_list[0] <= 12) and ((date_list[1] != 0) and (date_list[2]\
    \ != 0)) and ((date_list[2] != 0) and (date_list[0] > 1))):\n            return\
    \ True\n        elif ((1 <= date_list[1] <= 30) and (1 <= date_list[2] <= 29)\
    \ and ((date_list[1] != 0) and (date_list[2] != 0)) and ((date_list[2] != 0) and\
    \ (date_list[0] > 1))):\n            return True\n        else:\n            return\
    \ False\n    except:\n        return False\n\n", "    # Write your code here\n\
    \    if len(date) > 0 or len(str(date.day)) == 2:\n        if int(date.month)\
    \ in range(1, 13) and int(date.day) in range(1, 31) and int(date.year) in range(1900,\
    \ 2021):\n            return True\n        elif int(date.month) in range(4, 12)\
    \ and int(date.day) in range(1, 28) and int(date.year) in range(1900, 2021):\n\
    \            return True\n        elif int(date.month) in range(6, 11) and int(date.day)\
    \ in range(1, 28) and int(date.year) in range(1900, 2021):\n            return\
    \ True\n        elif int(date.month) in range(2, 12) and int(date.day) in range(1,\
    \ 28) and int(date.year) in range(1900, 2021):\n            return True\n    \
    \    elif int(date.month) in range(2, 12) and int(date.day) in range(1, 28) and\
    \ int(date.year) in range(1900, 2021):\n            return True\n        else:\n\
    \            return False\n    else:\n        return False\n</code>\n<|/ a tags=python,python-3.x\
    \ dscore=2 |>\n<| c |>\nThank you very much, this is exactly what I was looking\
    \ for and I thank you for your help, I appreciate it!\n<|/ c |>\n<| c |>\nYou\
    \ can [accept my answer](https://stackoverflow.com/help/someone-answers) if it\
    \ solves your question.\n<|/ c |>\n<| c |>\nYes sorry about that, I forgot about\
    \ accepting the answer, I did it now. Thanks again for the help!\n<|/ c |>\n<|\
    \ a tags=python,python-3.x |>\nThe simplest thing I can think of would be this:\n\
    <code>\nfrom datetime import datetime\ndate = \"29-07-2000\"\n\ndate_format =\
    \ \"%d-%m-%Y\"\n\ntry:\n    datetime.strptime(date, date_format)\n    print(True)\n\
    except:\n    print(False)\n</code>\nIt returns True because date is a valid date\
    \ format according to datetime library.\n<|/ a dscore=1 |>\n<| c |>\nThank you\
    \ very much, this is a very simple and effective way to do it and I thank you\
    \ for your help, I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. I'm glad you\
    \ found the answer useful. :)\n<|/ c |>\n<| c |>\nNote that if you're going to\
    \ use the `try-except` approach, be sure to put a better error handling into it\
    \ than just printing `False`, since that could result in silent failures. In this\
    \ case, a better approach would be to just `return False` from the function and\
    \ let it raise an exception when the format is invalid. Otherwise, if the format\
    \ is invalid, you'll just end up seeing something like `NameError: name 'datetime'\
    \ is not defined`.\n", '    pass', "    if date == '':\n        return False\n\
    \    else: \n        date = date.split('-')\n        day = date[2]\n        month\
    \ = date[0]\n        year = date[1]\n        day = int(day)\n        month = int(month)\n\
    \        if month in range(1, 13):\n            month = int(month)\n        elif\
    \ month in range(4, 12):\n            month = int(month) + 1\n        if day in\
    \ range(1, 31):\n            day = int(day)\n        elif day in range(4, 30):\n\
    \            day = int(day) + 1\n        elif day in range(1, 29):\n         \
    \   day = int(day)\n        else:\n            return False\n        if day in\
    \ range (1,31):\n            if day in range(1,31 and month in range(1, 13)):\n\
    \                return True\n            elif day in range(1, 31 and month in\
    \ range(4, 12)):\n                return False\n            elif day in range(1,\
    \ 31 and month in range(6, 10)):\n                return True\n            elif\
    \ day in range(1, 31 and month in range(9, 11)):\n                return False\n\
    \            elif day in range(1, 31 and month in range(12, 13)):\n          \
    \      return True\n            else:\n                return False\n        elif\
    \ day in range (4,30):\n            if day in range(4, 30 and month in range(1,\
    \ 13)):\n                return True\n            elif day in range(4, 30 and\
    \ month in range(4, 12)):\n                return False\n            elif day\
    \ in range(4, 30 and month in range(6, 10)):\n                return True\n  \
    \          elif day in range(4, 30 and month in range(9, 11)):\n             \
    \   return False\n            elif day in range(4, 30 and month in range(12, 13)):\n\
    \                return True\n            else:\n                return False\n\
    \        elif day in range (1,29):\n            if day in range(1, 29 and month\
    \ in range(1, 13)):\n                return True\n            elif day in range(1,\
    \ 29 and month in range(4, 12)):\n                return False\n            elif\
    \ day in range(1, 29 and month in range(6, 10)):\n                return True\n\
    \            elif day in range(1, 29 and month in range(9, 11)):\n           \
    \     return False\n            elif day in range(1, 29 and month in range(12,\
    \ 13)):\n                return True\n            else:\n                return\
    \ False\n        else:\n            return False\n        \n</cell>\n<cell>",
  "    \n    # Write your code here\n\n    return True\n", "    if len(date) < 1:\n\
    \        return False\n    split_date = date.split('-')\n    if len(split_date)\
    \ != 3:\n        return False\n    if len(split_date[0]) != 2 or len(split_date[1])\
    \ != 2 or not split_date[1].isdigit() or len(split_date[2]) != 4 or not split_date[2].isdigit():\n\
    \        return False\n    if not 1 <= int(split_date[0]) < 12:\n        return\
    \ False\n    if not 1 <= int(split_date[1]) <= 31:\n        return False\n   \
    \ if not 1 <= int(split_date[2]) <= 31:\n        return False\n    if not 1 <=\
    \ int(split_date[0]) <= 12:\n        return False\n    if not 1 <= int(split_date[1])\
    \ <= 31:\n        return False\n    if not 1 <= int(split_date[2]) <= 31:\n  \
    \      return False\n    if not 1 <= int(split_date[0]) <= 12:\n        return\
    \ False\n    if not 1 <= int(split_date[1]) <= 31:\n        return False\n   \
    \ if not 1 <= int(split_date[2]) <= 30:\n        return False\n    return True\n",
  "    # TODO: Write your code here\n    pass\n\n", "    return not (date == '' or\
    \ len(date.split('-')) != 3 and len(date.split('-')) != 4 and len(date.split('-'))\
    \ != 6 and len(date.split('-')) != 8)\n\n", "    pass\n", "    \n    #your code\
    \ here\n    date = date.replace('-','')\n    day, month, year = date\n    \n \
    \   if day != '' or month != '' or year != '':\n        if (len(day)<1 or len(day)>31)\
    \ and (len(month)<1 or len(month)>12) and (len(year)<1 or len(year)>31):\n   \
    \         if (len(month)<1 or len(month)>12) and (len(year)<1 or len(year)>31):\n\
    \                if (len(day)<1 or len(day)>31):\n                    return False\n\
    \        else:\n            return True\n    else:\n        return False\n", " \
    \   \n    # 1. The date string is not empty.\n    if not date:\n        return\
    \ False\n    \n    # 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n    if len(date) != 10 and len(date)\
    \ != 9 and len(date) != 8 and len(date) != 7 and len(date) != 6 and len(date)\
    \ != 5 and len(date) != 4 and len(date) != 3 and len(date) != 2 and len(date)\
    \ != 1 and len(date) != 0:\n        return False\n        \n    # 3. The months\
    \ should not be less than 1 or higher than 12.\n    if len(date) == 9:\n     \
    \   return False\n    \n    # 4. The date should be in the format: mm-dd-yyyy\n\
    \    months = [6,9,11]\n    if len(date) == 10:\n        if date[1] in months:\n\
    \            return False\n        else:\n            months.append(date[1])\n\
    \    if len(date) == 9:\n        if date[1] in months:\n            return False\n\
    \        else:\n            months.append(date[1])\n    if len(date) == 8:\n \
    \       if date[1] in months:\n            return False\n        else:\n     \
    \       months.append(date[1])\n    if len(date) == 7:\n        if date[1] in\
    \ months:\n            return False\n        else:\n            months.append(date[1])\n\
    \    if len(date) == 6:\n        if date[1] in months:\n            return False\n\
    \        else:\n            months.append(date[1])\n    if len(date) == 5:\n \
    \       if date[1] in months:\n            return False\n        else:\n     \
    \       months.append(date[1])\n    if len(date) == 4:\n        if date[1] in\
    \ months:\n            return False\n        else:\n            months.append(date[1])\n\
    \    if len(date) == 3:\n        if date[1] in months:\n            return False\n\
    \        else:\n            months.append(date[1])\n    if len(date) == 2:\n \
    \       if date[1] in months:\n            return False\n        else:\n     \
    \       months.append(date[1])\n    if len(date) == 1:\n        if date[1] in\
    \ months:\n            return False\n        else:\n            months.append(date[1])\n\
    \    if date[1] == '0':\n        months.append(date[1])\n    if date[1] == '1':\n\
    \        months.append(date[1])\n    if date[1] == '2':\n        months.append(date[1])\n\
    \    if date[1] == '3':\n        months.append(date[1])\n    if date[1] == '4':\n\
    \        months.append(date[1])\n    if date[1] == '5':\n        months.append(date[1])\n\
    \    if date[1] == '6':\n        months.append(date[1])\n    if date[1] == '7':\n\
    \        months.append(date[1])\n    if date[1] == '8':\n        months.append(date[1])\n\
    \    if date[1] == '9':\n        months.append(date[1])\n    if date[1] == '10",
  "    if not date:\n        return False\n\n    month = date.split('-')[0]\n    day\
    \ = date.split('-')[1]\n    year = date.split('-')[2]\n\n    if month in ['01',\
    \ '03', '05', '07', '08', '10', '12']:\n        if int(day) < 1 or int(day) >\
    \ 31:\n            return False\n    elif month in ['04', '06', '09', '11']:\n\
    \        if int(day) < 1 or int(day) > 30:\n            return False\n    elif\
    \ month == '02':\n        if int(day) < 1 or int(day) > 29:\n            return\
    \ False\n\n    return True\n\n", "    \n    date_split = date.split('-')\n   \
    \ if len(date_split) == 2:\n        mm = int(date_split[0])\n        dd = int(date_split[1])\n\
    \        yyyy = int(date_split[2])\n        if mm > 12:\n            return False\n\
    \        if mm == 1 or mm == 3:\n            if dd > 31 or dd < 1:\n         \
    \       return False\n        if mm == 4 or mm == 6 or mm == 9 or mm == 11:\n\
    \            if dd > 30:\n                return False\n        if mm == 2 or\
    \ mm == 5 or mm == 8 or mm == 10 or mm == 12:\n            if dd > 29:\n     \
    \           return False\n        return True\n    else:\n        return False\n\
    \n", "    try:\n        return bool(date.strip())\n    except:\n        return\
    \ False", "    return not date or len(date.split('-')) > 2 or len(date.split('-'))\
    \ < 3 or int(date.split('-')[0]) > 12 or int(date.split('-')[0]) < 1 or int(date.split('-')[1])\
    \ > 31 or int(date.split('-')[1]) < 1 or int(date.split('-')[2]) > 29 or int(date.split('-')[2])\
    \ < 1\n\n", "    return len(date.strip()) > 0\n</cell>\n<text>\nWrite a test function\
    \ to validate the given date.\n\n\n</text>\n<cell>", "    months = ['01','02','03','04','05','06','07','08','09','10','11','12']\n\
    \    if date == '':\n        return False\n    if date == 'null':\n        return\
    \ False\n    if date.strip() == '':\n        return False\n    split_date = date.split('/')\n\
    \    day = split_date[2]\n    month = split_date[1]\n    year = split_date[0]\n\
    \    if len(split_date[0]) > 2:\n        return False\n    if len(split_date[1])\
    \ > 2:\n        return False\n    if len(split_date[2]) > 4:\n        return False\n\
    \    if len(month) > 2:\n        if month in months:\n            if day < 1 or\
    \ day > 31:\n                return False\n            if month == 1:\n      \
    \          if day < 1 or day > 29:\n                    return False\n       \
    \     elif month == 3:\n                if day < 1 or day > 30:\n            \
    \        return False\n            elif month == 5:\n                if day <\
    \ 1 or day > 30:\n                    return False\n            elif month ==\
    \ 7:\n                if day < 1 or day > 30:\n                    return False\n\
    \            elif month == 8:\n                if day < 1 or day > 30:\n     \
    \               return False\n            elif month == 10:\n                if\
    \ day < 1 or day > 30:\n                    return False\n            elif month\
    \ == 12:\n                if day < 1 or day > 29:\n                    return\
    \ False\n    elif len(month) == 1:\n        if month == '01':\n            if\
    \ day < 1 or day > 31:\n                return False\n        elif month == '03':\n\
    \            if day < 1 or day > 30:\n                return False\n        elif\
    \ month == '05':\n            if day < 1 or day > 30:\n                return\
    \ False\n        elif month == '07':\n            if day < 1 or day > 30:\n  \
    \              return False\n        elif month == '08':\n            if day <\
    \ 1 or day > 30:\n                return False\n        elif month == '10':\n\
    \            if day < 1 or day > 30:\n                return False\n        elif\
    \ month == '12':\n            if day < 1 or day > 29:\n                return\
    \ False\n    if day < 1 or day > 30:\n        return False\n    return True\n",
  "    pass\n\n", "    date_format, years_range, months_range, days_range, day_of_month_range\
    \ = date_format_validator(date)\n    valid_date_range = not date_format or not\
    \ years_range or not months_range or not days_range or not day_of_month_range\n\
    \n    years_range = set(years_range)\n    months_range = set(months_range)\n \
    \   days_range = set(days_range)\n    day_of_month_range = set(day_of_month_range)\n\
    \n    date_month_year = date.split('-')\n    date_year = date_month_year[0]\n\
    \    date_month = date_month_year[1]\n\n    date_months = ['01', '03', '05', '07',\
    \ '08', '10', '12']\n    date_days = ['01', '02', '03', '04', '05', '06', '07',\
    \ '08', '09', '10', '11', '12']\n    date_day_of_month = ['01', '02', '03', '04',\
    \ '05', '06', '07', '08', '09', '10', '11', '12']\n\n    if date_month_year[1]\
    \ in date_months:\n        date_month_index = date_months.index(date_month_year[1])\n\
    \        valid_date_range = (date_year in years_range and date_month_index <=\
    \ months_range) and (date_year in years_range and date_month_index >= months_range)\n\
    \n    if date_month_year[1] in date_days:\n        date_day_index = date_days.index(date_month_year[1])\n\
    \        valid_date_range = (date_year in years_range and date_month_index <=\
    \ months_range and date_day_index <= days_range) and (date_year in years_range\
    \ and date_month_index <= months_range and date_day_index >= days_range) and (date_year\
    \ in years_range and date_month_index >= months_range and date_day_index <= days_range)\n\
    \n    if date_month_year[1] in date_day_of_month:\n        date_day_index = date_day_of_month.index(date_month_year[1])\n\
    \        valid_date_range = (date_year in years_range and date_month_index <=\
    \ months_range and date_day_index <= days_range) and (date_year in years_range\
    \ and date_month_index <= months_range and date_day_index >= days_range) and (date_year\
    \ in years_range and date_month_index >= months_range and date_day_index <= days_range)\
    \ and (date_year in years_range and date_month_index >= months_range and date_day_index\
    \ >= days_range)\n\n    return valid_date_range\n\n", "    \n    ", "    pass\n\
    \n", "    return not bool(date) and 0 < len(date) and len(date) <= 31 and \\\n\
    \        1 <= int(date[0]) <= 12 and 1 <= int(date[2]) <= 31 and \\\n        1\
    \ <= int(date[1]) <= 12 and 1 <= int(date[2]) <= 29\n\n", "    if not date:\n\
    \        return False\n\n    split_date= date.split('-')\n\n    if len(split_date)\
    \ ==1:\n        return False\n\n    if len(split_date) ==2:\n        if int(split_date[0])\
    \ <1 or int(split_date[0])>12:\n            return False\n\n        if int(split_date[1])<1\
    \ or int(split_date[1])>31:\n            return False\n    else:\n        return\
    \ False\n\n    return True", "    # Your code here\n    if date:\n        split\
    \ = date.split('-')\n        if len(split) == 3:\n            if 1 <= int(split[2])\
    \ <= 31:\n                return int(split[0]) <= 12 and 1 <= int(split[1]) <=\
    \ 31 and 1 <= int(split[2]) <= 31\n            elif 4 <= int(split[2]) <= 12:\n\
    \                return int(split[0]) <= 12 and 1 <= int(split[1]) <= 31 and 1\
    \ <= int(split[2]) <= 30\n            elif 1 <= int(split[2]) <= 29:\n       \
    \         return int(split[0]) <= 12 and 1 <= int(split[1]) <= 31 and 1 <= int(split[2])\
    \ <= 29\n            elif 2 <= int(split[2]) <= 12:\n                return int(split[0])\
    \ <= 12 and 1 <= int(split[1]) <= 30 and 1 <= int(split[2]) <= 31\n          \
    \  elif 2 <= int(split[2]) <= 29:\n                return int(split[0]) <= 12\
    \ and 1 <= int(split[1]) <= 30 and 1 <= int(split[2]) <= 29\n        else:\n \
    \           return False\n    else:\n        return False\n\n\n\"\"\"\n***********************TEST\
    \ CASES**************************\n\"\"\"\n\n", "    day = date[-2:]\n    month\
    \ = date[1:3]\n    year = date[0:4]\n\n    if len(date) != 10 or len(date) !=\
    \ 10 or len(day) != 2 or not day.isdigit() or len(month) != 2 or len(month) !=\
    \ 2 or not month.isdigit() or len(year) != 4 or not year.isdigit():\n        return\
    \ False\n\n    if int(year) < 1000:\n        return True\n\n    if int(year) >\
    \ 9999 or int(month) > 12 or int(month) < 1 or int(day) > 31 or int(day) < 1 or\
    \ int(month) == 1:\n        return False\n\n    valid = False\n    for m in range(1,\
    \ 13):\n        if int(month) == m and int(day) >= 1 and int(day) <= 31:\n   \
    \         valid = True\n            break\n    if valid:\n        valid = False\n\
    \        for m in range(4, 13):\n            if int(month) == m and int(day) >=\
    \ 1 and int(day) <= 30:\n                valid = True\n                break\n\
    \        if valid:\n            valid = False\n            for m in range(1, 12):\n\
    \                if int(month) == m and int(day) >= 1 and int(day) <= 29:\n  \
    \                  valid = True\n                    break\n    if valid:\n  \
    \      return True\n    else:\n        return False\n\n", "    date_parts = date.split(\"\
    -\")\n    if len(date_parts) != 3:\n        return False\n\n    days = 0\n   \
    \ months = 0\n    years = 0\n    for date_part in date_parts:\n        if date_part.isdigit():\n\
    \            days = days + int(date_part)\n        else:\n            months =\
    \ months + date_part.count('-')\n\n    if months > 12:\n        return False\n\
    \n    if days > 29:\n        return False\n\n    if days < 1 or days > 31:\n \
    \       return False\n\n    if months < 1 or months > 12:\n        return False\n\
    \n    if years > 100:\n        return False\n\n    return True\n\n", "    \n \
    \   # Write your code here\n    valid_date = True\n\n    day = int(date[6:8])\n\
    \    month = int(date[4:6])\n    year = int(date[:4])\n\n    if day not in range(1,31)\
    \ or month not in range(1,12) or year not in range(1900,2100):\n        valid_date\
    \ = False\n\n    if day < 1 or day > 31 or month < 1 or month > 12:\n        valid_date\
    \ = False\n\n    if month < 1 or month > 12:\n        valid_date = False\n\n \
    \   if day < 1 or day > 30 or month < 1 or month > 12:\n        valid_date = False\n\
    \n    if day < 1 or day > 29:\n        valid_date = False\n\n    return valid_date\n",
  "    \n    if date == '':\n        return False\n\n    \n    if len(date.split('-'))\
    \ != 3:\n        return False\n\n    try:\n        date_val = datetime.datetime.strptime(date,\
    \ '%d-%m-%Y')\n    except:\n        return False\n\n    if date_val.year < 1 or\
    \ date_val.year > 2020:\n        return False\n\n    if date_val.month < 1 or\
    \ date_val.month > 12:\n        return False\n\n    if date_val.day < 1 or date_val.day\
    \ > 31:\n        return False\n\n    return True\n", "    if date != '' and not\
    \ date.isspace():\n        if len(date) == 8 and not date[0] == '0':\n       \
    \     date2 = date[0:2] + '-' + date[2:4] + ' 00:00:00'\n            date2 = date2.replace('/',\
    \ '-')\n            date2 = date2.replace(' ', 'T')\n            date2 = date2.replace(':',\
    \ '.')\n            date2 = datetime.datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\
    \            date_format = datetime.datetime.strptime(date, '%m-%d-%Y')\n    \
    \        if date2 < date_format:\n                return False\n            else:\n\
    \                return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n", "    pass\n\n", "    \n    day = int(date[-2:])\n\
    \    month = int(date[:-2])\n    \n    if day > 30 or day < 1 or month > 12:\n\
    \        return False\n\n    if month in [1,3,5,7,8,10,12] and day > 31:\n   \
    \     return False\n    \n    if month in [4,6,9,11] and day > 30:\n        return\
    \ False\n    \n    if month == 2 and day > 29:\n        return False\n\n    return\
    \ True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\n\
    print(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))\n</cell>\n<text>\n\
    Problem 2\nCreate a dictionary to store the month and day of the dates as keys\
    \ and the corresponding year as values. \nMake sure that the keys are in lexicographical\
    \ order.\n\nThe dictionary should look like this: \n{'03-11-2000': 1900, '15-01-2012':\
    \ 2012, '04-0-2040': 2040, '06-04-2020': 2020, '06/04/2020': 2020}\n\nNote: Make\
    \ sure that the years of the dates are in sorted order.\n\n</text>\n<cell>\ndates\
    \ = ['03-11-2000', '15-01-2012', '04-0-2040', '06-04-2020', '06/04/2020']\nd =\
    \ {}\nfor date in dates:\n    year = date[-4:]\n    month = date[:-4]\n    if\
    \ month not in d:\n        d[month] = []\n    d[month].append(year)\n\nprint(d)\n\
    print(sorted(d.keys()))\n</cell>\n<text>\nProblem 3\nFor a given date string in\
    \ a list, get the corresponding number of days.\nIf it is not present, return\
    \ None.\n\nThe input dates look like this: \n['03-11-2000', '15-01-2012', '04-0-2040',\
    \ '06-04-2020', '06/04/2020']\n\nThe output should look like this: \n{'03-11-2000':\
    \ 15, '15-01-2012': 31, '04-0-2040': None, '06-04-2020': 6, '06/04/2020': None}\n\
    \n</text>\n<cell>\ndates = ['03-11-2000', '15-01-2012', '04-0-2040', '06-04-2020',\
    \ '06/04/2020']\nd = {}\nfor date in dates:\n    year = date[-4:]\n    month =\
    \ date[:-4]\n    if date not in d:\n        d[date] = None\n    else:\n      \
    \  if d[date] == None:\n            d[date] = int(date)\n        else:\n     \
    \       d[date] = int(date) + d[date]\n            \nprint(d)\n", "    if not\
    \ date or not date.strip():\n        return False\n    date_parts = date.split('-')\n\
    \    if len(date_parts) != 3:\n        return False\n    day = int(date_parts[1])\n\
    \    month = int(date_parts[0])\n    year = int(date_parts[2])\n\n    # Day is\
    \ valid if all 4 conditions are satisfied\n    if day > 31 or day < 0:\n     \
    \   return False\n    if month > 12 or month < 1:\n        return False\n    if\
    \ month == 2 and day > 29:\n        return False\n    \n    # Month is valid if\
    \ all 4 conditions are satisfied\n    if month in [1, 3, 6, 9, 12]:\n        return\
    \ True\n\n    return False\n</cell>\n<cell>", "    return date != ''\n\n", " \
    \   date = date.strip()\n    if date == \"\":\n        return False\n    date,\
    \ month, year = date.split('-')\n    if len(month) == 0 or len(year) == 0:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if len(month) == 1:\n        if int(month) < 1 or int(month) > 12:\n    \
    \        return False\n    else:\n        if int(month) < 4 or int(month) > 11:\n\
    \            return False\n        if int(month) == 2:\n            if int(year)\
    \ < 1 or int(year) > 29:\n                return False\n        else:\n      \
    \      if int(year) < 1 or int(year) > 30:\n                return False\n   \
    \ if len(day) > 2 and day < 31:\n        if month == 1 and int(day) > 30:\n  \
    \          return False\n        if month == 3 and int(day) > 29:\n          \
    \  return False\n        if month == 5 and int(day) > 29:\n            return\
    \ False\n        if month == 7 and int(day) > 29:\n            return False\n\
    \        if month == 8 and int(day) > 29:\n            return False\n        if\
    \ month == 10 and int(day) > 29:\n            return False\n        if month ==\
    \ 12 and int(day) > 30:\n            return False\n    if day > 31:\n        if\
    \ month == 1 and int(day) > 29:\n            return False\n        if month ==\
    \ 2 and int(day) > 29:\n            return False\n        if month == 4 or month\
    \ == 6 or month == 9 or month == 11 and int(day) > 30:\n            return False\n\
    \    if day > 30 and month != 2:\n        if month == 1 and int(day) > 29:\n \
    \           return False\n        if month == 3 and int(day) > 29:\n         \
    \   return False\n        if month == 5 and int(day) > 29:\n            return\
    \ False\n        if month == 7 and int(day) > 29:\n            return False\n\
    \        if month == 8 and int(day) > 29:\n            return False\n        if\
    \ month == 10 and int(day) > 29:\n            return False\n        if month ==\
    \ 12 and int(day) > 30:\n            return False\n    return True\n\n", "   \
    \ \n    if len(date) == 0:\n        return False\n    \n    days_range = {'1':1,'3':3,'5':5,'7':7,'8':8,'10':10,'12':12}\n\
    \    months_range = {'4':4,'6':6,'9':9,'11':11}\n    \n    day_list = re.findall('(?:[0-9]+-[0-9]+-[0-9]+)',\
    \ date)\n    if len(day_list) == 1:\n        if day_list[0] not in days_range:\n\
    \            return False\n        else:\n            return True\n\n    month_list\
    \ = re.findall('(?:[0-9]+-[0-9]+)', date)\n    if len(month_list) == 1:\n    \
    \    if month_list[0] not in months_range:\n            return False\n       \
    \ else:\n            return True\n\n    return False\n", "    date_valid = True\n\
    \n    # Date cannot be empty\n    if not date:\n        print('Date cannot be\
    \ empty')\n        return False\n    \n    # Number of days is less than 1 , 31\
    \ , 30, or 29\n    if len(date) < 1 or len(date) > 31 or len(date) > 29:\n   \
    \     print('Number of days must be 1, 2, 3, 4, or 5, or 6 or 9 or 11 or 12')\n\
    \        return False\n\n    # Month is less than 1 or higher than 12\n    if\
    \ len(date) > 12 or len(date) < 1:\n        print('Months must be 1, 2, 3, 4,\
    \ 5, 6, 7, 8, or 9')\n        return False\n\n    # Date must be in the format\
    \ mm-dd-yyyy\n    try:\n        dateArray = date.split('-')\n    except:\n   \
    \     print('Date must be in the format mm-dd-yyyy')\n        return False\n\n\
    \    month = int(dateArray[0]) \n    day = int(dateArray[1])\n    year = int(dateArray[2])\n\
    \n    # Date should be less than 1 , 30, or 29 days for months 1, 3, 5, 7, 8,\
    \ 10, or 12\n    if (month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 \n        or month == 12) and (day > 1 or day < 30 or day\
    \ > 29):\n        print('Date must be less than 1 , 30, or 29 days for months')\n\
    \        return False\n\n    # Date should be less than 1 , 30 or 29 days for\
    \ months 4, 6, 9, 11\n    if (month == 4 or month == 6 or month == 9 or month\
    \ == 11) and (day > 1 or day < 30 or day > 29):\n        print('Date must be less\
    \ than 1 , 30, or 29 days for months')\n        return False\n\n    # Date should\
    \ be less than 1 , 29 for the month 2\n    if (month == 2) and (day > 1 or day\
    \ < 29):\n        print('Date must be less than 1 , 29 for the month 2')\n   \
    \     return False\n\n    # Date should be in the format : mm-dd-yyyy\n    try:\n\
    \        date_valid = True\n    except ValueError:\n        print('Date must be\
    \ in the format: mm-dd-yyyy')\n        return False\n\n    return date_valid\n",
  "    \n    # Check if date is not empty\n    if not date:\n        return False\n\
    \n    # Check if the date's number of days is within 1-31\n    if len(date) >\
    \ 8 and len(date) < 13 and date[4:6] not in ['01', '03', '05', '07', '08', '10',\
    \ '12'] and date[4:6] not in ['04', '06', '09', '11'] and date[4:6] not in ['02']:\n\
    \        return False\n\n    # Check if the date's number of days is within 1-30\n\
    \    if len(date) > 7 and len(date) < 14 and date[4:6] not in ['01', '03', '05',\
    \ '07', '08', '10', '12'] and date[4:6] not in ['04', '06', '09', '11'] and date[4:6]\
    \ not in ['02']:\n        return False\n\n    # Check if the date's number of\
    \ days is within 1-29\n    if len(date) > 6 and len(date) < 15 and date[4:6] not\
    \ in ['01', '03', '05', '07', '08', '10', '12'] and date[4:6] not in ['04', '06',\
    \ '09', '11'] and date[4:6] not in ['02']:\n        return False\n\n    # Check\
    \ if the date's number of days is within 1-28\n    if len(date) > 5 and len(date)\
    \ < 16 and date[4:6] not in ['01', '03', '05', '07', '08', '10', '12'] and date[4:6]\
    \ not in ['04', '06', '09', '11'] and date[4:6] not in ['02']:\n        return\
    \ False\n\n    # Check if the date's month is within 1-12\n    if len(date) >\
    \ 4 and len(date) < 17 and date[4:6] not in ['01', '03', '05', '07', '08', '10',\
    \ '12'] and date[4:6] not in ['04', '06', '09', '11'] and date[4:6] not in ['02']:\n\
    \        return False\n\n    # Check if the date is in the correct format\n  \
    \  try:\n        datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n\
    \        return False\n\n    return True\n\n", "    valid_date = False\n    #\
    \ Your Code Goes Here \n    return valid_date\n", "    \n    # 1. date string\
    \ is not empty\n    if not date:\n        return False\n\n    # 2. the number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    if date.count('-') != 3:\n        return False\n\n    # 3. The\
    \ months should not be less than 1 or higher than 12.\n    if len(date) == 7:\n\
    \        if date.count('-') != 3:\n            return False\n\n    # 4. The date\
    \ should be in the format: mm-dd-yyyy\n    if '-' not in date:\n        return\
    \ False\n\n    # 5. split the date into month and day\n    split_date = date.split('-')\n\
    \n    # 6. check the length of the month\n    if len(split_date) != 3:\n     \
    \   return False\n\n    # 7. check the format of the date\n    month, day, year\
    \ = split_date\n\n    if month.isdigit():\n        if not 1 <= int(month) <= 12:\n\
    \            return False\n\n    # 8. check the number of days of the month\n\
    \    elif day == '1':\n        if not 1 <= int(day) <= 31:\n            return\
    \ False\n\n    elif day == '31':\n        if not 1 <= int(day) <= 30:\n      \
    \      return False\n\n    elif day == '30':\n        if not 1 <= int(day) <=\
    \ 29:\n            return False\n\n    else:\n        return False\n\n    # 9.\
    \ check the date format\n    if year.isdigit():\n        if not 1 <= int(year)\
    \ <= 9999:\n            return False\n    else:\n        return False\n\n    return\
    \ True\n\n", "    # write your code here\n    if not date:\n        return False\n\
    \    # check empty string\n    if not date.strip():\n        return False\n  \
    \  # check invalid date\n    if date[len(date) - 1] == '/':\n        return False\n\
    \    # check invalid date\n    if len(date) != 8:\n        return False\n    #\
    \ check invalid day\n    if date[2] < 1 or date[2] > 31:\n        return False\n\
    \    # check invalid month\n    if date[1] < 1 or date[1] > 12:\n        return\
    \ False\n    return True\n\n\nassert valid_date('03-11-2000')\nassert valid_date('15-01-2012')\n\
    assert valid_date('04-0-2040')\nassert valid_date('06-04-2020')\nassert valid_date('06/04/2020')\n\
    </cell>\n<cell>", "    if date==\"\": return False\n    date_split=date.split('-')\n\
    \    if len(date_split) != 3: return False\n    \n    day=int(date_split[2])\n\
    \    if day not in range(1,32): \n        return False\n    \n    month=int(date_split[1])\n\
    \    if month in (1,3,5,7,8,10,12):\n        if day in range (1,31): \n      \
    \      return True\n        elif day in range (29,30):\n            if month ==\
    \ 2: \n                return True\n            return False\n        return False\n\
    \    if month in (4,6,9,11):\n        if day in range (1,30):\n            if\
    \ month == 2: \n                return True\n            return False\n      \
    \  return False\n    if month == 2:\n        if day in range (1,29):\n       \
    \     return True\n        return False\n    return False\n", "    if date ==\
    \ '':\n        return False\n    else:\n        if date.count('-') != 2:\n   \
    \         return False\n        date_split = date.split('-')\n        if len(date_split)\
    \ != 3:\n            return False\n        year, month, day = int(date_split[2]),\
    \ int(date_split[0]), int(date_split[1])\n        month_range = ((1, 3), (4, 6),\
    \ (9, 11), (12, 31))\n        if month in month_range:\n            if (day >\
    \ month_range[month][0]) and (day < month_range[month][1]):\n                if\
    \ month == 2 and day > 29:\n                    return False\n               \
    \ else:\n                    return True\n            else:\n                return\
    \ False\n        else:\n            return False\n\n", "    date = date.lower()\n\
    \    date_pattern = r\"^((01|03|05|07|08|10|12|02)[-\\/\\.]?(0[1-9]|1[0-2])[-\\\
    /\\.]?(\\d{4})|(04|06|09|11)[-\\/\\.]?(0[1-9]|[1-2]\\d|3[0-1]))$\"\n    match\
    \ = re.match(date_pattern, date)\n    if match:\n        if re.match(r\"^((01|03|05|07|08|10|12|02)[-\\\
    /\\.]?(0[1-9]|1[0-2])[-\\/\\.]?(\\d{4})|(04|06|09|11)[-\\/\\.]?(0[1-9]|[1-2]\\\
    d|3[0-1]))$\", date):\n            year, month, day = [int(x) for x in date.split('-')]\n\
    \            if 1 <= month <= 12:\n                if 1 <= day <= 31:\n      \
    \              if 1 <= year <= 9999:\n                        return True\n  \
    \              else:\n                    if 1 <= year <= 99:\n              \
    \          return True\n            else:\n                if 1 <= month <= 2:\n\
    \                    if 1 <= day <= 30:\n                        return True\n\
    \                else:\n                    if 1 <= month <= 4:\n            \
    \            if 1 <= day <= 29:\n                            return True\n   \
    \ return False\n\n", "    # TODO Implement this function\n    return True\n\n",
  "    if len(date.strip()) is 0:\n        return False\n    if date.count(\"-\")\
    \ != 3:\n        return False\n    if date.count(\"/\") != 2:\n        return\
    \ False\n    try:\n        int(date)\n    except ValueError:\n        return False\n\
    \    try:\n        date_object = datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \    except ValueError:\n        return False\n    return date_object is not None\n",
  "    pass\n", "    if date == '':\n        return False\n    split_date = date.split('-')\n\
    \    if len(split_date) == 3:\n        date1 = split_date[0]\n        month1 =\
    \ int(date1[2:])\n        day1 = int(split_date[1])\n        year1 = int(split_date[2])\n\
    \        if month1 in [1, 3, 5, 7, 8, 10, 12]:\n            if day1 < 1 or day1\
    \ > 31:\n                return False\n        else:\n            if day1 < 1\
    \ or day1 > 30:\n                return False\n        if month1 in [4, 6, 9,\
    \ 11]:\n            if day1 < 1 or day1 > 29:\n                return False\n\
    \        else:\n            if day1 < 1 or day1 > 28:\n                return\
    \ False\n        if month1 == 2:\n            if day1 < 1 or day1 > 28:\n    \
    \            return False\n        else:\n            if day1 < 1 or day1 > 29:\n\
    \                return False\n    else:\n        return False\n    return True\n\
    \n", "    if len(date) < 1:\n        return False\n    \n    # validate month\
    \ and day\n    try:\n        date_list = date.split('-')\n        if len(date_list)\
    \ != 3:\n            return False\n        date_checker = datetime.datetime.strptime(date_list[0],\
    \ '%m')\n        if date_checker.month < 1 or date_checker.month > 12:\n     \
    \       return False\n        date_checker = datetime.datetime.strptime(date_list[1],\
    \ '%d')\n        if date_checker.day < 1 or date_checker.day > 30:\n         \
    \   return False\n    except ValueError:\n        return False\n\n    # validate\
    \ year\n    try:\n        date_list = date.split('-')\n        if len(date_list)\
    \ != 3:\n            return False\n        date_checker = datetime.datetime.strptime(date_list[2],\
    \ '%Y')\n        if date_checker.year < 2000 or date_checker.year > 2100:\n  \
    \          return False\n    except ValueError:\n        return False\n\n    return\
    \ True\n</cell>\n<text>\nPart 3: Write a function that can generate all the possible\
    \ combinations of k letters from s\n\nFor example, let\u2019s say k is 2 and s\
    \ is the word \u201Capple\u201D. Then, the output should be all the possible combinations\
    \ of 2 letters from s: \u201Cappl\u201D, \u201Capple\u201D, \u201Capp\u201D, \u201C\
    a\u201D, \u201Ce\u201D, \u201Ci\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Cl\u201D\
    , \u201Ce\u201D, \u201Cp\u201D, \u201Ce\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201C\
    l\u201D, \u201Ce\u201D, \u201Cp\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Ca\u201D\
    , \u201Cl\u201D, \u201Cp\u201D, \u201Cl\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201C\
    p\u201D, \u201Cp\u201D, \u201Ca\u201D, \u201Cl\u201D, \u201Ca\u201D, \u201Cl\u201D\
    , \u201Cp\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Cl\u201D, \u201Ca\u201D, \u201C\
    p\u201D, \u201Cp\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D\
    , \u201Cl\u201D, \u201Ce\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201C\
    a\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D\
    , \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201C\
    p\u201D, \u201Ca\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D\
    , \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201Cp\u201D, \u201C\
    a\u201D, \u201Cl\u201D, \u201Cp\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201Cp\u201D\
    , \u201Cp\u201D, \u201Ca\u201D, \u201Cp\u201D, \u201C", "    try:\n        datetime.strptime(date,\
    \ '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False\n",
  "    day = int(date[:2])\n    month = int(date[3:5])\n    year = int(date[6:10])\n\
    \n    # Validate month\n    if (month < 1 or month > 12):\n        return False\n\
    \    \n    # Validate day\n    if (day < 1 or day > 30):\n        return False\n\
    \    \n    # Validate year\n    if (month < 4 or month > 11):\n        return\
    \ False\n    \n    return True\n", "    months = {'01':'Jan','02':'Feb','03':'Mar','04':'Apr','05':'May','06':'Jun','07':'Jul','08':'Aug','09':'Sep','10':'Oct','11':'Nov','12':'Dec'}\n\
    \    if len(date) == 0 or len(date) > 10:\n        return False\n    date_parts\
    \ = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    try:\n\
    \        day = int(date_parts[1])\n    except ValueError:\n        return False\n\
    \    if len(date_parts[0]) < 1 or len(date_parts[0]) > 12:\n        return False\n\
    \    try:\n        month_number = int(date_parts[0][:2])\n    except ValueError:\n\
    \        return False\n    if month_number < 1 or month_number > 12:\n       \
    \ return False\n    \n    return month_number == 2 and day < 31 and day > 1 and\
    \ day < 30\n    \n ", "    # write your code here\n", "    return bool(date and\
    \ not date.count('-') == 2 and 1 <= int(date[0:2]) <= 12 and 1 <= int(date[3:5])\
    \ <= 31 and 1 <= int(date[6:10]) <= 30 and 1 <= int(date[11:13]) <= 29 and 1 <=\
    \ int(date[14:16]) <= 12 and 1 <= int(date[17:19]) <= 31 and 1 <= int(date[20:22])\
    \ <= 30 and 1 <= int(date[23:25]) <= 29 and 1 <= int(date[26:28]) <= 12 and 1\
    \ <= int(date[29:31]) <= 31 and 1 <= int(date[32:34]) <= 30 and 1 <= int(date[35:37])\
    \ <= 29 and 1 <= int(date[38:40]) <= 12 and 1 <= int(date[41:43]) <= 31 and 1\
    \ <= int(date[44:46]) <= 30 and 1 <= int(date[47:49]) <= 29 and 1 <= int(date[50:53])\
    \ <= 12 and 1 <= int(date[54:56]) <= 31 and 1 <= int(date[57:59]) <= 30)\n\n",
  "    \n    day, month, year = str(date).split('/')\n    \n    if day=='' or day=='None'\
    \ or int(day) < 1:\n        return False\n    \n    if month=='' or month=='None'\
    \ or int(month)< 1 or int(month)> 12:\n        return False\n    \n    if year==''\
    \ or year=='None' or int(year)<1:\n        return False\n    \n    if len(str(year))\
    \ == 4:\n        year = int(year)\n    if year%4 == 0:\n        year += 2000\n\
    \    \n    if (len(str(year))<4 and int(year) < 1) or int(year)> 100:\n      \
    \  return False\n    \n    if (len(str(month))<2 and int(month) < 1) or int(month)>\
    \ 12:\n        return False\n    \n    if (len(str(day))<2 and int(day) < 1) or\
    \ int(day)> 31:\n        return False\n    \n    if month == '1':\n        if\
    \ day == '31':\n            return False\n        if day == '28':\n          \
    \  return True\n        if day == '29':\n            return False\n    else:\n\
    \        if day == '30':\n            return True\n        if day == '31':\n \
    \           return False\n        if day == '29':\n            return False\n\
    \    \n    if month == '2':\n        if day == '31':\n            return False\n\
    \        if day == '30':\n            return False\n        if day == '29':\n\
    \            return True\n        if day == '31':\n            return True\n \
    \   else:\n        if day == '31':\n            return False\n        if day ==\
    \ '30':\n            return True\n        if day == '29':\n            return\
    \ True\n        if day == '31':\n            return False\n\n    if month == '3':\n\
    \        if day == '31':\n            return False\n        if day == '30':\n\
    \            return False\n        if day == '29':\n            return True\n\
    \        if day == '31':\n            return True\n    else:\n        if day ==\
    \ '31':\n            return False\n        if day == '30':\n            return\
    \ True\n        if day == '29':\n            return True\n        if day == '31':\n\
    \            return False\n\n    if month == '4':\n        if day == '31':\n \
    \           return False\n        if day == '30':\n            return False\n\
    \        if day == '29':\n            return True\n        if day == '31':\n \
    \           return True\n    else:\n        if day == '31':\n            return\
    \ False\n        if day == '30':\n            return True\n        if day == '29':\n\
    \            return True\n        if day == '31':\n            return False\n\n\
    \    if month == '5':\n        if day == '31':\n            return False\n   \
    \     if day == '30':\n            return False\n        if day == '29':\n   \
    \         return True\n        if day == '31':\n            return True\n    else:\n\
    \        if day == '31':\n            return False\n        if day == '30':\n\
    \            return True\n        if day == '29':\n            return True\n \
    \       if day == '31':\n            return False\n\n    if month == '6':\n  \
    \      if ", "    year = date[0:4]\n    month = date[4:6]\n    day = date[6:]\n\
    \n    if len(date) < 1 or len(date) > 31 or len(month) < 1 or len(month) > 12\
    \ or len(day) < 1 or len(day) > 30 or len(year) < 1 or len(year) > 4:\n      \
    \  return False\n    else:\n        try:\n            date = datetime.strptime(date,\
    \ '%m-%d-%Y')\n            date_obj = datetime.date(year, month, day)\n      \
    \      if date_obj == date:\n                return True\n            else:\n\
    \                return False\n        except:\n            return False\n\n",
  "    date_format = '%d-%m-%Y'\n    today = date.today()\n    if date == '':\n  \
    \      return False\n    if len(date) < 1:\n        return False\n    if date.__len__()\
    \ < 3:\n        return False\n    \n    try:\n        date = datetime.strptime(date,\
    \ date_format)\n    except ValueError:\n        return False\n    if date < today\
    \ - timedelta(days=1):\n        return False\n    if date.month < 1 or date.month\
    \ > 12:\n        return False\n    if date.day < 1 or date.day > 29:\n       \
    \ return False\n    return True\n\n", "    if len(date) <= 0 or len(date) != 30:\n\
    \        return False\n    month = int(date[:2])\n    day = int(date[2:4])\n \
    \   year = int(date[4:7])\n\n    if month == 1:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in {4, 6}:\n        if day < 1 or day\
    \ > 30:\n            return False\n    elif month == 2:\n        if day < 1 or\
    \ day > 29:\n            return False\n    else:\n        if day < 1 or day >\
    \ 31:\n            return False\n    return True\n\n", "    \n    pass\n\n", " \
    \   if not date:\n        return False\n\n    splitted_date = date.split('/')\n\
    \    year = int(splitted_date[2])\n    month = int(splitted_date[0][0:2])\n  \
    \  day = int(splitted_date[0][2:4])\n\n    if (len(splitted_date[0]) > 2):\n \
    \       days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n \
    \       if (month in [1, 3, 5]):\n            if (day > days_in_month[month -\
    \ 1]):\n                return False\n        elif (month in [4, 6, 9]):\n   \
    \         if (day > 29):\n                return False\n    elif (len(splitted_date[0])\
    \ == 2):\n        days_in_month = [29, 30, 31]\n\n        if (month in [1, 3]):\n\
    \            if (day > days_in_month[month - 1]):\n                return False\n\
    \        elif (month in [4, 6]):\n            if (day > 31):\n               \
    \ return False\n\n    return True\n\n", "    \n    #Write your code here\n   \
    \ return True\n</cell>\n<cell>", "    if len(date.strip()) == 0:\n        return\
    \ False\n    \n    if len(date.split('-')) != 3:\n        return False\n    \n\
    \    \n    \n    day, month, year=date.split('-')\n    day=int(day)\n    month=int(month)\n\
    \    year=int(year)\n    \n    daysInMonth=[31, 30, 29, 28]\n    if month<1 or\
    \ month>12:\n        return False\n    \n    if month in (1,2,4,6,9,11):\n   \
    \     if (year%4==0 and year%100!=0) or year%400==0:\n            return True\n\
    \        else:\n            for d in daysInMonth:\n                if d==day:\n\
    \                    return True\n                else:\n                    day-=1\n\
    \            return False\n    elif month in (3,5,7,8,10,12):\n        return\
    \ True\n    else:\n        return False\n", "    # your code here\n    \n    return\
    \ not (date == '' or len(date.split('-')) != 3 or len(date.split('-')[1]) != 2\
    \ or len(date.split('-')[2]) != 4 or date.split('-')[2] != '-' or date.split('-')[1]\
    \ != '-' or date.split('-')[0] != '-' or date.split('-')[1] < 1 or date.split('-')[2]\
    \ < 1 or date.split('-')[3] > 30 or date.split('-')[3] > 29 or date.split('-')[1]\
    \ < 1 or date.split('-')[2] < 1 or date.split('-')[3] > 12 or date.split('-')[2]\
    \ < 1 or date.split('-')[1] < 1 or date.split('-')[3] > 30 or date.split('-')[2]\
    \ < 1 or date.split('-')[1] < 1 or date.split('-')[2] < 1)\n", "    if date ==\
    \ \"\":\n        return False\n    try:\n        date_components = date.split(\"\
    /\")\n        \n        if date_components[0].isdigit():\n            month =\
    \ int(date_components[0])\n            if month < 1 or month > 12:\n         \
    \       return False\n\n            day = int(date_components[1])\n          \
    \  if day < 1 or day > 31:\n                return False\n        else:\n    \
    \        return False\n        year = int(date_components[2])\n        if year\
    \ < 1000 or year > 2100:\n            return False\n    except ValueError:\n \
    \       return False\n    return True\n", "    return date!=\"\" and len(date)\
    \ != 0 and int(date[0]) <= 12 and int(date[1]) <= 31 and int(date[2]) <= 30 and\
    \ int(date[0]) <= 29 and int(date[1]) <= 12 and (date[1] != 0 or date[0] == 0)\n",
  "    # Write your code here\n    \n    return True\n</cell>\n<cell>", "    if len(date)\
    \ < 1 or len(date) > 31:\n        return False\n    elif len(date) < 2 or len(date)\
    \ > 29:\n        return False\n    elif len(date) < 3 or len(date) > 12:\n   \
    \     return False\n    elif date[-2] != \"/\" and date[-1] != \"/\":\n      \
    \  return False\n    elif date[-4] != \"-\" and date[-5] != \"-\" and date[-6]\
    \ != \"-\" and date[-7] != \"-\" and date[-8] != \"-\" and date[-9] != \"-\" and\
    \ date[-10] != \"-\" and date[-11] != \"-\" and date[-12] != \"-\" and date[-13]\
    \ != \"-\" and date[-14] != \"-\" and date[-15] != \"-\" and date[-16] != \"-\"\
    \ and date[-17] != \"-\" and date[-18] != \"-\" and date[-19] != \"-\" and date[-20]\
    \ != \"-\" and date[-21] != \"-\" and date[-22] != \"-\" and date[-23] != \"-\"\
    \ and date[-24] != \"-\" and date[-25] != \"-\" and date[-26] != \"-\" and date[-27]\
    \ != \"-\" and date[-28] != \"-\" and date[-29] != \"-\":\n        return False\n\
    \    elif date[0] != '0' and date[1] != '-' and date[2] != '-':\n        return\
    \ False\n    else:\n        if date[-2:] == \"30\":\n            if int(date[-2:])\
    \ > 30:\n                return False\n            elif int(date[-2:]) < 1:\n\
    \                return False\n        elif date[-2:] == \"29\":\n           \
    \ if int(date[-2:]) < 1 or int(date[-2:]) > 29:\n                return False\n\
    \        elif int(date[-2:]) < 1 or int(date[-2:]) > 31:\n            return False\n\
    \        return True\n\n", "    day = date[6:8]\n    month = date[4:6]\n    year\
    \ = date[0:4]\n    \n    days_valid = False\n    days_in_months = [31,28,31,30,31,30,31,30,31,30,31]\n\
    \    \n    if day in ('01', '03'):\n        if int(month) in range(1, 4):\n  \
    \          if int(year) in range(2000, 2020):\n                days_valid = True\n\
    \    \n    elif day in ('05', '07', '08', '10', '12'):\n        if int(month)\
    \ in range(4, 11):\n            if int(year) in range(2000, 2020):\n         \
    \       days_valid = True\n    \n    elif day in ('02', '04', '06', '09', '11'):\n\
    \        if int(month) in range(2, 12):\n            if int(year) in range(2000,\
    \ 2020):\n                days_valid = True\n    \n    if days_valid:\n      \
    \  return True\n    else:\n        return False\n</code>\n<|/ a tags=python |>\n\
    <| c |>\nWhile this code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a dscore=0 tags=python |>\nUsing a combination\
    \ of strptime and strftime and datetime.strftime we can get an easy solution to\
    \ this problem. Here is an example that might help you.\n<code>\nfrom datetime\
    \ import datetime, timedelta\n", "    # Your code here\n\n    months = ['01','03','05','07','08','10','11','12']\n\
    \    if date == None or date == '':\n        return False\n    date = date.split('/')\n\
    \    if len(date) != 3:\n        return False\n    month = int(date[0])\n    day\
    \ = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n \
    \       return False\n    if day < 1 or day > 31:\n        return False\n    if\
    \ year < 1950 or year > 2099:\n        return False\n    \n    month = months.index(month)\n\
    \    if month == 2:\n        if day > 29:\n            return False\n    else:\n\
    \        if day > 30:\n            return False\n    \n    return True\n</cell>\n\
    <cell>", "    pass\n", "    if date != \"\":\n        year = date[-4:]\n     \
    \   month = date[0:2]\n        day = date[2:4]\n        if year.isnumeric() and\
    \ month.isnumeric() and day.isnumeric():\n            if not 1 <= int(month) <=\
    \ 12:\n                return False\n            day = int(day)\n            if\
    \ 1 <= day <= 31:\n                if not 1 <= int(month) <= 12:\n           \
    \         return False\n            elif 1 <= day <= 30:\n                if not\
    \ 1 <= int(month) <= 12:\n                    return False\n            elif 1\
    \ <= day <= 29:\n                if not 1 <= int(month) <= 12:\n             \
    \       return False\n            else:\n                return False\n      \
    \      return True\n        return False\n", "    pass\n", "    \n    dateSplit\
    \ = date.split('-')\n    if len(dateSplit) < 3:\n        return False\n    month\
    \ = dateSplit[0]\n    day = dateSplit[1]\n    year = int(dateSplit[2])\n    if\
    \ int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) < 1\
    \ or int(month) > 12:\n        return False\n    if int(month) < 4 or int(month)\
    \ > 11:\n        return False\n    if int(month) == 2 and int(day) > 29:\n   \
    \     return False\n    return True\n\nassert valid_date('03-11-2000')\nassert\
    \ valid_date('15-01-2012')\nassert valid_date('04-0-2040')\nassert valid_date('06-04-2020')\n\
    assert valid_date('06/04/2020')\nassert valid_date('04-07-2000')\nassert valid_date('03-11-2000')\n\
    assert valid_date('15-01-2012')\nassert valid_date('04-0-2040')\nassert valid_date('06-04-2020')\n\
    assert valid_date('06/04/2020')\nassert valid_date('04-07-2000')\n</cell>\n<text>\n\
    Part II: Finding all the valid dates\nFinding all the valid dates in 'dates.txt'\n\
    Now we have implemented the function valid_date which validates the date string.\n\
    We know that the function will return a True or False value for each date in our\
    \ text file. But what do we do next?\n\nWe need to store all the valid dates into\
    \ a list. So we will iterate through all the dates in the text file and check\
    \ if the date in the text file is valid or not. We will append the valid dates\
    \ to a list called 'validdates'.\nFinally, we will print the validdates list.\n\
    \n\n</text>\n<cell>\nvaliddates = []\n\nwith open('dates.txt', 'r') as file:\n\
    \    for date in file:\n        if valid_date(date):\n            validdates.append(date)\n\
    \nprint(validdates)\n</cell>\n<text>\nPart III: Parsing the dates\nPart III: Parsing\
    \ the dates\nWe will now parse the dates we have stored in the 'dates.txt' file.\n\
    \nWe will use the datetime library to parse the dates:\n\n\n</text>\n<cell>\n\
    from datetime import datetime\n    ", "    # TODO implement the function here\n\
    \    return False \n</cell>\n<text>\nQuestion 7\nImplement the function valid_date_range\
    \ which accepts a date and a number of days and returns True if the date is a\
    \ valid date range and False otherwise.\n\nThe date range is valid if all days\
    \ are valid and at least 2 days are valid for both dates.\n\nExample: \nvalid_date_range('08-04-2020',\
    \ 15) => True\n\nvalid_date_range('08-04-2020', 13) => False\n\nvalid_date_range('13-05-2026',\
    \ 15) => False\n\nvalid_date_range('13-05-2026', 13) => True\n\nvalid_date_range('13-05-2026',\
    \ 12) => False\n\nvalid_date_range('13-05-2026', 11) => False\n\nvalid_date_range('13-05-2026',\
    \ 10) => True\n\nvalid_date_range('13-05-2026', 9) => False\n\nvalid_date_range('13-05-2026',\
    \ 8) => False\n\nvalid_date_range('13-05-2026', 7) => False\n\nvalid_date_range('13-05-2026',\
    \ 6) => False\n\nvalid_date_range('13-05-2026', 5) => False\n\nvalid_date_range('13-05-2026',\
    \ 4) => False\n\nvalid_date_range('13-05-2026', 3) => False\n\nvalid_date_range('13-05-2026',\
    \ 2) => False\n\nvalid_date_range('13-05-2026', 1) => False\n\nvalid_date_range('13-05-2026',\
    \ 0) => False\n\n</text>\n<cell>", "    date_format = \"%m-%d-%Y\"\n    format_valid_date\
    \ = datetime.datetime.strptime(date, date_format)\n    return True if format_valid_date\
    \ else False\n\n", "    date_check = False\n\n    if len(date) < 1:\n        print(\"\
    Error! Date is empty!\")\n        return False\n    else:\n        date_check\
    \ = True\n\n    split_date = date.split('-')\n    if len(split_date) != 3:\n \
    \       print(\"Error! Invalid date format!\")\n        return False\n    else:\n\
    \        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n     \
    \   month_days.extend([30]*12)\n        month_days.extend([29]*12)\n\n       \
    \ split_date = date.split('-')\n        split_date = [int(i) for i in split_date]\n\
    \n        if split_date[0] > 12 or split_date[1] > 12:\n            print(\"Error!\
    \ Invalid date format!\")\n            return False\n        else:\n         \
    \   year = split_date[0]\n            if split_date[1] > month_days[split_date[0]]:\n\
    \                print(\"Error! Invalid date format!\")\n                return\
    \ False\n            elif split_date[2] > 31:\n                print(\"Error!\
    \ Invalid date format!\")\n                return False\n            else:\n \
    \               date_check = True\n\n    return date_check\n\n", "    valid =\
    \ True\n    if len(date) == 0 or len(date) > 31:\n        valid = False\n    if\
    \ date[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11',\
    \ '12']:\n        valid = False\n    if int(date[1]) < 1 or int(date[1]) > 12:\n\
    \        valid = False\n    if int(date[2]) < 1 or int(date[2]) > 31:\n      \
    \  valid = False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        valid\
    \ = False\n    return valid\n\n", "    if not date:\n        return False\n\n\
    \    if date.isspace():\n        return False\n\n    if len(date) != 9:\n    \
    \    return False\n\n    valid_months = [str(i+1).zfill(2) for i in range(1, 13)]\n\
    \    valid_days = [str(i+1).zfill(2) for i in range(1, 32)]\n    valid_days.append(\"\
    01\")\n    valid_days.append(\"02\")\n    valid_days.append(\"03\")\n    valid_days.append(\"\
    04\")\n    valid_days.append(\"05\")\n    valid_days.append(\"06\")\n    valid_days.append(\"\
    07\")\n    valid_days.append(\"08\")\n    valid_days.append(\"09\")\n    valid_days.append(\"\
    10\")\n    valid_days.append(\"11\")\n    valid_days.append(\"12\")\n    valid_days.append(\"\
    01\")\n\n    if date[0:2] not in valid_months:\n        return False\n\n    if\
    \ date[3] not in valid_days:\n        return False\n\n    if date[0:2] <= \"12\"\
    \ and date[3] <= \"31\":\n        return True\n\n    if date[0:2] <= \"12\" and\
    \ date[3] <= \"30\":\n        return True\n\n    if date[0:2] <= \"12\" and date[3]\
    \ <= \"29\":\n        return True\n\n    if date[0:2] <= \"01\" and date[3] <=\
    \ \"12\":\n        return True\n\n    return False\n\n", "    if len(date) <=\
    \ 0 or date[0] != '-':\n        return False\n\n    parts = date.split('-')\n\n\
    \    if len(parts) != 3:\n        return False\n\n    day = int(parts[0])\n\n\
    \    if day > 31 or day < 1:\n        return False\n\n    month = int(parts[1])\n\
    \n    if month > 12 or month < 1:\n        return False\n\n    if len(parts[2])\
    \ != 4:\n        return False\n\n    year = 2000 + int(parts[2])\n\n    return\
    \ True\n\n", "    # write your code here\n    \n    return len(date) > 0\n\n",
  "    \n    pass\n\n", "    if len(date) == 0:\n        return False\n\n    day,\
    \ month, year = map(int, date.split('-'))\n\n    if ((1 <= month <= 12) and (1\
    \ <= day <= 30) and (1 <= year <= 10)):\n        return True\n\n    if ((1 <=\
    \ month <= 12) and (1 <= day <= 29) and (1 <= year <= 10)):\n        return True\n\
    \n    if ((1 <= month <= 12) and (1 <= day <= 31) and (1 <= year <= 10)):\n  \
    \      return True\n\n    if ((1 <= month <= 12) and (1 <= day <= 30) and (1 <=\
    \ year <= 10)):\n        return True\n\n    return False\n\n", "    date_valid\
    \ = bool(date) # default value\n    if not date: # if the input date field is\
    \ empty\n        return False\n    if date.count('-') != 2:\n        return False\n\
    \    split = date.split('-')\n    if len(split) != 3:\n        return False\n\
    \    days_valid = False # default value\n    months_valid = False # default value\n\
    \    days_in_month = {1: 31, 3: 30, 5: 29, 7: 28, 8: 31, 10: 30, 12: 31}\n   \
    \ months_in_month = {4: 12, 6: 12, 9: 12, 11: 12}\n    date_split_len = len(split)\n\
    \    for i in range(date_split_len):\n        days_valid |= days_valid and i >=\
    \ 1 and i <= 31\n        months_valid |= months_valid and i >= 1 and i <= 12\n\
    \        month_day = int(split[i])\n        if month_day >= 0 and month_day <=\
    \ days_in_month[split[date_split_len - i - 1]]:\n            continue\n      \
    \  else:\n            return False\n    if not days_valid:\n        return False\n\
    \    if not months_valid:\n        return False\n    return True\n\n", "    pass\n\
    \n", "    if not date:\n        return False\n    elif len(date) < 1 or len(date)\
    \ > 31:\n        return False\n    month = int(date[0:2])\n    day = int(date[2:4])\n\
    \    year = int(date[4:6])\n    if month < 1 or month > 12:\n        return False\n\
    \    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n\
    \        return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n\
    \        return False\n    return True\n\n", "    days_passed = date[-2:]\n  \
    \  months_passed = date[-5:-2]\n    years_passed = date[-9:-4]\n\n    days_passed\
    \ = int(days_passed)\n    months_passed = int(months_passed)\n    years_passed\
    \ = int(years_passed)\n\n    valid = False\n    if days_passed > 0 and months_passed\
    \ > 0 and years_passed > 0:\n        if months_passed == 1 and months_passed ==\
    \ 12:\n            if days_passed <= 31 and days_passed > 0 and years_passed ==\
    \ 2020 and days_passed > 30:\n                valid = True\n        if months_passed\
    \ <= 12:\n            if days_passed <= 30 and days_passed > 0 and years_passed\
    \ == 2020 and days_passed > 29:\n                valid = True\n\n    return valid\n",
  "    # Write your code here\n    return True\n</cell>\n<text>\nSolution\n\n</text>\n\
    <cell>", "    if not date:\n        return False\n    month, day, year = date.split('-')\n\
    \    if month == '0':\n        month = 12\n    else:\n        month = month.split('/')[0]\n\
    \    year = int(year)\n    month = int(month)\n    day = int(day)\n    return\
    \ ((month > 0 and month < 13 and day > 0 and day < 31)\n            or (month\
    \ > 0 and month < 13 and day > 0 and day < 30)\n            or (month > 0 and\
    \ month < 13 and day > 0 and day < 29)\n            or (month > 0 and month <\
    \ 13 and day > 0))\n\n", "    if len(date) > 0:\n        days_count = 0\n    \
    \    month = date[0:2]\n        day = date[3:5]\n        year = date[6:10]\n \
    \       for m in MONTHS:\n            if m[1] == month:\n                days_count\
    \ += 1\n                break\n        if days_count < 1 or days_count > 31:\n\
    \            return False\n        if days_count < 1 or days_count > 30:\n   \
    \         return False\n        if days_count < 1 or days_count > 29:\n      \
    \      return False\n        if int(month) < 1 or int(month) > 12:\n         \
    \   return False\n        if int(day) < 1 or int(day) > 31:\n            return\
    \ False\n        if int(year) < 1 or int(year) > 9999:\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python |>\n<| c |>\nThank you for your help!!\
    \ This is definitely helpful for me. I'm still trying to figure out how to get\
    \ this to work. I  will update the post shortly with my code if I can figure it\
    \ out. Thanks again!!\n<|/ c |>\n<| c |>\nI have updated the post to give an example\
    \ of an invalid date input :)\n<|/ c |>\n<| a tags=python |>\nA simple and quick\
    \ way is to check if the first letter is either '0' or '1' and return False if\
    \ so\n<code>", "    # your code goes here\n    date_format = '%d-%m-%Y'\n    \n\
    \    try: \n        date_object = datetime.strptime(date, date_format)\n    except\
    \ ValueError:\n        return False\n    return True\n\nprint(valid_date('03-11-2000'))\n\
    print(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\n\
    print(valid_date('06/04/2020'))\n</code>\n<|/ a dscore=1 tags=python-3.x,date,python\
    \ |>\n<| c |>\nThis doesn't answer the question.\n<|/ c |>\n<| c |>\nSorry, I\
    \ misread my question. I thought he wanted to check if a string was valid date\
    \ or not. Now it's fixed\n<|/ c |>\n<| c |>\nWhy are you using `datetime.strptime`\
    \ and not `datetime.datetime.strptime`?\n<|/ c |>\n<| c |>\n`datetime.strptime`\
    \ is not used because `datetime.strptime` returns a `datetime` object, and we\
    \ are only interested in the `date` part.\n<|/ c |>\n<| c |>\nThe `datetime` module\
    \ has more functionality. For example, if you want to check if the given string\
    \ is in YYYY-MM-DD format, you can use the `datetime.datetime.strptime` function\
    \ and pass it the string and the format. See the edited code.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nfrom datetime import datetime\n", "    if not date:\n \
    \       return False\n    \n    date_str = date.strip().lower()\n    split_date\
    \ = date_str.split('-')\n    if len(split_date) != 3:\n        return False\n\
    \    \n    days = split_date[2]\n\n    # checking if the date is in correct format\n\
    \    day, month, year = split_date\n    months = ['1', '3', '5', '7', '8', '10',\
    \ '12']\n    if month in months:\n        month = int(month)\n        if int(day)\
    \ < 1 or int(day) > 31:\n            return False\n        elif int(day) > 30\
    \ and int(month) in [1, 4, 6]:\n            return False\n        elif int(day)\
    \ > 29 and int(month) == 2:\n            return False\n        else:\n       \
    \     return True\n    else:\n        return False\n    ", "    if date == \"\"\
    :\n        return False\n    else:\n        try:\n            split_date = date.split(\"\
    -\")\n            day = int(split_date[1])\n            month = int(split_date[0])\n\
    \            if month in [1, 3, 5, 7, 8, 10, 12]:\n                if day > 31\
    \ or day < 1:\n                    return False\n            elif month in [4,\
    \ 6, 9, 11]:\n                if day > 30 or day < 1:\n                    return\
    \ False\n            elif month == 2:\n                if day > 29 or day < 1:\n\
    \                    return False\n            else:\n                return False\n\
    \        except ValueError:\n            return False\n        return True\n\n",
  "    \n    # Write your code here\n    return not (date.strip() == '')\n    \n</cell>\n\
    <cell>\nassert valid_date('03-11-2000')\nassert valid_date('15-01-2012')\nassert\
    \ valid_date('04-0-2040')\nassert valid_date('06-04-2020')\nassert valid_date('06/04/2020')\n\
    </cell>\n<text>\nExercise 4\nWrite a function that validates an IPv4 address using\
    \ ipaddress library.\n\nValid IPv4 address should contain 4 groups of digits separated\
    \ by dots. For example,\n\n'123.456.78.910'\n'127.0.0.1'\n'192.168.1.1'\n'255.255.255.255'\n\
    '192.168.0.1'\n'255.255.255.255' \n\nIP address is a valid IPv4 address if all\
    \ the following conditions are satisfied:\n1. IP is in dotted quad-dotted decimal\
    \ format.\n2. No two consecutive dots are present in IP address. Ex: 255.255.255.255\
    \ is not a valid IP address.\n3. No dot appears two consecutive dots apart in\
    \ an IP address. Ex: 192.168.1.1 is not valid.\n\nFor Example: '192.168.0.1' is\
    \ a valid IP address because there are no two consecutive dots in it.\n\n\n</text>\n\
    <cell>\nfrom ipaddress import IPv4Address\n", "    #Your code here\n    if date:\n\
    \        date_list = date.split('-')\n        year = date_list[0]\n        month\
    \ = date_list[1]\n        day = date_list[2]\n        if month in months:\n  \
    \          if day in days:\n                if year.isdigit() and month.isdigit()\
    \ and day.isdigit():\n                    year = int(year)\n                 \
    \   month = int(month)\n                    day = int(day)\n                 \
    \   if 1 <= month <= 12 and 1 <= day <= 31 and 1 <= year <= 9999:\n          \
    \              if day > 30 and day < 31:\n                            if (year\
    \ % 4 == 0) and (year % 100 != 0) or (year % 400 == 0):\n                    \
    \            return True\n                        elif day > 30 and day < 29:\n\
    \                            return True\n                        elif day > 29:\n\
    \                            return True\n                        else:\n    \
    \                        return False\n                    else:\n           \
    \             return False\n                else:\n                    return\
    \ False\n            else:\n                return False\n        else:\n    \
    \        return False\n    else:\n        return False\n\n", "    return not (date.strip()\
    \ == \"\" or len(date.split('-')) != 3 or int(date.split('-')[0]) > 12 or int(date.split('-')[1])\
    \ < 1 or int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 30 or int(date.split('-')[1])\
    \ > 31 or int(date.split('-')[1]) > 29 or int(date.split('-')[1]) < 1 or int(date.split('-')[0])\
    \ < 1)\n", "    return len(date) != 0 and \\\n           (1 <= days(date) <= 31)\
    \ and \\\n           (1 <= days(date) <= 30) and \\\n           (1 <= days(date)\
    \ <= 29) and \\\n           (0 <= month(date) <= 12) and \\\n           (date.split('-')[1]\
    \ == '01' or date.split('-')[1] == '03' or date.split('-')[1] == '05' or date.split('-')[1]\
    \ == '07' or date.split('-')[1] == '08' or date.split('-')[1] == '10' or date.split('-')[1]\
    \ == '12' or date.split('-')[1] == '04' or date.split('-')[1] == '06' or date.split('-')[1]\
    \ == '09' or date.split('-')[1] == '11')\n</cell>\n<cell>", "    if not date or\
    \ not isinstance(date, str):\n        return False\n\n    # check if string is\
    \ empty\n    if not date:\n        return False\n\n    # check if number of days\
    \ is between 1 and 31\n    if len(date) == 6:\n        month, day, year = date.split('-')\n\
    \        month = month.zfill(2)\n        if month in MONTH_NUMBER_MAP:\n     \
    \       month_number = MONTH_NUMBER_MAP[month]\n        else:\n            return\
    \ False\n        if len(day) <= 1 or len(day) > 31:\n            return False\n\
    \        if int(day) < 1 or int(day) > 31:\n            return False\n       \
    \ if int(day) < 1 or int(day) > 29:\n            return False\n\n    else:\n \
    \       return False\n\n    # check if month numbers are between 1 and 12\n  \
    \  month_number = date.zfill(2)\n    if month_number not in MONTH_NUMBER_MAP:\n\
    \        return False\n\n    # check if year is between 1900 and 2099\n    year\
    \ = date.split('-')[1]\n    if int(year) < 1900:\n        return False\n    if\
    \ int(year) > 2099:\n        return False\n\n    return True\n\n", "    if not\
    \ date:\n        return False\n    \n    try:\n        if len(date.split('-'))\
    \ != 3:\n            return False\n        if len(date.split('-')[1]) < 1 or len(date.split('-')[1])\
    \ > 12:\n            return False\n        if len(date.split('-')[2]) < 1 or len(date.split('-')[2])\
    \ > 12:\n            return False\n        if len(date.split('-')[2]) > 30:\n\
    \            return False\n        if len(date.split('-')[1]) > 30:\n        \
    \    return False\n        date_obj = datetime.strptime(date, '%d-%m-%Y')\n  \
    \      return date_obj >= datetime.strptime('01-01-2000', '%d-%m-%Y')\n    except\
    \ ValueError:\n        return False\n", "    months = ['January','February','March','April','May','June','July','August','September','October','November','December']\n\
    \    days = ['1','2','3','4','5','6','7','8','9','10','11','12']\n    years =\
    \ ['20','21','22','23','24','25','26','27','28','29','30','31']\n\n    if date\
    \ == '':\n        return False\n\n    if date[0] == '0':\n        return False\n\
    \n    if len(date) != 10:\n        return False\n\n    if date[2] not in months:\n\
    \        return False\n\n    if len(date) != 8:\n        return False\n\n    if\
    \ len(date) != 7:\n        return False\n\n    if len(date) != 6:\n        return\
    \ False\n\n    if date[3] not in days:\n        return False\n\n    if len(date)\
    \ != 5:\n        return False\n\n    if date[2] != '01' and date[2] != '03' and\
    \ date[2] != '05' and date[2] != '07' and date[2] != '08' and date[2] != '10'\
    \ and date[2] != '12':\n        return False\n\n    if date[4] not in months:\n\
    \        return False\n\n    if date[5] not in days:\n        return False\n\n\
    \    if date[6] not in years:\n        return False\n\n    if len(date) != 7:\n\
    \        return False\n\n    if date[2] != '04' and date[2] != '06' and date[2]\
    \ != '09' and date[2] != '11':\n        return False\n\n    if date[2] != '02'\
    \ and date[2] != '06':\n        return False\n\n    return True\n", "    try:\n\
    \        datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n \
    \   except:\n        return False\n\n", "    if not date:\n        return False\n\
    \    month = date[0:2]\n    if len(month) < 1 or len(month) > 12:\n        return\
    \ False\n    day = date[2:4]\n    if len(day) < 1 or len(day) > 30:\n        return\
    \ False\n    year = date[4:8]\n    if len(year) < 1 or len(year) > 4:\n      \
    \  return False\n    if month == '01' and day == '01':\n        return True\n\
    \    elif month == '03' and day == '11':\n        return True\n    elif month\
    \ == '05' and day == '07':\n        return True\n    elif month == '07' and day\
    \ == '08':\n        return True\n    elif month == '08' and day == '09':\n   \
    \     return True\n    elif month == '10' and day == '12':\n        return True\n\
    \    elif month == '12' and day == '01':\n        return True\n    elif month\
    \ == '04' and day == '06':\n        return True\n    elif month == '06' and day\
    \ == '04':\n        return True\n    elif month == '09' and day == '11':\n   \
    \     return True\n    elif month == '11' and day == '10':\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\nvalid_date('03-11-2000')\n\
    </cell>\n<cell>\nvalid_date('15-01-2012')\n</cell>\n<cell>\nvalid_date('04-0-2040')\n\
    </cell>\n<cell>\nvalid_date('06-04-2020')\n</cell>\n<cell>\nvalid_date('06/04/2020')\n\
    </cell>\n<text>\nExercise 2.2 Write a function valid_month(month) that validates\
    \ a given month and returns True if the month is valid otherwise False. Test the\
    \ function with various valid and invalid month strings. Experiment with different\
    \ sample inputs.\nFor example for valid months:\n\nThe valid months are:\n0 1\
    \ 2 3 4 5 6 7 8 9 10 11 12\n\nFor invalid months:\n\nThe invalid months are:\n\
    'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n\
    'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n\
    'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n\
    'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n'j' -> False\n",
  "    date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n\
    \    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\
    \    if year < 1 or year > 100:\n        return False\n    elif month < 1 or month\
    \ > 12:\n        return False\n    elif day < 1 or day > 31:\n        return False\n\
    \    elif month == 2 and day > 29:\n        return False\n    else:\n        return\
    \ True\n\n", "    \n    \n    pass\n\n", "    \n    pass\n\n", "    \n    date_validity\
    \ = False\n\n    return date_validity\n\n", "    if not date:\n        return\
    \ False\n    day = int(date[-2:])\n    return 1 <= day <= 31 and 1 <= int(date[0:2])\
    \ <= 12 and 1 <= int(date[2:4]) <= 31 and 1 <= int(date[4:6]) <= 29\n\n", "  \
    \  \n    day_count = {1:31,2:29,3:28,4:31}\n    month_count = {1:12,3:13,5:14,7:15,8:16,10:17,12:18}\n\
    \    \n    if len(date)==0 or not date.strip():\n        return False\n    \n\
    \    # split the date string into separate day, month and year\n    day = date.split('-')[0].strip()\n\
    \    month = date.split('-')[1].strip()\n    year = date.split('-')[2].strip()\n\
    \    \n    if day=='' or month=='':\n        return False\n    \n    day = int(day)\n\
    \    month = int(month)\n    \n    if (month>12 or month<1) or month>12 or day>day_count[month]\
    \ or day<1 or day>31:\n        return False\n    \n    if len(year)==2 or len(year)==3:\n\
    \        year = year+2000\n    year = int(year)\n    \n    if (year>9999 or year<1901):\n\
    \        return False\n    \n    return True\n\n</cell>\n<cell>", "    date_valid\
    \ = True\n    days = None\n    month = None\n    year = None\n\n    try:\n   \
    \     day = int(date.split(' ')[0])\n        month = int(date.split(' ')[1])\n\
    \        year = int(date.split(' ')[2])\n    except:\n        date_valid = False\n\
    \    else:\n        if day < 1 or day > 31:\n            date_valid = False\n\
    \        elif month < 1 or month > 12:\n            date_valid = False\n     \
    \   elif month == 2 and day < 30:\n            date_valid = False\n        elif\
    \ month == 2 and (day > 29 or day == 31):\n            date_valid = False\n  \
    \      elif month == 2 and day == 29:\n            date_valid = False\n    return\
    \ date_valid\n", "    \n    # write your code here\n    \n    return True\n</cell>\n\
    <text>\nOnce you've completed your solution, run the code cell below to see if\
    \ your result is correct.\n\n\n</text>\n<cell>", "    if not date:\n        return\
    \ False\n\n    if date.isdigit():\n        day = int(date)\n        if day < 1\
    \ or day > 31:\n            return False\n        if month in [1,2,3,4,5,6,7,8,9,10,11,12]:\n\
    \            if day < 1 or day > 29:\n                return False\n        else:\n\
    \            if day < 1 or day > 30:\n                return False\n        return\
    \ True\n\n    if date == '':\n        return False\n\n    if month in [1,2,3,4,5,6,7,8,9,10,11,12]:\n\
    \        if day < 1 or day > 29:\n            return False\n    else:\n      \
    \  if day < 1 or day > 30:\n            return False\n\n    day, month, year =\
    \ date.split('-')\n    if year == '0000':\n        year = None\n    try:\n   \
    \     dateutil.parser.parse(date)\n        return True\n    except ValueError\
    \ as e:\n        return False\n", "    if date == '':\n        return False\n\
    \    \n    if len(date) < 1 or len(date) > 31:\n        return False\n    \n \
    \   month = date[0:2]\n    day = date[3:5]\n    year = date[6:]\n\n    if month\
    \ == '01' or month == '03' or month == '05' or month == '07' or month == '08'\
    \ or month == '10' or month == '12':\n        if int(month) == 1:\n          \
    \  if int(day) < 1 or int(day) > 31:\n                return False\n        else:\n\
    \            if int(day) < 1 or int(day) > 30:\n                return False\n\
    \    else:\n        if int(month) < 1 or int(month) > 12:\n            return\
    \ False\n        \n    return True\n</cell>\n<cell>\nvalid_date('03-11-2000')\n\
    </cell>\n<cell>\nvalid_date('15-01-2012')\n</cell>\n<cell>\nvalid_date('04-0-2040')\n\
    </cell>\n<cell>\nvalid_date('06-04-2020')\n</cell>\n<cell>\nvalid_date('06/04/2020')\n\
    </cell>\n<text>\nQuestion 5:\nWrite a Python function valid_phone which takes\
    \ a phone number as input and returns the boolean value True if the phone number\
    \ is valid otherwise returns False.\nValid numbers are in the following formats:\
    \ +1-202-555-1234, 1-202-555-1234, 202-555-1234, 202 555 1234, 202 555 1234, +1-(202)\
    \ 555-1234 and 1-202-(555) 1234. Write a Python function valid_phone which takes\
    \ a phone number as input and returns the boolean value True if the phone number\
    \ is valid otherwise returns False.\nValid numbers are in the following formats:\
    \ +1-202-555-1234, 1-202-555-1234, 202-555-1234, 202 555 1234, 202 555 1234, +1-(202)\
    \ 555-1234 and 1-202-(555) 1234. Write a Python function valid_phone which takes\
    \ a phone number as input and returns the boolean value True if the phone number\
    \ is valid otherwise returns False.\nValid numbers are in the following formats:\
    \ +1-202-555-1234, 1-202-555-1234, 202-555-1234, 202 555 1234, 202 555 1234, +1-(202)\
    \ 555-1234 and 1-202-(555) 1234. Write a Python function valid_phone which takes\
    \ a phone number as input and returns the boolean value True if the phone number\
    \ is valid otherwise returns False.\nValid numbers are in the following formats:\
    \ +1-202-555-1234, 1-202-555-1234, 202-555-1234, ", "    if not date:\n      \
    \  return False\n    if date == '':\n        return False\n    splitted_date =\
    \ date.split('-')\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31]\n    if splitted_date[2] not in range(1, 13):\n        return False\n\
    \    if splitted_date[0] in months:\n        return True\n    else:\n        if\
    \ splitted_date[0] in months_without_1_and_2_in_month:\n            days_in_month\
    \ = [\n                x for x in days_in_month\n                if x not in [1,\
    \ 31] and x != 30\n            ]\n        if splitted_date[0] in months_with_4_or_more_in_month:\n\
    \            days_in_month = [\n                x for x in days_in_month\n   \
    \             if x not in [1, 30] and x != 29\n            ]\n        if splitted_date[0]\
    \ in months_with_6_or_more_in_month:\n            days_in_month = [\n        \
    \        x for x in days_in_month\n                if x not in [1, 29]\n     \
    \       ]\n        days_in_month = [\n            x for x in days_in_month\n \
    \           if splitted_date[0] in months_with_1_and_3_in_month\n        ]\n \
    \       days_in_month = [\n            x for x in days_in_month\n            if\
    \ splitted_date[0] in months_with_5_and_7_in_month\n        ]\n        days_in_month\
    \ = [\n            x for x in days_in_month\n            if splitted_date[0] in\
    \ months_with_8_or_more_in_month\n        ]\n        if splitted_date[0] in months_with_10_or_more_in_month:\n\
    \            days_in_month = [\n                x for x in days_in_month\n   \
    \             if x not in [1, 28]\n            ]\n        if splitted_date[0]\
    \ in months_with_12_or_more_in_month:\n            days_in_month = [\n       \
    \         x for x in days_in_month\n                if x not in [1, 30]\n    \
    \        ]\n        return False\n    \n", "    if date == \"\": return False\n\
    \    \n    day, month, year = date.replace(\" \", \"\").split('-')\n    \n   \
    \ day = int(day)\n    month = int(month)\n    year = int(year)\n    \n    if (month\
    \ < 1 or month > 12): return False\n    \n    if (day < 1 or day > 31) or (day\
    \ == 0 and month == 2): return False\n    \n    if (month < 4 or month > 10) or\
    \ (month == 2 and (day < 1 or day > 30)): return False\n    \n    if (day < 1\
    \ or day > 29): return False\n    \n    return True\n", "    # Your code here\n\
    \    return True\n\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012')\
    \ == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020')\
    \ == True\nassert valid_date('06/04/2020') == False\n</cell>\n<text>\nTask 3:\
    \ Write a function to validate a date string and returns a tuple\nthat consists\
    \ of two boolean values.\nThe function should only accept valid dates as input.\n\
    The function should return the following tuple: (valid: True, day: True) if there\
    \ is a valid date string\nand False, otherwise. Both of the returned values should\
    \ be False if the input date string is not valid.\nThe function must raise an\
    \ AssertionError exception if the date string is not valid and both\nof the returned\
    \ values is False and if the input date string is empty or None.\nThe function\
    \ should raise a ValueError exception if the input date string is not valid and\n\
    both the returned values are False and if the input date string is not a string.\n\
    \n\n</text>\n<cell>", "    pass\n", "    if not date:\n        return False\n\
    \    try:\n        date_object = datetime.strptime(date, '%m-%d-%Y')\n       \
    \ if date_object.days > 0 and date_object.days <= 29:\n            if date_object.month\
    \ >= 1 and date_object.month <= 12:\n                return True\n           \
    \ else:\n                return False\n        else:\n            return False\n\
    \    except:\n        return False\n", "    # Write your code here\n    date_validator\
    \ = lambda date: re.match(r'\\d{4}-\\d{2}-\\d{4}', date) is not None\n\n    months\
    \ = ['01', '03', '05', '07', '08', '10', '12']\n    days = ['01', '02', '03',\
    \ '04', '06', '09', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',\
    \ '21', '22', '23', '24', '25', '26', '27', '28', '29']\n\n    months = [x for\
    \ x in months if x > '02' and x < '06']\n    days = [x for x in days if x > '06'\
    \ and x < '30']\n    months.append('02')\n    days.append('30')\n\n    months\
    \ = [x for x in months if x > '01' and x < '12']\n    days = [x for x in days\
    \ if x > '12' and x < '31']\n    months.append('01')\n    days.append('31')\n\n\
    \    if len(date) <= 0 or len(date) > 32:\n        return False\n\n    valid_date\
    \ = False\n    if valid_date(date[0]):\n        for x in range(1, len(date)):\n\
    \            if date_validator(date[x]):\n                valid_date = True\n\
    \                break\n            else:\n                valid_date = False\n\
    \                break\n    else:\n        valid_date = False\n\n    if valid_date\
    \ and date[2] in months and date[1] in days:\n        return True\n    else:\n\
    \        return False\n\n", "    # write your code in function below\n\n", " \
    \   try:\n        datetime.strptime(date, '%d-%m-%Y')\n    except ValueError:\n\
    \        return False\n\n    day = int(date[-2:])\n    month = int(date[1:3])\n\
    \n    if (month == 1 or month == 3 or month == 5 \n        or month == 7 or month\
    \ == 8 or month == 10 \n        or month == 12) and (day > 1 or day > 30):\n \
    \       return False\n    \n    if (month == 4 or month == 6 or month == 9 or\
    \ \n        day > 1 and day > 29):\n        return False\n    \n    return True\n\
    </cell>\n<cell>", "    \n    if date == \"\":\n        return False\n\n    try:\n\
    \        date_parts = date.split(\"-\")\n        date_parts[0] = date_parts[0].upper()\n\
    \        date_parts[1] = date_parts[1].upper()\n        if date_parts[0].isdigit()\
    \ and len(date_parts[0]) == 2:\n            date_parts[0] = int(date_parts[0])\n\
    \            if date_parts[1].isdigit() and len(date_parts[1]) == 2:\n       \
    \         date_parts[1] = int(date_parts[1])\n                \n            days_month\
    \ = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n            days_month[date_parts[0]\
    \ - 1] = days_month[date_parts[0] - 1] + date_parts[1]\n            return date_parts[1]\
    \ <= days_month[date_parts[0] - 1] and date_parts[1] > 0 and date_parts[0] <=\
    \ 12 and date_parts[0] > 0\n        else:\n            return False\n    except:\n\
    \        return False\n", "    if date:\n        if not date_empty(date):\n  \
    \          if not (1 <= date_to_days(date) <= 31) and (1 <= date_to_days(date)\
    \ <= 30) and (1 <= date_to_days(date) <= 29) and (1 <= date_to_months(date) <=\
    \ 12):\n                return False\n    return True\n", "    pass\n    ", " \
    \   \n    return True\n</cell>\n<text>\nLet's create a date object from the given\
    \ string\n\n\n</text>\n<cell>\ndate_string = '03-11-2000'\n\ndate_object = dateutil.parser.parse(date_string)\n\
    \nprint(date_object)\n</cell>\n<text>\nWe can use dateutil to help us determine\
    \ if a particular date is valid\n\n\n</text>\n<cell>\nvalid_date = dateutil.parser.parse(date_string)\n\
    print(valid_date)\n</cell>\n<cell>\nvalid_date_object = dateutil.parser.parse(date_string)\n\
    \nprint(valid_date_object)\n</cell>\n<cell>\nprint(valid_date_object.timetuple())\n\
    </cell>\n<cell>\nprint(date_object.timetuple())\n</cell>\n<cell>", "    day =\
    \ 0\n    month = 0\n    year = 0\n\n    if len(date) == 0:\n        return False\n\
    \    date_arr = date.split('-')\n    if len(date_arr) != 3:\n        return False\n\
    \    day, month, year = int(date_arr[0]), int(date_arr[1]), int(date_arr[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if day < 1 or day\
    \ > 31:\n        return False\n    if month == 2 and day > 29:\n        return\
    \ False\n    if month == 1 and day > 30:\n        return False\n    if month ==\
    \ 3 and day > 29:\n        return False\n    if month == 4 and day > 30:\n   \
    \     return False\n    if month == 6 and day > 30:\n        return False\n  \
    \  if month == 9 and day > 30:\n        return False\n    if month == 11 and day\
    \ > 30:\n        return False\n    if month == 12 and day > 31:\n        return\
    \ False\n    return True\n\n", "    match = re.search(r'\\b(\\d{1,2}(?:-\\d{1,2})?[-/])\\\
    d{1,2}(?:[-/]\\d{1,4})\\b', date)\n    if not match:\n        return False\n \
    \   day = match.group(1)\n    if len(day) > 2 or len(day) < 1:\n        return\
    \ False\n    month = match.group(2)\n    if len(month) > 1 or len(month) < 1:\n\
    \        return False\n    year = match.group(3)\n    if len(year) > 4 or len(year)\
    \ < 4:\n        return False\n    if len(month) == 1:\n        if month == '0':\n\
    \            if day == '0':\n                return True\n            else:\n\
    \                return False\n        else:\n            return False\n    \n\
    \    month_list = [12, 1, 3, 5, 7, 8, 10, 12]\n    if month in month_list:\n \
    \       if int(month) < 1 or int(month) > 12:\n            return False\n    else:\n\
    \        return False\n    \n    if len(day) < 1 or len(day) > 32:\n        return\
    \ False\n    if len(day) < 1 or len(day) > 30:\n        return False\n    \n \
    \   if int(day) < 1 or int(day) > 29:\n        return False\n    return True\n\
    </cell>\n<cell>", "    \n    return len(date) != 0 and len(date) <= 31 and len(date)\
    \ >= 1 and len(date) <= 31 and len(date) >= 1 and len(date) <= 29 and len(date)\
    \ >= 1 and len(date) <= 12 and len(date) >= 4 and len(date) <= 11 and len(date)\
    \ >= 1 and len(date) <= 29 and len(date) >= 4\n    ", "    \n    try:\n      \
    \  date_object = datetime.datetime.strptime(date, '%m-%d-%Y')\n        if date_object.month\
    \ < 1 or date_object.month > 12:\n            return False\n        elif date_object.day\
    \ < 1 or date_object.day > 29 or date_object.day % 30 != 0:\n            return\
    \ False\n        elif date_object.day % 30 != 0:\n            return False\n \
    \       elif date_object.day % 31 != 0:\n            return False\n        else:\n\
    \            return True\n    except:\n        return False\n", "    \n    return\
    \ bool(date) and len(date) > 0 and is_valid_day(date) and is_valid_month(date)\
    \ and is_valid_year(date)\n        ", "    if len(date) != 9:\n        return\
    \ False\n    day, month, year = map(int, date.split('-'))\n    if month < 1 or\
    \ month > 12:\n        return False\n    if day < 1 or day > 31:\n        return\
    \ False\n    if month == 2 and day == 29:\n        return False\n    return True\n",
  "    return len(date) != 0 and date.count('-') != 0 and date.count('/') != 0 and\
    \ len(date.split('-')) == 3 and len(date.split('-')[1]) == 2 and date.count('/')\
    \ != 0 and len(date.split('-')[2]) == 4\n\n", "    if not date:\n        return\
    \ False\n\n    months = {'01':'January', '03':'March', '05':'May', '07':'July',\
    \ '08':'August', '10':'October', '12':'December'}\n\n    days = {'01':'January',\
    \ '03':'March', '05':'May', '07':'July', '08':'August', '10':'October', '12':'December'}\n\
    \n    if len(date) < 1 or not date.strip():\n        return False\n\n    if len(date.split('-'))\
    \ != 3:\n        return False\n\n    day, month, year = date.split('-')\n\n  \
    \  if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day\
    \ > 31:\n        return False\n\n    if months[month] < 1 or months[month] > 12:\n\
    \        return False\n\n    if days[day] < 1 or days[day] > 30:\n        return\
    \ False\n\n    if int(year) < 0 or int(year) > 9999:\n        return False\n\n\
    \    return True\n", "    months = [\"January\", \"March\", \"May\", \"July\"\
    , \"August\", \"October\", \"December\"]\n    days = [\"Monday\", \"Tuesday\"\
    , \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    valid_month\
    \ = False\n    valid_days = False\n    valid_year = False\n    if len(date) >\
    \ 0:\n        if date.count('-') == 3:\n            month, day, year = date.split('-')\n\
    \            if month in months:\n                valid_month = True\n       \
    \         day = day.lower()\n                if day in days:\n               \
    \     valid_days = True\n                    year = year.lower()\n           \
    \         if year in years:\n                        valid_year = True\n     \
    \               else:\n                        print('Invalid year.')\n      \
    \          else:\n                    print('Invalid day.')\n            else:\n\
    \                print('Invalid month.')\n        else:\n            print('Invalid\
    \ date format.')\n    else:\n        print('Date is empty')\n    return valid_month\
    \ and valid_days and valid_year\n\n", "    return bool(not (bool(date) == False\
    \ and 0 < len(date) < 32 and 1 <= len(date.split(\"-\")[2]) < 32 and 1 <= len(date.split(\"\
    -\")[1]) < 32 and 1 <= len(date.split(\"-\")[0]) < 32))\n", "    pass\n</code>\n\
    And this is my attempted solution:\n<code>\nimport datetime\n", "    \n    day\
    \ = date.split(\"-\")\n    if len(day) != 3:\n        return False\n    \n   \
    \ days_in_month = calendar.monthrange(int(day[0]), int(day[1]))[1]\n    \n   \
    \ if len(day[1]) != 2 or day[1].isnumeric():\n        return False\n    \n   \
    \ if len(day[2]) != 4 or day[2].isnumeric():\n        return False\n    \n   \
    \ days_in_year = int(day[2])\n    \n    if len(day[0]) != 2 or day[0].isnumeric():\n\
    \        return False\n    \n    if day[0] > 12 or day[0] < 1 or day[1] > 12 or\
    \ day[1] < 1 or day[2] > days_in_month or day[2] < 1 or days_in_year > 31 or days_in_year\
    \ < 30:\n        return False\n    \n    return True\n\n", "    if not date:\n\
    \        return False\n    try:\n        datetime.datetime.strptime(date, \"%d-%m-%Y\"\
    )\n        return True\n    except ValueError:\n        return False\n\n", " \
    \   date = date.lower()\n    if date == '':\n        return False\n\n    if len(date.split('-'))\
    \ != 3:\n        return False\n\n    for index in range(1,13):\n        month\
    \ = int(date.split('-')[index])\n        if month < 1 or month > 12:\n       \
    \     return False\n    day = int(date.split('-')[2])\n    if day < 1 or day >\
    \ 31:\n        return False\n    return True\n", "    \n    if date == '':\n \
    \       return False\n    elif date.count('-') != 3:\n        return False\n \
    \   else:\n        date_parts = date.split('-')\n        month = date_parts[0]\n\
    \        day = date_parts[1]\n        year = date_parts[2]\n\n        if month.isdigit():\n\
    \            if month.count('-') != 3:\n                return False\n       \
    \     else:\n                month_parts = month.split('-')\n                month_number\
    \ = month_parts[0]\n                month_length = month_parts[1]\n          \
    \      if month_length.isdigit():\n                    if month_length > 0 and\
    \ month_length < 12:\n                        if month_number > 0 and month_number\
    \ < 12:\n                            if day > 0 and day <= 31:\n             \
    \                   return True\n                            else:\n         \
    \                       return False\n                        else:\n        \
    \                    return False\n                    else:\n               \
    \         return False\n                else:\n                    return False\n\
    \        elif month.isalpha():\n            return False\n        else:\n    \
    \        return False\n            ", "    if len(date) < 1:\n        return False\n\
    \    day_count = int(date.split('-')[0])\n    month_count = int(date.split('-')[1])\n\
    \    if len(str(day_count)) < 1 or len(str(month_count)) < 1 or len(str(day_count))\
    \ > 31 or len(str(month_count)) > 12:\n        return False\n    elif month_count\
    \ < 1 or month_count > 12:\n        return False\n    elif day_count < 1 or day_count\
    \ > 31 or day_count > 30:\n        return False\n    else:\n        return True\n\
    \n", "    pattern = re.compile(r\"^((0?[1-9]|1[012])[\\/](0?[1-9]|[12][0-9]|3[01])[\\\
    /]\\d{4})$|^((0?[1-9]|1[012])[\\/](0?[1-9]|[12][0-9])[\\/]\\d{2})$|^((0?[1-9]|1[012])[\\\
    /](0?[1-9]|[12][0-9]))$\")\n    matches = pattern.match(date)\n    if matches:\n\
    \        day = matches.group(0)\n        month = matches.group(1)\n        year\
    \ = matches.group(2)\n        day = day.replace(\"/\", \"\")\n        month =\
    \ month.replace(\"-\", \"\")\n        year = year.replace(\"-\", \"\")\n     \
    \   # Check if month is less than 1 or greater than 12\n        if month not in\
    \ range(1, 13):\n            return False\n        # Check if day is less than\
    \ 1 or greater than 31\n        if day not in range(1, 32):\n            return\
    \ False\n        # Check if month is less than 1 or greater than 12\n        if\
    \ month in (2, 4, 6, 9, 11):\n            return False\n        if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n            return True\n        if month == 2:\n    \
    \        if int(day) > 29:\n                return False\n        return True\n\
    \    return False\n", "    if not date or len(date) <= 0:\n        return False\n\
    \    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return\
    \ False\n    if len(date_parts[0]) < 1 or len(date_parts[2]) < 1:\n        return\
    \ False\n    if date_parts[0] not in ['01', '02', '03', '04', '05', '06', '07',\
    \ '08', '09', '10', '11', '12']:\n        return False\n    if date_parts[0] not\
    \ in ['04', '06', '09', '11']:\n        return False\n    if date_parts[0] not\
    \ in ['01', '03', '05', '07', '08', '10', '12']:\n        return False\n    return\
    \ True\n\n", "    \n    #your code here\n\n\n    #hints\n    date_obj = datetime.datetime.strptime(date,\
    \ '%m-%d-%Y')\n    \n    if date_obj.year < 1 or date_obj.year > 100:\n      \
    \  return False\n    if date_obj.month < 1 or date_obj.month > 12:\n        return\
    \ False\n    if date_obj.day < 1 or date_obj.day > 30:\n        return False\n\
    \    if date_obj.month == 2 and date_obj.day == 29:\n        return False\n  \
    \  return True\n\n", "    if len(date) == 0:\n        return False\n    \n   \
    \ # validate day\n    if len(date) == 9:\n        if date.count('-') == 3:\n \
    \           date1 = date.split('-')\n            month = date1[0]\n          \
    \  day1 = date1[1]\n            year = date1[2]\n            date2 = int(month)\n\
    \            date3 = int(day1)\n            date4 = int(year)\n            if\
    \ date3 > 31 or date3 < 1:\n                return False\n            if date4\
    \ > 30 or date4 < 1:\n                return False\n            if date2 > 12\
    \ or date2 < 1:\n                return False\n            if date2 < 1 or date2\
    \ > 29:\n                return False\n            return True\n        else:\n\
    \            return False\n    \n    # validate month\n    if len(date) == 6:\n\
    \        if date.count('-') == 3:\n            date1 = date.split('-')\n     \
    \       month1 = date1[0]\n            day1 = date1[1]\n            year1 = date1[2]\n\
    \            date2 = int(month1)\n            date3 = int(day1)\n            date4\
    \ = int(year1)\n            if date3 > 31 or date3 < 1:\n                return\
    \ False\n            if date4 > 30 or date4 < 1:\n                return False\n\
    \            if date2 > 12 or date2 < 1:\n                return False\n     \
    \       if date2 < 1 or date2 > 29:\n                return False\n          \
    \  return True\n        else:\n            return False\n    \n    # validate\
    \ year\n    if len(date) == 4:\n        if date.count('-') == 3:\n           \
    \ date1 = date.split('-')\n            month1 = date1[0]\n            day1 = date1[1]\n\
    \            year1 = date1[2]\n            date2 = int(month1)\n            date3\
    \ = int(day1)\n            date4 = int(year1)\n            if date3 > 31 or date3\
    \ < 1:\n                return False\n            if date4 > 30 or date4 < 1:\n\
    \                return False\n            if date2 > 12 or date2 < 1:\n     \
    \           return False\n            if date2 < 1 or date2 > 29:\n          \
    \      return False\n            return True\n        else:\n            return\
    \ False\n\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if date ==\
    \ \"\" or len(date.split(\"-\")) < 3:\n        return False\n    month, day, year\
    \ = date.split(\"-\")\n    day = int(day)\n    if day < 1 or day > 31:\n     \
    \   return False\n    if month < 1 or month > 12:\n        return False\n    if\
    \ month == 2 and day < 1 or day > 29:\n        return False\n    return True\n\
    \n", "    if date == '':\n        return False\n\n    day, month, year = date.split('-')\n\
    \n    if len(month) == 1 or len(month) == 3 or len(month) == 5 or len(month) ==\
    \ 7 or len(month) == 8 or len(month) == 10 or len(month) == 12:\n        if len(day)\
    \ == 1 or len(day) == 3 or len(day) == 5 or len(day) == 7 or len(day) == 8 or\
    \ len(day) == 10 or len(day) == 12:\n            if len(year) == 2:\n        \
    \        if month in ['01', '03', '05', '07', '08', '10', '12']:\n           \
    \         if day in ['01', '03', '05', '07', '08', '10', '12']:\n            \
    \            return True\n\n    return False\n", "    valid_day = False\n    valid_month\
    \ = False\n    valid_year = False\n    try:\n        if len(date) > 0:\n     \
    \       date_parts = date.split('-')\n            if date_parts[1] == '':\n  \
    \              return False\n            if int(date_parts[1]) in range(1, 13)\
    \ and int(date_parts[2]) in range(1, 32):\n                valid_month = True\n\
    \            if int(date_parts[1]) in range(1, 13) and int(date_parts[2]) in range(4,\
    \ 31):\n                valid_day = True\n            if int(date_parts[1]) in\
    \ range(4, 12) and int(date_parts[2]) in range(1, 32):\n                valid_month\
    \ = True\n            if int(date_parts[1]) in range(4, 12) and int(date_parts[2])\
    \ in range(4, 30):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(4, 12) and int(date_parts[2]) in range(6, 29):\n                valid_day\
    \ = True\n            if int(date_parts[1]) in range(6, 12) and int(date_parts[2])\
    \ in range(1, 32):\n                valid_month = True\n            if int(date_parts[1])\
    \ in range(6, 12) and int(date_parts[2]) in range(6, 30):\n                valid_day\
    \ = True\n            if int(date_parts[1]) in range(6, 12) and int(date_parts[2])\
    \ in range(9, 29):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(9, 12) and int(date_parts[2]) in range(1, 32):\n                valid_month\
    \ = True\n            if int(date_parts[1]) in range(9, 12) and int(date_parts[2])\
    \ in range(9, 30):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(9, 12) and int(date_parts[2]) in range(11, 29):\n                valid_day\
    \ = True\n            if int(date_parts[1]) in range(11, 12) and int(date_parts[2])\
    \ in range(1, 32):\n                valid_month = True\n            if int(date_parts[1])\
    \ in range(11, 12) and int(date_parts[2]) in range(11, 30):\n                valid_day\
    \ = True\n            if int(date_parts[1]) in range(11, 12) and int(date_parts[2])\
    \ in range(12, 31):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(12, 12) and int(date_parts[2]) in range(1, 32):\n                valid_month\
    \ = True\n            if int(date_parts[1]) in range(12, 12) and int(date_parts[2])\
    \ in range(12, 31):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(12, 12) and int(date_parts[2]) in range(1, 32):\n                valid_month\
    \ = True\n            if int(date_parts[1]) in range(12, 12) and int(date_parts[2])\
    \ in range(1, 32):\n                valid_day = True\n            if int(date_parts[1])\
    \ in range(12, 12) and int(date_parts[2]) in range(2, 29):\n                valid_day\
    \ = True\n            if int(date_parts[1]) in range(2, ", "    # TODO: Write\
    \ your code here\n    return True\n</cell>\n<cell>", "    if len(date) == 0:\n\
    \        return False\n    if len(date) < 1 or len(date) > 31:\n        return\
    \ False\n    if len(date) < 2 or len(date) > 30:\n        return False\n    if\
    \ len(date) < 3 or len(date) > 29:\n        return False\n    if len(date) < 4\
    \ or len(date) > 12:\n        return False\n    try:\n        date_list = date.split('-')\n\
    \        date_list[2] = int(date_list[2])\n        date_list[2] = date_list[2]\
    \ % 100\n        date_list[2] = date_list[2] // 100\n        date_list[1] = int(date_list[1])\n\
    \        date_list[1] = date_list[1] % 10\n        date_list[1] = date_list[1]\
    \ // 10\n        date_list[0] = int(date_list[0])\n        date_list[0] = date_list[0]\
    \ % 100\n        date_list[0] = date_list[0] // 100\n    except ValueError:\n\
    \        return False\n    if date_list[0] > date_list[1]:\n        return False\n\
    \    return True\n", "    months = '{}12'.format(date.split('-')[0])\n    days\
    \ = '{}-12-{}'.format(date.split('-')[1], date.split('-')[2])\n    days_total\
    \ = 31 * int(months.split('1')[0]) + 30 * int(months.split('3')[0]) + 29 * int(months.split('5')[0])\
    \ + int(months.split('7')[0])\n    days_total += int(days.split('-')[0])\n   \
    \ days_total += int(days.split('-')[1])\n    days_total += int(days.split('-')[2])\n\
    \    days_total += int(days.split('-')[3])\n    days_total += int(days.split('-')[4])\n\
    \    days_total += int(days.split('-')[5])\n    days_total += int(days.split('-')[6])\n\
    \    days_total += int(days.split('-')[7])\n    days_total += int(days.split('-')[8])\n\
    \    days_total += int(days.split('-')[9])\n    days_total += int(days.split('-')[10])\n\
    \    days_total += int(days.split('-')[11])\n    days_total += int(days.split('-')[12])\n\
    \    days_total += int(days.split('-')[13])\n    days_total += int(days.split('-')[14])\n\
    \    days_total += int(days.split('-')[15])\n    days_total += int(days.split('-')[16])\n\
    \    days_total += int(days.split('-')[17])\n    days_total += int(days.split('-')[18])\n\
    \    days_total += int(days.split('-')[19])\n    days_total += int(days.split('-')[20])\n\
    \    days_total += int(days.split('-')[21])\n    days_total += int(days.split('-')[22])\n\
    \    days_total += int(days.split('-')[23])\n    days_total += int(days.split('-')[24])\n\
    \    days_total += int(days.split('-')[25])\n    days_total += int(days.split('-')[26])\n\
    \    days_total += int(days.split('-')[27])\n    days_total += int(days.split('-')[28])\n\
    \    days_total += int(days.split('-')[29])\n    days_total += int(days.split('-')[30])\n\
    \    days_total += int(days.split('-')[31])\n    if days_total <= 1 or days_total\
    \ > 31:\n        return False\n    if months.split('", "    pass\n\n", "    #\
    \ implement your logic here\n    pass\n\n", "    if len(date) == 0:\n        return\
    \ False\n\n    try:\n        dateobj = datetime.datetime.strptime(date, '%d-%m-%Y')\n\
    \    except ValueError:\n        return False\n\n    if dateobj.year < 1 or dateobj.year\
    \ > 9999:\n        return False\n    if dateobj.month < 1 or dateobj.month > 12:\n\
    \        return False\n    if dateobj.day < 1 or dateobj.day > dateobj.days_in_month(dateobj.month):\n\
    \        return False\n\n    return True\n", "    \n    # your code here\n   \
    \ date_obj = datetime.strptime(date, \"%m-%d-%Y\")\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    # Write your logic here\n\
    \    raise NotImplementedError\n\n</cell>\n<cell>\nassert valid_date('03-11-2000')\
    \ is True\nassert valid_date('15-01-2012') is False\nassert valid_date('04-0-2040')\
    \ is False\nassert valid_date('06-04-2020') is True\nassert valid_date('06/04/2020')\
    \ is False\n</cell>\n<cell>", "    date_valid = True\n    days_in_month = [31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_in_month_short = [31,\
    \ 28, 31, 30, 31, 31]\n    days_in_month_long = [31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31]\n    months_in_year = [None, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]\n\n    if not len(date):\n        return False\n    if date.isdigit():\n\
    \        return False\n    try:\n        date = datetime.strptime(date, \"%m-%d-%Y\"\
    )\n    except:\n        return False\n    if date.year < 1900:\n        return\
    \ False\n    if date.year > 2020:\n        return False\n    if date.month < 1\
    \ or date.month > 12:\n        return False\n    if date.day < 1 or date.day >\
    \ days_in_month[date.month]:\n        return False\n    if date.day > days_in_month_short[date.month]:\n\
    \        return False\n    if date.day > days_in_month_long[date.month]:\n   \
    \     return False\n    return True\n\n", "    # TODO: Fill this in\n    return\
    \ True\n\n", "    if not date:\n        return False\n    \n    #Your code here\n\
    \    try: \n        date_object = datetime.strptime(date, '%m-%d-%Y')\n    except\
    \ ValueError:\n        return False\n    days = (date_object - dt.datetime(1970,\
    \ 1, 1)).days + 1\n    \n    return (days <= 31 and days > 1 and days < 30 and\
    \ days >= 29 and months <= 12 and months > 1 and months < 12)\n    \n</cell>\n\
    <cell>\nvalid_date('03-11-2000')\n</cell>\n<cell>\nvalid_date('15-01-2012')\n\
    </cell>\n<cell>\nvalid_date('04-0-2040')\n</cell>\n<cell>\nvalid_date('06-04-2020')\n\
    </cell>\n<cell>\nvalid_date('06/04/2020')\n</cell>\n<text>\nExercise 12: Create\
    \ a function that checks if a given year is a leap year. Hint: Use the isLeapYear()\
    \ function from above and see what happens when you try to run a non-leap year\
    \ (February 29)\n\n\n</text>\n<cell>", "    valid_date_format = \"%m-%d-%Y\"\n\
    \    if date == '':\n        return False\n    date_format = datetime.datetime.strptime(date,\
    \ valid_date_format)\n    now = datetime.datetime.now()\n    number_of_days =\
    \ date_format - now\n    number_of_days = number_of_days.days\n    if number_of_days\
    \ > 31:\n        return False\n    if number_of_days > 29:\n        return False\n\
    \    if number_of_days > 31:\n        return False\n    if number_of_days < 1:\n\
    \        return False\n    if number_of_days > 12:\n        return False\n   \
    \ return True\n\n", "    date_valid = True\n    months = date.split('-')[0].split('/')\n\
    \    month = int(months[0])\n    day = int(months[1])\n    year = int(months[2])\n\
    \n    if int(month) < 1 or int(month) > 12:\n        date_valid = False\n    else:\n\
    \        if year < 1 or year > 9999:\n            date_valid = False\n       \
    \ else:\n            if day < 1 or day > 29:\n                date_valid = False\n\
    \            else:\n                if month < 1 or month > 12:\n            \
    \        date_valid = False\n                else:\n                    date_valid\
    \ = True\n\n    return date_valid\n\n", "    months = [\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\"]\n    days = [\"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    months_dict = {'01':1,\
    \ '03':3, '05':5, '07':7, '08':8, '10':10, '12':12}\n    days_dict = {'01':1,\
    \ '03':3, '05':5, '07':7, '08':8, '10':10, '12':12, '01':1, '03':3, '05':5, '07':7,\
    \ '08':8, '10':10, '12':12}\n    split_date = date.split(\"-\")\n    if len(split_date)\
    \ != 3:\n        return False\n    else:\n        year = split_date[0]\n     \
    \   month = months_dict[split_date[1]] if split_date[1] in months else False\n\
    \        day = days_dict[split_date[2]] if split_date[2] in days else False\n\
    \        if month and not day:\n            return False\n        elif not month\
    \ and day:\n            return False\n        elif not month and not day:\n  \
    \          return False\n        elif month and day:\n            return False\n\
    \        elif month and not day:\n            return False\n        else:\n  \
    \          return True\n</code>\n<|/ a dscore=1 tags=python,datetime |>\n<| a\
    \ |>\nI created a library called date-validator, a validation tool to validate\
    \ dates:\n<code>\n>>> from dateutil.parser import parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.parser import parse as date_parse\n\
    >>> from dateutil.parser import parse as date_parse\n>>> from dateutil.parser\
    \ import parse as date_parse\n>>> from dateutil.", "    return len(date) != 0\
    \ and len(date) < 32 and len(date) > 0 and len(date.split('-')) == 3 and len(date.split('-'))\
    \ == 3 and len(date.split('-')) == 3 and date != ''\n", "    # your code here\n\
    \    days = {'01':'31', '02':'29', '03':'31', '04':'30', '05':'31', '06':'30',\
    \ '07':'31', '08':'31', '09':'30', '10':'31', '11':'30', '12':'31'}\n    months\
    \ = {'01':'12', '02':'12', '03':'12', '04':'12', '05':'12', '06':'12', '07':'12',\
    \ '08':'12', '09':'12', '10':'12', '11':'12', '12':'12'}\n    split_date = date.split('-')\n\
    \    if len(split_date) != 3:\n        return False\n    year, month, day = split_date\n\
    \    if (day > days[month] or day < 1 or month > months[month] or month < 1 or\
    \ year > 40 or year < 19):\n        return False\n    return True\n\n", "    valid_months\
    \ = {'01', '03', '05', '07', '08', '10', '12'}\n    valid_days = {'01', '03',\
    \ '05', '07', '08', '10', '12', '13', '14', '15', '16', '17', '18', '19', '20',\
    \ '21', '22', '23', '24', '25', '26', '27', '28', '29'}\n    valid_format = 'mm-dd-yyyy'\n\
    \n    if not (date!='' and date!='NULL'):\n        return False\n    split_date\
    \ = date.split('-')\n    if len(split_date)==3:\n        day, month, year = split_date\n\
    \        if len(day)!=2 or len(month)!=2 or not day.isdigit() or not month.isdigit()\
    \ or not year.isdigit():\n            return False\n    else:\n        return\
    \ False\n\n    if len(day)>2 or len(month)>2 or len(year)>4:\n        return False\n\
    \n    if day not in valid_days or month not in valid_months or year not in valid_format:\n\
    \        return False\n    else:\n        return True\n", "    try: \n       \
    \ date_to_check=datetime.datetime.strptime(date, '%d-%m-%Y')\n    except ValueError:\n\
    \        return False\n    else:\n        if date_to_check.year < 1 or date_to_check.year\
    \ > 9999:\n            return False\n        elif (date_to_check.month < 1 or\
    \ date_to_check.month > 12):\n            return False\n        elif (date_to_check.day\
    \ < 1 or date_to_check.day > 31):\n            return False\n        else:\n \
    \           if date_to_check.day > 29:\n                return False\n       \
    \     else:\n                return True\n", "    pass\n\n", "    date_to_validate_int=int(date)\n\
    \    days_in_months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  \
    \  days_in_months_plus_one = days_in_months + [1]\n\n    days_in_months_after_one_checking\
    \ = days_in_months_plus_one + [29, 30, 31]\n    months_in_year = [0, 11, 12, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n    year_to_validate_int=int(date[4:10])\n\
    \    if date == \"\":\n        return False\n    if int(date[:2])<1 or int(date[:2])>12:\n\
    \        return False\n    \n    if date_to_validate_int > days_in_months[int(date[2:])-1]\
    \ or date_to_validate_int < days_in_months_after_one_checking[date[:2]]:\n   \
    \     return False\n\n    if int(date[2:])==12:\n        days_in_year = [0, 31,\
    \ 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]\n        if int(date[:4])<1\
    \ or int(date[:4])>12:\n            return False\n        if int(date[:2])>days_in_year[int(date[4:])-1]\
    \ or int(date[:2])<days_in_months_plus_one[int(date[2:])-1]:\n            return\
    \ False\n        if int(date[:4])==year_to_validate_int and int(date[:2])==months_in_year[int(date[4:])-1]:\n\
    \            return True\n    return False\n", "    if len(date) == 0 or len(date.strip())\
    \ == 0:\n        return False\n\n    date_parts = date.split('-')\n\n    if len(date_parts)\
    \ == 3:\n        try:\n            day = int(date_parts[1])\n            month\
    \ = int(date_parts[0])\n            year = int(date_parts[2])\n            if\
    \ month == 1 or month == 3 or month == 5 \\\n                    or month == 7\
    \ or month == 8 or month == 10 \\\n                    or month == 12:\n     \
    \           if not (1 <= day <= 31):\n                    return False\n     \
    \       elif month == 4 or month == 6 or month == 9 \\\n                    or\
    \ month == 11:\n                if not (1 <= day <= 30):\n                   \
    \ return False\n            elif month == 2 and (not 1 <= day <= 29):\n      \
    \          return False\n        except ValueError:\n            return False\n\
    \    else:\n        return False\n\n    if not (1 <= year <= 2030):\n        return\
    \ False\n    return True\n\n", "    if not date:\n        return False\n    split_date\
    \ = date.split('-')\n    if len(split_date) != 3:\n        return False\n    \n\
    \    month = int(split_date[0])\n    day = int(split_date[1])\n    year = int(split_date[2])\n\
    \    \n    if (month in [1, 3, 5, 7, 8, 10, 12]):\n        if (day > 31 and day\
    \ < 29):\n            return False\n        elif (day > 29):\n            return\
    \ False\n        elif day < 1 or day > 31:\n            return False\n    elif\
    \ (month in [4]):\n        if (day > 29):\n            return False\n        elif\
    \ day < 1 or day > 31:\n            return False\n    else:\n        return False\n\
    \n    month = int(split_date[0])\n    day = int(split_date[1])\n    year = int(split_date[2])\n\
    \    if (month in [1, 3, 5, 7, 8, 10, 12]):\n        if (day > 31 and day < 29):\n\
    \            return False\n        elif (day > 29):\n            return False\n\
    \        elif day < 1 or day > 31:\n            return False\n    elif (month\
    \ in [4]):\n        if (day > 29):\n            return False\n        elif day\
    \ < 1 or day > 31:\n            return False\n    else:\n        return False\n\
    \    \n    if (year < 1000 or year > 2020):\n        return False\n    \n    return\
    \ True\n\nvalid_date('03-11-2000')\n</cell>\n<text>\nWrite a Python program to\
    \ find the number of days between a given date string and today's date.\nThe function\
    \ should take two string arguments: the first one being the date string and the\
    \ second one being the today's date. \nIf the date string given by the user is\
    \ not valid, the function should throw an Exception.\nIf the date string is empty,\
    \ the function should throw an Exception.\nIf the number of days is less than\
    \ 1 or  greater than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2, the function should\
    \ throw an Exception.\nIf the number of days is less than 1 or  greater than 29\
    \ days for month 4, the function should throw an Exception.\nIf the number of\
    \ days is less than 1 or  greater than 30 days for month 6, the function should\
    \ throw an Exception.\n\nfor example:\nIf the date string is 12-25-2000, the output\
    \ should be 43.\nIf the date string is 25-12-2000, the output should be 49.\n\n\
    </text>\n<cell>", "    if len(date) <= 0:\n        return False\n    day, month,\
    \ year = map(int, date.split('-'))\n    if (day < 1 or day > 31):\n        return\
    \ False\n    if (month < 1 or month > 12):\n        return False\n    if (month\
    \ == 2 and day > 29):\n        return False\n    return True\n\n", "    if date\
    \ == '':\n        return False\n    try:\n        date_obj = datetime.strptime(date,\
    \ '%d-%m-%Y')\n        if date_obj.day < 1 or date_obj.day > 31:\n           \
    \ return False\n        if date_obj.month < 1 or date_obj.month > 12:\n      \
    \      return False\n        if date_obj.month == 2 and date_obj.day > 29:\n \
    \           return False\n        return True\n    except ValueError:\n      \
    \  return False\n\n", "    return len(date) != 0 \\\n           and valid_day(date)\
    \ \\\n           and valid_month(date) \\\n           and valid_year(date)\n\n",
  "    pass\n", "    if date == '':\n        return False\n    mm, dd, yyyy = [int(x)\
    \ for x in date.split('-')]\n    if mm < 1 or mm > 12:\n        return False\n\
    \    if dd < 1 or dd > 31:\n        return False\n    if mm == 2 and dd < 31:\n\
    \        return False\n    if mm == 2 and dd > 30:\n        return False\n   \
    \ if mm == 12 and dd < 30:\n        return False\n    return True\n\n", "    \n\
    \    # Your code here\n    \n    # date validation\n    if not date:\n       \
    \ return False\n    \n    # date format\n    if len(date) != 8:\n        return\
    \ False\n    \n    date_format = date.replace(\"/\", \"-\")\n    date_format =\
    \ date_format.replace(\"-\", \"\")\n    date_format = date_format.split(\"-\"\
    )\n    \n    if len(date_format) != 3:\n        return False\n\n    # check if\
    \ year is a leap year\n    if date_format[1] == \"04\":\n        return True\n\
    \    elif date_format[1] == \"06\":\n        return True\n    else:\n        return\
    \ False\n    \n", "    if date == '':\n        return False\n    elif len(date)\
    \ < 1:\n        return False\n    else:\n        date_obj = datetime.strptime(date,\
    \ '%m-%d-%Y')\n        if date_obj.month < 1 or date_obj.month > 12:\n       \
    \     return False\n        elif date_obj.day < 1 or date_obj.day > 29:\n    \
    \        return False\n        else:\n            return True\n\n", "    if len(date)\
    \ == 0 or len(date.split(\"-\")) != 3 or len(date.split(\"-\")) != 3:\n      \
    \  return False\n    \n    day = int(date.split(\"-\")[2])\n    month = int(date.split(\"\
    -\")[1])\n    year = int(date.split(\"-\")[0])\n    \n    if month < 1 or month\
    \ > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return\
    \ False\n    \n    if month == 2 and day > 29:\n        return False\n    \n \
    \   return True\n", "    days_count = 0\n    month_count = 0\n    year_count =\
    \ 0\n    if len(date) == 0 or len(date) > 30:\n        return False\n    date_format\
    \ = \"%d-%m-%Y\"\n    date_object = datetime.strptime(date, date_format)\n   \
    \ return date_object.year > 0 and date_object.month > 0 and date_object.day >\
    \ 0", "    return False # replace this with your code\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
