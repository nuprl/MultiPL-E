name: HumanEval_160_do_algebra
language: py
results:
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn7bo99ta.py\", line 29\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = 1\n    for i,val in enumerate(operand):\n\
    \        if operator[i] == '*':\n            result*=val\n        elif operator[i]\
    \ == '/':\n            result//=val\n        elif operator[i] == '**':\n     \
    \       result**=val\n        elif operator[i] == '+':\n            result+=val\n\
    \        else:\n            result-=val\n    return result\n\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26woidcg.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp26woidcg.py\", line 48,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp26woidcg.py\", line 43,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmp26woidcg.py\", line 30, in do_algebra\n    if operator[i] == '*':\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # YOUR CODE HERE\n    temp = 0\n    for i in\
    \ range(len(operator)):\n        if operator[i] == '+':\n            temp += operand[i]\n\
    \        if operator[i] == '-':\n            temp -= operand[i]\n        if operator[i]\
    \ == '*':\n            temp *= operand[i]\n        if operator[i] == '//':\n \
    \           temp //= operand[i]\n        if operator[i] == '**':\n           \
    \ temp **= operand[i]\n    return temp\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0v3c_l41.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0v3c_l41.py\", line 49,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp0v3c_l41.py\", line 44,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    operator_num = len(operator)\n    operator_array\
    \ = operator\n    operator_array1 = operator[1:]\n    operator1 = operator[0]\n\
    \n    if len(operand) > operator_num:\n        raise Exception('Too many operands\
    \ for the operator')\n\n    if operator_num == 1:\n        return operand[0]\n\
    \n    if operator_num == 2:\n        return operand[0] * operand[1]\n\n    if\
    \ operator_num == 3:\n        return operand[0] * operand[1] + operand[2]\n\n\
    \    if operator_num == 4:\n        return operand[0] * operand[1] + operand[2]\
    \ * operand[3]\n\n    if operator_num == 5:\n        return operand[0] * operand[1]\
    \ + operand[2] * operand[3] + operand[4]\n\n    if operator_num == 6:\n      \
    \  return operand[0] * operand[1] + operand[2] * operand[3] + operand[4] * operand[5]\n\
    \n    if operator_num == 7:\n        return operand[0] * operand[1] + operand[2]\
    \ * operand[3] + operand[4] * operand[5] + operand[6]\n\n    if operator_num ==\
    \ 8:\n        return operand[0] * operand[1] + operand[2] * operand[3] + operand[4]\
    \ * operand[5] + operand[6] * operand[7]\n\n    if operator_num == 9:\n      \
    \  return operand[0] * operand[1] + operand[2] * operand[3] + operand[4] * operand[5]\
    \ + operand[6] * operand[7] + operand[8]\n\n    if operator_num == 10:\n     \
    \   return operand[0] * operand[1] + operand[2] * operand[3] + operand[4] * operand[5]\
    \ + operand[6] * operand[7] + operand[8] * operand[9]\n\n    if operator_num ==\
    \ 11:\n        return operand[0] * operand[1] + operand[2] * operand[3] + operand[4]\
    \ * operand[5] + operand[6] * operand[7] + operand[8] * operand[9] + operand[10]\n\
    \n    if operator_num == 12:\n        return operand[0] * operand[1] + operand[2]\
    \ * operand[3] + operand[4] * operand[5] + operand[6] * operand[7] + operand[8]\
    \ * operand[9] + operand[10] * operand[11]\n\n    if operator_num == 13:\n   \
    \     return operand[0] * operand[1] + operand[2] * operand[3] + operand[4] *\
    \ operand[5] + operand[6] * operand[7] + operand[8] * operand[9] + operand[10]\
    \ * operand[11] + operand[12]\n\n    if operator_num == 14:\n        return operand[0]\
    \ * operand[1] + operand[2] * operand[3] + operand[4] * operand[5] + operand[6]\
    \ * operand[7] + operand[8] * operand[9] + operand[10] * operand[11] + operand[12]\
    \ * operand[13]\n\n    if operator_num == 15:\n        return operand[0] * operand[1]\
    \ + operand[2] * operand[3] + operand[4] * operand[5] + operand[6] * operand[7]\
    \ + operand[8] * operand[9] + operand[10] * operand[11] + operand[12] * operand[13]\
    \ + operand[14]\n\n    if operator_num == 16:\n        return operand[0] * operand[1]\
    \ + operand[2] * operand[3] + operand[4\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppx9pfs8h.py\", line 83\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    if not operator:\n        return 0\n    if\
    \ len(operator) != len(operand) - 1:\n        return 0\n    operand = sorted(operand,\
    \ reverse = True)\n    ans = 0\n    if operator[0] == '+':\n        ans = operand[0]\
    \ + operand[1]\n    elif operator[0] == '-':\n        ans = operand[0] - operand[1]\n\
    \    elif operator[0] == '*':\n        ans = operand[0] * operand[1]\n    elif\
    \ operator[0] == '/':\n        ans = operand[0] / operand[1]\n    elif operator[0]\
    \ == '//':\n        ans = operand[0] // operand[1]\n    elif operator[0] == '**':\n\
    \        ans = operand[0] ** operand[1]\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz3u9f3f.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmplz3u9f3f.py\", line 54,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmplz3u9f3f.py\", line 49,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # write your code here\n    return 0\n\ndef\
    \ check(candidate):\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n\
    \    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//',\
    \ '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5hq9e3y.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpx5hq9e3y.py\", line 37,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpx5hq9e3y.py\", line 32,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    \n    if operator[0] != \"-\":\n        return\
    \ \"ERROR: You can't do math operations outside of -.\"\n    \n    if operator[1]\
    \ != \"*\":\n        return \"ERROR: You can't do math operations outside of *.\"\
    \n\n    if operator[2] != \"//\":\n        return \"ERROR: You can't do math operations\
    \ outside of //.\"\n\n    if operator[3] != \"**\":\n        return \"ERROR: You\
    \ can't do math operations outside of **.\"\n    \n    if len(operator) != len(operand):\n\
    \        return \"ERROR: You didn't use the correct amount of arguments.\"\n \
    \   \n    \n    operator_number = 0\n    number_to_evaluate = 0\n\n    for index,\
    \ value in enumerate(operator):\n        if value == \"+\":\n            operator_number\
    \ += 1\n            number_to_evaluate += operand[index]\n        elif value ==\
    \ \"-\":\n            operator_number += 1\n            number_to_evaluate -=\
    \ operand[index]\n        elif value == \"*\":\n            operator_number +=\
    \ 1\n            number_to_evaluate *= operand[index]\n        elif value == \"\
    //\":\n            operator_number += 1\n            number_to_evaluate //= operand[index]\n\
    \        elif value == \"**\":\n            operator_number += 1\n           \
    \ number_to_evaluate **= operand[index]\n        \n    return number_to_evaluate\n\
    \nprint(do_algebra(operator = [\"+\", \"*\", \"*\", \"+\"], operand = [2, 3, 4,\
    \ 5]))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(['**', '*',\
    \ '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5])\
    \ == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbqcgyzzo.py\", line 68\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    \n    \n    # Write your code here.\n    if\
    \ len(operator) == len(operand) - 1:\n        pass\n    else:\n        raise Exception(\"\
    Not enough operands in operator list\")\n    \n\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpler85237.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpler85237.py\", line 43,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpler85237.py\", line 38,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphqfu9ami.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphqfu9ami.py\", line 36,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmphqfu9ami.py\", line 31,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    if len(operator) < 1 or len(operand) < 2:\n\
    \        raise ValueError(\"Operator and operand must be non-empty lists of non-negative\
    \ integers\")\n    operator_stack = []\n    operand_stack = []\n    operators_found\
    \ = False\n    for op in operator:\n        if op == '+':\n            operator_stack.append(op)\n\
    \            operand_stack.append(operand.pop())\n        elif op == '-':\n  \
    \          if not operand_stack:\n                raise ValueError(\"Only one\
    \ operand can be subtracted\")\n            else:\n                result = operand_stack.pop()\n\
    \                operator_stack.append(op)\n                operand_stack.append(result)\n\
    \        elif op == '*':\n            if not operand_stack:\n                raise\
    \ ValueError(\"Only one operand can be multiplied\")\n            else:\n    \
    \            operator_stack.append(op)\n                operand_stack.append(operand_stack.pop()\
    \ * operand.pop())\n        elif op == '/':\n            if not operand_stack:\n\
    \                raise ValueError(\"Only one operand can be divided\")\n     \
    \       else:\n                operator_stack.append(op)\n                operand_stack.append(operand_stack.pop()\
    \ // operand.pop())\n        elif op == '**':\n            if not operand_stack:\n\
    \                raise ValueError(\"Only one operand can be exponentiated\")\n\
    \            else:\n                operator_stack.append(op)\n              \
    \  operand_stack.append(operand_stack.pop() ** operand.pop())\n        else:\n\
    \            raise ValueError(\"Invalid operator \" + op)\n        operators_found\
    \ = True\n    if not operators_found:\n        raise ValueError(\"No operators\
    \ found\")\n    result = operand_stack.pop()\n    if len(operator_stack) != 1:\n\
    \        raise ValueError(\"Incorrect number of operators found\")\n    if operator_stack[0]\
    \ == '-':\n        result = -result\n    return result\n\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mq5gkr7.py\", line\
    \ 82, in <module>\n    test_check()\n  File \"/tmp/tmp0mq5gkr7.py\", line 80,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp0mq5gkr7.py\", line 75,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmp0mq5gkr7.py\", line 58, in do_algebra\n    raise ValueError(\"Only\
    \ one operand can be exponentiated\")\nValueError: Only one operand can be exponentiated\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # Your code here\n    if operator == []:\n\
    \        return operand\n    if operand == []:\n        return operand\n\n   \
    \ if operator[0] == '+':\n        return operand[0] + operand[1]\n    if operator[0]\
    \ == '-':\n        return operand[0] - operand[1]\n    if operator[0] == '*':\n\
    \        return operand[0] * operand[1]\n    if operator[0] == '/':\n        return\
    \ operand[0] / operand[1]\n    if operator[0] == '**':\n        return operand[0]\
    \ ** operand[1]\n\noperator = list(map(chr, range(97, 98)))\noperand = list(map(int,\
    \ input().split()))\nresult = do_algebra(operator, operand)\nprint(result)\n</cell>\n\
    <text>\nTask\nWrite a function named do_algebra which implements the following\
    \ operations:\n\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \n\
    Floor division ( // ) \nExponentiation ( ** )\n\nExample\nInput\noperator = [\
    \ '+', '*', '**' ]\noperand = [1, 2, 3]\nOutput\n9\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwm_1wpfi.py\", line 49\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    operator_stack = []\n    total = 0\n    \n\
    \    for op in operator:\n        if op == '+':\n            operator_stack.append(op\
    \ + '0')\n            total += operand.pop(0)\n        elif op == '-':\n     \
    \       operator_stack.append(op + '0')\n            total -= operand.pop(0)\n\
    \        elif op == '*':\n            operator_stack.append(op + '1')\n      \
    \      total *= operand.pop(0)\n        elif op == '/':\n            operator_stack.append(op\
    \ + '1')\n            total /= operand.pop(0)\n        elif op == '//':\n    \
    \        operator_stack.append(op + '1')\n            total //= operand.pop(0)\n\
    \        elif op == '**':\n            operator_stack.append(op + '1')\n     \
    \       total **= operand.pop(0)\n        else:\n            raise SyntaxError(f\"\
    Invalid operator '{op}'.\")\n    \n    operator_stack.pop()\n    total += operand.pop(0)\n\
    \    \n    return total\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2242au3.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpm2242au3.py\", line 64,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpm2242au3.py\", line 59,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    operator = operator[::-1]\n    operand = operand[::-1]\n\
    \n    result = 0\n    for i in range(len(operator)):\n        result += (operand[i]\
    \ ** operator[i])\n\n    return result\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvepx7t6q.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpvepx7t6q.py\", line 43,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpvepx7t6q.py\", line 38,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmpvepx7t6q.py\", line 33, in do_algebra\n    result += (operand[i] **\
    \ operator[i])\nTypeError: unsupported operand type(s) for ** or pow(): 'int'\
    \ and 'str'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    \n    total = 0\n    i = 0\n\n    while i <\
    \ len(operand):\n        operation = operator[i]\n\n        if operation == '+':\n\
    \            total += operand[i]\n        elif operation == '*':\n           \
    \ total *= operand[i]\n        elif operation == '-':\n            total -= operand[i]\n\
    \        elif operation == '/':\n            total //= operand[i]\n        elif\
    \ operation == '**':\n            total *= operand[i]\n        else:\n       \
    \     raise Exception(f'Operator {operation} not recognized. Please use + , -\
    \ , * , / or **')\n\n        i += 1\n\n    return total\n    \ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5agsguwl.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp5agsguwl.py\", line 58,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp5agsguwl.py\", line 53,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmp5agsguwl.py\", line 33, in do_algebra\n    operation = operator[i]\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    return sum(operand * operator[index] for index,\
    \ element in enumerate(operator))\n\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnc0hr7c.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmnc0hr7c.py\", line 37,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpmnc0hr7c.py\", line 32,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmpmnc0hr7c.py\", line 28, in do_algebra\n    return sum(operand * operator[index]\
    \ for index, element in enumerate(operator))\n  File \"/tmp/tmpmnc0hr7c.py\",\
    \ line 28, in <genexpr>\n    return sum(operand * operator[index] for index, element\
    \ in enumerate(operator))\nTypeError: can't multiply sequence by non-int of type\
    \ 'str'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    \n    if len(operator) != len(operand) - 1:\n\
    \        raise ValueError('Invallid input for do_algebra. operator and operand\
    \ must be of equal lengths.')\n\n    if operator[0] == '+':\n        return operand[0]\
    \ + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n\
    \    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif\
    \ operator[0] == '/':\n        return operand[0] / operand[1]\n    elif operator[0]\
    \ == '**':\n        return operand[0] ** operand[1]\n    else:\n        raise\
    \ Exception('Operator not found.')\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznv82xq2.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpznv82xq2.py\", line 51,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpznv82xq2.py\", line 46,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukgojbyc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpukgojbyc.py\", line 36,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpukgojbyc.py\", line 31,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n\
    \    length = len(operator)\n    assert length > 0\n    assert operand[0] > 0\n\
    \    assert operand[1] > 0\n\n    i = 0\n    j = 0\n\n    while i < length:\n\
    \        # left side\n        if i == length - 1:\n            left_side = operand[j]\
    \ + operand[j+1]\n        elif operator[i] == '+':\n            left_side = operand[j]\
    \ + operand[j+1]\n        elif operator[i] == '-':\n            left_side = operand[j]\
    \ - operand[j+1]\n        elif operator[i] == '*':\n            left_side = operand[j]\
    \ * operand[j+1]\n        elif operator[i] == '/':\n            left_side = operand[j]\
    \ / operand[j+1]\n        elif operator[i] == '%':\n            left_side = operand[j]\
    \ % operand[j+1]\n        elif operator[i] == '**':\n            left_side = operand[j]\
    \ ** operand[j+1]\n        else:\n            print(\"Error: Unknown operator\"\
    )\n            sys.exit(1)\n\n        # right side\n        if j == length - 1:\n\
    \            right_side = operand[i]\n        elif operator[j] == '+':\n     \
    \       right_side = operand[i]\n        elif operator[j] == '-':\n          \
    \  right_side = operand[i]\n        elif operator[j] == '*':\n            right_side\
    \ = operand[i]\n        elif operator[j] == '/':\n            right_side = operand[i]\n\
    \        elif operator[j] == '%':\n            right_side = operand[i]\n     \
    \   elif operator[j] == '**':\n            right_side = operand[i]\n        else:\n\
    \            print(\"Error: Unknown operator\")\n            sys.exit(1)\n   \
    \     \n        # calculate result\n        result = left_side + right_side\n\
    \        return result\n    \ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s1kzgck.py\", line\
    \ 88, in <module>\n    test_check()\n  File \"/tmp/tmp3s1kzgck.py\", line 86,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp3s1kzgck.py\", line 81,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = sum(operand)\n    operator_index =\
    \ operator.index(operand[0])\n    while operator_index != 0:\n        operator_index\
    \ = operator.index(operand[0])\n        operator = operator.pop(0)\n        operand\
    \ = operand.pop(0)\n        result += operand\n    return result \n\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoukdjdax.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpoukdjdax.py\", line 43,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpoukdjdax.py\", line 38,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmpoukdjdax.py\", line 29, in do_algebra\n    operator_index = operator.index(operand[0])\n\
    ValueError: 2 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = operand[0]\n    for index in range(len(operator)-1):\n\
    \        operation = operator[index]\n        multiplier = 1\n        for i in\
    \ range(index+1, len(operand)):\n            multiplier *= operand[i]\n      \
    \  result = result + operation * multiplier\n    return result\n\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf6ibkowd.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpf6ibkowd.py\", line 43,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpf6ibkowd.py\", line 38,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n  File\
    \ \"/tmp/tmpf6ibkowd.py\", line 34, in do_algebra\n    result = result + operation\
    \ * multiplier\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
  exit_code: -1
  status: Exception
