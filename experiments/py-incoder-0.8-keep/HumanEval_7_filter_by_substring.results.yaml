language: py
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    \n    return list(filter(lambda\
    \ x: substring in x, strings))\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyyv60j84.py\", line 12\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [item for item in strings\
    \ if substring in item]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    matches = []\n    for s in strings:\n\
    \        if substring in s:\n            matches.append(s)\n    return matches\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string:\
    \ string.find(substring) >= 0, strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0tfocedp.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = []\n    for string in\
    \ strings:\n        if substring in string:\n            filtered.append(string)\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
