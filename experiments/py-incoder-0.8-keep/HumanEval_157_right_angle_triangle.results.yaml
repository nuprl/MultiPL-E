name: HumanEval_157_right_angle_triangle
language: py
results:
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a_b_c = abs(b * 3 - a * 2)\n    b_c_a = abs(b\
    \ * 3 - c * 2)\n    a_c_b = abs(a * 3 - c * 2)\n    return (a_b_c >= b_c_a and\
    \ a == c or a_c_b >= b_b_a and b == c or a_b_c >= b_c_a\n            and a ==\
    \ b or a_c_b >= b_b_a and b == b)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18q_ikwq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp18q_ikwq.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp18q_ikwq.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp18q_ikwq.py\"\
    , line 14, in right_angle_triangle\n    return (a_b_c >= b_c_a and a == c or a_c_b\
    \ >= b_b_a and b == c or a_b_c >= b_c_a\nNameError: name 'b_b_a' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    triangle_length = (a * b) + (b * c)\n    if\
    \ triangle_length == 0:\n        return False\n    perpendicular_side = math.sqrt((b\
    \ ** 2) + (c ** 2))\n    if perpendicular_side == 0:\n        return False\n \
    \   angle1 = math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * b * c))\n    angle2 =\
    \ math.acos((a ** 2 + c ** 2 - b ** 2) / (2 * c * b))\n    angle = angle2 - angle1\n\
    \    if triangle_length == perpendicular_side and angle > 0 and angle < math.pi\
    \ / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofnf1j3g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpofnf1j3g.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpofnf1j3g.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpofnf1j3g.py\"\
    , line 14, in right_angle_triangle\n    perpendicular_side = math.sqrt((b ** 2)\
    \ + (c ** 2))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    d = b * b - 4 * a * c\n    if d < 0:\n     \
    \   return False\n    elif d == 0:\n        return True\n    else:\n        x1\
    \ = (-b + math.sqrt(d))/ (2 * a)\n        x2 = (-b - math.sqrt(d))/ (2 * a)\n\
    \        if x1 > x2:\n            return True\n        else:\n            return\
    \ False\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg24cn5ln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpg24cn5ln.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg24cn5ln.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    delta = b - a\n    if delta == 0:\n        return\
    \ False\n    delta_third = delta / 3\n    delta_pent = delta / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n\
    \    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third\
    \ = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third\
    \ / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n\
    \    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n\
    \    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third\
    \ = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third\
    \ / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n\
    \    delta_third = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third\
    \ = delta_third / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third\
    \ / 5\n    delta_third = delta_third / 2\n    delta_third = delta_third / 3\n\
    \    delta_third = delta_third / 5\n    delta_third = delta_third / 2\n    delta_third\
    \ = delta_third / 3\n    delta_third = delta_third / 5\n    delta_third = delta_third\
    \ / 2\n    delta_third = delta_third / 3\n    delta_third = delta_third / \ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdkmbu93k.py\", line 69\n    delta_third = delta_third\
    \ / \n                               ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return ((a - c) * (b - c)) - ((a - b) * (c -\
    \ b)) > 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9qt1gsa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi9qt1gsa.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi9qt1gsa.py\"\
    , line 15, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    delta = (b - a) - (b - c)\n    if delta < 0:\n\
    \        return False\n    if b == c and b == a:\n        return True\n    if\
    \ a > b and a > c:\n        return True\n    if b > a and b > c:\n        return\
    \ True\n    if c > a and c > b:\n        return True\n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4r7dccv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpg4r7dccv.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg4r7dccv.py\"\
    , line 27, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if abs(b - c) <= abs(a - b):\n       \
    \ return a == b or a == c\n    else:\n        return a == c\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalmx_i5q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpalmx_i5q.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpalmx_i5q.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    A, B, C = get_side_length(a, b, c)\n    AB,\
    \ AC, BC = get_side_length(A, B, C)\n    return ((AB >= AC and AC >= BC and BC\
    \ >= A) or (AB >= BC and BC >= AC and A >= C)) and ((AB >= AC and AC >= BC and\
    \ BC >= A) or (AB >= BC and BC >= AC and A >= C))\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcy6xyuv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbcy6xyuv.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbcy6xyuv.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpbcy6xyuv.py\"\
    , line 11, in right_angle_triangle\n    A, B, C = get_side_length(a, b, c)\nNameError:\
    \ name 'get_side_length' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == 0:\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84hi4z37.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp84hi4z37.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp84hi4z37.py\"\
    , line 19, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        ac = a + c\n        bc = b + c\n        ab = a + b\n        c = b - c\n\
    \        return ((ab > ac) and (bc > ac) and (c > ac)) or \\\n               ((ab\
    \ > bc) and (bc > bc) and (c > bc)) or \\\n               ((ab > c) and (bc >\
    \ c) and (c > c))\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1gwysr1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc1gwysr1.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc1gwysr1.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if b == 0 and c > 0:\n        return True\n\
    \    elif c > 0 and a == 0:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8jcgkjq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_8jcgkjq.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_8jcgkjq.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a_len = abs(a)\n    b_len = abs(b)\n    c_len\
    \ = abs(c)\n    if a + b + c != a_len + b_len + c_len:\n        return False\n\
    \    if a < 0 or b < 0 or c < 0 or a > b_len or b > c_len or c > a_len:\n    \
    \    return False\n    # These 2 tests are used to verify if a triangle is right\
    \ angled.\n    if a == b and b == c:\n        return True\n    elif a == b or\
    \ a == c or b == c:\n        return False\n    else:\n        return True\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85pnii35.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp85pnii35.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp85pnii35.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and c + a > b and a + c >\
    \ b and b + c > a:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8epnonk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv8epnonk.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv8epnonk.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif b == c:\n        return False\n    elif a == c:\n        return True\n\
    \    else:\n        a1 = abs((a+b+c)/2)\n        a2 = abs((a+c-b)/2)\n       \
    \ a3 = abs((a-b+c)/2)\n        a4 = abs((a-c+b)/2)\n        a5 = abs((a-c-b)/2)\n\
    \        a6 = abs((a-b-c)/2)\n        if a1 == b2 == c2:\n            return True\n\
    \        elif a2 == b3 == c3:\n            return True\n        elif a3 == b4\
    \ == c4:\n            return True\n        elif a4 == b5 == c5:\n            return\
    \ True\n        elif a6 == b7 == c7:\n            return True\n        elif b1\
    \ == b2 == c2:\n            return False\n        elif b2 == b3 == c3:\n     \
    \       return False\n        elif b3 == b4 == c4:\n            return False\n\
    \        elif b4 == b5 == c5:\n            return False\n        elif b6 == b7\
    \ == c7:\n            return False\n        else: \n            return False\n\
    \            \n            \ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrdva0v0.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpfrdva0v0.py\", line 63,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfrdva0v0.py\"\
    , line 50, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpfrdva0v0.py\"\
    , line 25, in right_angle_triangle\n    if a1 == b2 == c2:\nNameError: name 'b2'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return right_angle(a, b, c) == False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperwd_1ub.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmperwd_1ub.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmperwd_1ub.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmperwd_1ub.py\"\
    , line 11, in right_angle_triangle\n    return right_angle(a, b, c) == False\n\
    NameError: name 'right_angle' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    count = 0\n    \n    if a >= b >= c:\n     \
    \   count = a * c + b * c + c * a\n    else:\n        count = a * c + b * b +\
    \ c * a\n\n    if count == 0:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldp400pj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpldp400pj.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpldp400pj.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if b < a:\n        return right_angle_triangle(b,\
    \ c, a)\n    if c < a:\n        return right_angle_triangle(a, c, b)\n    if a\
    \ + b > c:\n        return right_angle_triangle(a, b, c)\n    return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptxc_lrq_.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    abc = (a + b + c)//2\n    acb = a - abc \n \
    \   bcd = b - c\n    if acb > abc and bcd > abc:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlvbxiuj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxlvbxiuj.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxlvbxiuj.py\"\
    , line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a < b + c:\n        return False\n    elif\
    \ b < a + c:\n        return False\n    elif c < a + b:\n        return False\n\
    \    else:\n        return True\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplf3cypa9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplf3cypa9.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplf3cypa9.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a + b > c) and (a + c > b) and (c + b >\
    \ a) and (c + a > b):\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxamzzhp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjxamzzhp.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjxamzzhp.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
