name: HumanEval_14_all_prefixes
language: py
prompt: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
  \    \"\"\" Return list of all prefixes from shortest to longest of the input string\n\
  \    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
  \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
  \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
completions: ["    prefix = \"\"\n    prefix_list = []\n    prefix_length = 0\n  \
    \  for char in string:\n        if char != prefix:\n            prefix += char\n\
    \            prefix_list.append(prefix)\n            prefix_length = 1\n     \
    \   else:\n            prefix_length += 1\n    return prefix_list\n", "    if\
    \ not string:\n        return []\n    prefixes = [string[:i] for i in range(1,\
    \ len(string) + 1)]\n    return prefixes\n", "    return [''.join(p) for p in\
    \ permutations(string)]\n</code>\n<|/ a |>\n<| a tags=string,python-3.x dscore=0\
    \ |>\n<code>\nfrom itertools import permutations\n", "    return list(map(lambda\
    \ s: s[: len(s)], string.split('')))\n", "    if string == '':\n        return\
    \ []\n    prefixes = []\n    for i in range(min(len(string), 3)):\n        prefixes.append(string[:i\
    \ + 1])\n    return prefixes\n", "    prefixes = []\n    for i in range(len(string)):\n\
    \        prefixes.append(string[:i+1])\n    return prefixes\n", "    return list(itertools.chain(*[p.split(',')\
    \ for p in string.split(',')]))\n", "    prefixes = []  # type: List[str]\n  \
    \  curr_str = ''\n    for c in string:\n        if c == '*':\n            prefixes.append(curr_str)\n\
    \            curr_str = ''\n        elif c == ' ':\n            prefixes.append(curr_str)\n\
    \            curr_str = ''\n        elif c == '.':\n            curr_str = curr_str[:-1]\n\
    \        else:\n            curr_str += c\n    prefixes.append(curr_str)\n   \
    \ return prefixes\n\n", "    prefixes = []  # type: List[str]\n    prefix = \"\
    \"  # type: str\n    for char in string:\n        prefix = prefix + char\n   \
    \     if prefix in prefix_dict:\n            prefixes.append(prefix)\n    return\
    \ prefixes\n\n", "    prefixes: List[str] = []\n    prefix = ''\n    for s in\
    \ string:\n        if s != prefix:\n            prefix += s\n            prefixes.append(prefix)\n\
    \            prefix = ''\n    return prefixes\n", "    if len(string) <= 1:\n\
    \        return []\n    prefixes = [string[0]]\n    for s in string[1:]:\n   \
    \     for p in prefixes:\n            yield p + s\n        prefixes = [s + p for\
    \ p in prefixes]\n", "    prefixes = []\n    for c in string:\n        if not\
    \ c:\n            continue\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n", "    prefixes: List[str] = []\n    chars: List[str] =\
    \ []\n    for c in string:\n        if c in chars:\n            chars.remove(c)\n\
    \        else:\n            chars.append(c)\n            prefixes.append(c * (len(chars)\
    \ - 1))\n    return prefixes\n\n", "    return list(itertools.chain(*[_string_pad_prefixes(s,\
    \ len(s)) for s in _string_to_prefixes(string)]))\n", "    prefixes = []\n   \
    \ prefix = string\n    prefix = prefix[:-1]\n    prefixes.append(prefix)\n   \
    \ while True:\n        if not string[len(prefix):]:\n            break\n     \
    \   prefix = prefix + string[len(prefix):]\n        prefixes.append(prefix)\n\
    \    return prefixes\n", "    prefixes = []\n    suffixes = collections.defaultdict(list)\n\
    \    for s in string.split('-'):\n        suffixes[s[-len(s):]].append(s)\n  \
    \  for prefix in sorted(suffixes, reverse=True):\n        prefixes.append(prefix\
    \ + ('-' if len(prefix) == 1 else '-'))\n    return prefixes + ['']\n", "    prefix\
    \ = []\n    for i in string:\n        prefix.append(i)\n        prefix.sort()\n\
    \    return prefix\n", "    prefixes = []\n    for i in range(len(string)-1):\n\
    \        prefixes.append(string[:i+1])\n    return prefixes\n", "    if string\
    \ == '':\n        return []\n    prefixes = []\n    for char in range(len(string)):\n\
    \        prefixes.append(string[:char])\n    return prefixes\n", "    prefix =\
    \ \"\"\n    suffixes = string.split(\" \")\n    while suffixes != []:\n      \
    \  prefix = suffixes[0]\n        suffixes = suffixes[1:]\n        prefixes.append(prefix)\n\
    \    return prefixes\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
