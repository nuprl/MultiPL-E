name: HumanEval_158_find_max
language: py
prompt: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\
  \"\"Write a function that accepts a list of strings.\n    The list contains different\
  \ words. Return the word with maximum number\n    of unique characters. If multiple\
  \ strings have maximum number of unique\n    characters, return the one which comes\
  \ first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"\
  ]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n   \
  \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
  \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
  \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n   \
  \ assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n \
  \   assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
  \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
  \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
  \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
completions: ["    if not words:\n        return \"\"\n\n    count = {w: words.count(w)\
    \ for w in words}\n    \n    best = max(count, key=count.get)\n\n    max_count\
    \ = max(count.values())\n    if max_count == 1:\n        return best\n\n    for\
    \ w in words:\n        if count[w] == max_count:\n            return w\n\n   \
    \ next_best = \"\"\n    for w in words:\n        if count[w] < count[next_best]:\n\
    \            next_best = w\n\n    return next_best\n", "    max_count = 0\n  \
    \  max_word = \"\"\n    for word in words:\n        count = count_unique(word)\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n    return max_word\n\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    </cell>\n<text>\nWrite a function that accepts a list of words as a string and\
    \ returns the number of unique characters\nin each word. You may assume that the\
    \ word list does not contain any spaces.\n\n\n</text>\n<cell>", "    unique_char_count\
    \ = {}\n    unique_char_count[\"\"] = 0 # empty string\n\n    for word in words:\n\
    \        unique_char_count[word] = len(word) # find unique characters in words\n\
    \n    max_word = max(unique_char_count.items(), key=lambda x: x[1])[0]\n    return\
    \ max_word\n", "    pass\n", "    return \"\".join([\"\".join(sorted(list(word)))\
    \ for word in words])\n", "    if not words or len(words) == 1:\n        return\
    \ \"\"\n\n    # we only need to keep unique characters\n    unique_chars = set(word.lower()\
    \ for word in words)\n\n    # get words with max length by keeping only unique\
    \ chars\n    max_words = [word for word in unique_chars if len(word) == max(len(word)\
    \ for word in unique_chars)]\n\n    # sort words\n    max_words.sort(key=len,\
    \ reverse=True)\n\n    # first word is highest in lexicographical order\n    return\
    \ max_words[0]\n\n", "    unique_chars = []\n    unique_chars_count = []\n\n \
    \   for i in words:\n        char_count = count_unique_chars(i)\n        if char_count\
    \ > len(unique_chars):\n            unique_chars = char_count\n            unique_chars_count.append(char_count)\n\
    \        elif char_count == len(unique_chars):\n            unique_chars.append(char_count)\n\
    \            unique_chars_count.append(char_count)\n        else:\n          \
    \  unique_chars.append(char_count)\n            unique_chars_count.append(char_count)\n\
    \n    index = unique_chars_count.index(max(unique_chars_count))\n    return words[index]\n\
    \n", "    l = len(words)\n    counts = Counter(words).values()\n    max_words\
    \ = [\"\" for _ in range(l)]\n    for i,j in zip(words, counts):\n        max_words[i]\
    \ += j\n    return max_words[l-1] if max_words[l-1] != \"\" else \"\"\n</code>\n\
    <|/ a tags=list,python,string |>\n<| a |>\n<code>", "    char_num = dict()\n \
    \   for word in words:\n        for char in word:\n            if char not in\
    \ char_num:\n                char_num[char] = 1\n            else:\n         \
    \       char_num[char] += 1\n\n    char_num = [char for char, count in char_num.items()]\n\
    \    char_num.sort(reverse=True)\n    return char_num[0]\n\n", "    return \"\"\
    \n", "    unique_chars = Counter()\n    maximum = 0\n    minimum = len(words[0])\n\
    \    for word in words:\n        unique_chars.update([char for char in word])\n\
    \        total += len(word)\n        if total > maximum:\n            maximum\
    \ = total\n        if total < minimum:\n            minimum = total\n    if maximum\
    \ == minimum:\n        return \"\"\n    else:\n        minimum = minimum - 1\n\
    \        for word in words:\n            if total == maximum:\n              \
    \  return word\n            total += len(word)\n            if total > maximum:\n\
    \                maximum = total\n    return \"\"\n", "    return \"\"\n", " \
    \   #print(words)\n    words.sort()\n    \n    if len(words) == 0:\n        return\
    \ \"\"\n\n    elif len(words) == 1:\n        return words[0]\n    \n    elif len(words)\
    \ == 2:\n        if words[0] == words[1]:\n            return words[0]\n\n   \
    \     if words[0] > words[1]:\n            return words[1]\n\n        else:\n\
    \            return words[0]\n\n    \n    for index, word in enumerate(words):\n\
    \        if index == 0:\n            max_len = len(word)\n\n        else:\n  \
    \          if len(word) >= max_len:\n                \n                max_len\
    \ = len(word)\n                \n            elif len(word) <= max_len:\n    \
    \            \n                max_len = len(word)\n                \n    \n \
    \   \n    words_list = []\n    for word in words:\n        if len(word) == max_len:\n\
    \            words_list.append(word)\n    return words_list[0]\n    \n    \n \
    \   \n    \n", "    return max(set(words), key=words.count) # Use of max to find\
    \ maximum element\n    ", "    return \"\"\n", "    dict_char = {}\n    count_char\
    \ = {}\n    for word in words:\n        unique_char = []\n        for char in\
    \ word:\n            if char in dict_char.keys():\n                dict_char[char]\
    \ += 1\n            else:\n                dict_char[char] = 1\n             \
    \   if char in count_char.keys():\n                    count_char[char] += 1\n\
    \                else:\n                    count_char[char] = 1\n        for\
    \ char in count_char:\n            count_char[char] = count_char[char] / len(word)\n\
    \        for char in dict_char:\n            dict_char[char] = dict_char[char]\
    \ / len(word)\n        char_list = []\n        for char in dict_char:\n      \
    \      char_list.append(char)\n        char_list.sort(key = dict_char.__getitem__)\n\
    \        for word in char_list:\n            if count_char[word] > count_char[word]:\n\
    \                return word\n    return \"\"\n", "    # write your code here\n\
    \    \n    return \"\"\n\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\nassert\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"cc\"\nassert find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"\n\
    assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"\n\n</cell>\n<text>\nExercise\n\
    \n</text>\n<text>\nWrite a function to calculate the number of unique characters\
    \ in a given string. If the string is empty return 0.\n\nNote: empty string is\
    \ considered as having 0 unique characters.\n\nUse a dictionary to store the characters\
    \ and its frequencies.\n\n\n</text>\n<cell>", "    \n    # Return first element\
    \ which comes first in lexicographical order\n    return words[0]\n", "    ...\n\
    </code>\n<|/ a tags=python,python-3.x |>\n<| a tags=python,python-3.x dscore=1\
    \ |>\n<code>\nfrom collections import Counter\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
