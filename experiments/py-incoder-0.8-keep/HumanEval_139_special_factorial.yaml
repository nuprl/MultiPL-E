name: HumanEval_139_special_factorial
language: py
prompt: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
  \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
  \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
  \    The function will receive an integer as input and should return the special\n\
  \    factorial of this integer.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
  \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
  \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
completions: ["    if n < 1:\n        return n\n    return n * special_factorial(n\
    \ - 1)\n\n", "    factorial = math.factorial\n    factorial_list = [1]\n    for\
    \ i in range(1, n+1):\n        factorial_list.append(factorial(i))\n    return\
    \ factorial_list[len(factorial_list) - 1]\n\n", "    result = 1\n    for i in\
    \ range(1, n + 1):\n        result = result * (n - i) * i\n\n    return result\n\
    \n", "    if n <= 0:\n        return 0\n    return n * special_factorial(n - 1)\n\
    \n", "    if n == 0:\n        return 1\n\n    if n < 0:\n        return -1\n\n\
    \    factorial = 1\n    while n != 0:\n        factorial *= n\n        n -= 1\n\
    \n    return factorial\n\n", "    return factorial(n) * (special_factorial(n -\
    \ 1) * special_factorial(n - 2))\n\n", "    if n == 0:\n        return 1\n   \
    \ if n == 1 or n == 2:\n        return n * special_factorial(n - 1)\n    return\
    \ n * special_factorial(n - 2) * special_factorial(n - 3)\n\n", "    if not isinstance(n,\
    \ int):\n        raise TypeError('n must be an int')\n    if n < 1:\n        raise\
    \ TypeError(f'n must be bigger than 1')\n    if n <= 0:\n        raise ValueError('n\
    \ must be bigger than 0')\n\n    return n * (special_factorial(n-1) * special_factorial(n-2))\n\
    \n", "    return factorial(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4)\n\n", " \
    \   return factorial(n) / (factorial(n-1) * factorial(n-2) * factorial(n-3))\n",
  "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return\
    \ n * special_factorial(n - 1)\n\n", "    if n == 0:\n        return 0\n\n   \
    \ fact = 1\n    i = 2\n    while i <= n:\n        fact *= i\n        i += 1\n\n\
    \    return fact\n\n", "    if n == 0:\n        return 1\n    if n == 1:\n   \
    \     return 4\n    if n == 2:\n        return 9\n    if n == 3:\n        return\
    \ 16\n    if n == 4:\n        return 25\n    if n == 5:\n        return 36\n \
    \   if n == 6:\n        return 49\n    if n == 7:\n        return 64\n    if n\
    \ == 8:\n        return 81\n    if n == 9:\n        return 100\n    if n == 10:\n\
    \        return 120\n    if n == 11:\n        return 126\n    if n == 12:\n  \
    \      return 152\n    if n == 13:\n        return 180\n    if n == 14:\n    \
    \    return 206\n    if n == 15:\n        return 225\n    if n == 16:\n      \
    \  return 244\n    if n == 17:\n        return 270\n    if n == 18:\n        return\
    \ 288\n    if n == 19:\n        return 316\n    if n == 20:\n        return 344\n\
    \    if n == 21:\n        return 368\n    if n == 22:\n        return 400\n  \
    \  if n == 23:\n        return 424\n    if n == 24:\n        return 460\n    if\
    \ n == 25:\n        return 495\n    if n == 26:\n        return 530\n    if n\
    \ == 27:\n        return 570\n    if n == 28:\n        return 615\n    if n ==\
    \ 29:\n        return 660\n    if n == 30:\n        return 695\n    if n == 31:\n\
    \        return 740\n    if n == 32:\n        return 780\n    if n == 33:\n  \
    \      return 820\n    if n == 34:\n        return 859\n    if n == 35:\n    \
    \    return 896\n    if n == 36:\n        return 943\n    if n == 37:\n      \
    \  return 990\n    if n == 38:\n        return 1047\n    if n == 39:\n       \
    \ return 1094\n    if n == 41:\n        return 1152\n    if n == 42:\n       \
    \ return 1200\n    if n == 43:\n        return 1247\n    if n == 44:\n       \
    \ return 1295\n    if n == 45:\n        return 1352\n    if n == 46:\n       \
    \ return 1410\n    if n == 47:\n        return 1468\n    if n == 48:\n       \
    \ return 1527\n    if n == 49:\n        return 1584\n    if n == 51:\n       \
    \ return 1639\n    if n == 52:\n        return 1696\n    if n == 53:\n       \
    \ return 1751\n    if n == 54:\n        return 1806\n    if n == 55:\n       \
    \ return 1865\n    if n == 56:\n        return 1924\n    if n == 57:\n       \
    \ return 1973\n    if n == 58:\n        return 2021\n    if n == 59:\n       \
    \ return 2068\n    if n == 60:\n        return 2133\n    if n == 61:\n       \
    \ return 2170\n    if n == 62:\n        return 2211\n    if n == 63:\n       \
    \ return 2266\n    if n == ", "    factorial_of_n = n * factorial(n-1)\n    for\
    \ n in range(2, n+1):\n        factorial_of_n *= n\n    return factorial_of_n\n",
  "    special_factorial_table = {\n        1: 1,\n        2: 6,\n        3: 24,\n\
    \        4: 720,\n        5: 5040,\n        6: 40320,\n        7: 362880,\n  \
    \      8: 3628800,\n        9: 39916800,\n        10: 479001600,\n        11:\
    \ 6227020800,\n        12: 87178291200,\n        13: 1307674368000\n    }\n  \
    \  return special_factorial_table[n]\n\n", "    if n == 0:\n        return 1\n\
    \    acc = 1\n    for i in range(1, n + 1):\n        acc *= i\n    return acc\n\
    \n", "    if n < 1:\n        raise ValueError\n    elif n == 1:\n        return\
    \ 1\n    elif n == 2:\n        return 2\n    else:\n        return n * special_factorial(n\
    \ - 1)\n\n", "    factorial_value = factorial(n)\n    special_factorial = 1\n\
    \    for i in range(1, n + 1):\n        special_factorial *= factorial_value\n\
    \    return special_factorial\n\n", "    if n == 0:\n        return 1\n    else:\n\
    \        factorial = 1\n        for i in range(1, n + 1):\n            factorial\
    \ *= i\n        return factorial\n\n", "    if n < 1:\n        return 0\n    if\
    \ n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
