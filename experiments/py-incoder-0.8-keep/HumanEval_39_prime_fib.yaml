name: HumanEval_39_prime_fib
language: py
prompt: "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number\
  \ that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n\
  \    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n\
  \    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2)\
  \ == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert\
  \ candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) ==\
  \ 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n  \
  \  assert candidate(10) == 433494437\n\ndef test_check():\n    check(prime_fib)\n\
  \ntest_check()\n"
completions: ["    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        raise\
    \ IndexError(\"Index must be positive for prime_fib function\")\n    return fib(n-1)\
    \ + fib(n-2)\n\n", "    if n < 2:\n        raise ValueError(f\"n must be >= 2\"\
    )\n    if n <= 3:\n        return n\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n\n", "    a, b = 0, 1\n    while b < n:\n        c = a + b\n        if\
    \ c > n:\n            return n\n        a, b = b, c\n    return c\n\n", "    if\
    \ n == 1 or n == 2:\n        return n\n    return prime_fib(n - 2) + prime_fib(n\
    \ - 1)\n\n", "    return fib(n) if n < 2 else prime(n) if n < 5 else fib_prime(n)\n\
    \n\n@timeit", "    if n <= 2:\n        return n\n    \n    a, b = 0, 1\n    for\
    \ i in range(2, n):\n        if a < b:\n            a = b\n        else:\n   \
    \         b = a + b\n    return b\n\n", "    if n == 2:\n        return 2\n  \
    \  if n < 2:\n        return 0\n    a, b = 1, 1\n    for i in range(3, n + 1,\
    \ 2):\n        a, b = b, a + b\n    return a\n\n", "    a, b = 0, 1\n    while\
    \ b < n:\n        c = a + b\n        if c > n:\n            break\n        a,\
    \ b = b, c\n    return a\n\n", "    a, b = 0, 1\n    while a < n:\n        a,\
    \ b = b, a + b\n        if n % b == 0:\n            return b\n    return n\n\n",
  "    a, b = 11, 2\n    while b < n:\n        if b == n:\n            return b\n\
    \        a, b = b, a + b\n    return b\n\n", "    a, b = 1, 1\n    while a < n:\n\
    \        a, b = b, a + b\n    return a\n", "    if n < 2:\n        raise ValueError()\n\
    \    return fibonacci(n) + prime(n)\n\n", "    if n < 2:\n        return n\n \
    \   else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n", "    a, b\
    \ = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return b\n\n", "    a,\
    \ b = 0, 1\n    while n > 1:\n        a, b = b, a+b\n        n -= 1\n    return\
    \ a\n\n", "    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n\
    \    if n == 3:\n        return 1\n    if n % 2 == 1:\n        return prime_fib(n\
    \ + 1) + 2\n    if n % 3 == 1:\n        return prime_fib(n + 1) + 3\n\n    if\
    \ n % 5 == 3:\n        return prime_fib(n + 1) + 5\n\n    return prime_fib(n +\
    \ 1) + prime_fib(n + 2) + prime_fib(n + 3)\n\n", "    if n <= 2:\n        return\
    \ n\n    else:\n        a, b = 1, 1\n        for i in range(2, n):\n         \
    \   if i % 2 == 0:\n                a, b = b, a + b\n            else:\n     \
    \           a = a + b\n        return a\n\n", "    def fib_recursion(n: int) ->\
    \ int:\n        if n == 1 or n == 2:\n            return 1\n        else:\n  \
    \          return fib_recursion(n - 1) + fib_recursion(n - 2)\n\n    return fib_recursion(n)\n\
    \n", "    if n < 2:\n        raise AssertionError(f\"number must be greater or\
    \ equal than 2. {n}\")\n\n    return prime_fib_iter(n)[0]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
