name: HumanEval_29_filter_by_prefix
language: py
prompt: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>>\
  \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
completions: ["    return [x for x in strings if x.startswith(prefix)]\n\n", "   \
    \ return filter(lambda s: s.lower().startswith(prefix.lower()), strings)\n", " \
    \   return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return\
    \ [s for s in strings if s.lower().startswith(prefix.lower())]\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    return [x for x in strings\
    \ if x.lower().startswith(prefix.lower())]\n", "    filtered = [s for s in strings\
    \ if s.lower().startswith(prefix)]\n    return filtered\n\n", "    return filter(lambda\
    \ s: s.startswith(prefix), strings)\n\n", "    return [e for e in strings if e.startswith(prefix)]\n\
    \n", "    return [x for x in strings if x.startswith(prefix)]\n", "    result\
    \ = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n\
    \    return result\n", "    return list(filter(lambda s: s.startswith(prefix),\
    \ strings))\n", "    return [i for i in strings if i.startswith(prefix)]\n</cell>\n\
    <text>\nNext we define a function that will compute mean of a given list of numbers.\
    \ We are using it as a preliminary function for you to do some practice with your\
    \ functions. In the next cell you can test your function with some examples of\
    \ how it works. Feel free to test with your own examples.\n\n\n</text>\n<cell>",
  "    if prefix not in strings:\n        return strings\n    else:\n        prefix\
    \ = prefix.lower()\n        matching_strings = []\n        for string in strings:\n\
    \            if string.lower().startswith(prefix):\n                matching_strings.append(string)\n\
    \        return matching_strings\n", "    return filter(lambda s: s.lower().startswith(prefix.lower()),\
    \ strings)\n", "    return [s for s in strings if s.startswith(prefix)]\n", " \
    \   if not strings:\n        return []\n    elif not prefix:\n        return strings\n\
    \    else:\n        prefix_len = len(prefix)\n        matching_strings = []\n\
    \        for s in strings:\n            if s.lower().startswith(prefix):\n   \
    \             matching_strings.append(s)\n        return matching_strings\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [x for\
    \ x in strings if x.startswith(prefix)]\n", "    return list(filter(lambda str:\
    \ str.startswith(prefix), strings))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
