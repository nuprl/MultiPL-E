name: HumanEval_66_digitSum
language: py
prompt: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes\
  \ a string as input and returns the sum of the upper characters only'\n    ASCII\
  \ codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\"\
  ) => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n\
  \        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB')\
  \ == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') ==\
  \ 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') ==\
  \ 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE\
  \ Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n"
completions: ["    total = 0\n    for c in s:\n        if c.isupper():\n         \
    \   total += ord(c)\n    return total\n\n", "    # write your code here\n    result\
    \ = 0\n    for i in s:\n        if i.isupper():\n            result += 1\n   \
    \ return result\n\n", "    def str_uppercase(s: str) -> int:\n        return sum(ord(c)\
    \ for c in s.upper())\n    return str_uppercase(s)\n\n", "    str_len = len(s)\n\
    \    sum_ = 0\n    if str_len == 0:\n        return 0\n    for x in range(str_len):\n\
    \        if s[x] >= 'a' and s[x] <= 'z':\n            sum_ += (ord(s[x]) - ord('a')\
    \ + 1) * 26\n        else:\n            sum_ += ord(s[x])\n    return sum_\n",
  "    return sum([ord(i) for i in s])\n\n", "    ascii_code = [ord(c) for c in s]\n\
    \    ascii_code = [c for c in ascii_code if c < ord(\"z\")]\n    return sum(ascii_code)\n\
    \n", "    pass\n\n", "    total = 0\n    for letter in s:\n        if letter.isupper():\n\
    \            total += ord(letter)\n    return total\n\n", "    return sum([ord(c)\
    \ - 96 if c in string.ascii_letters else 0 for c in s])\n\n", "    # Todo\n  \
    \  pass\n\n", "    return sum(map(ord, s))\n\n", "    answer = 0\n    for char\
    \ in s:\n        answer = answer + ord(char)\n    return answer\n\n", "    sum\
    \ = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n \
    \   return sum\n\n", "    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n", "    # Your code here\n\n\
    \    return sum(map(ord, list(s)))\n\n", "    sum = 0\n    for c in s:\n     \
    \   if c.isupper():\n            sum += ord(c)\n    return sum\n\n", "    # Your\
    \ code here\n    return sum([ord(ch) - 96 for ch in s])\n\n", "    return sum([int(c)\
    \ for c in s])\n\n", "    return sum([int(c) for c in s])\n\n", "    return sum([sum(int(c)\
    \ for c in s[:i]) for i in range(len(s))])\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
