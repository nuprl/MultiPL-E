name: HumanEval_80_is_happy
language: py
prompt: "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your\
  \ task is to check if the string is happy or not.\n    A string is happy if its\
  \ length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
  \    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n\
  \    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa')\
  \ == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') ==\
  \ False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n\
  \    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\
  \ndef test_check():\n    check(is_happy)\n\ntest_check()\n"
completions: ["    count = 0\n    for letter in s:\n        if letter in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            if letter != s[count]:\n                return False\n        count\
    \ += 1\n    if s.startswith(\"aaa\"):\n        return True\n    return s.endswith(\"\
    ccc\") or s.startswith(\"bbb\")\n", "    if len(s) < 3:\n        return False\n\
    \n    char_count = {}\n    for idx, char in enumerate(s):\n        if char not\
    \ in char_count:\n            char_count[char] = 0\n        if char_count[char]\
    \ == 3:\n            char_count[char] += 1\n        else:\n            char_count[char]\
    \ = 1\n            if idx != 0 and char != s[idx-1]:\n                return False\n\
    \    return True\n\n", "    if len(s) < 3:\n        return False\n    visited\
    \ = [False] * (len(s) + 1)\n    visited[0] = True\n    visited[1] = True\n   \
    \ for i in range(2, len(visited) + 1):\n        if visited[i] is True:\n     \
    \       continue\n        j = 0\n        while j < len(s) - 1:\n            if\
    \ s[j] == s[i]:\n                visited[j] = True\n                j += 1\n \
    \           else:\n                visited[j] = False\n                break\n\
    \        if visited[i] is False:\n            return False\n    return True\n\n",
  "    if len(s) <= 3:\n        return True\n\n    seen = dict()\n    for i in range(len(s)\
    \ - 2):\n        letter = s[i]\n        if letter not in seen:\n            seen[letter]\
    \ = True\n        else:\n            return False\n    return True\n\n", "   \
    \ if not s:\n        return True\n\n    if len(s) <= 3:\n        return False\n\
    \n    if set(s[0]) == set(s[1]) == set(s[2]) == set(s[3]):\n        return False\n\
    \n    return True\n\n", "    if len(s) <= 3:\n        return True\n    letters\
    \ = {}\n    for c in s:\n        letters[c] = letters.get(c, 0) + 1\n    for l\
    \ in letters:\n        if letters[l] >= 3:\n            return False\n    return\
    \ True\n\n", "    return len(s) >= 3 and all(n == s[n + 2] for n in range(len(s)\
    \ - 2))\n\n", "    return len(s) >= 3 and is_distinct(s[:3]) and is_distinct(s[3:])\n\
    \n", "    if len(s) < 3:\n        return False\n    flag = True\n    for i in\
    \ range(3, len(s)):\n        if s[i - 3] == s[i - 2] == s[i - 1]:\n          \
    \  continue\n        else:\n            flag = False\n            break\n    return\
    \ flag\n\n", "    if len(s) <= 3:\n        return True\n    else:\n        str_set\
    \ = set(s)\n        if len(str_set) == len(s):\n            return False\n   \
    \     else:\n            if s[0] != s[1]:\n                return True\n     \
    \       else:\n                str_set = set(s[1:])\n                if len(str_set)\
    \ == len(s):\n                    return True\n                else:\n       \
    \             if s[0] != s[2]:\n                        return True\n        \
    \            else:\n                        str_set = set(s[2:])\n           \
    \             if len(str_set) == len(s):\n                            return True\n\
    \                        else:\n                            return False\n\n",
  "    # return len(s) >= 3 and all((sorted(list(s))[i:i + 3]) == sorted(list(s)[i:i\
    \ + 3])) for i in range(len(s) - 2))\n    return len(s) >= 3 and all((sorted(list(s))[i:i\
    \ + 3]) != sorted(list(s)[i:i + 3])) for i in range(len(s) - 2))\n\nprint(is_happy(\"\
    abc\")) # False\nprint(is_happy(\"aa\")) # False\nprint(is_happy(\"abcb\")) #\
    \ True\nprint(is_happy(\"abc\")) # False\nprint(is_happy(\"a\")) # True\n</cell>\n\
    <text>\nExercise 13\nConsider the two cases when is_happy is False:\n\nThe string\
    \ length is less than 3, or\nThe string length is exactly 3\n\nIn the first case,\
    \ what is the smallest string that returns is_happy True? In the second case,\
    \ what is the smallest string that returns is_happy False?\n\n\n</text>\n<text>\n\
    Exercise 14\nThe function is_happy can be implemented using string methods, that\
    \ is, you can use the method .count() to count the number of occurrences of character\
    \ c in the string s.\n\n\n</text>\n<cell>", "    if len(s) <= 3:\n        return\
    \ False\n    dictionary = {}\n    for i in range(len(s)):\n        if s[i] not\
    \ in dictionary:\n            dictionary[s[i]] = 1\n        else:\n          \
    \  dictionary[s[i]] += 1\n    for k, v in dictionary.items():\n        if v >\
    \ 1:\n            return False\n    return True\n\n", "    if len(s) <= 3:\n \
    \       return False\n    for a in s:\n        count = 0\n        for b in s:\n\
    \            if a == b and a != a:\n                count += 1\n        if count\
    \ != 3:\n            return False\n    return True\n\n", "    # Write your code\
    \ here\n    if len(s) < 3:\n        return False\n    for i in range(len(s) -\
    \ 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return\
    \ False\n    return True\n", "    if s == \"\":\n        return True\n    if len(s)\
    \ >= 3:\n        for i in range(len(s) - 2):\n            if s[i + 1] == s[i +\
    \ 2]:\n                return True\n    return False\n\n", "    if len(s) < 3\
    \ or all(x == y for x, y in zip(s, s[1:])):\n        return False\n    return\
    \ True\n\n", "    return len(s) >= 3 and all(\n        len(set(c)) == 3 for c\
    \ in zip(s[::3], s[1::3], s[2::3])\n    )\n\n", "    length: int = len(s)\n  \
    \  return length >= 3 and all(s[i : i + 3].count(i) == 3 for i in range(length))\n\
    \n", "    if len(s) < 3:\n        return False\n    alphabet = set(s)\n    for\
    \ cnt in range(1, len(s)-3):\n        if alphabet.issubset(s[cnt:cnt + 3]):\n\
    \            return False\n    return True\n\n", "    if len(s) < 3:\n       \
    \ return False\n    seen = set()\n    for index in range(0, len(s) - 3):\n   \
    \     if not s[index] == s[index + 1] == s[index + 2]:\n            if s[index]\
    \ not in seen:\n                seen.add(s[index])\n                return False\n\
    \            else:\n                return True\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
