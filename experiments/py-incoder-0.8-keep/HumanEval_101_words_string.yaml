name: HumanEval_101_words_string
language: py
prompt: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\
  \"\"\n    You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    to split the string into words and return an array of the words.\n\
  \    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five,\
  \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\
  \"\n"
tests: "def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
  \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
  \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
  \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
  \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
  \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
  \ test_check():\n    check(words_string)\n\ntest_check()\n"
completions: ["    return s.strip().replace(', ', ',').split()\n\n", "    \n    return\
    \ s.split(', ')\n</cell>\n<cell>\nwords_string('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\nwords_string('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n</cell>\n<text>\nList Comprehension\n\
    The second thing you will learn in this lab is list comprehension, a way to perform\
    \ list transformations quickly. This is an important skill in Python that will\
    \ greatly help you write better programs.\n\nA list comprehension is very similar\
    \ syntax to a for loop: it is a way to create and filter lists. For example:\n\
    \n\n</text>\n<cell>\nnums = [0, 1, 2, 3, 4]\neven_num_to_square = [num**2 for\
    \ num in nums]\nprint(even_num_to_square)\n</cell>\n<cell>\nnums = [0, 1, 2, 3,\
    \ 4]\neven_num_to_square = [num**2 for num in nums if num % 2 == 0]\nprint(even_num_to_square)\n\
    </cell>\n<text>\nList comprehensions can be complex, but we will cover them in\
    \ a future lab.\n\n\n</text>\n<text>\nNested List Comprehensions\nList comprehensions\
    \ can also contain other list comprehensions to create nested lists.\n\nFor example:\n\
    \n\n</text>\n<cell>\nnums = [0, 1, 2, 3, 4]\n[num**2 for num in nums]\n</cell>\n\
    <cell>\n[x for x in range(10) if x % 2 == 0]\n</cell>\n<cell>\neven_num_to_square\
    \ = [num**2 for num in nums]\neven_num_to_square = [num**2 for num in nums if\
    \ num % 2 == 0]\nprint(even_num_to_square)\n</cell>\n<text>\nTuples\nIf you need\
    \ to pass more than one value to your function, it is often a good idea to define\
    \ a tuple:\n\n\n</text>\n<cell>", "    # Split the string into words\n    words\
    \ = s.strip().split(\",\")\n    # Return the words\n    return [word.strip() for\
    \ word in words]\n", "    # split the string into a list of words\n    # explode\
    \ splits words based on any whitespace\n    # split splits based on a pattern\n\
    \    # strip is used to strip whitespace from the beginning and end of a string\n\
    \    # map maps functions to apply to each element of a list\n    # list creates\
    \ a list\n    return [word.strip() for word in s.split(',') if word != \"\"]\n",
  "    return s.split(\",\")\n\n", "    return s.lower().replace(\" \",\"\").split(\"\
    ,\")\n", "    # Split the string into an array of words\n    return s.split()\n\
    \n", "    return [s.strip() for s in s.split(',') if s.strip()]\n", "    return\
    \ s.replace(',', ' ').split()\n", "    words = s.split(\",\")\n    return words\n",
  "    # Convert input to list.\n    a_list = list(s)\n\n    # Add spaces to make\
    \ strings into lists.\n    a_list = [a_list + \" \"]\n\n    # Remove spaces from\
    \ each element.\n    a_list = [a_list[:-1]]\n\n    # Return list.\n    return\
    \ a_list\n</cell>\n<text>\nRun the following cell to test your code:\n\n\n</text>\n\
    <cell>", "    words = s.split(\",\")\n    words = [word.strip() for word in words]\n\
    \    return words\n", "    words = s.replace(' ', '').split(',')\n    return [word.strip()\
    \ for word in words]\n    \n    \n</cell>\n<cell>\nwords_string(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<cell>", "    pass\n", "    return s.split(\",\"\
    )\n", "    return s.split(\",\")\n\n", "    \n    words_list = s.split(\",\")\n\
    \    \n    return words_list\n", "    words = s.replace(',', ' ').replace(';',\
    \ ' ').replace('.', ' ').replace('!', ' ').replace('?', '').replace(':', ' ').replace(';',\
    \ ' ').replace('?', ' ').replace('!', ' ').replace(':', ' ').replace('.', ' ').replace(',',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace('?', '').replace('!', ' ').replace('.',\
    \ '').replace('?', '').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace(':',\
    \ ' ').replace('?', '').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace('?',\
    \ ' ').replace(',', '').replace('?', '').replace('!', ' ').replace(';', ' ').replace('.',\
    \ '').replace(':', ' ').replace('.', '').replace(';', ' ').replace(':', ' ').replace('?',\
    \ ' ').replace('!', ' ').replace(',', ' ').replace(':', ' ').replace(';', ' ').replace('?',\
    \ ' ').replace('!', ' ').replace(',', ' ').replace(':', ' ').replace(';', ' ').replace('!',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace('.', '').replace(':', ' ').replace('?',\
    \ ' ').replace(',', ' ').replace('?', ' ').replace('!', ' ').replace(':', ' ').replace(';',\
    \ ' ').replace(',', ' ').replace('?', ' ').replace('!', ' ').replace(':', ' ').replace(';',\
    \ ' ').replace(',', ' ').replace('!', ' ').replace(':', ' ').replace('.', '').replace('?',\
    \ '').replace(';', ' ').replace('!', ' ').replace(',', ' ').replace('.', '').replace('.',\
    \ '').replace(';', ' ').replace(':', ' ').replace('.', '').replace(';', ' ').replace(':',\
    \ ' ').replace('?', ' ').replace('.', '').replace(',', ' ').replace(':', ' ').replace(';',\
    \ ' ').replace(',', ' ').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace('!',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace(',', ' ').replace('?', ' ').replace('!',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace('!', ' ').replace(':', ' ').replace(';',\
    \ ' ').replace(',', ' ').replace('?', ' ').replace('!', ' ').replace(':', ' ').replace(';',\
    \ ' ').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace(',', ' ').replace('?',\
    \ ' ').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace('!', ' ').replace(':',\
    \ ' ').replace(';', ' ').replace(',', ' ').replace('?', ' ').replace('!', ' ').replace(':',\
    \ ' ').replace(';', ' ').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace(',',\
    \ ' ').replace('?', ' ').replace('!', ' ').replace(':', ' ').replace(';', ' ').replace('!',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace(',', ' ').replace('?', ' ').replace('!',\
    \ ' ').replace(':', ' ').replace(';', ' ').replace('!', '", "    words = s.split(\"\
    ,\")\n    # TODO 2a: Your code here\n    return words\n\nassert words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert\
    \ words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nTask 2b\nDefine a function\
    \ called split_string which has the following signature:\n\n\n</text>\n<cell>",
  "    # TODO: Write code here\n    return s.replace(' ','').split(',')\n", "    l\
    \ = s.split(', ')\n    l = [s.strip() for s in l]\n    l = [s.lower() for s in\
    \ l]\n    return l\n</cell>\n<cell>", "    return s.split(',')\n", "    \n   \
    \ return s.strip().replace(\",\", \" \").split()\n", "    words = s.split(\",\"\
    )\n    words = [w.strip() for w in words]\n    return words\n", "    return s.split(\"\
    ,\")\n", "    s = s.lower()\n    s = s.replace(',','')\n    s = s.replace(' ','')\n\
    \    s = s.split(',')\n    return s\n", "    return s.strip().split()\n", "  \
    \  return [word for word in s.replace(\",\",\"\").split(\" \") if word]\n", " \
    \   return s.strip().split(',')\n</cell>\n<cell>", "    words = []\n    \n   \
    \ # TODO Complete the function\n    for word in s.split(','):\n        word =\
    \ word.strip()\n        words.append(word)\n    return words\n</cell>\n<cell>",
  "    \n", "    return s.strip().replace(',', ' ').split()\n\n", "    return s.strip().replace(',',\
    \ ' ').split()\n", "    return list(map(lambda x: x.strip(), s.strip().split(',\
    \ ')))\n", "    return s.split(', ')\n", "    lst = s.split(\",\")\n    \n   \
    \ lst2 = []\n    for i in lst:\n        lst2.append(i.strip())\n    return lst2\n\
    \n", "    return s.strip().replace(' ', ',').split(',')\n</cell>\n<cell>\nassert\
    \ len(words_string(\"Hi, my name is John\")) == 6\nassert len(words_string(\"\
    One, two, three, four, five, six\")) == 6\n</cell>\n<text>\nPractice\nCreate a\
    \ string with 11 random words. \nSplit the string into a list of words and capitalize\
    \ the first letter of each word.\nAppend the capitalized word list to the empty\
    \ list below called words.\nPrint the list out.\n\n\n</text>\n<cell>", "    words\
    \ = s.split(sep=\",\")\n    return words\n", "    # split string into words by\
    \ commas\n    # word_list = s.split(',')\n    word_list = s.split(' ')\n    \n\
    \    return word_list\n", "    return s.split()\n", "    splits = s.split(\",\"\
    )\n    words = [s.strip() for s in splits]\n    return words\n", "    # Split\
    \ the string by spaces.\n    s = s.replace(',', ' ')\n    words = s.split()\n\
    \    \n    return words\n", "    # Add your code here\n    s = s.replace(\",\"\
    ,\" \")\n    words = s.split(\" \")\n    return words\n</cell>\n<cell>", "   \
    \ pass\n", "    \n    # Your code here\n    \n    return word_list.split(',')\n\
    \n", "    return s.split(', ')\n", "    return s.split(\",\")\n", "    words =\
    \ s.replace(',', ' ').split()\n    return words\n", "    return s.replace(',',\
    \ ' ').split()\n</cell>\n<cell>", "    # Add your code here\n    pass\n</cell>\n\
    <text>\nPractice Test Cases\nWhen you run the tests below, what do you think will\
    \ happen when you call words_string on different inputs?\n\n</text>\n<cell>",
  "    words = s.strip().replace(\",\", \" \").split()\n    return words\n", "   \
    \ words = s.split(\",\")\n    return words\n", "    \n    # Your code here\n \
    \   words = s.replace(',', ' ').replace('.', ' ').replace(';', ' ').replace(':',\
    \ ' ').replace(';', '').replace('-', ' ').replace('-', '').replace('-', ' ').replace('-',\
    \ ' ').replace('-', '').replace('.', '').replace(',', ' ').replace(' ', '').split('\
    \ ')\n    \n    return words\n", "    return s.split(sep=',')\n", "    ## TODO:\
    \ convert the input string into a list of words\n    pass\n\n", "    \n    return\
    \ list(map(lambda x: x.split(','), s.split(',')))\n", "    return s.split()\n\n",
  "    words = s.replace(\",\", \" \").replace(\",\", \" \").split()\n    return words\n",
  "    \n    return s.split(\",\")\n", "    # Write your code here\n    return s.split(\"\
    ,\")\n", "    words = s.replace(\",\", \" \").replace(\"\\n\", \" \").split(\"\
    \ \")\n    words.sort()\n    return words\n", "    # BEGIN Practice implementation,\
    \ do not modify.\n    return s.replace(' ', '').split(',')\n    # END Practice\
    \ implementation.\n", "    return s.split(\" \")\n", "    # Split the string by\
    \ the delimiter\n    words = s.split()\n    return words\n\nassert words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert\
    \ words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n", "    if s == \"\" or s is None: \n \
    \       return []\n\n    words=s.split(\",\")\n\n    return words\n", "    words\
    \ = s.split(',')\n    return words\n", "    words = s.split(\",\")\n    words_array\
    \ = []\n    for word in words:\n        words_array.append(word.strip().lower())\n\
    \    return words_array\n\n", "    # Your code here\n    return [word.strip()\
    \ for word in s.split(',')]\n    \n", "    return s.split(sep)\n", "    # implement\
    \ this function\n    \n    return []\n</cell>\n<cell>\nassert words_string(\"\
    Hello, World!\")==['Hello','World!']\nassert words_string(\"Hello\") == []\nassert\
    \ words_string(\"\") == []\n</cell>\n<text>\nIf you have implemented the words_string\
    \ function correctly, then your program should produce the output:\n\n['Hello',\
    \ 'World!']\n\n</text>\n<cell>", "    words = s.strip().split(',')\n    return\
    \ [w for w in words]\n", "    return list(filter(None, re.split('[^a-zA-Z]+',\
    \ s)))\n</cell>\n<cell>", "    words = []\n    for word in s.replace(',', '').split():\n\
    \        words.append(word.strip())\n    return words\n\n", "    # Your code here\n\
    \    return s.replace(' ', '').split(',')\n", "    \n    words = s.split(\" \"\
    )\n    \n    return words\n    \nprint(words_string(\"Hi, my name is John\"))\n\
    print(words_string(\"One, two, three, four, five, six\"))\n</cell>\n<text>\nFinally\
    \ write a function that can take a word, and return its length.\n\n\n</text>\n\
    <cell>", "    return s.split(' ')\n    ", "    return s.split(',')\n", "    return\
    \ s.split(',')\n\n", "    l = s.split(\",\")\n    for i in range(len(l)):\n  \
    \      if l[i] == \"[\" or l[i] == \"]\":\n            l.insert(i,\"\")\n    return\
    \ l\n</cell>\n<cell>", "    return s.split(',')\n", "    return s.split(\",\"\
    )\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<cell>",
  "    \n    # Split the string by space\n    words = s.split()\n    \n    # Turn\
    \ the words into lower case\n    words = [word.lower() for word in words]\n  \
    \  \n    # Remove the commas and convert to lower case\n    words = [word.lower()\
    \ for word in words]\n    \n    # Remove the spaces from the start and end of\
    \ the list\n    words = [word.strip(\" \") for word in words]\n    \n    return\
    \ words\n", "    return s.split(\",\")\n\nassert words_string(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<cell>", "    return s.split(',')\n", "    return\
    \ s.split(',')\n", "    pass\n", "    words = s.split(',')\n    if len(words)\
    \ == 0 or len(words) > 7:\n        return []\n    else:\n        return words\n\
    \    ", "    words = s.strip().replace(\",\", \"\").split()\n    return words\n",
  "    word_list = s.strip().split(',')\n    return word_list\n", "    return s.replace(',',\
    \ ' ').split()\n", "    return [x for x in s.split(',')]\n", "    words = s.split(\"\
    ,\")\n    words = [x for x in words if x != '']\n    return words\n", "    words_list\
    \ = s.strip().split(\",\")\n    return [word.strip() for word in words_list]\n",
  "    \n    # Your code goes here\n    \n    # return sorted(s.lower().split(','))\n\
    \    \n    return sorted(s.split(','))\n</cell>\n<cell>", "    if s == ',':\n\
    \        return []\n    else:\n        s = s.split()\n        return s\n", " \
    \   return s.split(\",\")\n\n", "    words = s.split(\" \")\n    return words\n",
  "    return [x.strip() for x in s.split(',')]\n\n", "    pass\n", "    return s.split(',')\n",
  "    pass\n</cell>\n<cell>", "    return s.replace(' ','').split(',')\n\n\n\"\"\"",
  "    if type(s) == str:\n        words = s.replace(\",\", \"\").replace(\" \",\"\
    \").split(\",\")\n        words = list(map(lambda x: x.strip(), words))\n    \
    \    return words\n    else:\n        print(\"The given input is not a string\"\
    )\n        return []\n", "    return s.split(\",\")\n", "    return s.replace('\
    \ ,', ',').split(',')\n", "    \n    words = s.split(',')\n    words = [w.strip()\
    \ for w in words]\n    return words\n", "    return s.split()\n", "    return\
    \ s.split(\",\")\n", "    words = s.lower().strip().replace(',', ' ').split('\
    \ ')\n    \n    return words\n</cell>\n<cell>", "    return s.strip().split(',')\n",
  "    lst = s.split(\",\")\n    lst = [x.strip() for x in lst]\n    lst = [x for\
    \ x in lst if x != \"\"]\n    return lst\n", "    return s.split(sep=\",\")\n\n\
    </cell>\n<cell>", "    \n    return s.split()\n", "    words_list = s.split(\"\
    ,\")\n    word_list = []\n    for i in words_list:\n        word_list += i.split()\n\
    \    return word_list\n</cell>\n<cell>\nwords_list = words_string(\"Hi, my name\
    \ is John\")\nprint(words_list)\n</cell>\n<cell>", "    return s.replace(\",\"\
    , \" \").split()\n", "    return s.split(\",\")\n\n</cell>\n<cell>", "    return\
    \ s.strip().split(\",\")\n</cell>\n<text>\nRun the cell below to test your code.\n\
    \n\n</text>\n<cell>", "    return s.replace(\",\", \" \").split()\n", "    my_list\
    \ = s.split(\",\")\n    return my_list\n", "    \n    return s.replace(' ', '').split(',')\n\
    \n", "    pass\n", "    words = []\n    \n    #Add your code\n    return words\n",
  "    return s.split(\",\")\n\n", "    \n    words = [word for word in s.replace('\
    \ ', '').split(',')]\n    return words\n</cell>\n<text>\nRun the following cell\
    \ to test your code. Pay attention to the output in second box (if provided).\n\
    \n\n</text>\n<cell>\ntmp_words = words_string(\"Hello, my name is John\")\ntmp_words[:3]\n\
    </cell>\n<cell>\ntmp_words = words_string(\"Hello, my name is John\")\ntmp_words[:]\n\
    </cell>\n<cell>\ntmp_words = words_string(\"Hello, my name is John\")\ntmp_words[:]\n\
    </cell>\n<text>\nExpected Output:\n\n['Hello', ',', 'my', 'name', 'is', 'John']\n\
    \n</text>\n<text>\nDefine split_to_sentences function\nGiven an input string,\
    \ you need to write a function that returns a list of strings. The sentence splitter\
    \ should split a string into a list of words. Use Python's split() function. To\
    \ split it correctly, you will have to specify the sep argument.\n\n\n</text>\n\
    <cell>", "    return s.replace(\",\", \" \").split()\n</cell>\n<cell>\nassert\
    \ words_string(\"Hi\") == [\"Hi\"]\nassert words_string(\"Hi my name is\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\"]\nassert words_string(\"One, two, three four\"\
    ) == [\"One\", \"two\", \"three\", \"four\"]\nassert words_string(\"One, two,\
    \ three four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nassert words_string(\"One, two, three four, five, six, \") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\"]\n</cell>\n<cell>\n\
    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]\n</cell>\n<text>\nC. count_words\n\n</text>\n<text>\nQuestion 3: Write\
    \ a function that returns the number of words in a string.\n\nHINT: Use a dictionary.\
    \ Think of how a dictionary would work:\nd = {'word': 1, ',': 1, 'my': 1, 'name':1,\
    \ 'is': 1, 'John': 1}\n\n\n</text>\n<cell>", "    s = s.replace(' ', '')\n   \
    \ s = s.split(',')\n    return s\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou can\
    \ use regular expressions to split your string into separate words\n<code>\nimport\
    \ re\nre.split('[,;]',str)\n</code>\nThis returns a list of words so you might\
    \ want to filter out empty words.\n<code>\nimport re\nre.split('[,;]',str).filter(\
    \ lambda x:x!='')\n</code>\n<|/ a tags=python dscore=0 |>\n<| c |>\nYour regex\
    \ does not remove a comma in quotes.\n<|/ c |>\n<| c |>\nYou are right this regular\
    \ expression does no check for a comma in quotes ... the OP didn't specify this\
    \ as a requirement but it is an issue in this code\n<|/ c |>\n<| a dscore=0 |>\n\
    The first thing you need to do is split the string on commas. You can do this\
    \ with str.split().\nThen you can filter out the empty entries. You can do this\
    \ by converting your list to a set and then back to a list: set(a).\n<code>\n\
    words = list(filter(None, s.split(',')))\n</code>\n<|/ a tags=python |>\n<| c\
    \ |>\nThis does not work because a comma inside of quotes still constitutes a\
    \ separator.\n<|/ c |>\n<| a dscore=0 |>\nOne way using regex:\n<code>\n>>> import\
    \ re\n>>> s = \"one,two,three,four,five,six,seven,eight\"\n>>> re.findall(\"\\\
    w+|\\B\\'\\w+\\'\\B|\\B\\\"\\w+\\\"\\B|\\B\\'\\w+|\\\"\\w+\\'|\\'\\w+|\\\"\\w+|\\\
    '\\w*\", s)\n['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']\n\
    </code>\n<|/ a tags=python |>\n<| a tags=python |>\n<code>\nimport re\n\ns = 'one,two,three,four,five,six,seven,eight'\n\
    print([i for i in re.split(\"[,]+\", s) if i != ''])\n</code>\noutput\n<code>\n\
    ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\nTry this:\n<code>\ns = 'one,two,three,four,five,six,seven,eight'\n\
    a = s.split(',')\nprint([x for x in a if x != ''])\n</code>\n<|/ a dscore=0 tags=python\
    \ |>\n<| c |>\nWhile this code may ", "    return s.split(\",\")\n\n", "    return\
    \ s.split(\",\")\n\n", "    \n    return s.split(',')\n", "    return s.strip().replace(\"\
    ,\", \" \").split()\n</cell>\n<cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL\
    \ THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_words_string(words_string)\n</cell>\n\
    <text>\nTranslate\nThe translate function allows you to take in a string of text\
    \ and return the sentence with the words reversed.\n\nMore specifically, you will\
    \ be given a string of words, and you must return the sentence with the words\
    \ reversed.\n\nTranslate\nGiven a string, sentence, return a sentence with the\
    \ words reversed.\n\nFor example, \n\n\"Give me your dog\" should return \"si\
    \ va met, mei va ma\".\n\n\nYou will have to include the following functions:\n\
    \nFind and eliminate non-alpha characters\nFind and eliminate numbers in order\n\
    Return a list of words\n\n\n</text>\n<cell>", "    \n    words = s.split(\",\"\
    )\n    words = [x.strip() for x in words]\n    return words\n\n", "    return\
    \ s.split(\",\")\n", "    return s.split(\",\")\n", "    # Split string into list\
    \ of words\n    return s.lower().split(', ') if s else []\n", "    # Split string\
    \ into list of words\n    return s.replace(',', ' ').split()\n\n", "    return\
    \ s.replace(',', ' ').split()\n", "    return s.strip().lower().split(\",\")\n",
  "    pass\n", "    pass\n", "    words = []\n    for word in s.split(\",\"):\n \
    \       words.append(word.strip())\n    return words\n</cell>\n<text>\nExercise\
    \ 05\nTest your words_string function with the following cases:\n\n\n</text>\n\
    <cell>\nprint(words_string(\"\"))\nprint(words_string(\" \"))\nprint(words_string(\"\
    Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"\
    ))\nprint(words_string(\"Hi, my name is  John\"))\n</cell>\n<text>\nThe last one\
    \ should not have a comma after \"is\". Make sure it prints an empty list [].\n\
    \n\n</text>\n<text>\nExercise 06\nCreate a function called translate that takes\
    \ a list of words as a parameter and returns the same list but with the words\
    \ reversed.\n\n\n</text>\n<cell>", "    return s.split(', ')\n", "    \n    my_list\
    \ = s.split(', ')\n    \n    return my_list\n\nprint(words_string('Hi, my name\
    \ is John'))\nprint(words_string('One, two, three, four, five, six'))\n</cell>\n\
    <text>\nExpected Output\n['Hi', 'my', 'name', 'is', 'John']\n['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n\n</text>\n<text>\nTask 4\nWrite a program that accepts\
    \ a string of words, and returns the longest word in that string.\n\nIf the string\
    \ doesn't contain any words, it should return an empty string.\n\nFor example\
    \ words_string(\"Hello, World!\") should return \"Hello\".\n\nIf there are several\
    \ words with the same length, then you should return the one that comes first.\n\
    \nFor example words_string(\"Hello, World!\") should return \"World\".\n\nwords_string(\"\
    \") should return an empty string.\n\nHint: Use a for loop.\n\n\n</text>\n<cell>",
  "    return [w for w in s.split(',') if w.strip()]\n", "    words = s.split(' ')\n\
    \    return [word for word in words]\n", "    pass\n\n", "    return s.split(',')\n\
    \n", "    # Split string into a list of words\n    words = s.replace(',', ' ').split()\n\
    \    # Remove empty elements from list\n    words = [x for x in words if len(x)\
    \ > 0]\n    return words\n\n", "    words = s.replace(',', '').split()\n    return\
    \ words\n", "    words = s.split(\" \")\n    words_array = []\n    for word in\
    \ words:\n        words_array.append(word)\n    return words_array\n", "    return\
    \ s.split(\",\")\n", "    words = s.strip().split(', ')\n    return [w.strip()\
    \ for w in words]\n", "    #<Your code here>\n    return list(map(lambda x: x.split(','),\
    \ s.split()))\n", "    words = s.split(\",\")\n    words_list = []\n    for word\
    \ in words:\n        words_list.append(word)\n    return words_list\n", "    \n",
  "    return s.split(\",\")\n\nassert words_string(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n</cell>\n<text>\nOnce you have implemented the words_string function, run the\
    \ cell below to test your solution.\n\n\n</text>\n<cell>", "    \n    return s.split(\"\
    ,\")\n", "    # TODO: Write your code here\n    return s.split(\",\")\n", "  \
    \  # Your code here\n    return s.split(',')\n", "    return s.replace(',', '\
    \ ').split()\n", "    return list(filter(None, s.split(\",\")))\n", "    return\
    \ s.strip().lower().split(\",\")\n</cell>\n<cell>\nassert words_string(\"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<text>\nSentence -> Words\nIt is common to separate\
    \ text into sentences, and then split the sentence into words. You'll be given\
    \ a sentence as a string and your task is to separate it into words.\n\nThe sentence\
    \ needs to be split at the occurrence of punctuations, so that \"it's\" and \"\
    and \"its\" both become [\"it\", \"'s\"]. In addition, single letters should be\
    \ treated as distinct words.\n\nYou will do this using the functions split_sentence\
    \ and split_words.\n\nWrite a split_sentence function that takes in a string and\
    \ returns a list of strings. The sentence needs to be split at the occurrence\
    \ of punctuations, so that \"it's\" and \"and \"and \"its\" both become [\"it\"\
    , \"'s\"]. Single letters should not be split into multiple words.\n\n\n</text>\n\
    <cell>", "    return s.split(',')\n", "    return s.split(',')\n</cell>\n<cell>\n\
    words_string(words_string(words_string(words_string(\"Hi, my name is John\"))))\n\
    </cell>\n<text>\nCall the words_string function on some different arguments.\n\
    \n\n</text>\n<cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n<cell>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nWrite the\
    \ function count_words below so that it returns the number of words in the provided\
    \ string.\n\n\n</text>\n<cell>", "    \n    return s.replace(',', ' ').split()\n\
    </cell>\n<cell>", "    return [s for s in s.split(',')]\n", "    return s.split(',')\n\
    \nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") ==\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n", "    pass\n",
  "    words = s.split(',')\n    return [s.strip() for s in words]\n", "    # Split\
    \ the string into a list of words\n    return s.replace(',', ' ').split()\n",
  "    lst = []\n    for x in s.split(','):\n        if x.strip() != '':\n       \
    \     lst.append(x.strip())\n    return lst\n", "    \n    # Your code here\n\
    \    \n    return [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    \n</cell>\n<cell>", "    words = s.split(',')\n    return [word.strip() for word\
    \ in words]\n", "    return s.split()\n", "    s = s.strip()\n    s = s.replace(\"\
    ,\", \" \")\n    l = s.split()\n    \n    if len(l) != 0 and type(l[0]) != bool:\n\
    \        raise ValueError(f\"Wrong word(s) format for {s}\")\n    else:\n    \
    \    return l\n", "    \n    return s.split(',')\n", "    pass\n\n", "    words\
    \ = s.strip().split(\",\")\n    words = [w.strip() for w in words]\n    return\
    \ words\n", "    return s.replace(',', ' ').split()\n</cell>\n<cell>", "    words\
    \ = s.split(\",\")\n    \n    words_array = []\n    \n    for word in words:\n\
    \        if word != \"\":\n            words_array.append(word)\n    \n    return\
    \ words_array\n\n", "    return s.replace(',', ' ').split()\n", "    return [w.strip()\
    \ for w in s.split(',')]\n", "    # Split the string into words\n    return s.strip().lower().split(',')\n",
  "    words = s.split(sep=',')\n    words.append(sep='')\n    words = [w for w in\
    \ words if w != '']\n    return words\n</cell>\n<cell>\nassert words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert\
    \ words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nMaking sure the code runs\n\
    Running this file by itself, as you have written it here, will execute all of\
    \ the code in the notebook. Let's break it down. First, we import all the functions\
    \ from our file into a new Python file. We then define an 'assert runs to true/false'\
    \ function that we then use to test our code. Next, we run the function with some\
    \ example strings and assert that the output from the function matches the expected\
    \ output.\n\n\n</text>\n<cell>\n%%writefile test_words.py \n\nfrom problem_02_words\
    \ import words_string\n", "    return s.split(\",\")\n", "    words = s.split(\"\
    ,\")\n    return words\n", "    return list(map(lambda s: s.strip(), s.strip().replace(\"\
    ,\", \"\").split(' ')))\n", "    return [word.strip() for word in s.split(',')]\n\
    \n", "    words = [s.strip() for s in s.split(\",\") if s.strip()]\n    return\
    \ words\n", "    return s.strip().split()\n", "    words = s.split(\",\")\n  \
    \  words = [w.strip() for w in words]\n    \n    return words\n</cell>\n<cell>\n\
    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") ==\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\n\
    C) Exercise\nWrite a program to read a file called words.txt and print out each\
    \ word on a separate line.\nThen, write a program to read a file called words.txt\
    \ and print out the number of times each word appears in the file.\n\n\n</text>\n\
    <cell>", "    # Split the string into an array using the separator ',' or ' '\n\
    \    words = s.replace(',', ' ').split(' ')\n    \n    return words\n", "    #\
    \ Split words from text into a list\n    s_list = s.replace(\",\",\" \").split()\n\
    \    \n    # Return list\n    return s_list\n", "    pass\n", "    return s.lower().strip().replace('\
    \ ,', ',').lower().split(',')\n", "    return s.replace(',', '').split()\n", " \
    \   \n    splits = s.split(',')\n    splits2 = s.split(' ')\n    \n    return\
    \ list(filter(lambda s: s != '', splits))\n", "    # convert string to list, remove\
    \ extra spaces and commas\n    return list(s.replace(\", \", \",\").split())\n",
  "    \n    return s.split(',')\n\n", "    words = s.split(',')\n    words = [word\
    \ for word in words]\n    return words\n\nassert words_string(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<text>\nC) A helper function that takes an array\
    \ of strings and returns an array where each word\nhas exactly the same count\
    \ as in the given string array.\nFor example:\n[\n    \"Hi, my name is John\"\
    , \n    \"One, two, three, four, five, six\"\n]\nbecomes\n[\n    \"Hi\", \n  \
    \  \"my\", \n    \"name\", \n    \"is\", \n    \"John\", \n    \"One\", \n   \
    \ \"two\", \n    \"three\", \n    \"four\", \n    \"five\", \n    \"six\"\n]\n\
    The function should return the given array if you pass a single string, or an\
    \ array of strings ", "    words = s.split(',')\n    return words\n\nassert words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert\
    \ words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
