name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n  \
  \  \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n  \
  \  \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    if x + y == z:\n        return True\n    return False\n\n", " \
    \   if type(x) == int and type(y) == int and type(z) == int:\n        return x\
    \ != y or x != z or y != z\n    else:\n        return False\n    \n@jit(nopython=True)",
  "    if x != y:\n        return True\n    if x < 0:\n        return False\n    if\
    \ y < 0:\n        return False\n    if z != 0 and z != 1:\n        return False\n\
    \    if x < 0:\n        return False\n    if y < 0:\n        return False\n  \
    \  if z != 0 and z != 1:\n        return False\n    if x < 0:\n        return\
    \ False\n    if y < 0:\n        return False\n    if z != 0 and z != 1:\n    \
    \    return False\n    if x < 0:\n        return False\n    if y < 0:\n      \
    \  return False\n    return True\n", "    \n    if x == y + z:\n        return\
    \ True\n    \n    return False\n\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x >= 0 and y >= 0 and\
    \ z >= 0\n\n", "    return x == y or x == z or y == z\n</cell>\n<cell>\nassert\
    \ any_int(1, 3, 1) == True\nassert any_int(1, 3, 1) == True\nassert any_int(1,\
    \ 3, 1) == True\nassert any_int(1, 3, 0) == False\nassert any_int(1, 3, 2) ==\
    \ False\n</cell>\n<text>\nPart 4\nCreate a function find_median, which takes as\
    \ parameters a list of numbers, and, if it has 3 numbers, returns the median.\n\
    \nIf it does not have three numbers, it raises an error.\n\nExamples\nfind_median([1,3,5,6,8,12,17])\
    \ \u279E 5.0\nfind_median([1,3,5,6,8,12]) \u279E 6.0\nfind_median([1,3,5,6,8,12,17,21,25])\
    \ \u279E 17.0\n\n</text>\n<cell>", "    \n    return x == y + z\n\n", "    return\
    \ ((x==y or x==z) and (x%1 == 0 or y%1 == 0 or z%1 == 0)) \\\n        and type(x)\
    \ == int and type(y) == int and type(z) == int\n    ", "    if sum([x, y, z])\
    \ == x+y+z:\n        if type(x) == int and type(y) == int and type(z) == int:\n\
    \            return True\n    return False\n\n", "    return x == y or x == z\
    \ or y == z\n\n", "    return isinstance(x, int) and y == z and is_integer(x)\
    \ or x == z and is_integer(y) or x == y and is_integer(z)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n\n@curry", "    \n   \
    \ # first check if x or y or z is an integer\n    try:\n        int_x = int(x)\n\
    \        int_y = int(y)\n        int_z = int(z)\n    except (TypeError, ValueError):\n\
    \        return False\n    \n    if int_x + int_y + int_z == x * y + z:\n    \
    \    return True\n    return False\n    ", "    if type(x) != int or type(y) !=\
    \ int or type(z) != int:\n        return False\n    if x == y + z and x % 1 ==\
    \ 0 and y % 1 == 0 and z % 1 == 0:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x == y + z\n", "    return x == y or x == z or y\
    \ == z\n\n", "    if x != int(x + y):\n        return False\n    if y != int(x\
    \ + y):\n        return False\n    if z != int(x + y):\n        return False\n\
    \    return True\n\n", "    return (x, y, z) == (x + y + z) == int(x) and int(y)\
    \ and int(z)\n\n", "    return round(abs(x-y)+abs(x-z)) == 0 or round(abs(x-y)+abs(x-z))\
    \ == 0\n\n", "    if x + y == z:\n        if x >= 0 and y >= 0 and z >= 0:\n \
    \           return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
