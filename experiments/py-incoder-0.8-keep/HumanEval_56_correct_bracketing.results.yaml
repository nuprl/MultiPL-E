name: HumanEval_56_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []  # type: List[str]\n    pairs = {'<': '>'}  # type: Dict[str, str]\n\
    \    for bracket in brackets:\n        if bracket not in pairs:\n            continue\n\
    \        stack.append(bracket)\n        if not stack:\n            return False\n\
    \        other_bracket = pairs[bracket]\n        if stack.pop() != other_bracket:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n \
    \   assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7l4u0_ml.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7l4u0_ml.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7l4u0_ml.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # make sure brackets is a string\n    brackets = str(brackets)\n    # initialize\
    \ a dictionary to keep track of which brackets we've seen\n    brackets_dict =\
    \ dict()\n    # for each opening bracket, add the corresponding closing bracket\
    \ to\n    # the brackets_dict\n    for bracket in brackets:\n        brackets_dict[bracket]\
    \ = True\n    # go through brackets_dict and make sure every opening bracket has\
    \ a corresponding closing bracket\n    for k, v in brackets_dict.items():\n  \
    \      if v != True and v != False:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr47hzl2f.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpr47hzl2f.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr47hzl2f.py\"\
    , line 34, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"<\":\n            # add\
    \ a new \"stack\" with any closing brackets\n            stack.append(c)\n   \
    \     elif c == \"<\":\n            # add a new \"stack\" with any closing brackets\n\
    \            stack.append(c)\n        elif c == \">\" and stack:\n           \
    \ # If the top (top stack) is closed, then we know we have an\n            # unmatched\
    \ left bracket\n            if stack.pop() != \"<\":\n                return False\n\
    \        else:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyu_loynt.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpyu_loynt.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyu_loynt.py\"\
    , line 38, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    num_close = 0\n\n    for c in brackets:\n        if c == \"\
    <\":\n            num_open += 1\n        if c == \">\":\n            num_close\
    \ += 1\n\n    if num_open != num_close:\n        return False\n\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph68kz4e6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmph68kz4e6.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph68kz4e6.py\"\
    , line 35, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return all(brackets == brackets[0]\n               or brackets == brackets[1]\n\
    \               for brackets in brackets_list\n               )\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8ef3rpd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_8ef3rpd.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_8ef3rpd.py\"\
    , line 20, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp_8ef3rpd.py\"\
    , line 16, in correct_bracketing\n    for brackets in brackets_list\nNameError:\
    \ name 'brackets_list' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    \ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgb_qf1m.py\", line\
    \ 89, in <module>\n    test_check()\n  File \"/tmp/tmplgb_qf1m.py\", line 87,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplgb_qf1m.py\"\
    , line 73, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == '<':\n            if stack:\n\
    \                return False\n            else:\n                stack.append(c)\n\
    \        elif c == '>':\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5k2j79g.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpm5k2j79g.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm5k2j79g.py\"\
    , line 31, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return len(re.findall(\"(?<!^)<\", brackets)) == len(re.findall(\"(?<!^)>\"\
    , brackets))\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9frzbo57.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9frzbo57.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9frzbo57.py\"\
    , line 18, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp9frzbo57.py\"\
    , line 14, in correct_bracketing\n    return len(re.findall(\"(?<!^)<\", brackets))\
    \ == len(re.findall(\"(?<!^)>\", brackets))\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_dict = {'<': '>', '<<': '>>', '<<<': '>>>'}\n    correct_brackets =\
    \ True\n    stack = []\n    for char in brackets:\n        if char in brackets_dict:\n\
    \            stack.append(char)\n        elif stack:\n            if brackets_dict[stack.pop()]\
    \ != char:\n                correct_brackets = False\n        else:\n        \
    \    correct_brackets = False\n    return correct_brackets\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlo9h6im.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmptlo9h6im.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptlo9h6im.py\"\
    , line 35, in check\n    assert candidate('<') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets = brackets.lower()\n    i = 0\n    while i < len(brackets):\n     \
    \   c = brackets[i]\n        if c == \"<\":\n            if brackets[i + 1] !=\
    \ \">\":\n                return False\n            i += 2\n            continue\n\
    \        elif c == \">\":\n            if brackets[i + 1] == \">\":\n        \
    \        return False\n            i += 1\n            continue\n        i +=\
    \ 1\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cay_pe_.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5cay_pe_.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5cay_pe_.py\"\
    , line 34, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"<\":\n            if not\
    \ stack:\n                return False\n            elif stack[-1] == \"<\":\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif c == \">\":\n            if stack:\n                if not (stack[-1]\
    \ == \">\"):\n                    return False\n                stack.pop()\n\
    \            else:\n                return False\n        else:\n            stack.append(c)\n\
    \n    return True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83givhmk.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp83givhmk.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp83givhmk.py\"\
    , line 37, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for char in brackets:\n        if char == \"<\":\n         \
    \   stack.append(char)\n        elif char == \">\":\n            if not stack:\n\
    \                return False\n            if stack.pop() != char:\n         \
    \       return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb785mm_h.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpb785mm_h.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb785mm_h.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = deque()\n    for c in brackets:\n        if c == \"<\":\n          \
    \  stack.append(c)\n        elif c == \">\" and stack:\n            stack.pop()\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lbygx78.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0lbygx78.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0lbygx78.py\"\
    , line 24, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp0lbygx78.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ for c in brackets:\n        if c != \">\":\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzudfr42.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbzudfr42.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbzudfr42.py\"\
    , line 21, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets = brackets.split()\n    brackets = map(str, brackets)\n    brackets\
    \ = tuple(brackets)\n    brackets = reduce(lambda x, y: x & y, brackets)\n   \
    \ return brackets\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuksa7ed.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphuksa7ed.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphuksa7ed.py\"\
    , line 22, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmphuksa7ed.py\"\
    , line 17, in correct_bracketing\n    brackets = reduce(lambda x, y: x & y, brackets)\n\
    NameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"<\":\n            if not\
    \ stack:\n                return False\n            if stack[-1] != \">\":\n \
    \               return False\n            stack.pop()\n        elif c == \">\"\
    :\n            if not stack:\n                return False\n            if stack[-1]\
    \ != \"<\":\n                return False\n            stack.pop()\n        else:\n\
    \            stack.append(c)\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni8gv0yj.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpni8gv0yj.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpni8gv0yj.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_opens = brackets.count('<')\n    num_closes = brackets.count('>')\n    if\
    \ num_opens == num_closes == 0:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf458g50x.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpf458g50x.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf458g50x.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return correct_bracketing_helper(brackets.replace(\"<\", \"\").replace(\"<\"\
    , \"\").replace(\">\", \"\").replace(\">\", \"\"))\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwm9gtqos.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwm9gtqos.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwm9gtqos.py\"\
    , line 17, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpwm9gtqos.py\"\
    , line 14, in correct_bracketing\n    return correct_bracketing_helper(brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\"))\nNameError:\
    \ name 'correct_bracketing_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return set(brackets) >= set(brackets)\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgr1gs5e.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptgr1gs5e.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptgr1gs5e.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = 0\n    for c in brackets:\n        if c == \"<\":\n            stack\
    \ += 1\n        elif c == \"<\":\n            stack -= 1\n    return stack ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvk5h9hap.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvk5h9hap.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvk5h9hap.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
