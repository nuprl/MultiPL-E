name: HumanEval_31_is_prime
language: py
prompt: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is\
  \ prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
  \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n \
  \   >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
  \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
  \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
  \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
  \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
  \    assert candidate(77) == False\n    assert candidate(255379) == False\n\ndef\
  \ test_check():\n    check(is_prime)\n\ntest_check()\n"
completions: ["    if n < 2:\n        return False\n    return n % 2 == 0 or n <=\
    \ 3\n\n", "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n\
    \        return False\n    return all(n % i == 0 for i in range(3, int(math.sqrt(n))\
    \ + 1, 2))\n\n", "    if n < 2:\n        return False\n    for i in range(2, n):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n", "   \
    \ if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n\
    \    if not isprime(n):\n        return False\n    for i in range(3, int(n **\
    \ 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return\
    \ True\n\n", "    if n < 2:\n        return False\n\n    if n in (2, 3, 5, 7):\n\
    \        return True\n\n    if n % 2 == 0:\n        return is_prime(n / 2)\n\n\
    \    sqrt_n = int(_math.sqrt(n))\n    for i in range(3, sqrt_n + 1, 2):\n    \
    \    if n % i == 0:\n            return False\n\n    return True\n\n", "    #\
    \ check if n is prime\n    if n < 2:\n        return False\n\n    # check if n\
    \ is even with known factors starting from 2\n    if not n % 2:\n        for i\
    \ in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n              \
    \  return False\n        return True\n\n    # check if the number n is prime with\
    \ known factor trailer\n    # based on https://www.geeksforgeeks.org/python-program-for-prime-number/\n\
    \    # modified by Ming-zhong Wu\n    # with slight modifications by Zhiheng Cheng\n\
    \    # to handle up to 2^64 bit integers\n    n = int('0x' + n)\n    if n <= 0xffffffffffffffff:\n\
    \        # no bit twidling, just an isprime\n        if n == 2:\n            return\
    \ True\n        else:\n            for i in range(3, n + 1, 2):\n            \
    \    if n % i == 0:\n                    return False\n            return True\n\
    \    else:\n        # bittwidling\n        if n == 2:\n            return True\n\
    \        else:\n            m, r = divmod(n, 2)\n            for i in range(3,\
    \ m + 1, 2):\n                if r == 0 and n % i == 0:\n                    return\
    \ False\n                r, m = divmod(m, i)\n            return True\n\n", " \
    \   if n % 2 == 0:\n        return False\n    if n < 2:\n        return False\n\
    \    k = n\n    while k*k <= n:\n        if n % k == 0:\n            return False\n\
    \        k += n // k\n    return True\n\n", "    if n % 2 == 0:\n        return\
    \ False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return False\n    return True\n\n", "    if n < 0:\n        raise\
    \ ValueError(\"Parameter must be non-negative.\")\n    if n == 1:\n        return\
    \ True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n\
    \                return False\n        return True\n\n", "    if n % 2 == 0:\n\
    \        return False\n\n    i = 3\n    while i * i <= n:\n        if n % i ==\
    \ 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return\
    \ True\n\n", "    if n < 2:\n        return False\n    elif n & 1 == 0:\n    \
    \    return n == 2\n    return all(n % d == 0 for d in range(3, int(math.sqrt(n))\
    \ + 1, 2))\n\n", "    assert isinstance(n, int)\n    if is_prime_cache.get(n):\n\
    \        return is_prime_cache[n]\n    if n < 2:\n        return False\n    if\
    \ n % 2 == 0:\n        return is_prime_cache[n // 2]\n    for r in range(3, int(n\
    \ ** 0.5) + 1, 2):\n        if n % r == 0:\n            return False\n    return\
    \ True\n\n\n@lru_cache(maxsize=2 ** 16)", "    # http://primes.utm.edu/lists/small/millions/\n\
    \    limit = int(n**0.5 + 1) >> 1\n    for i in range(limit, int(n**0.5 + 1),\
    \ int(n / limit)):\n        if n % i == 0:\n            return False\n    return\
    \ True\n\n\n@njit(fastmath=True)", "    if n < 2:\n        return False\n    if\
    \ not n % 2 and not n % 3:\n        return n == 2\n    root = cst_base_prime_int(n)\n\
    \    return all(x % root == 0 for x in range(1, n - 2))\n\n", "    # Special case\
    \ 2\n    if n == 2:\n        return True\n    # Even numbers are composite\n \
    \   if n % 2 == 0:\n        return False\n    # Only odd numbers are composite\n\
    \    if n % 2 == 1:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n  \
    \          if n % i == 0:\n                return False\n        return True\n\
    \    # Everything else is not prime\n    return False\n\n", "    if n > 1:\n \
    \       return is_prime(int(n ** 0.5) + 1)\n    if n < 2:\n        return False\n\
    \    if n == 2 or n == 3:\n        return True\n    if n % 6 == 1 or n % 6 ==\
    \ 3:\n        return False\n    m = n // 6\n    for x in range(1, m):\n      \
    \  if n % x == 0 or n % (x + 2) == 0:\n            return False\n    return True\n\
    \n", "    return factorized_primes(n).__contains__(n)\n\n", "    if n < 2:\n \
    \       return False\n\n    test = factorize(n)[1]\n\n    # Sieve of Eratosthenes\
    \ - http://stackoverflow.com/a/20683709/1019214\n    prime = [True for i in range(n)]\n\
    \    is_p = prime[0]\n\n    for d in range(2, int(test**0.5) + 1):\n        if\
    \ prime[d]:\n            for n in range(d*d, n+1, d):\n                is_p *=\
    \ prime[n]\n    return is_p\n\n", "    if n < 2:\n        return False\n    elif\
    \ n <= 3:\n        return n == 1 or n == -1\n    elif n % 2 == 0:\n        return\
    \ n == 1\n    for r in range(3, int(n**0.5)//2+1, 2):\n        if n % r == 0:\n\
    \            return False\n    return True\n\n", "    if not isinstance(n, int)\
    \ or n <= 0:\n        raise ValueError('is_prime() expects n > 0')\n\n    if n\
    \ <= 3:\n        return True\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n\
    \        if n % i == 0:\n            return False\n\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
