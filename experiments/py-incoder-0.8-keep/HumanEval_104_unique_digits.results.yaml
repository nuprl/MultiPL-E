name: HumanEval_104_unique_digits
language: py
results:
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    seen = []\n    for x in x:\n        if x not in\
    \ seen:\n            seen.append(x)\n    \n    seen = sorted(seen)\n    seen =\
    \ seen[1::2]\n    return seen\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa74m0in.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxa74m0in.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxa74m0in.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for i in x:\n        while x and (x % 10)\
    \ == 0:\n            x /= 10\n        ans.append(x)\n    return ans\n</cell>\n\
    <text>\nThe first solution that can solve this problem can be written as:\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8kmv2rj3.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    import itertools\n    digits = sorted(set(x))\n    even_digit\
    \ = sorted(list(filter(lambda y: y%2==0, digits)))\n    unique_digits = list(filter(lambda\
    \ y: y not in even_digit, digits))\n    return sorted(unique_digits)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m57hclq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1m57hclq.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1m57hclq.py\", line\
    \ 23, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n    \n    seen = set()\n\
    \    seen_add = seen.add\n    \n    return sorted([i for i in x if not (i in seen\
    \ or seen_add(i))])\n    \n</cell>\n<cell>\n%%time\nunique_digits(range(10 **\
    \ 6))\n</cell>\n<text>\n6. Implement the divisibility test with caching time\n\
    The key idea to solve this problem is to cache the results of checking the remainder\
    \ of integer division. One solution is to use a dictionary for storing previous\
    \ results. The time complexity of our solution is $O(1)$ and our space complexity\
    \ is $O(n)$. Here's the solution:\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp95p1ppsq.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # Your code here\n    \n    return sorted(list(set(x)))\
    \ \n    \n</cell>\n<cell>\nassert unique_digits([1]) == [1]\nassert unique_digits([18])\
    \ == []\nassert unique_digits([152, 323, 1422, 10]) == [10, 152, 323]\n</cell>\n\
    <text>\nCounting and Frequency of a Character\nThe given data set contains the\
    \ following information:\n\nA person's name (a string)\nNumber of years of education\
    \ (an integer) \nNumber of skills (a list of characters)\n\nUsing the above information,\
    \ try to come up with a function that can compute the following:\n\nThe most frequent\
    \ character\nThe second most frequent character\nThe third most frequent character\n\
    etc.\n\nExample 1:\n\nInput: [\"Year: 2018\", \"Grade: B\", \"Level: S\", \"Name:\
    \ A\"]\nOutput: [\"Level: S\", \"Grade: B\"]\n\nExample 2:\n\nInput: [\"Year:\
    \ 2018\", \"Grade: B\", \"Level: S\", \"Name: A\"]\nOutput: [\"Grade: B\", \"\
    Grade: B\", \"Grade: B\"]\n\nExplanation: \"A\" is repeated three times, because\
    \ there are three \noccurrences of \"A\" among input strings.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptf_qs8_u.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import Counter\n    cnt_list = Counter(list(x))\n\
    \    cnt_list.pop(0)\n    cnt_list.pop(0)\n    cnt_list.sort()\n    cnt_list =\
    \ [i for i in cnt_list if i%2==0]\n    return cnt_list\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4l61wps.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf4l61wps.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpf4l61wps.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpf4l61wps.py\", line 17, in unique_digits\n    cnt_list.pop(0)\nKeyError:\
    \ 0\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for i in x:\n        if len(str(i)) % 2\
    \ == 0:\n            ans.append(i)\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72linz5j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp72linz5j.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp72linz5j.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    digits = defaultdict(list)\n\
    \    for i in x:\n        digits[i%10].append(i)\n    return [n for n in sorted(digits.keys())\
    \ if len(digits[n])==1]\n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1yiy7a7_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1yiy7a7_.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1yiy7a7_.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) ==\
    \ 1:\n        return [x]\n    else:\n        flags = [False]*len(x)\n        for\
    \ n in range(0, len(x)):\n            if not flags[n]:\n                count\
    \ = 0\n                while count < len(x)-1:\n                    if x[count]\
    \ == x[count+1]:\n                        flags[count] = True\n              \
    \          count += 1\n                    else:\n                        flags[count]\
    \ = False\n                        count += 1\n        flags = [n for n, f in\
    \ enumerate(flags) if f]\n        return sorted([x for x in x if x not in flags])\n\
    </cell>\n<cell>\nx = [12, 43, 12, 14, 14]\ny = unique_digits(x)\nprint(y)\n</cell>\n\
    <text>\nQ8. Write a Python program to find maximum and minimum numbers in a given\
    \ array of integers.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm_d19ei1.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_digits_list = []\n    sorted_x = sorted(x)\n \
    \   for i in range(len(sorted_x)):\n        if sorted_x[i] % 2 == 0:\n       \
    \     if sorted_x[i] not in unique_digits_list:\n                unique_digits_list.append(sorted_x[i])\n\
    \    return unique_digits_list\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtzw065x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphtzw065x.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphtzw065x.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = list(map(int, str(x)))\n    odd_digits\
    \ = [i for i in digits if i%2 ==1]\n    return odd_digits\n</cell>\n<text>\nNow\
    \ let's try to solve the problem by calling the function\n\n\n</text>\n<cell>\n\
    print(unique_digits([0, 20, 30, 35, 7, 10]))\n</cell>\n<text>\nThis works fine.\
    \ But the problem is that this function gives us only sorted list. What if I want\
    \ to have unsorted list? So here comes our solution\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpuoc07iuc.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    x = sorted(x)\n    output = []\n    \n    for elem in\
    \ x:\n        if elem % 2 == 0:\n            break\n        else:\n          \
    \  output.append(elem)\n    \n    return output\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3epnx4z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp3epnx4z.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpp3epnx4z.py\", line\
    \ 30, in check\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(set(x for x in x if x % 2 == 0))\n\
    </cell>\n<cell>\nunique_digits(l)\n</cell>\n<text>\n9.3.4 Unique characters in\
    \ a string\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprl1qm_yh.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # sort to improve performance\n    x = sorted(x)\n  \
    \  \n    # step 1: group all elements with same digits\n    digits = [[] for _\
    \ in range(10)]\n    for i in x:\n        digits[i // 10].append(i)\n\n    # step\
    \ 2: filter out all elements with no even digit\n    return [i for i in digits[::2]\
    \ if i != []]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpibbxz6kk.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # Solution using O(n)\n    # O(n log n)\n    #\
    \ Sort first -> O(n log n)\n    \n    # TODO: O(n^2)\n    \n    x.sort()\n   \
    \ \n    # List to store all even digits\n    even_digits: List[int] = []\n   \
    \ \n    # Iterate through list\n    for index, i in enumerate(x):\n        # All\
    \ even digits found\n        if i // 2 == 0 and index != 0 and index != len(x)\
    \ - 1:\n            even_digits.append(i)\n    \n    # return all elements without\
    \ even digits\n    return x[~even_digits]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkg6emn8k.py\", line 35\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    count = 0\n    \n    for i in x:\n        if i\
    \ % 2 == 0:\n            count += 1\n        \n    if count == 0:\n        return\
    \ x\n    else:\n        \n        odd_count = 0\n        \n        for i in x:\n\
    \            if i % 2 != 0:\n                odd_count += 1\n        \n      \
    \  if odd_count == 1:\n            return sorted(x)\n        else:\n         \
    \   digit = 0\n            digit_list = []\n            for i in x:\n        \
    \        if digit == 0 and i % 2 == 0:\n                    digit_list.append(i)\n\
    \                elif digit == 1 and i % 2 != 0:\n                    digit_list.append(i)\n\
    \                else:\n                    digit_list.insert(digit, i)\n    \
    \            digit = 1 - digit\n                \n            return sorted(digit_list)\n\
    \            \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmtn2_tb.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpnmtn2_tb.py\", line 55,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnmtn2_tb.py\", line\
    \ 49, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    even = []\n \
    \   for i in range(len(x)):\n        if x[i] % 2 != 0:\n            even.append(x[i])\n\
    \    if len(even) == 0:\n        return x\n    else:\n        sorted_even = sorted(even)\n\
    \        sorted_odd = [n for n in x if n not in sorted_even]\n        sorted_odd\
    \ = sorted_odd + sorted_even\n        return sorted_odd\n</code>\n<|/ a |>\n<|\
    \ a tags=arrays,list,python |>\nI find this to be the simplest solution without\
    \ using any library:\n<code>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkki8teb1.py\", line 28\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_num = []\n    for num in x:\n        if num %\
    \ 2 == 0:\n            unique_num.append(num)\n        else:\n            unique_num.sort()\n\
    \    return unique_num\n\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbot65sp1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbot65sp1.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpbot65sp1.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_list = []\n    \n    for i in x:\n\
    \        if sum(i%2 == 0 for i, count in enumerate(x)) <= len(i):\n          \
    \  unique_digits_list.append(i)\n\n    return sorted(unique_digits_list)\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjsygf3a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsjsygf3a.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpsjsygf3a.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpsjsygf3a.py\", line 19, in unique_digits\n    if sum(i%2 == 0 for\
    \ i, count in enumerate(x)) <= len(i):\nTypeError: object of type 'int' has no\
    \ len()\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # todo\n    return x\n    # Hint: Use unique_digits function.\n\
    \    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1oeuho9e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1oeuho9e.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1oeuho9e.py\", line\
    \ 20, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x\
    \ for x in x if x not in seen and seen_add(x)]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<text>\nProblem 9\nUse a set to find the length of the\
    \ shortest subsequence of numbers that contains only even numbers. For example:\n\
    Given the list below\n\nmy_list = [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 21, 22, 24,\
    \ 41, 42]\nReturn the length of [1, 2] as it has 2 even numbers in sequence\n\n\
    [1, 2]\n[1, 3, 5]\n[10]\n[1, 4]\n[1, 4, 6]\n[10]\n[10]\n[10]\n[10, 11, 12]\n[10,\
    \ 11]\n[10, 11, 12]\n[12, 13, 21]\n[12, 13]\n[12, 13, 21]\n[14, 21, 22]\n[14,\
    \ 22]\n[14, 21, 22]\n[14, 21, 22, 24]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n\
    [14, 21]\n[14, 21]\n[14]\n[14, 21]\n[14, 21]\n[14]\n[14]\n[14]\n[14]\n[14]\n[14]\n\
    [14]\n[14]\n[14]\n[14]\n[14, 21]\n[14]\n[14]\n[14]\n[14]\n[14]\n[14]\n[14]\n[14]\n\
    [14, 22]\n[14]\n[14]\n[14, 21]\n[14]\n[14]\n[14, 21]\n[14]\n[14, 21]\n[14]\n[14]\n\
    [14]\n[14, 21]\n[14]\n[14, 21]\n[14, 21]\n[14]\n[14, 21]\n[14, 21]\n[14, 21]\n\
    [14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n\
    [14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n\
    [14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[14, 21]\n[\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4pyn22oz.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return list()\n    res = []\n    for\
    \ i, v in enumerate(x):\n        while v > 0:\n            res.append(v)\n   \
    \         v = v // 10\n    res.sort()\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nla_5iz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8nla_5iz.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8nla_5iz.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    s = set()\n    digit_list = []\n    for e in x:\n\
    \        if e not in s:\n            s.add(e)\n            digit_list.append(e)\n\
    \    return sorted(digit_list)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgvtc6sp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkgvtc6sp.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpkgvtc6sp.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    odd_numbers = [num for num in x if num % 2 == 1]\n\
    \    even_numbers = [num for num in x if num % 2 == 0]\n    even_numbers.sort()\n\
    \    unique_odd_numbers = []\n    unique_even_numbers = []\n    for num in odd_numbers:\n\
    \        if num not in unique_odd_numbers:\n            unique_odd_numbers.append(num)\n\
    \    for num in even_numbers:\n        if num not in unique_even_numbers:\n  \
    \          unique_even_numbers.append(num)\n\n    return unique_odd_numbers +\
    \ unique_even_numbers\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpci20luqu.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpci20luqu.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpci20luqu.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n\n    for x in x:\n       \
    \ for digit in str(x):\n            if int(digit) % 2 == 0:\n                break\n\
    \        else:\n            unique_digits.append(x)\n\n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(list(set([i for i in x if i%2 !=\
    \ 0])))\n    \n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8o48sgkf.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    sorted_list = sorted(x)\n    return [n for n in sorted_list\
    \ if sorted_list.count(str(n)) == 1 and int(n) % 2 == 0]\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwy2w_rez.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    count_dict =\
    \ defaultdict(int)\n    for num in x:\n        count_dict[num] += 1\n    unique_nums\
    \ = []\n    for key in count_dict.keys():\n        if count_dict[key] % 2 == 0:\n\
    \            unique_nums.append(key)\n    return sorted(unique_nums)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2emrnuq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw2emrnuq.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw2emrnuq.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    ans = []\n  \
    \  for e in x:\n        if not e % 2:\n            ans.append(e)\n    return ans\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1tbu0jpl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1tbu0jpl.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1tbu0jpl.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if x is None:\n        return []\n    \n    temp = []\n\
    \    for elem in x:\n        digits = str(elem)\n        if digits[0] == '0':\n\
    \            temp.append(elem)\n        else:\n            for number in temp:\n\
    \                if digits not in str(number):\n                    temp.append(elem)\n\
    \                    break\n    \n    if temp:\n        return temp\n    else:\n\
    \        return []\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgvmk65sn.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_list = []\n    \n    for num in x:\n        if\
    \ num % 2 == 0:\n            continue\n        else:\n            unique_list.append(num)\n\
    \            \n    return sorted(unique_list)\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprww_0i79.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprww_0i79.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmprww_0i79.py\", line\
    \ 27, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    def unique_digits_helper(xs: List[int]) -> List[int]:\n\
    \        res = []\n        for x in xs:\n            digits = [int(d) for d in\
    \ str(x)]\n            \n            # no even digit\n            if len(digits)\
    \ <= 1:\n                return []\n            \n            # no even digit\
    \ in first half of list\n            first_half = digits[:int(len(digits) / 2)]\n\
    \            \n            # no even digit in second half of list\n          \
    \  second_half = digits[int(len(digits) / 2):]\n            \n            even_in_first_half\
    \ = all(map(lambda x: x%2 == 0, first_half))\n            even_in_second_half\
    \ = all(map(lambda x: x%2 == 0, second_half))\n            \n            if even_in_first_half\
    \ and even_in_second_half:\n                res.append(x)\n            else:\n\
    \                break\n\n        return sorted(res)\n    \n    return unique_digits_helper(x)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ts3tu8q.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp8ts3tu8q.py\", line 49,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8ts3tu8q.py\", line\
    \ 43, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_list = list(set(list(map(int,x))))\n    return\
    \ sorted(list(filter(lambda a: a % 2 == 0, digit_list)))\n    \n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphig56kwz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphig56kwz.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphig56kwz.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = [0] * len(x)\n    digi_map = {}\n    for i,\
    \ x in enumerate(x):\n        digits[i] = x % 10\n        digi_map[i] = x // 10\n\
    \    sorted_x = sorted(x)\n    \n    ans = []\n    for i, x in enumerate(sorted_x):\n\
    \        if digits[i] != 0:\n            continue\n        if digi_map[i] == i:\n\
    \            continue\n        ans.append(x)\n        \n    return ans\n\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4ejo3oi.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpz4ejo3oi.py\", line 40,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpz4ejo3oi.py\", line\
    \ 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpz4ejo3oi.py\", line 20, in unique_digits\n    sorted_x = sorted(x)\n\
    TypeError: 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # Your code here\n    even = [0]*len(x)\n    \n    for\
    \ i in range(len(x)):\n        even[i] = x[i] // 10\n    \n    x = list(filter(lambda\
    \ i: not even[i], x))\n    x.sort()\n    return x \n</cell>\n<cell>\nunique_digits([15,33,1422])\n\
    </cell>\n<text>\nUnique Numbers\n\n</text>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpppc1qh8a.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    for num in x:\n        if\
    \ str(num) not in digit_dict:\n            digit_dict[str(num)] = num\n\n    sorted_digit_dict\
    \ = sorted(digit_dict, key=lambda key: digit_dict[key])\n\n    return [sorted_digit_dict[k]\
    \ for k in sorted(digit_dict, key=digit_dict.get, reverse=True)]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4p_21q0g.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4p_21q0g.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp4p_21q0g.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp4p_21q0g.py\", line 23, in unique_digits\n    return [sorted_digit_dict[k]\
    \ for k in sorted(digit_dict, key=digit_dict.get, reverse=True)]\n  File \"/tmp/tmp4p_21q0g.py\"\
    , line 23, in <listcomp>\n    return [sorted_digit_dict[k] for k in sorted(digit_dict,\
    \ key=digit_dict.get, reverse=True)]\nTypeError: list indices must be integers\
    \ or slices, not str\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    numbers = sorted(x)\n    \n    unique_digits =\
    \ []\n    \n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n\
    \            unique_digits.append(numbers[i])\n\n    return unique_digits\n\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1s0k7xh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw1s0k7xh.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw1s0k7xh.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    sorted_x = sorted(x)\n    return [x for x in sorted_x\
    \ if not any(y % 2 == 0 for y in x)]\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaz_kgfir.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaz_kgfir.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpaz_kgfir.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpaz_kgfir.py\", line 17, in unique_digits\n    return [x for x in sorted_x\
    \ if not any(y % 2 == 0 for y in x)]\n  File \"/tmp/tmpaz_kgfir.py\", line 17,\
    \ in <listcomp>\n    return [x for x in sorted_x if not any(y % 2 == 0 for y in\
    \ x)]\nTypeError: 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    dic_x = defaultdict(list)\n    for i in x:\n        if\
    \ i%2 != 0:\n            dic_x[i].append(i)\n    return list(dic_x.values())\n\
    </code>\n<|/ a dscore=1 tags=python |>\n<| a dscore=0 |>\nA faster way to go about\
    \ this would be to use Counter with a custom comparator that checks the number\
    \ of digits to see if they are even.\n<code>\nfrom collections import Counter\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa822p5qq.py\", line 20\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n\n    # sort the\
    \ list to ensure the increasing order\n    x = sorted(x)\n    \n    digits = defaultdict(int)\n\
    \    for i in x:\n        digits[i] += 1\n    \n    # filter out the elements\
    \ that has 0 digit\n    return [i for i in x if not digits[i]]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmm7q9iy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzmm7q9iy.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzmm7q9iy.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    if x in {0, 1}: return []\n    if len(x) == 1:\
    \ return [x]\n    \n    # make copy of list to prevent change original list\n\
    \    x = list(x)\n\n    # find all even digits in list\n    even_digits = []\n\
    \    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            even_digits.append(x[i])\n\
    \n    # remove all even digit in list\n    for i in range(len(even_digits)-1,\
    \ -1, -1):\n        if even_digits[i] == 0: del even_digits[i]\n\n    # sort list\
    \ ascending\n    even_digits.sort()\n    \n    # return sorted list\n    return\
    \ even_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_xcvj46.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpk_xcvj46.py\", line 45,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpk_xcvj46.py\", line\
    \ 39, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpk_xcvj46.py\", line 16, in unique_digits\n    if x in {0, 1}: return\
    \ []\nTypeError: unhashable type: 'list'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ### TODO:\n    \n    ### YOUR CODE HERE\n    \n\
    \    ### END YOUR CODE\n    \n    return \n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4zkk4eg3.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ret = []\n    counts = dict()\n    for num in x:\n\
    \        digit = num // 10\n        if digit in counts:\n            counts[digit]\
    \ += 1\n        else:\n            counts[digit] = 1\n        if counts[digit]\
    \ == 2:\n            ret.append(num)\n    return sorted(ret)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nAnother solution\n<code>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmmkrqt6x.py\", line 27\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(n)\n        \n    return [n for n in x if n not in digits]\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_4tidnv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk_4tidnv.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpk_4tidnv.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    res = []\n    for n in x:\n        if n % 2 == 0:\n \
    \           res.append(n)\n        else:\n            index = x.index(n)\n   \
    \         del x[index]\n    return sorted(res)\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyg2pofjm.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpyg2pofjm.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpyg2pofjm.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4s124i2j.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    if not x:\n        return []\n    \n    unique\
    \ = []\n    \n    # Sort the list x\n    x.sort()\n    \n    # Iterate over the\
    \ sorted list and check whether there are any even number\n    for i in range(len(x)):\n\
    \        if i % 2 == 0:\n            unique.append(x[i])\n    \n    return unique\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj25rcvxo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpj25rcvxo.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpj25rcvxo.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_set = []\n    for num in x:\n        unique_set.extend(num\
    \ for num in str(num) if num.isdigit())\n    unique_set = sorted(unique_set)\n\
    \    return unique_set\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoilvnk09.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpoilvnk09.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpoilvnk09.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    x.sort()\n    odd = []\n    for e in x:\n        if not\
    \ e%2:\n            odd.append(e)\n    x.sort()\n    return odd\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplzubhn42.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplzubhn42.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmplzubhn42.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    dig_set = {}\n    for x in x:\n        digit = bin(x)[2:].zfill(len(bin(x)[2:])\
    \ // 2)\n        if not digit in dig_set:\n            dig_set[digit] = x\n  \
    \      else:\n            continue\n    return sorted(dig_set.values())\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptts4q6wt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptts4q6wt.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmptts4q6wt.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    x = sorted(x)\n    res = []\n    for i in x:\n      \
    \  if i.isdigit():\n            if len(str(i)) < 2:\n                res.append(i)\n\
    \        else:\n            res.append(i)\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gvplx13.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1gvplx13.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1gvplx13.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp1gvplx13.py\", line 18, in unique_digits\n    if i.isdigit():\nAttributeError:\
    \ 'int' object has no attribute 'isdigit'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # initialize a empty set\n    s = set()\n    \n\
    \    # loop through all elements in x\n    for i in x:\n        # check if i is\
    \ a digit\n        if i.isdigit():\n            # then i isn't in the set\n  \
    \          if i in s:\n                # then add i to the list\n            \
    \    continue\n            # then i has been added before, add it to the set\n\
    \            else:\n                s.add(i)\n        else:\n            # then\
    \ i isn't a digit, remove it from the set\n            s.remove(i)\n    # return\
    \ new list\n    return sorted(list(s))\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\n\
    unique_digits([1023, 543, 1214, 161])\n</cell>\n<text>\nExercise 1.14\nGiven a\
    \ list of positive integers, return a list of all integers that \ncontains only\
    \ unique digits.\n\nFor example, given [10, 11, 12, 2, 3], return [2, 3], since\n\
    it contains both 2 and 3.\n\nYour solution should run in $O(n)$ time. \nYou cannot\
    \ modify the input list in-place.\n\nExample\n\nFor input x = [10, 11, 12, 2,\
    \ 3], return [10, 11, 12].\n\nFollow up:\nCan you improve it to get better than\
    \ $O(n)$ time complexity?\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpopqsa7ea.py\", line 35\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # your code here\n    unique_digits_list = []\n\
    \    \n    for num in x:\n        digits_set = set(str(num))\n        digits_set\
    \ = sorted(digits_set)\n        unique_digits_list.append(digits_set[0])\n   \
    \     \n    unique_digits_list.sort()\n    return unique_digits_list\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofq6x3t8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpofq6x3t8.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpofq6x3t8.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    for i in range(len(x)):\n        if x[i] % 2 != 0:\n\
    \            x.remove(x[i])\n    x.sort()\n    return x\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 tags=python,python-3.x,python-3.7 |>\nTo keep this as intuitive and\
    \ simple as possible:\n<code>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpldfm5v3o.py\", line 20\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_set = set()\n    unique_digits = []\n    for number\
    \ in x:\n        digits = list(map(int, str(number)))\n        for digit in digits:\n\
    \            if digit % 2 == 0:\n                break\n        else:\n      \
    \      unique_digits.append(number)\n            digit_set.add(number)\n    return\
    \ sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    sorted_list = sorted(x)\n    return [x for x in\
    \ sorted_list if x % 2 == 0]\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp__v7e02u.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = {}\n    answer = []\n    for n in x:\n       \
    \ if n in seen:\n            continue\n        else:\n            seen[n] = 1\n\
    \            answer.append(n)\n            answer.sort()\n    return answer\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj1f7d4v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppj1f7d4v.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmppj1f7d4v.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    for x in x:\n        if x\
    \ not in digit_dict:\n            digit_dict[x] = 1\n        else:\n         \
    \   digit_dict[x] += 1\n\n    digits_list = [k for k in digit_dict if digit_dict[k]\
    \ == 1]\n\n    sorted_digits_list = sorted(digits_list)\n    \n    unique_digits_list\
    \ = [digit for digit in sorted_digits_list if digit_dict.get(digit) != 1]\n\n\
    \    return unique_digits_list\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpolgs_5io.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpolgs_5io.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpolgs_5io.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # Your code here\n    \n    return sorted(set(x))\n\
    \nprint(unique_digits([152, 323, 1422, 10]))\nprint(unique_digits([15, 33, 1422,\
    \ 1]))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpu3fv92ww.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    for i in range(len(x)):\n        if x[i] % 2 == 0: return\
    \ x\n    else: return []\n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7gl87p8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt7gl87p8.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpt7gl87p8.py\", line\
    \ 20, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # your code\n    \n    return sorted(set(list(filter(lambda\
    \ c: c % 2 != 0, x))), key=lambda c: str(c))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6uifnzp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk6uifnzp.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpk6uifnzp.py\", line\
    \ 21, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    numbers = [i for i, v in enumerate(x) if v % 2 == 0]\n\
    \    return sorted(numbers, key=lambda x:x.__cmp__(0))\n    \ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cks6j4q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6cks6j4q.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp6cks6j4q.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp6cks6j4q.py\", line 16, in unique_digits\n    return sorted(numbers,\
    \ key=lambda x:x.__cmp__(0))\n  File \"/tmp/tmp6cks6j4q.py\", line 16, in <lambda>\n\
    \    return sorted(numbers, key=lambda x:x.__cmp__(0))\nAttributeError: 'int'\
    \ object has no attribute '__cmp__'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    if x == []:\n        return list()\n    \n    digits\
    \ = x[0]\n    rest = x[1:]\n    \n    seen_digits = set()\n    \n    rest = sorted(rest)\n\
    \    rest_copy = list(rest)\n    \n    while len(rest_copy) > 0:\n        digit\
    \ = rest_copy.pop(0)\n        \n        if digit in seen_digits:\n           \
    \ continue\n        \n        rest_copy = [d for d in rest_copy if d != digit]\n\
    \        seen_digits.add(digit)\n        \n        digits *= 10\n        digits\
    \ += digit\n    \n    return sorted([d for d in rest if d not in seen_digits])\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb6mqdl5.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmprb6mqdl5.py\", line 49,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmprb6mqdl5.py\", line\
    \ 43, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return sorted(set(filter(lambda x: x % 2 == 0, x)))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubp0mfjb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpubp0mfjb.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpubp0mfjb.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    \n    for n in x:\n        while n != 0:\n\
    \            rem = n % 10\n            if rem not in ans:\n                ans.append(rem)\n\
    \            n = n // 10\n\n    return ans\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bix19kk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3bix19kk.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp3bix19kk.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if x is None:\n        return []\n    # Your code here\n\
    \    digit = [0]\n    ans = []\n    for i in x:\n        if i % 2 == 0:\n    \
    \        digit.append(0)\n        else:\n            digit.append(1)\n       \
    \     \n    ans = [i for i, j in zip(x, digit) if i == 0]\n    return ans\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fn2q7i0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3fn2q7i0.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp3fn2q7i0.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    for n in range(len(x)):\n        if x[n] % 2 == 0: #\
    \ even number \n            x[n] = x[n] // 2 # floor of int\n        else:\n \
    \           x[n] = x[n] // 10\n    return x\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5wigua0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm5wigua0.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm5wigua0.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    dic = {}\n    for v in x: dic[v] = True\n    \n\
    \    res = []\n    for v in sorted(x, reverse=True):\n        if v not in dic:\n\
    \            res.append(v)\n    \n    return res\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8x2ty2wk.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    num = []\n    for y in x:\n        if y % 2 ==\
    \ 0:\n            num.append(y)\n        else:\n            unique_digits(num)\
    \  # calling function recursively\n\n    return sorted(num)\n</cell>\n<cell>\n\
    unique_digits([21, 33, 1422, 10])\n</cell>\n<text>\nProblem 5\nBelow is a list\
    \ of integers. Return a list with the same numbers in the same order except group\
    \ each number with the next greater number. For example:\n\n[120, 30, 44, 75,\
    \ 33, 55, 142, 65, 11, 72, 18] -> [120, 30, 44, 75, 33, 55, 72, 65, 11, 142, 18]\n\
    \n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqu9_tejw.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    even_indexes: List[int] = []\n    for i in range(len(x)):\n\
    \        if x[i] % 2 == 0:\n            even_indexes.append(i)\n    return x[sorted(even_indexes)[::-1]]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc8pzp9x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcc8pzp9x.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpcc8pzp9x.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpcc8pzp9x.py\", line 19, in unique_digits\n    return x[sorted(even_indexes)[::-1]]\n\
    TypeError: list indices must be integers or slices, not list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    import itertools\n    s = set()\n    for c in x:\n  \
    \      if c in s:\n            continue\n        s.add(c)\n        if c%2 == 0:\n\
    \            s.discard(c)\n    return sorted(list(s))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp255zxrau.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp255zxrau.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp255zxrau.py\", line\
    \ 27, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    res = []\n    for x in x:\n        if not x % 2:\n  \
    \          res.append(x)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4qnjch2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn4qnjch2.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpn4qnjch2.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = list(map(int, str(x)))\n    odd_digits = set(filter(lambda\
    \ x: not x % 2, digits))\n    return sorted(list(odd_digits))\n</cell>\n<cell>\n\
    print(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422,\
    \ 10]))\n</cell>\n<text>\nHow many numbers from the given list can be divided\
    \ by 2 without remainder?\n\n</text>\n<cell>\nfrom typing import List\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsbgkv9e8.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    if len(x) == 0:\n        return []\n    \n    x\
    \ = sorted(x)\n    \n    seen = set()\n    \n    return [x for x in x if not any(digit(x)\
    \ in seen for digit in '02468')] + seen\n\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh5td0nk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyh5td0nk.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpyh5td0nk.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpyh5td0nk.py\", line 23, in unique_digits\n    return [x for x in x\
    \ if not any(digit(x) in seen for digit in '02468')] + seen\n  File \"/tmp/tmpyh5td0nk.py\"\
    , line 23, in <listcomp>\n    return [x for x in x if not any(digit(x) in seen\
    \ for digit in '02468')] + seen\n  File \"/tmp/tmpyh5td0nk.py\", line 23, in <genexpr>\n\
    \    return [x for x in x if not any(digit(x) in seen for digit in '02468')] +\
    \ seen\nTypeError: 'str' object is not callable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    x.sort()\n    \n    even = []\n    for i in x:\n\
    \        if i // 2 != 0:\n            even.append(i)\n\n    return even\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptj6t7v2v.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptj6t7v2v.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmptj6t7v2v.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    even = []\n    for digit in x:\n        if int(digit)\
    \ % 2 == 0:\n            even.append(digit)\n        else:\n            break\n\
    \    return sorted(list(set(x) - set(even)))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijzfp9fy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpijzfp9fy.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpijzfp9fy.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\nassert unique_digits([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n\
    </cell>\n<cell>\nunique_digits([33, 15, 1422, 14])\n</cell>\n<cell>\nassert unique_digits([33,\
    \ 15, 1422, 14]) == []\n</cell>\n<text>\nQuestion 17: Count digits in list\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpms4dlbd3.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if len(x) == 0:\n        return x\n    x.sort()\n   \
    \ even_list = list(x)\n    even_list.remove(even_list[0]%10)\n    unique_digits_result\
    \ = []\n    unique_digits_result.append(even_list[0]%10)\n    for digit in even_list:\n\
    \        if digit%10 == 0:\n            continue\n        unique_digits_result.append(digit%10)\n\
    \    return unique_digits_result\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd8xv52v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdd8xv52v.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdd8xv52v.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    dig_counter = defaultdict(int)\n    for item in\
    \ x:\n        dig_counter[item] += 1\n\n    unique_digits_list = []\n    for item\
    \ in x:\n        if dig_counter[item] == 0:\n            unique_digits_list.append(item)\n\
    \            dig_counter[item] -= 1\n        \n    return sorted(unique_digits_list)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqiq3qva.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdqiq3qva.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdqiq3qva.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpdqiq3qva.py\", line 16, in unique_digits\n    dig_counter = defaultdict(int)\n\
    NameError: name 'defaultdict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_set = set()\n    output = []\n    for item in x:\n\
    \        digit = int(item / 10)\n        if digit in digit_set:\n            continue\n\
    \        output.append(item)\n        digit_set.add(digit)\n    return output\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfm8n9b4a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfm8n9b4a.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfm8n9b4a.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = set()\n    res = []\n    for i in x:\n       \
    \ if i not in seen:\n            seen.add(i)\n            res.append(i)\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmhzrwrh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjmhzrwrh.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpjmhzrwrh.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    even = []\n    odd = []\n    \n    for i in x:\n    \
    \    if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n\
    \            \n    even = sorted(even)\n    odd = sorted(odd)\n    \n    unique_even\
    \ = []\n    unique_odd = []\n    for i in even:\n        if i not in unique_even:\n\
    \            unique_even.append(i)\n    for j in odd:\n        if j not in unique_odd:\n\
    \            unique_odd.append(j)\n    \n    return unique_even+unique_odd\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphr_u9o_5.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmphr_u9o_5.py\", line 45,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphr_u9o_5.py\", line\
    \ 39, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_set = set()\n    unique_list = []\n    for num\
    \ in x:\n        digit = num % 10\n        if digit % 2 == 0:\n            unique_set.add(digit)\n\
    \        else:\n            if digit not in unique_set:\n                unique_list.append(num)\n\
    \    return unique_list\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2jgotvw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd2jgotvw.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpd2jgotvw.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # Write your code here.\n    \n    unique_digits\
    \ = []\n    for i in x:\n        \n        if str(i) not in unique_digits:\n \
    \           unique_digits.append(str(i))\n        \n    unique_digits.sort()\n\
    \    \n    return unique_digits\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplp54us81.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplp54us81.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmplp54us81.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return [num for num in x if sum(list(str(num))) % 2 ==\
    \ 0]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr3o4xtz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqr3o4xtz.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqr3o4xtz.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpqr3o4xtz.py\", line 15, in unique_digits\n    return [num for num\
    \ in x if sum(list(str(num))) % 2 == 0]\n  File \"/tmp/tmpqr3o4xtz.py\", line\
    \ 15, in <listcomp>\n    return [num for num in x if sum(list(str(num))) % 2 ==\
    \ 0]\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import Counter\n    cnt = Counter(map(lambda\
    \ n: n % 10, x))\n    digits = list(map(cnt.get, range(10)))\n    return [n for\
    \ n, k in cnt.items() if k == 0]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkz8lot0h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkz8lot0h.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpkz8lot0h.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgah9_x6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgah9_x6.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwgah9_x6.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_count = {}\n    sorted_x = sorted(x)\n    for i\
    \ in sorted_x:\n        digit = i // 10\n        if digit not in digit_count:\n\
    \            digit_count[digit] = 1\n        else:\n            digit_count[digit]\
    \ += 1\n    \n    res = []\n    for i in digit_count:\n        if digit_count[i]\
    \ % 2 == 0:\n            res.append(i)\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxfm_gf2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpgxfm_gf2.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpgxfm_gf2.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ans = []\n    for y in x:\n        if y % 2 !=\
    \ 0:\n            ans.append(y)\n    \n    ans.sort()\n    return ans\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6str66rm.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    odd_digit = 0\n    even_digit = 0\n    \n    sorted_odd_digits\
    \ = []\n    sorted_even_digits = []\n    \n    for i in x:\n        if i % 2 ==\
    \ 0:\n            even_digit += 1\n            sorted_even_digits.append(i)\n\
    \        else:\n            odd_digit += 1\n            sorted_odd_digits.append(i)\n\
    \    \n    if even_digit == 0 or odd_digit == 0:\n        return sorted_odd_digits\n\
    \    else:\n        sorted_odd_digits.sort()\n        sorted_odd_digits.append(sorted_odd_digits[-1])\n\
    \        return sorted_odd_digits\n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpds052xi4.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpds052xi4.py\", line 44,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpds052xi4.py\", line\
    \ 38, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    for num in x:\n        if num % 2 !=\
    \ 0 and not num % 100 == 0:\n            digits.append(num)\n    digits.sort()\n\
    \    return digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjm_uc1hx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjm_uc1hx.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpjm_uc1hx.py\", line\
    \ 24, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # Your code goes here\n    unique_digits = []\n    for\
    \ i in x:\n        if i not in unique_digits and i // 2 != 0:\n            unique_digits.append(i)\n\
    \    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzow3gl_c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzow3gl_c.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzow3gl_c.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    for x in x:\n        if x % 2 != 0:\n         \
    \   x.append(x)\n            x.sort()\n    return x\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks so much for this.\n<|/ c |>\n<| c |>\nThank you for this. It worked for\
    \ me. I can see that the last element of a given list is added to itself and also\
    \ the sorted list\n<|/ c |>\n<| a |>\nI see a lot of answers which show how to\
    \ do this in O(n^2) time. I don't think it makes sense to do a O(n) solution because\
    \ the other answers are O(nlogn) solutions. \nHowever, you can do it in O(n) time\
    \ and O(1) space by creating a hash table of even numbers. You can do this in\
    \ O(n) time and O(1) space by using a dictionary in Python that uses O(1) space.\
    \ This solution also has O(n) space complexity. \n<code>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb33ww_4b.py\", line 21\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    for n in x:\n        digits.append(int(n)\
    \ // 10)\n    return sorted(set(digits))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqswhdcz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptqswhdcz.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmptqswhdcz.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    odd_numbers = []\n    \n    for number in x:\n\
    \        \n        # check if number is odd number with even digit\n        if\
    \ number % 2 != 0:\n            \n            # check if number is divisible by\
    \ 2\n            if number % 2 == 0 and number % 10 == 0:\n                # check\
    \ if number is divisible by 10\n                if number % 10 == 0:\n       \
    \             odd_numbers.append(number)\n    \n    # sort odd numbers\n    odd_numbers.sort()\n\
    \    \n    # remove all even number\n    while odd_numbers:\n        \n      \
    \  # remove next even number\n        odd_numbers.remove(odd_numbers[0])\n   \
    \ \n    return odd_numbers\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgkw68re.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwgkw68re.py\", line 47,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwgkw68re.py\", line\
    \ 41, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    \n    for num in x:\n        if any([num\
    \ % 2 == 0, num % 2 == 1, num % 2 == 2, num % 2 == 4, num % 2 == 5]):\n      \
    \      ans.append(num)\n            \n    return sorted(ans)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8z4mduwb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8z4mduwb.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8z4mduwb.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    for d in x:\n        digits.append(str(d))\n\
    \    unique_digits = sorted(list(set(digits)))\n    even = [d for d in unique_digits\
    \ if len(d)%2 == 0]\n    return even\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2oe2exqc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2oe2exqc.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2oe2exqc.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return sorted(set(filter(lambda y: y % 2 == 0, x)))\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpokd_9g7j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpokd_9g7j.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpokd_9g7j.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n    s = set(map(int, x))\n\
    \    return [n for n in s if n % 2 == 0]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn9rq2df.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptn9rq2df.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmptn9rq2df.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return sorted(list(set([x % x for x in x]))) \n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm71zf4if.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpm71zf4if.py\", line 24,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm71zf4if.py\", line\
    \ 18, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    \n    for n in x:\n\
    \        unique_digits_set.add(int(str(n)[0]))\n    \n    unique_digits_list =\
    \ list(unique_digits_set)\n    \n    unique_digits_list.sort()\n    \n    return\
    \ unique_digits_list\n    \n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgbqntcn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplgbqntcn.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmplgbqntcn.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(list(set(x[i] for i in x[:]))) #\
    \ Using list comprehension\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_42zj23.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo_42zj23.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpo_42zj23.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpo_42zj23.py\", line 16, in unique_digits\n    return sorted(list(set(x[i]\
    \ for i in x[:]))) # Using list comprehension\n  File \"/tmp/tmpo_42zj23.py\"\
    , line 16, in <genexpr>\n    return sorted(list(set(x[i] for i in x[:]))) # Using\
    \ list comprehension\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    odd = 1\n    even_counter = 0\n    for\
    \ x in sorted(x):\n        if x % 2 == 0:\n            even_counter += 1\n   \
    \     else:\n            if even_counter:\n                ans.append(odd)\n \
    \           odd = x\n            even_counter = 1\n    ans.append(odd)\n    return\
    \ ans\n\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgl63xv7o.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgl63xv7o.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpgl63xv7o.py\", line\
    \ 32, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(list(set([int(i) for i in x if int(i)\
    \ % 2 == 0])))\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nQ2. Given a number n, find the next greater number that has the same\n\
    digits in sorted order.\n\nFor example:\n>>> next_greater(15)\n22\n>>> next_greater(5)\n\
    10\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfjmtor9q.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for digit in x:\n        if int(str(digit)[0])\
    \ % 2 == 0:\n            continue\n        else:\n            ans.append(digit)\n\
    \    return sorted(ans)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97542bbr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp97542bbr.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp97542bbr.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return sorted(list(set(x for x in x if not any(str(x).count(d)\
    \ for d in \"02468\")))\n</cell>\n<cell>\nunique_digits([0, 33, 4, 3])\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4ebvrn8o.py\", line 16\n    </cell>\n     ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    \n    \n    # Your code here\n    if any(x[i]%2\
    \ == 0 for i in range(len(x))):\n        return sorted(x)\n    else:\n       \
    \ pass\n\n    return sorted(x)\n            \n        \n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2g5e5yb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpz2g5e5yb.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpz2g5e5yb.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    s = set(map(lambda x: str(x), x))\n    return sorted([x\
    \ for x in x if x[0] in s and not x[0] == '0'])\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0d4icujx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0d4icujx.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp0d4icujx.py\", line\
    \ 20, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp0d4icujx.py\", line 16, in unique_digits\n    return sorted([x for\
    \ x in x if x[0] in s and not x[0] == '0'])\n  File \"/tmp/tmp0d4icujx.py\", line\
    \ 16, in <listcomp>\n    return sorted([x for x in x if x[0] in s and not x[0]\
    \ == '0'])\nTypeError: 'int' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for n in x:\n        if n % 2 == 0:\n \
    \           ans.append(n)\n    return sorted(ans)\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruds3pa2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpruds3pa2.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpruds3pa2.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits: List[int] = []\n    x: List[int] = sorted(x)\n\
    \    while x:\n        if x[0] // 10 == 0: \n            digits.append(x[0])\n\
    \            x = x[1:]\n            continue\n        \n        digits.append(x[0]//10)\n\
    \        x = x[1:]\n\n    return sorted(digits)\n\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_tvzba9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv_tvzba9.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpv_tvzba9.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n\n    # find all even digit\
    \ in x\n    even = [i*2 for i in x if not i%2]\n\n    # find all digits in x that\
    \ not in even\n    diff = [i for i in x if i not in even]\n    \n    # find all\
    \ digits in x that not in even\n    diff_out = [i for i in x if i not in even]\n\
    \    \n    # merge the two list\n    diff_out.sort()\n    diff = diff_out + diff\n\
    \n    # sort the list\n    diff.sort()\n\n    return diff\n    \ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp994iuev4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp994iuev4.py\", line 43,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp994iuev4.py\", line\
    \ 37, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits_dict = dict()\n    digit_lst = []\n    \n\
    \    for x in x:\n        if x not in digits_dict:\n            digits_dict[x]\
    \ = 0\n        else:\n            digits_dict[x] += 1\n    \n    for x in digits_dict:\n\
    \        if digits_dict[x] % 2 != 0:\n            digit_lst.append(x)\n    \n\
    \    digit_lst = sorted(digit_lst)\n    \n    return digit_lst\n</cell>\n<cell>\n\
    print(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422,\
    \ 10]))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsmcixpgk.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = set()\n    return [x for x in x if not (x % 2\
    \ == 0 and x in seen or seen.add(x))]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp0hjh6w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppp0hjh6w.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmppp0hjh6w.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    dic = {}\n    for i in x:\n        if i in dic:\n\
    \            dic[i] += 1\n        else:\n            dic[i] = 1\n    \n    lst\
    \ = [i for i in dic.keys() if dic[i]%2 == 0]\n    \n    return lst\n</cell>\n\
    <cell>\nassert unique_digits([]) == []\nassert unique_digits([5]) == [5]\nassert\
    \ unique_digits([5, 5]) == [5]\nassert unique_digits([10, 20, 30, 40, 50, 60,\
    \ 70]) == [10, 30, 70]\nassert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4,\
    \ 5]\n</cell>\n<text>\nProblem 3\n\n</text>\n<text>\nWrite a function that prints\
    \ the unique characters in the string given as argument. \nFor example the string\
    \ 'abracadabra' prints 'abc'.\n\n\n</text>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdws9g65y.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_digits_list = sorted(list(set(x)))\n    unique_digits_list\
    \ = [i for i in unique_digits_list if not (i % 2)]\n    return unique_digits_list\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvsurooyj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvsurooyj.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpvsurooyj.py\", line\
    \ 20, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # your code here\n    \n    # 1. sort the list\n    #\
    \ 2. remove all even digits\n    # 3. remove all odd digits\n    # 4. sort back\n\
    \    \n    sorted_list = sorted(x)\n    \n    unique_sorted_list = []\n    \n\
    \    for num in sorted_list:\n        if num % 2 == 0:\n            continue\n\
    \        else:\n            unique_sorted_list.append(num)\n            \n   \
    \ unique_sorted_list.sort()\n    \n    return unique_sorted_list\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpot12fofi.py\", line 35\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = {}\n    for i in x:\n        digits[i]\
    \ = digits.get(i, 0) + 1\n    return [x for x, count in digits.items() if count==1]\n\
    </cell>\n<cell>\nassert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert\
    \ unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa8zq4osj.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    len_x = len(x)\n    \n    digits = [int(digit)\
    \ for digit in str(x[0])]\n    \n    unique_digits = []\n\n    for i in x:\n \
    \       \n        digit_i = int(i)\n        \n        digit_digits = [int(digit)\
    \ for digit in str(i)]\n        \n        has_even_digit = False\n        \n \
    \       for digit in digit_digits:\n            \n            if digit_i%digit\
    \ == 0:\n                has_even_digit = True\n            \n        if not has_even_digit:\n\
    \            unique_digits.append(digit_i)\n\n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbzv8kgk.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnbzv8kgk.py\", line 47,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnbzv8kgk.py\", line\
    \ 41, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(list(filter(lambda y: len(str(y))\
    \ % 2 == 0, x)))\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdl6sxl7o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdl6sxl7o.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdl6sxl7o.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = {}\n    digits = []\n    for item in x:\n    \
    \    if item not in seen:\n            seen[item] = True\n            digits.append(item)\n\
    \    digits.sort()\n    return digits\n</code>\nThe second function could look\
    \ like:\n<code>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxl16r8i9.py\", line 23\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ans = []\n    for num in x:\n        digits = []\n\
    \        while num > 0:\n            digits.append(num % 10)\n            num\
    \ = num // 10\n        if digits[0] % 2 == 0 and digits != [0]:\n            ans.append(digits)\n\
    \    ans.sort()\n    return ans\n</cell>\n<cell>\nassert unique_digits([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n\
    </cell>\n<text>\nGreat! Now you can try to use the unique_digits function to solve\
    \ the above problem.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwg_s1zse.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n    \n    s = set()\n \
    \   odd_digits = set()\n    for num in x:\n        if num % 2 == 0:\n        \
    \    odd_digits.add(num)\n        else:\n            s.add(num)\n    \n    s =\
    \ list(s)\n    s.sort()\n    \n    for num in s:\n        if num in odd_digits:\n\
    \            continue\n        s.append(num)\n    \n    return s\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n    x_sorted = sorted(x)\n\
    \    unique_digits_set = {x_sorted[0], *[i for i in range(1, len(x_sorted)) if\
    \ i % 2 != 0]}\n    return list(unique_digits_set)\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjfc3o1l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyjfc3o1l.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpyjfc3o1l.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = {int(n) for n in x}\n    return sorted(set(x\
    \ for n in x if n not in digits and n % 2 == 0))\n\ndef check(candidate):\n  \
    \  assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6g4wry54.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6g4wry54.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp6g4wry54.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = set()\n    digit_list = []\n    for i in x:\n\
    \        if i not in digits:\n            digits.add(i)\n            digit_list.append(i)\n\
    \    digit_list.sort()\n    return digit_list\n            \ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhn_bwts.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpyhn_bwts.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpyhn_bwts.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    \n    count = 0\n    digits = [0, 0, 0]\n    for\
    \ n in x:\n        if n % 2 != 0:\n            count += 1\n            digits[count\
    \ % 3] = n\n    return list(filter(lambda x: len(x) == 0, digits))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m__kdos.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1m__kdos.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1m__kdos.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp1m__kdos.py\", line 23, in unique_digits\n    return list(filter(lambda\
    \ x: len(x) == 0, digits))\n  File \"/tmp/tmp1m__kdos.py\", line 23, in <lambda>\n\
    \    return list(filter(lambda x: len(x) == 0, digits))\nTypeError: object of\
    \ type 'int' has no len()\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    for y in x:\n        if y % 2 == 0:\n            x.remove(y)\n\
    \    return sorted(x)\n\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqf9n_shh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqf9n_shh.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqf9n_shh.py\", line\
    \ 23, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for a in x:\n        if a % 2 == 0 and\
    \ a not in ans:\n            ans.append(a)\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqz1iiqp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpiqz1iiqp.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpiqz1iiqp.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    dic = dict()\n    for d in x:\n        if d not in dic:\n\
    \            dic[d] = 1\n        else:\n            dic[d] += 1\n    ret = []\n\
    \    for d in sorted(dic.keys()):\n        if dic[d] % 2 == 0:\n            ret.append(d)\n\
    \    return ret\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpde3viawu.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # write your code here\n    pass\n</cell>\n<cell>\nassert\
    \ unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 9\n\n</text>\n<text>\nProblem\
    \ 9.0\n\n</text>\n<text>\nFind the missing number in a list of numbers.\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt52dcevf.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    odd_digits = []\n    \n    for d in\
    \ x:\n        digits.append(d)\n        odd_digits.append(d % 10)\n        \n\
    \    return digits if set(digits)=={0,} else [] if set(odd_digits)=={0,} else\
    \ sorted(odd_digits)\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe56uxzv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqe56uxzv.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqe56uxzv.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ret = []\n    for num in x:\n        if not any(num %\
    \ d == 0 for d in [2, 4, 6, 8, 10]):\n            ret.append(num)\n    return\
    \ sorted(ret)\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p2yz962.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1p2yz962.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1p2yz962.py\", line\
    \ 23, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    return sorted(x for x in x if x % 2 == 0)\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8m3olo_w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8m3olo_w.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8m3olo_w.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for e in x:\n        if sum(1 for c in\
    \ str(e) if c % 2) == 0:\n            ans.append(e)\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfy0upqu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqfy0upqu.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqfy0upqu.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpqfy0upqu.py\", line 17, in unique_digits\n    if sum(1 for c in str(e)\
    \ if c % 2) == 0:\n  File \"/tmp/tmpqfy0upqu.py\", line 17, in <genexpr>\n   \
    \ if sum(1 for c in str(e) if c % 2) == 0:\nTypeError: not all arguments converted\
    \ during string formatting\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # Your code here\n    \n    return sorted(list(set(filter(lambda\
    \ x: not len(list(filter(lambda y: x % 2 != y, x))), x))))\n</cell>\n<text>\n\
    Your task is to run unique_digits function and print the return value in console.\n\
    \nIf this function does not return correct result for the first test case then\
    \ try other test cases.\n\nDon't forget to run the code cell without checking\
    \ it.\n\nIf you pass this function to the following cell then your output must\
    \ be correct:\n\nassert unique_digits([1, 15, 33, 1422, 10]) == [1, 15, 33], \"\
    Error\"\nassert unique_digits([152, 323, 1422, 10]) == [], \"Error\"\nassert unique_digits([15,\
    \ 33, 1422, 100, 1]) == [1, 15, 33, 100], \"Error\"\nassert unique_digits([15,\
    \ 33, 1422, 101, 0]) == [1, 15, 33, 101], \"Error\"\nassert unique_digits([15,\
    \ 33, 1422, 100, 4, 6, 3, 10, 1]) == [1, 15, 33, 100, 4, 6, 3], \"Error\"\nprint(\"\
    Well Done!\")\nIf you pass this function to the following cell then your output\
    \ must be correct:\n\nassert unique_digits([15, 33, 1422, 105, 100, 1, 1]) ==\
    \ [15, 33, 1422, 100, 1, 1], \"Error\"\nprint(\"Well Done!\")\nIf you pass this\
    \ function to the following cell then your output must be correct:\n\nassert unique_digits([15,\
    \ 33, 1422, 10, 10, 10, 10, 10, 10]) == [15, 33, 1422, 10, 10, 10, 10, 10], \"\
    Error\"\nprint(\"Well Done!\")\nIf you pass this function to the following cell\
    \ then your output must be correct:\n\nassert unique_digits([15, 33, 1422, 10,\
    \ 10, 10, 10, 10, 10, 10, 10]) == [15, 33, 1422, 10, 10, 10, 10, 10], \"Error\"\
    \nprint(\"Well Done!\")\nIf you pass this function to the following cell then\
    \ your output must be correct:\n\nassert unique_digits([15, 33, 1422, 10, 10,\
    \ 10, 10, 10, 10, 10, 10]) == [15, 33, 1422, 10, 10, 10, 10, 10, 10], \"Error\"\
    \nprint(\"Well Done!\")\nIf you pass this function to the following cell then\
    \ your output must be correct:\n\nassert unique_digits([15, 33, 1422, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10]) == [15, 33, 1422, 10, 10, 10, 10, 10, 10, 10],\
    \ \"Error\"\nprint(\"Well Done!\")\nIf you pass this function to the following\
    \ cell then your output must be correct:\n\nassert unique_digits([15, 33, 1422,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == [15, 33, 1422, 10, 10, 10, 10, 10,\
    \ 10, 10], \"Error\"\nprint(\"Well Done!\")\nIf you pass this function to the\
    \ following cell then your output must be correct:\n\nassert unique_digits([15,\
    \ \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpevpzfuew.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ans = []\n    for i in range(1,len(x)):\n     \
    \   if x[i] % 2 != 0:\n            ans.append(x[i])\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qhs2ob3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4qhs2ob3.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp4qhs2ob3.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            unique.append(n)\n        else:\n            break\n    \n\
    \    return sorted(unique)\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpemiufpr4.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    for x in x:\n        if x\
    \ not in digit_dict:\n            digit_dict[x] = 0\n        digit_dict[x] +=\
    \ 1\n    \n    sorted_list = []\n    for x in sorted(digit_dict.keys()):\n   \
    \     if digit_dict[x] % 2 == 0 and x not in sorted_list:\n            sorted_list.append(x)\n\
    \            \n    return sorted_list\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm30os1cj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm30os1cj.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm30os1cj.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    evens = []\n    odds = []\n    for x in x:\n  \
    \      if x % 2 == 0:\n            evens.append(x)\n        else:\n          \
    \  odds.append(x)\n    evens.sort()\n    odds.sort()\n    return evens + odds\n\
    \        \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xco940o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1xco940o.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1xco940o.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    x = sorted(x)\n    return [x for x in x if x % 2 == 0\
    \ and x not in [x/2 for x in x]]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbwdnv87.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxbwdnv87.py\", line 25,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxbwdnv87.py\", line\
    \ 19, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpxbwdnv87.py\", line 16, in unique_digits\n    return [x for x in x\
    \ if x % 2 == 0 and x not in [x/2 for x in x]]\n  File \"/tmp/tmpxbwdnv87.py\"\
    , line 16, in <listcomp>\n    return [x for x in x if x % 2 == 0 and x not in\
    \ [x/2 for x in x]]\nTypeError: 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique = set([])\n    for item in x:\n        if item\
    \ not in unique:\n            unique.add(item)\n    return sorted(list(unique))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7 (6 points)\nGiven two integers x\
    \ and y, return True if x is evenly divisible by y (including both x and y).\n\
    If x is not evenly divisible by y, return False.\n\nFor example:\n\n>>> is_evenly_divisible(13,\
    \ 5)\nTrue\n>>> is_evenly_divisible(16, 5)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpen_gua4i.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = set()\n    for num in x:\n        digit = num\
    \ // 10\n        if digit % 2:\n            digits.add(num)\n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8chf52m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpn8chf52m.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpn8chf52m.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    def count_digits(xs: List[int]) -> int:\n        \"\"\
    \"Count the number of digits in all xs.\n        \n        This function assumes\
    \ that xs has positive integers.\n        \"\"\"\n        count: int = 0\n   \
    \     for val in xs:\n            count += val//10\n            \n        return\
    \ count\n    \n    sorted_xs: List[int] = sorted(xs)\n    sorted_xs_digits: List[int]\
    \ = [x//10 for x in sorted_xs]\n    \n    unique_digits: List[int] = []\n    \n\
    \    # check even digit and add to the result list.\n    for digits in sorted_xs_digits:\n\
    \        if count_digits(sorted_xs)%2 == 0:\n            unique_digits.append(digits)\n\
    \    \n    # Sort unique_digits list and return it.\n    unique_digits.sort()\n\
    \    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbmiv4t6.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzbmiv4t6.py\", line 47,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzbmiv4t6.py\", line\
    \ 41, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpzbmiv4t6.py\", line 26, in unique_digits\n    sorted_xs: List[int]\
    \ = sorted(xs)\nNameError: name 'xs' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    l = []\n    for i, j in zip(x, x[1::2]):\n    \
    \    if i % 2 != 0:\n            l.append(i)\n        else:\n            continue\n\
    \    return sorted(l)\n\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpierbyfcl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpierbyfcl.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpierbyfcl.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    res=[]\n    for num in x:\n        if num%2 ==0:\n  \
    \          res.append(num)\n    res=sorted(res)\n    \n    return res\n    \n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdskpj0m1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdskpj0m1.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdskpj0m1.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_set = set()\n    for x in x:\n        digit_set.add(x)\n\
    \    return [x for x in x if x not in digit_set]\n\ndef check(candidate):\n  \
    \  assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_2euf8f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg_2euf8f.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpg_2euf8f.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpg_2euf8f.py\", line 18, in unique_digits\n    return [x for x in x\
    \ if x not in digit_set]\nTypeError: 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_nums = [x for x in x if x % 2 == 0]\n    unique_nums.sort()\n\
    \    return unique_nums\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gt54062.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2gt54062.py\", line 26,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2gt54062.py\", line\
    \ 20, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    s = set()\n    digit_list = set()\n    for x in x:\n\
    \        if x not in digit_list:\n            digit_list.add(x)\n            s.add(x)\n\
    \    return sorted(list(s))\n</code>\n<|/ a tags=python |>\n<| a dscore=1 |>\n\
    You can use a simple and direct method to achieve this.\n<code>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0edr94w0.py\", line 22\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x:\n        return []\n    seen = set()\n    seen_add\
    \ = seen.add\n    unique_digits = []\n    for i, d in enumerate(x):\n        if\
    \ d not in seen:\n            unique_digits.append(d)\n            seen_add(d)\n\
    \    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlxya0my.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzlxya0my.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpzlxya0my.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    import math\n    \n    # Sort the list\n    x.sort()\n\
    \    \n    # Return an empty list if there are no even digits\n    if x[-1] %\
    \ 2 == 0:\n        return list(x[:])\n    \n    # Create a new empty list\n  \
    \  new_list = []\n    \n    # Iterate through the list to get the unique numbers\n\
    \    for i in x:\n        # Ignore odd numbers\n        if i & 1 != 0:\n     \
    \       continue\n        \n        # Find out which digits are the even number\n\
    \        # Iterate through all digits until find any even number\n        for\
    \ d in range(10 ** len(str(i))):\n            if str(i) % (10 ** d) > 0:\n   \
    \             break\n        else:\n            # Digits from the i are even\n\
    \            # Add them to the new_list\n            new_list.append(i)\n    \n\
    \    # Sort the new_list\n    new_list.sort()\n    \n    # Return the unique numbers\n\
    \    return new_list\n    \n    \n    \n</cell>\n<cell>\nassert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nPart 2: Math\nThis part is about math. Math is a bit complicated,\
    \ but very interesting. The first part is about finding all factors of a number,\
    \ which can be calculated by following some simple rules.\n\nFirst, number divided\
    \ by 1 must be equals to 1.\n\n\nSecond, if one number is divisible by 2, all\
    \ numbers are divisible by 2.\n\n\nThird, if one number is divisible by 3, all\
    \ numbers are divisible by 3.\n\n\nFourth, if one number is divisible by 5, all\
    \ numbers are divisible by 5.\n\n\nFifth, if one number is divisible by both 6\
    \ and 9, all numbers are divisible by both 6 and 9.\n\n\nSixth, if one number\
    \ is divisible by both 6 and 9, all numbers are divisible by both 6 and 9.\n\n\
    \nSeventh, if one number is divisible by both 6 and 9, all numbers are divisible\
    \ by both 6 and 9.\n\n\n\nWe can use these rules to implement the is_factor()\
    \ function above.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpf9i4szx8.py\", line 51\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import Counter\n    cnt = Counter(x)\n\
    \    digits = list(set(cnt.keys()))\n    odd_digits = [x for x in digits if cnt[x]\
    \ % 2]\n    return [x for x in x if x not in odd_digits]\n    \ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdd0y6ms.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgdd0y6ms.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpgdd0y6ms.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    return sorted(set(x)).difference({i for i in x if i %\
    \ 2 == 0})\n</code>\n<|/ a tags=python |>\n<| a tags=python |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfyqpqyum.py\", line 16\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    counts = defaultdict(int)\n\
    \    for n in x:\n        counts[n] += 1\n    return [k for k, v in counts.items()\
    \ if v == 0]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphaxgijo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpphaxgijo.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpphaxgijo.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = {}\n    ans = []\n    for i in x:\n        if\
    \ i in seen:\n            continue\n        if i.is_even:\n            seen[i]\
    \ = True\n            ans.append(i)\n        else:\n            seen[i] = False\n\
    \    ans.sort()\n    return ans\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph026zte5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph026zte5.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmph026zte5.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmph026zte5.py\", line 20, in unique_digits\n    if i.is_even:\nAttributeError:\
    \ 'int' object has no attribute 'is_even'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(i) for i in str(x)]\n    even = [digit\
    \ for digit in digits if digit % 2 == 0]\n    even.sort()\n    return even\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbbhn5a62.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbbhn5a62.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpbbhn5a62.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpbbhn5a62.py\", line 16, in unique_digits\n    digits = [int(i) for\
    \ i in str(x)]\n  File \"/tmp/tmpbbhn5a62.py\", line 16, in <listcomp>\n    digits\
    \ = [int(i) for i in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    \n    dic =\
    \ defaultdict(int)\n    for num in x:\n        dic[num] += 1\n\n    dic = sorted(dic.items())\n\
    \    \n    unique_nums = []\n    for key, val in dic:\n        if val == 1:\n\
    \            unique_nums.append(key)\n\n    return unique_nums\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprj_5tsmt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprj_5tsmt.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmprj_5tsmt.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_list = [int(digit) for digit in str(x)] # Convert\
    \ the input list to string.\n    digit_list.sort() # Sort the list in increasing\
    \ order.\n    even_digit_list = [] # Store the even digits from the list.\n  \
    \  for digit in digit_list: # Iterate through the list.\n        if digit % 2\
    \ == 0: # If the current digit is even.\n            even_digit_list.append(digit)\
    \ # Append it to the list.\n    return even_digit_list # Return the list.\n\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4w8jyxlv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4w8jyxlv.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp4w8jyxlv.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp4w8jyxlv.py\", line 15, in unique_digits\n    digit_list = [int(digit)\
    \ for digit in str(x)] # Convert the input list to string.\n  File \"/tmp/tmp4w8jyxlv.py\"\
    , line 15, in <listcomp>\n    digit_list = [int(digit) for digit in str(x)] #\
    \ Convert the input list to string.\nValueError: invalid literal for int() with\
    \ base 10: '['\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if i // 2 != 0:\n\
    \            digits.append(i)\n    if len(digits) == 0:\n        return []\n \
    \   else:\n        return sorted(digits, reverse=True)\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fdwzpeu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_fdwzpeu.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp_fdwzpeu.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # your code here\n    for i in range(len(x)):\n     \
    \   if i%2 != 0:\n            x.remove(x[i])\n    return x\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3p55l3o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi3p55l3o.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpi3p55l3o.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpi3p55l3o.py\", line 18, in unique_digits\n    x.remove(x[i])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    def digits(x: int) -> List[int]:\n        digit_dict\
    \ = {}\n        for num in str(x):\n            digit_dict[num] = True\n     \
    \   \n        return sorted(list(digit_dict.keys()))\n    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        if digits(num)[0] % 2 == 1:\n       \
    \     unique_digits.append(num)\n    \n    return unique_digits\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpquxdc5y8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpquxdc5y8.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpquxdc5y8.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpquxdc5y8.py\", line 26, in unique_digits\n    if digits(num)[0] %\
    \ 2 == 1:\nTypeError: not all arguments converted during string formatting\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    for i in range(len(x)):\n        if not x%2: \n\
    \            continue\n        else: \n            temp=x[i]; \n            cnt=1;\
    \ \n            for j in range(i+1, len(x)):\n                if x[j]%2: \n  \
    \                  x[j]=temp; \n                    cnt += 1\n               \
    \     continue \n                if x[j]%2: \n                    x[i]=temp; \n\
    \                    cnt += 1\n                    break\n            if cnt>1:\
    \ \n                x.sort()\n                return x\n    return [] \n\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxyhqo5lx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxyhqo5lx.py\", line 44,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxyhqo5lx.py\", line\
    \ 38, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpxyhqo5lx.py\", line 17, in unique_digits\n    if not x%2: \nTypeError:\
    \ unsupported operand type(s) for %: 'list' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    dic = {}\n    for ele in x:\n        if ele in dic:\n\
    \            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    sorted_list\
    \ = sorted(dic.items(), key=lambda d: d[1])\n    return [x[0] for x in sorted_list\
    \ if x[1] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffr4_gmk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpffr4_gmk.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpffr4_gmk.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # Your code goes here\n    \n    return sorted(list(set(x)))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjp_qrin.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphjp_qrin.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphjp_qrin.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    s = set(map(int, str(x)))\n    lst = [x for x in x if\
    \ x not in s and len(str(x)) % 2 == 0]\n    lst = [x for x in lst if int(x) not\
    \ in set(map(int, str(x)))]\n    return sorted(lst)\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphqaakd0l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphqaakd0l.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphqaakd0l.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmphqaakd0l.py\", line 15, in unique_digits\n    s = set(map(int, str(x)))\n\
    ValueError: invalid literal for int() with base 10: '['\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = {}\n    to_return = []\n    for num in x:\n\
    \        if num in digits:\n            if digits[num] != 2:\n               \
    \ to_return.append(num)\n        else:\n            digits[num] = 1\n    to_return.sort()\n\
    \    return to_return\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkw9fm64b.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkw9fm64b.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpkw9fm64b.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    seen = {}\n    \n    digits = [x for x in x if\
    \ x not in seen and not seen.setdefault(x, True)]\n    \n    digits = sorted(digits)\n\
    \    \n    return digits\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrj8pvn3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxrj8pvn3.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxrj8pvn3.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    nums = list(x)\n    nums.sort(reverse=True)\n    even\
    \ = []\n    for num in nums:\n        digits = list(map(int, str(num)))\n    \
    \    odd = [d for d in digits if not d % 2]\n        if len(odd) > 0:\n      \
    \      even.append(num)\n    return even\n</cell>\n<cell>\nassert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nQ8. Write a Python program to find all unique numbers and\
    \ their product in ascending order. It should return all the products in a list.\n\
    e.g. Input: [1, 2, 1, 3] Output: [1, 3, 6, 9, 12, 15]\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpv7vlhwah.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for i in x:\n        if sum(int(i) % 2\
    \ == 0 for i in x) != 0:\n            ans.append(i)\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99sdjmzi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp99sdjmzi.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp99sdjmzi.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    result = []\n    for n in x:\n        if n % 2 == 0:\n\
    \            result.append(n)\n        else:\n            n = n // 2\n       \
    \     if n > 0:\n                result.extend([n])\n            else:\n     \
    \           result.extend([n])\n            result.extend([n - 1])\n    return\
    \ result\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9ap9kxoq.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    res=[] #return list\n    i=0 #current number\n    while\
    \ i<len(x):\n        if x[len(x)-i]%2==0: #current number doesn't have any even\
    \ digit\n            res.append(x[len(x)-i]) #add to result list\n           \
    \ i+=1 #move to next number\n        else:\n            i+=1 #move to next number\n\
    \    return sorted(res)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj1d4fl97.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpj1d4fl97.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpj1d4fl97.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpj1d4fl97.py\", line 18, in unique_digits\n    if x[len(x)-i]%2==0:\
    \ #current number doesn't have any even digit\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    even = []\n    for n in x:\n        if n % 2 ==\
    \ 0:\n            even.append(n)\n    \n    return sorted(even)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1fsa57h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps1fsa57h.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmps1fsa57h.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = list(set(str(x)))\n    digits_list = []\n\
    \    \n    for d in digits:\n        if str(d).count('0') % 2 == 0:\n        \
    \    digits_list.append(d)\n            \n    digits_list.sort()\n    \n    return\
    \ digits_list\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpp4c_eeq8.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    ### START CODE HERE ### (\u2248 3 lines of code)\n\
    \    digits=[]\n    for num in x:\n        if num%2==0:\n            digits.append(num)\n\
    \        else:\n            break\n    digits.sort()\n    ### END CODE HERE ###\n\
    \    return digits\n    \n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8enso59h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8enso59h.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8enso59h.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    # write your code here\n    if len(x) == 0:\n       \
    \ return []\n    result = []\n    dic_digit = {}\n    for n in x:\n        if\
    \ n in dic_digit:\n            if n % dic_digit[n] == 0:\n                result.append(n)\n\
    \                dic_digit[n] += 1\n        else:\n            dic_digit[n] =\
    \ 1\n    return result\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiynqlo6i.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpiynqlo6i.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpiynqlo6i.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    \n    ds = defaultdict(int)\n\
    \    \n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            ds[x[i]]\
    \ += 1\n            \n    out = []\n    \n    for i in sorted(ds.keys()):\n  \
    \      if ds[i] != 0:\n            out.append(i)\n            \n    return sorted(out)\n\
    \            \n            \n        \n    \n        \ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbx63xrt.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphbx63xrt.py\", line 42,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphbx63xrt.py\", line\
    \ 36, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [x for x in x if x % 2 == 0]\n    return\
    \ sorted(digits)\n</cell>\n<cell>\nassert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Notice that this works even if all elements are unique.\n\n\n</text>\n<text>\n\
    4.4. Find all the numbers that appears only once in a given list.\nGiven a list\
    \ of integers, return a new list containing all the elements that appear only\
    \ once.\n\nFor example, given [1,2,2,1,3], return [2,3].\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxpnllysc.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = []\n    for num in x:\n        digits.append(num)\n\
    \    digits.sort()\n    return [x for x in digits if not int(str(x)[0]) % 2]\n\
    \    \nassert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwq4rxiry.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if x==[]:\n        return []\n    if len(x)==1:\n   \
    \     return [x for x in x if x%2==0]\n    \n    dx = [(x//10)%10 for x in range(1,\
    \ 10)]\n    \n    # filter all even digits from list\n    return [x for x in x\
    \ if x not in dx and not (x//100)%10==0]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sb6ss76.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9sb6ss76.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9sb6ss76.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_digits_set = set()\n    unique_digits_set.add(x[0])\n\
    \    for i in x[1:]:\n        if i % 2 == 0:\n            continue\n        else:\n\
    \            unique_digits_set.add(i)\n    return sorted(unique_digits_set)\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3txumv61.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3txumv61.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp3txumv61.py\", line\
    \ 26, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    x = [str(x) for x in x]\n    x = sorted(x)\n    \n  \
    \  s = set()\n    \n    return [int(x) for x in  x if not str(int(x)) in s and\
    \ int(x) not in s]\n</cell>\n<cell>\nunique_digits(list(range(10)))\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\nfrom collections\
    \ import Counter\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj21szuqe.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 2 ==\
    \ 0 and num != 0:\n            result.append(num)\n\n    return result\n\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1fo4vs6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn1fo4vs6.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpn1fo4vs6.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # write your code here\n    \n    \n    return\
    \ sorted([i for i in x if not i % 2])\n\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vro8hbw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2vro8hbw.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2vro8hbw.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    dic_even_digit = {x:True for x in x}\n    \n  \
    \  res = []\n    for num in x:\n        if dic_even_digit[num]:\n            continue\n\
    \        \n        res.append(num)\n    \n    return res\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnu_u_5cm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnu_u_5cm.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnu_u_5cm.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digits = set()\n    result = []\n\n    # traverse the\
    \ whole list and store all digits\n    for n in x:\n        digits.add(str(n))\n\
    \n    # iterate through digits, check which has even length, and remove it\n \
    \   # from set if there's any even digits\n    for n in digits:\n        if len(n)\
    \ % 2 == 0:\n            digits.remove(n)\n\n    # add remaining digits to list\n\
    \    for n in digits:\n        result.append(int(n))\n    \n    # sort the result\n\
    \    return sorted(result)\n    \n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2e_iu0ul.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2e_iu0ul.py\", line 43,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2e_iu0ul.py\", line\
    \ 37, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp2e_iu0ul.py\", line 24, in unique_digits\n    for n in digits:\nRuntimeError:\
    \ Set changed size during iteration\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_counter = {}\n    for digit in x:\n        digit_counter.setdefault(digit,\
    \ 0) + 1\n    \n    unique_digits = [digit for digit, count in digit_counter.items()\
    \ if count < 2]\n    return sorted(unique_digits)\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46na5as5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp46na5as5.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp46na5as5.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    even = []\n    for num in x:\n        if num % 2 == 0:\n\
    \            even.append(num)\n        else:\n            odd = []\n         \
    \   for num2 in x:\n                if num2 % 2 != 0:\n                    odd.append(num2)\n\
    \    return even + odd\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwuvp750.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplwuvp750.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmplwuvp750.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    unique_digits_set = set()\n    for x in x:\n        if\
    \ x not in unique_digits_set:\n            unique_digits_set.add(x)\n    return\
    \ sorted(unique_digits_set)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd7gqxla0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd7gqxla0.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpd7gqxla0.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x\
    \ for x in x if not (x % 2 == 0 and x in seen or seen_add(x))]\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_v5xlly.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7_v5xlly.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7_v5xlly.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if not x: return []\n    ret_list = []\n    for e in\
    \ x:\n        if not is_number(e):\n            ret_list.append(e)\n         \
    \   continue\n        digit_str = str(e)\n        is_even = True\n        for\
    \ digits in digit_str:\n            if not is_number(digits):\n              \
    \  is_even = False\n                break\n        if is_even:\n            ret_list.append(e)\n\
    \    return sorted(ret_list)\n</code>\n<|/ a tags=python-3.x,python,list dscore=3\
    \ |>\n<| c |>\nThis solution takes more than 10 seconds for a large list. Is there\
    \ another way to achieve this?\n<|/ c |>\n<| c |>\nI updated the answer with new\
    \ code which takes only 0.02 seconds on my machine.\n<|/ c |>\n<| a dscore=2 |>\n\
    This is another solution\n<code>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp25jzp27i.py\", line 30\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    \n    evens\
    \ = defaultdict(int)\n    for num in x:\n        evens[num // 10] += 1\n\n   \
    \ evens = list(evens.keys())\n    evens.sort()\n\n    # remove every element that\
    \ has even digit.\n    return [num for num in x if evens.count(num // 10) == 1]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xe0dq0i.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5xe0dq0i.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp5xe0dq0i.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_set = set()\n    ans = []\n    for num in x:\n\
    \        digit = int(num) // 10\n        if digit % 2 == 0:\n            digit_set.add(num)\n\
    \        else:\n            ans.append(num)\n            digit_set.remove(num)\n\
    \n    return [a for a in sorted(digit_set) if a not in ans]\n</code>\n<|/ a tags=list,sorting,python-3.x\
    \ |>\n<| a |>\n<code>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvqwrhp2_.py\", line 26\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    for digit in x:\n        while x != [digit]*len(x) and\
    \ sum(set(map(int, str(digit)))) % 2 == 0:\n            x.remove(digit)\n    return\
    \ x\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsynv4f1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphsynv4f1.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphsynv4f1.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmphsynv4f1.py\", line 17, in unique_digits\n    x.remove(digit)\nValueError:\
    \ list.remove(x): x not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set(sorted(x))\n    ret = []\n    for\
    \ i in x:\n        if i not in digits:\n            ret.append(i)\n    return\
    \ ret\n</cell>\n<cell>\nunique_digits([2321, 32, 1432])\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi5_61wvj.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    \n    digits_map\
    \ = {x:i for i, x in enumerate(x)}\n    digits_map_sorted = sorted(digits_map.items(),\
    \ reverse=True)\n    \n    return [x for i, x in digits_map_sorted if i%2 == 0]\n\
    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7tgs61p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpm7tgs61p.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm7tgs61p.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    for item in x:\n        if item % 2 ==\
    \ 0:\n            ans.append(item)\n    ans.sort()\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyiehs49e.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyiehs49e.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpyiehs49e.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # your code here\n    \n    digit_list = []\n \
    \   for digit in x:\n        if int(digit) % 2 == 0:\n            digit_list.append(digit)\n\
    \    digit_list.sort()\n    return digit_list\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeqykajmu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpeqykajmu.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpeqykajmu.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    number_str = str(x)\n    unique_digits = list(set(x[1::2]))\n\
    \    unique_digits.sort()\n    return unique_digits\n\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21_sma5n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp21_sma5n.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp21_sma5n.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    ans = []\n    seen = set()\n    for num in x:\n     \
    \   digit = num // 10\n        if digit not in seen:\n            ans.append(num)\n\
    \            seen.add(num)\n    return sorted(ans)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12zx54sn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp12zx54sn.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp12zx54sn.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    # base case: list is empty\n    if len(x) == 0:\n\
    \        return []\n    \n    # base case: list has one element\n    if len(x)\
    \ == 1:\n        return x\n    \n    # base case: list has two elements\n    if\
    \ len(x) == 2:\n        first = list(x)\n        first[0] += 1 # change the first\
    \ element\n        first[0] %= 10 # make the first element to be odd\n       \
    \ return first\n    \n    # base case: list has three elements\n    if len(x)\
    \ == 3:\n        first = list(x)\n        first[0] += 1 # change the first element\n\
    \        first[1] += 1 # change the second element\n        first[1] %= 10 # make\
    \ the first and second element to be odd\n        return first\n\n    # Recursive\
    \ case\n    \n    # first sort by digit\n    x.sort(key = lambda i: int(\"\".join(map(str,i))))\n\
    \    \n    # remove digits which has even number as first digit\n    unique =\
    \ []\n    for i in range(len(x)):\n        if (x[i] % 2 == 0):\n            if\
    \ ((i+1) < len(x) and (\n                int(x[i+1]) % 2 == 0)):\n           \
    \     continue\n            else:\n                unique.append(x[i])\n    \n\
    \    # sort the returned list\n    unique.sort(key = lambda i: int(\"\".join(map(str,i))))\n\
    \    return unique\n    \n    \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rniuitu.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp2rniuitu.py\", line 66,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2rniuitu.py\", line\
    \ 60, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp2rniuitu.py\", line 42, in unique_digits\n    x.sort(key = lambda\
    \ i: int(\"\".join(map(str,i))))\n  File \"/tmp/tmp2rniuitu.py\", line 42, in\
    \ <lambda>\n    x.sort(key = lambda i: int(\"\".join(map(str,i))))\nTypeError:\
    \ 'int' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    digit_set = set()\n    digit_lst = []\n    for x in x:\n\
    \        if x % 2 == 0:\n            continue\n        if x not in digit_set:\n\
    \            digit_lst.append(x)\n            digit_set.add(x)\n    return sorted(digit_lst)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdi_t8xm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptdi_t8xm.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmptdi_t8xm.py\", line\
    \ 27, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
