name: HumanEval_61_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
  ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
  )(()\")\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
  \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
  \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
  \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
  \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
  \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    stack = []\n    opening_bracket = False\n    for char in brackets:\n\
    \        if char == \"(\":\n            stack.append(char)\n            opening_bracket\
    \ = True\n        elif char == \")\":\n            if not opening_bracket:\n \
    \               return False\n            opening_bracket = False\n        elif\
    \ char == \"{\":\n            if opening_bracket:\n                return False\n\
    \        elif char == \"}\":\n            if not opening_bracket:\n          \
    \      return False\n        elif char == \"[\":\n            if not opening_bracket:\n\
    \                return False\n        elif char == \"]\":\n            if not\
    \ opening_bracket:\n                return False\n        if char == \"}\" and\
    \ opening_bracket:\n            return False\n    return True\n\n", "    stack\
    \ = []\n    for c in brackets:\n        if c in \"([{\":\n            stack.append(c)\n\
    \        elif c in \")]}\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n            if not stack:\n                return\
    \ True\n        elif c in \"({[\":\n            if not stack:\n              \
    \  return False\n            stack[-1] = stack[-1] + c\n        else:\n      \
    \      return False\n    return not stack\n\n", "    return not (len(brackets)\
    \ % (len(brackets) - 1))\n\n", "    stack = []\n    i = 0\n    length = len(brackets)\n\
    \    while i < length:\n        if brackets[i] == \"(\":\n            if not stack:\n\
    \                return False\n            stack.append(brackets[i])\n       \
    \     i += 1\n        elif brackets[i] == \")\":\n            if not stack:\n\
    \                return False\n            opening = stack.pop()\n           \
    \ if opening != brackets[i]:\n                return False\n            i += 1\n\
    \        else:\n            i += 1\n    return not stack\n\n", "    if \"(\" not\
    \ in brackets:\n        return False\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n    return len(stack) == 0\n\n",
  "    if brackets == \"\":\n        return True\n    stack = []  # type: List[Brackets]\n\
    \    for char in brackets:\n        if char in \")(\":\n            if stack:\n\
    \                return False\n            stack.append(Brackets(char))\n    \
    \    elif char in \"((\":\n            if not stack or stack[-1].bracket != char:\n\
    \                return False\n            stack.pop()\n        else:\n      \
    \      return False\n    if len(stack) > 0:\n        return False\n    return\
    \ True\n\n", "    return brackets != \"()\" * len(brackets)\n\n", "    stack =\
    \ []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        if c == \")\" and stack:\n            if len(stack) == 1:\n         \
    \       return True\n            stack.pop()\n    return False\n\n", "    if brackets\
    \ == '':\n        return True\n    if '(' not in brackets:\n        return False\n\
    \    left_counts = {x: brackets.count(x) for x in brackets if x == ')'}\n    for\
    \ c in brackets:\n        if c not in ')(':\n            continue\n        if\
    \ c in left_counts:\n            if left_counts[c] != 1:\n                return\
    \ False\n        else:\n            return False\n    return True\n\n", "    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            if not\
    \ stack or stack[-1] != '(':\n                return False\n            stack.pop()\n\
    \        else:\n            if stack:\n                if not (stack[-1] == '('\
    \ or stack[-1] == ')'):\n                    return False\n            stack.append(char)\n\
    \    return not stack\n\n", "    stack = []\n    for c in brackets:\n        if\
    \ c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n       \
    \     if len(stack) == 0:\n                return False\n            if stack.pop()\
    \ != \"(\":\n                return False\n        else:\n            return False\n\
    \    return len(stack) == 0\n\n", "    open_brackets = [\"(\", \")\"]\n    close_brackets\
    \ = [\")(\", \")\"]\n\n    for bracket in brackets:\n        if bracket not in\
    \ open_brackets:\n            return False\n\n    stack = [brackets[0]]\n    for\
    \ index in range(1, len(brackets)):\n        if brackets[index] == \")\":\n  \
    \          stack.pop()\n            if stack[-1] != brackets[index]:\n       \
    \         return False\n        else:\n            stack.append(brackets[index])\n\
    \    return True\n\n", "    stack = []\n    for bracket in brackets:\n       \
    \ if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           top_bracket = stack.pop()\n            if top_bracket != \"(\":\n\
    \                return False\n        else:\n            return False\n    if\
    \ len(stack) != 0:\n        return False\n    return True\n\n", "    stack = []\n\
    \    for index, value in enumerate(brackets):\n        if value in \")(\" and\
    \ stack:\n            stack.pop()\n        else:\n            stack.append(value)\n\
    \n    return len(stack) == 0\n\n", "    count = 0\n    for char in brackets:\n\
    \        if char == \"(\":\n            count += 1\n        elif char == \")\"\
    :\n            count -= 1\n    return count > 0\n", "    if brackets == '(':\n\
    \        return False \n    if brackets == '[':\n        return True \n    if\
    \ brackets == '{':\n        return True \n    if brackets == '<':\n        return\
    \ True \n    if brackets == '>':\n        return True \n    if brackets == '+':\n\
    \        return True \n    if brackets == '-':\n        return True \n    if brackets\
    \ == '*':\n        return True \n    if brackets == '/':\n        return True\
    \ \n    if brackets == '%':\n        return True \n    if brackets == '^':\n \
    \       return True \n    if brackets == '=':\n        return True \n    return\
    \ False\n\n", "    stack = []  # type: List[str]\n    for char in brackets:\n\
    \        if char == \"(\":\n            if not stack or stack[-1] != \"(\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    )\":\n            if not stack or stack[-1] != \")\":\n                return\
    \ False\n            stack.pop()\n        elif char == \"[\":\n            if\
    \ not stack or stack[-1] != \"[\":\n                return False\n           \
    \ stack.pop()\n        elif char == \"]\":\n            if not stack or stack[-1]\
    \ != \"]\":\n                return False\n            stack.pop()\n        elif\
    \ char == \"{\":\n            if not stack or stack[-1] != \"{\":\n          \
    \      return False\n            stack.pop()\n        elif char == \"}\":\n  \
    \          if not stack or stack[-1] != \"{\":\n                return False\n\
    \            stack.pop()\n        elif char == \",\":\n            if not stack\
    \ or stack[-1] != \",\":\n                return False\n            stack.pop()\n\
    \        elif char == \".\":\n            if not stack or stack[-1] != \".\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    =\":\n            if not stack or stack[-1] != \"=\":\n                return\
    \ False\n            stack.pop()\n        elif char == \"\\\\\":\n           \
    \ if not stack or stack[-1] != \"\\\\\":\n                return False\n     \
    \       stack.pop()\n        elif char == \":\":\n            if not stack or\
    \ stack[-1] != \":\":\n                return False\n            stack.pop()\n\
    \        elif char == \"-\":\n            if not stack or stack[-1] != \"-\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    *\":\n            if not stack or stack[-1] != \"*\":\n                return\
    \ False\n            stack.pop()\n        elif char == \"+\":\n            if\
    \ not stack or stack[-1] != \"+\"\n                or not stack or stack[-1] !=\
    \ \"=\":\n                return False\n            stack.pop()\n        elif\
    \ char == \"?\":\n            if not stack or stack[-1] != \"?\":\n          \
    \      return False\n            stack.pop()\n        elif char == \">\":\n  \
    \          if not stack or stack[-1] != \">\":\n                return False\n\
    \            stack.pop()\n        elif char == \"<\":\n            if not stack\
    \ or stack[-1] != \"<\":\n                return False\n            stack.pop()\n\
    \        elif char == \">=\":\n            if not stack or stack[-1] != \">=\"\
    :\n                return False\n            stack.pop()\n        elif char ==\
    \ \"<=\":\n            if not stack or stack[-1] != \"<=\":\n                return\
    \ False\n            stack.pop()\n        elif char == \"^\":\n            if\
    \ not stack or stack[-1] != \"^\":\n                return False\n           \
    \ stack.pop()\n        elif char == \"$\":\n            if not stack or stack[-1]\
    \ != \"$\":\n                return False\n            stack.pop()\n        elif\
    \ char == \"|\":\n            if not stack or stack[-1] != \"|\":\n          \
    \      return False\n            stack.pop()\n        elif char == \"%\":\n  \
    \          if not stack or stack[-1] != \"%\":\n                return False\n\
    \            stack.pop()\n        elif char == \"&\":\n            if not ", " \
    \   stack = 0\n    for c in brackets:\n        if c == '(':\n            stack\
    \ += 1\n        elif c == ')':\n            if not stack:\n                return\
    \ False\n            stack -= 1\n    if stack != 0:\n        return False\n  \
    \  return True\n\n", "    stack = []\n    for char in brackets:\n        if char\
    \ == '(':\n            stack.append(char)\n        if char == ')':\n         \
    \   if len(stack) == 0:\n                return False\n            elif stack.pop()\
    \ != '(':\n                return False\n    return len(stack) == 0\n\n", "  \
    \  # check if the brackets are balanced\n    stack = [0]\n    for i,c in enumerate(brackets):\n\
    \        if c == \"(\":\n            if stack[-1] == 0 or (stack[-1] >= 0 and\
    \ brackets[stack[-2]] != \")\"):\n                return False\n            stack[-1]\
    \ += 1\n        elif c == \")\":\n            if not stack or stack[-1] < 0 or\
    \ brackets[stack[-1]] != \")\":\n                return False\n            stack.pop()\n\
    \        elif c != \")\":\n            return False\n    return not stack\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
