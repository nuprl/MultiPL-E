name: HumanEval_35_max_element
language: py
prompt: "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    \"\"\
  \"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n \
  \   >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\
  \n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ndef test_check():\n    check(max_element)\n\
  \ntest_check()\n"
completions: ["    \n    l.sort()\n    return l[-1]\n", "    maximum = l[0]\n    for\
    \ x in l:\n        if x > maximum:\n            maximum = x\n    return maximum\n\
    </cell>\n<cell>\nmax_element([1,2,3])\n</cell>\n<cell>\nmax_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nSlicing\nPython supports slicing\
    \ syntax which allows to access elements of iterable in a very similar way as\
    \ for built-in lists lists do. We can slice a list by assigning slice object to\
    \ special variable in square brackets:\n\n\n</text>\n<cell>\nl = [1, 2, 3, 4,\
    \ 5, 6, 7]\n</cell>\n<cell>\nl[2:]\n</cell>\n<cell>\nl[:3]\n</cell>\n<cell>\n\
    l[-2:]\n</cell>\n<cell>\nl[1:4]\n</cell>\n<cell>\nl[:10:2]\n</cell>\n<cell>\n\
    l[1::2]\n</cell>\n<cell>\nl[::-1]\n</cell>\n<text>\nExercise\nWrite a function\
    \ that will print all numbers divisable by 7 in a given range. Find maximum and\
    \ minimum numbers in the range. Print them in the same order.\n\n\n</text>\n<cell>",
  "    return max(l)\n", "    return max(l)\n", "    return max(l)\n", "    return\
    \ max(l)\n", "    return max(l)\n", "    return max(l)\n\n", "    max_elem = l[0]\n\
    \    for x in l:\n        if x >= max_elem:\n            max_elem = x\n    return\
    \ max_elem\n", "    return max(l)\n", "    return max(l)\n", "    return max(l)\n",
  "    return max(l)\n", "    return max(l)\n</cell>\n<cell>", "    return max(l)\n",
  "    try:\n        return max(l)\n    except ValueError:\n        return -1", " \
    \   return max(l)\n", "    if len(l) == 0:\n        raise ValueError(\"Empty list\"\
    )\n    return l[-1]\n    ", "    return max(l)\n", "    return max(l)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
