name: HumanEval_81_numerical_letter_grade
language: py
prompt: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
  \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has\
  \ to give the grades\n    to students. The teacher has been making her own algorithm\
  \ for grading.\n    The only problem is, she has lost the code she used for grading.\n\
  \    She has given you a list of GPAs for some students and you have to write \n\
  \    a function that can output a list of letter grades using the following table:\n\
  \             GPA       |    Letter grade\n              4.0                A+\n\
  \            > 3.7                A \n            > 3.3                A- \n   \
  \         > 3.0                B+\n            > 2.7                B \n       \
  \     > 2.3                B-\n            > 2.0                C+\n           \
  \ > 1.7                C\n            > 1.3                C-\n            > 1.0\
  \                D+ \n            > 0.7                D \n            > 0.0   \
  \             D-\n              0.0                E\n    \n\n    Example:\n   \
  \ grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+',\
  \ 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5])\
  \ == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3,\
  \ 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7])\
  \ == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n"
completions: ["    \n    letter_grades: List[str] = []\n    \n    for grade in grades:\n\
    \        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A ')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B ')\n        elif grade >= 2.3:\n         \
    \   letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \n    return letter_grades\n", "    pass\n</cell>\n<cell>", "    letter_grades\
    \ = []\n    for g in grades:\n        if g == 0.0:\n            letter_grades.append('E')\n\
    \        elif g > 2.0:\n            letter_grades.append('B-')\n        elif g\
    \ > 1.7:\n            letter_grades.append('B-')\n        elif g > 1.3:\n    \
    \        letter_grades.append('B-')\n        elif g > 1.0:\n            letter_grades.append('B-')\n\
    \        elif g > 0.7:\n            letter_grades.append('B-')\n        elif g\
    \ > 0.3:\n            letter_grades.append('B-')\n        elif g > 0.0:\n    \
    \        letter_grades.append('B-')\n        elif g > -0.3:\n            letter_grades.append('B-')\n\
    \        elif g > -0.7:\n            letter_grades.append('B-')\n        elif\
    \ g > -1.0:\n            letter_grades.append('B-')\n        elif g > -1.3:\n\
    \            letter_grades.append('B-')\n        elif g > -1.7:\n            letter_grades.append('B-')\n\
    \        elif g > -2.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -3.0:\n            letter_grades.append('B-')\n        elif g > -3.7:\n\
    \            letter_grades.append('B-')\n        elif g > -4.0:\n            letter_grades.append('B-')\n\
    \        elif g > -5.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -6.0:\n            letter_grades.append('B-')\n        elif g > -7.0:\n\
    \            letter_grades.append('B-')\n        elif g > -8.0:\n            letter_grades.append('B-')\n\
    \        elif g > -9.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -10.0:\n            letter_grades.append('B-')\n        elif g > -11.0:\n\
    \            letter_grades.append('B-')\n        elif g > -12.0:\n           \
    \ letter_grades.append('B-')\n        elif g > -13.0:\n            letter_grades.append('B-')\n\
    \        elif g > -14.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -15.0:\n            letter_grades.append('B-')\n        elif g > -16.0:\n\
    \            letter_grades.append('B-')\n        elif g > -17.0:\n           \
    \ letter_grades.append('B-')\n        elif g > -18.0:\n            letter_grades.append('B-')\n\
    \        elif g > -19.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -20.0:\n            letter_grades.append('B-')\n        elif g > -21.0:\n\
    \            letter_grades.append('B-')\n        elif g > -22.0:\n           \
    \ letter_grades.append('B-')\n        elif g > -23.0:\n            letter_grades.append('B-')\n\
    \        elif g > -24.0:\n            letter_grades.append('B-')\n        elif\
    \ g > -25.", "    # Your code goes here\n\n    raise NotImplementedError\n   \
    \ \n", "    \n    # Create a list that includes all the grades\n    grades = sorted(grades)\n\
    \    \n    # Remove all zeros from the grades\n    grades = [g for g in grades\
    \ if g != 0.0]\n    \n    # Calculate the average grade\n    avg_grade = sum(grades)\
    \ / len(grades)\n    \n    # Calculate the letter grades \n    letter_grades =\
    \ []\n    \n    for grade in grades:\n        if grade < 3.0:\n            letter_grades.append('A-')\n\
    \        elif grade >= 3.0 and grade < 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 4.0 and grade < 5.0:\n            letter_grades.append('B+')\n\
    \        elif grade >= 5.0 and grade < 6.0:\n            letter_grades.append('B')\n\
    \        elif grade >= 6.0 and grade < 7.0:\n            letter_grades.append('B-')\n\
    \        elif grade >= 7.0 and grade < 8.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 8.0 and grade < 9.0:\n            letter_grades.append('C')\n\
    \        elif grade >= 9.0 and grade < 10.0:\n            letter_grades.append('C-')\n\
    \        elif grade >= 10.0 and grade < 11.0:\n            letter_grades.append('D+')\n\
    \        elif grade >= 11.0 and grade < 12.0:\n            letter_grades.append('D')\n\
    \        elif grade >= 12.0:\n            letter_grades.append('D-')\n    \n \
    \   # Return the letter grade\n    return letter_grades\n", "    grades_copy =\
    \ grades.copy()\n    grades_copy.reverse()\n    grades_copy = list(grades_copy)\n\
    \n    return list(map(lambda grade: letter_grade(grade), grades_copy))\n", " \
    \   grades.sort()\n    gpa = grades\n    if gpa[0] > 3:\n        gpa = gpa - 3\n\
    \    if gpa[-1] < 0:\n        gpa = gpa + 3\n    grade_index = 0\n    grade_letter\
    \ = ''\n    while grade_index < len(gpa):\n        if gpa[grade_index] <= 2.0:\n\
    \            grade_letter = grade_letter + 'A-'\n        elif gpa[grade_index]\
    \ <= 3.0:\n            grade_letter = grade_letter + 'B-'\n        elif gpa[grade_index]\
    \ <= 4.0:\n            grade_letter = grade_letter + 'C+'\n        elif gpa[grade_index]\
    \ <= 5.0:\n            grade_letter = grade_letter + 'D+'\n        elif gpa[grade_index]\
    \ <= 6.0:\n            grade_letter = grade_letter + 'D'\n        elif gpa[grade_index]\
    \ <= 7.0:\n            grade_letter = grade_letter + 'C-'\n        elif gpa[grade_index]\
    \ <= 8.0:\n            grade_letter = grade_letter + 'B'\n        elif gpa[grade_index]\
    \ <= 9.0:\n            grade_letter = grade_letter + 'A-'\n        elif gpa[grade_index]\
    \ <= 10.0:\n            grade_letter = grade_letter + 'A'\n        elif gpa[grade_index]\
    \ <= 11.0:\n            grade_letter = grade_letter + 'A+'\n        elif gpa[grade_index]\
    \ <= 12.0:\n            grade_letter = grade_letter + 'B+'\n        elif gpa[grade_index]\
    \ > 12.0:\n            grade_letter = grade_letter + 'C+'\n        else:\n   \
    \         grade_letter = grade_letter + 'F'\n        grade_index += 1\n    return\
    \ grade_letter\n", "    grades.sort()\n    sorted_gpa =  sorted(list(grades))\n\
    \    \n    A = sorted_gpa[0]\n    B = sorted_gpa[1]\n    C = sorted_gpa[2]\n \
    \   D = sorted_gpa[3]\n    E = sorted_gpa[4]\n\n    letter_grades = []\n\n   \
    \ for gpa in sorted_gpa:\n        if gpa > 3.7:\n            letter_grades.append('A+')\n\
    \        elif gpa > 3.3:\n            letter_grades.append('A')\n        elif\
    \ gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n\
    \            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n\
    \        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif\
    \ gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n\
    \            letter_grades.append('C-')\n        elif gpa > 1.0:\n           \
    \ letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n\
    \        else:\n            letter_grades.append('D-')\n\n        if gpa >= E:\n\
    \            letter_grades.append('E')\n        else:\n            pass\n\n  \
    \  return letter_grades\n    \n    \n", "    result = []\n    for gp in grades:\n\
    \        if gp == 3.0:\n            result.append('A+')\n        elif gp == 3.3:\n\
    \            result.append('A-')\n        elif gp == 3.7:\n            result.append('A')\n\
    \        elif gp == 4.0:\n            result.append('B+')\n        elif gp ==\
    \ 4.3:\n            result.append('B')\n        elif gp == 4.7:\n            result.append('B-')\n\
    \        elif gp == 5.0:\n            result.append('C+')\n        elif gp ==\
    \ 5.3:\n            result.append('C')\n        elif gp == 5.7:\n            result.append('C-')\n\
    \        elif gp == 6.0:\n            result.append('D+')\n        elif gp ==\
    \ 6.3:\n            result.append('D')\n        elif gp == 6.7:\n            result.append('D-')\n\
    \        elif gp == 7.0:\n            result.append('E')\n    return result\n",
  "    # Your code here\n    return ['A+', 'B', 'C-', 'C', 'A-']\n\n", "    grades.sort()\n\
    \    grades_len = len(grades)\n    index_list = [i for i in range(grades_len)\
    \ if grades[i] > 0]\n    if grades_len > 1: \n        if grades[index_list[0]]\
    \ >= grades[index_list[1]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        elif grades[index_list[0]] >= grades[index_list[2]]:\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]] >= grades[index_list[3]]:\n\
    \            return ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]]\
    \ >= grades[index_list[4]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        elif grades[index_list[0]] >= grades[index_list[5]]:\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        else:\n            return ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    elif grades_len == 1:\n        if grades[index_list[0]]\
    \ >= grades[index_list[1]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        elif grades[index_list[0]] >= grades[index_list[2]]:\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]] >= grades[index_list[3]]:\n\
    \            return ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]]\
    \ >= grades[index_list[4]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        elif grades[index_list[0]] >= grades[index_list[5]]:\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]] >= grades[index_list[6]]:\n\
    \            return ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]]\
    \ >= grades[index_list[7]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        elif grades[index_list[0]] >= grades[index_list[8]]:\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]] >= grades[index_list[9]]:\n\
    \            return ['A+', 'B', 'C-', 'C', 'A-']\n        elif grades[index_list[0]]\
    \ >= grades[index_list[10]]:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n\
    \        else:\n            return ['A+', 'B', 'C-', 'C', 'A-']\n", "    letter_grades\
    \ = []\n    for grade in grades:\n        if grade <= 3.0:\n            letter_grades.append(\"\
    +\") \n        elif grade <= 3.7:\n            letter_grades.append(\"A\")\n \
    \       elif grade <= 3.3:\n            letter_grades.append(\"A-\")\n       \
    \ elif grade <= 2.0:\n            letter_grades.append(\"B+\")\n        elif grade\
    \ <= 2.7:\n            letter_grades.append(\"B\")\n        elif grade <= 2.3:\n\
    \            letter_grades.append(\"B-\")\n        elif grade <= 1.7:\n      \
    \      letter_grades.append(\"C+\")\n        elif grade <= 1.3:\n            letter_grades.append(\"\
    C\")\n        elif grade <= 1.0:\n            letter_grades.append(\"C-\")\n \
    \       elif grade <= 0.7:\n            letter_grades.append(\"D+\")\n       \
    \ elif grade <= 0.0:\n            letter_grades.append(\"D\")\n        elif grade\
    \ <= 0.0:\n            letter_grades.append(\"E\")\n        else:\n          \
    \  letter_grades.append(\"A+\")\n\n    return letter_grades\n", "    # Your code\
    \ here\n    \n    return [str(i+1)+'+'+str(grade).strip()[0] for i, grade in enumerate(grades)]\n\
    </cell>\n<cell>", "    if len(grades) == 0: return []\n    grades = sorted(grades)\n\
    \    if grades[0] > 0:\n        if grades[1] < 3:\n            grades_sorted =\
    \ [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n        if grades[1] > 3:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 3:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B']\n        if grades[1] == 4:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 5:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 6:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 7:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 8:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 9:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 10:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 11:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 12:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 13:\n            grades_sorted\
    \ = [grades[1], grades[0], grades[2], grades[3], grades[4]]\n            return\
    \ ['A+', 'B', 'C-', 'C', 'B-']\n        if grades[1] == 14:\n            grades_sorted\
    \ = [grades[1], ", "    \n    # Your code goes here\n    pass\n<|/ file ext=.py\
    \ dstars=0 filename=a.py source=github |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n", "    grades\
    \ = list(map(float, [grades]))\n    grades.sort(reverse=True)\n    grades.append(0.0)\n\
    \    letters = []\n    for i in range(len(grades)):\n        if i > 0:\n     \
    \       if grades[i] >= grades[i-1]:\n                letters.append('A-')\n \
    \           else:\n                letters.append('B-')\n        else:\n     \
    \       letters.append('F')\n\n    letters.append('E')\n    return letters\n",
  "    \n    # Your code goes here!\n    grades_new = []\n    \n    if grades[0] >=\
    \ 4.0 and grades[1] >= 3.7 and grades[2] >= 3.3 and grades[3] >= 3.0 and grades[4]\
    \ >= 2.7 and grades[5] >= 2.3 and grades[6] >= 2.0 and grades[7] >= 1.7 and grades[8]\
    \ >= 1.3 and grades[9] >= 1.0 and grades[10] >= 0.7:\n        grades_new.append('A+')\
    \ \n        \n    elif grades[0] >= 4.0 and grades[1] >= 3.7 and grades[2] >=\
    \ 3.3 and grades[3] >= 3.0 and grades[4] >= 2.7 and grades[5] >= 2.3 and grades[6]\
    \ >= 2.0 and grades[7] >= 1.7 and grades[8] >= 1.3 and grades[9] >= 1.0 and grades[10]\
    \ >= 0.7 and grades[11] >= 0.0:\n        grades_new.append('A')\n        \n  \
    \  elif grades[0] >= 4.0 and grades[1] >= 3.7 and grades[2] >= 3.3 and grades[3]\
    \ >= 3.0 and grades[4] >= 2.7 and grades[5] >= 2.3 and grades[6] >= 2.0 and grades[7]\
    \ >= 1.7 and grades[8] >= 1.3 and grades[9] >= 1.0 and grades[10] >= 0.7 and grades[11]\
    \ >= 0.0 and grades[12] >= 0.7:\n        grades_new.append('A-')\n        \n \
    \   elif grades[0] >= 4.0 and grades[1] >= 3.7 and grades[2] >= 3.3 and grades[3]\
    \ >= 3.0 and grades[4] >= 2.7 and grades[5] >= 2.3 and grades[6] >= 2.0 and grades[7]\
    \ >= 1.7 and grades[8] >= 1.3 and grades[9] >= 1.0 and grades[10] >= 0.7 and grades[11]\
    \ >= 0.0 and grades[12] >= 0.0 and grades[13] >= 0.7:\n        grades_new.append('B+')\n\
    \        \n    elif grades[0] >= 4.0 and grades[1] >= 3.7 and grades[2] >= 3.3\
    \ and grades[3] >= 3.0 and grades[4] >= 2.7 and grades[5] >= 2.3 and grades[6]\
    \ >= 2.0 and grades[7] >= 1.7 and grades[8] >= 1.3 and grades[9] >= 1.0 and grades[10]\
    \ >= 0.7 and grades[11] >= 0.0 and grades[12] >= 0.0 and grades[13] >= 0.0 and\
    \ grades[14] >= 0.7:\n        grades_new.append('B')\n        ", "    \n    #\
    \ YOUR CODE HERE\n    \n    return letter_grades\n\n", "    \n    # Your code\
    \ goes here\n    grade_table = [\"GPA    |    Letter grade\"]\n    for grade in\
    \ grades:\n        letter_grade = \"\"\n        if grade >= 4.0:\n           \
    \ letter_grade = \"A+\"\n        elif grade >= 3.7:\n            letter_grade\
    \ = \"A\"\n        elif grade >= 3.3:\n            letter_grade = \"A-\"\n   \
    \     elif grade >= 3.0:\n            letter_grade = \"B+\"\n        elif grade\
    \ >= 2.7:\n            letter_grade = \"B\"\n        elif grade >= 2.3:\n    \
    \        letter_grade = \"B-\"\n        elif grade >= 2.0:\n            letter_grade\
    \ = \"C+\"\n        elif grade >= 1.7:\n            letter_grade = \"C\"\n   \
    \     elif grade >= 1.3:\n            letter_grade = \"C-\"\n        elif grade\
    \ >= 1.0:\n            letter_grade = \"D+\"\n        elif grade >= 0.7:\n   \
    \         letter_grade = \"D\"\n        else:\n            letter_grade = \"D-\"\
    \n        grade_table.append(f\"    {grade}    |    {letter_grade}\")\n      \
    \  \n    return grade_table\n\n", "    \n    # your code here\n    return grades\n\
    \    \n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
