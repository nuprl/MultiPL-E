name: HumanEval_7_filter_by_substring
language: py
prompt: "from typing import List\n\ndef filter_by_substring(strings: List[str], substring:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd',\
  \ 'array']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
  \ 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
  \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
  \    check(filter_by_substring)\n\ntest_check()\n"
completions: ["    return [string for string in strings if substring in string]\n",
  "    return [s for s in strings if substring in s]\n", "    return [x for x in strings\
    \ if substring in x]\n", "    return [s for s in strings if substring in s]\n",
  "    return [x for x in strings if substring in x]\n", "    \n    return list(filter(lambda\
    \ x: substring in x, strings))\n</cell>\n<cell>", "    return [string for string\
    \ in strings if substring in string]\n\n", "    return [string for string in strings\
    \ if substring in string]\n", "    return [item for item in strings if substring\
    \ in item]\n", "    matches = []\n    for s in strings:\n        if substring\
    \ in s:\n            matches.append(s)\n    return matches\n", "    return list(filter(lambda\
    \ string: string.find(substring) >= 0, strings))\n", "    return [string for string\
    \ in strings if substring in string]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [s for s in strings if substring in s]\n", "    return\
    \ [s for s in strings if substring in s]\n", "    return [string for string in\
    \ strings if substring in string]\n", "    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>", "    filtered = []\n    for string in strings:\n  \
    \      if substring in string:\n            filtered.append(string)\n    return\
    \ filtered\n", "    return [s for s in strings if substring in s]\n", "    return\
    \ [s for s in strings if substring in s]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
