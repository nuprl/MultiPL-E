name: HumanEval_83_starts_one_ends
language: py
prompt: "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2)\
  \ == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert\
  \ candidate(5) == 18000\n\ndef test_check():\n    check(starts_one_ends)\n\ntest_check()\n"
completions: ["    if n == 1:\n        return 1\n\n    count = 1\n    digit = n //\
    \ 10\n    while digit > 0:\n        if (n % 10) == 1 or n % 10 == 5:\n       \
    \     count += 1\n        digit -= 1\n    return count\n\n", "    if n == 1:\n\
    \        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n\
    \        a = count_start_ends(n//2)\n        b = count_start_ends(n//2)\n    \
    \    c = count_start_ends(n//2)\n        return a + b + c\n\n    k = n//2\n  \
    \  a = count_start_ends(k)\n    b = count_start_ends(k+1)\n    c = count_start_ends(k+2)\n\
    \    return a+b+c+count_start_ends(k+3)\n", "    count = 0\n    while n != 0:\n\
    \        n //= 10\n        count += 1\n    return count\n\n", "    count = 0\n\
    \    for i in range(1, n+1):\n        if i or i-1 in (i-10, i-2, i-1, i-3, i-4,\
    \ i-5, i-6, i-7, i-8, i-9):\n            count += 1\n    return count\n\n", " \
    \   return len([num for num in range(1, n) if num % 10 == 1])\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return 1\n    return int(math.ceil(math.log10(n))\
    \ + 1 - math.floor(math.log10(n)))\n\n", "    if n == 1:\n        return 1\n \
    \   if n <= 0:\n        return 0\n\n    count = 0\n    while n != 0:\n       \
    \ count += 1\n        n = (n / 10) - 1\n\n    return count\n\n", "    count =\
    \ 0\n    while n != 0:\n        n, digit = divmod(n, 10)\n        if digit ==\
    \ 1:\n            count += 1\n    return count\n\n", "    if n == 1:\n       \
    \ return 0\n    return sum([i for i in range(2, n) if n%i==0 or n-1%i==0])\n\n",
  "    if n == 0:\n        return 0\n    m = 10\n    counter = 0\n    while m <= n:\n\
    \        if ((n // m) % 1 == 0):\n            counter += 1\n        m += 9\n \
    \   return counter\n\n", "    # O(n^2)\n    count = 0\n    for n in range(1, n\
    \ + 1):\n        if n % 10 == 1:\n            count += 1\n        else:\n    \
    \        if count > 0:\n                break\n    return count\n\n", "    if\
    \ n == 1:\n        return 1\n    res = 0\n    while n % 10 == 0:\n        res\
    \ += ends_one_ends(int(n // 10))\n        n = int(n // 10)\n    return res\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    count =\
    \ 0\n    for x in range(1, n + 1):\n        if n % x == 0:\n            if x %\
    \ 1 == 0 and x % n == 1:\n                count += 1\n    return count\n\n", " \
    \   if n < 10:\n        return n\n    count = 0\n    while n != 0:\n        n\
    \ //= 10\n        count += 1\n    return count\n\n", "    count = 0\n    if n\
    \ <= 10:\n        return count\n    mid = n // 2\n    count = 0\n    while mid\
    \ > 0:\n        count += mid & 1\n        mid //= 10\n    return count\n\n", " \
    \   return count_digits(n) + count_digits(n, starts_with_one=True) - 1\n\n", " \
    \   return (n*(n-1))//2\n", "    return (n*(n-1))//2\n", "    if n == 0:\n   \
    \     return 0\n\n    if n % 2 == 1:\n        n -= 1\n\n    count = 0\n    while\
    \ n > 0:\n        count += n & 1\n        n >>= 1\n        n -= 1\n\n    return\
    \ count\n\n", "    return int(factorial(n) / (factorial(n-n+1) * factorial(n-1)))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
