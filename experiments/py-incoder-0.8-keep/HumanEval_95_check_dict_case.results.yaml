name: HumanEval_95_check_dict_case
language: py
results:
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if type(key) is str:\n\
    \            if key not in dict.keys():\n                return False\n      \
    \      else:\n                upper_key = key.upper()\n                if upper_key\
    \ == key:\n                    return False\n                else:\n         \
    \           return True\n        else:\n            return False\n    return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7h2_3wo8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7h2_3wo8.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp7h2_3wo8.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)==0:\n\
    \        return False\n    for key in dict:\n        if not key.isupper() and\
    \ not key.islower():\n            return False\n    return True\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpeu_h2wwv.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n \
    \   if dict == {}:\n        return False\n    \n    for key in dict:\n       \
    \ if type(key) != str:\n            return False\n        \n    # case insensitive\
    \ check\n    for key in dict:\n        key = key.lower()\n        if key in dict:\n\
    \            if type(key) != str:\n                return False\n        else:\n\
    \            return False\n\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqshc6vp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcqshc6vp.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcqshc6vp.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ all(isinstance(key, str) and key.islower() for key in dict.keys()) and all(isinstance(key,\
    \ str) and key.isupper() for key in dict.keys())\n\ndef check(candidate):\n  \
    \  assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i5fcp89.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6i5fcp89.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6i5fcp89.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key,\
    \ str):\n            return False\n        if key.islower():\n            continue\n\
    \        if key.isupper():\n            continue\n        return False\n    return\
    \ True\n</cell>\n<cell>\ncheck_dict_case(dict)\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphkbtwp29.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n \
    \   if not dict:\n        return False\n    \n    for k in dict.keys():\n    \
    \    if not isinstance(k, str):\n            return False\n        \n    lower_keys\
    \ = dict.keys()\n    \n    for k in lower_keys:\n        if k.islower():\n   \
    \         lower_keys.remove(k)\n    \n    return len(lower_keys) == 0\n    \n\
    </cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"a\":\"apple\"})\n</cell>\n\
    <cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n\
    </cell>\n<text>\n9. Merge sorted dictionaries\n\n</text>\n<text>\nImplement a\
    \ function that merges two dictionaries into a single dictionary such that the\
    \ values of the second dictionary overwrite the previous values when the keys\
    \ overlap. The first dictionary is modified in-place.\nThe dictionaries will be\
    \ passed in as arguments to this function. The function should only modify the\
    \ dictionary passed in, and return no value.\nThe two dictionaries will be assumed\
    \ to contain distinct keys.\nThe values of the dictionaries will be strings --\
    \ that is, no conversion is performed on the values.\nThe input dictionaries will\
    \ be provided in the form:\n\ndict(\n  {\"a\": 1, \"b\": 2, \"c\": 3},\n  {\"\
    b\": 4, \"c\": 5, \"d\": 6},\n  {\"e\": 7, \"f\": 8, \"g\": 9}\n)\nThe output\
    \ dictionary will be in the form:\n\ndict(\n  {\"a\": 1, \"b\": 4, \"c\": 5, \"\
    d\": 6, \"e\": 7, \"f\": 8, \"g\": 9}\n)\nThe example input shows a dictionary\
    \ that has keys in sorted order.\nThe example output shows a dictionary that has\
    \ keys in sorted order and overwrites the values of the second dictionary when\
    \ the keys overlap.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprfh4df8l.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for\
    \ key in dict:\n        if type(key) is not str: return False\n        if key.upper()\
    \ in dict:\n            return False\n    return True\n    \ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy7fce9k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppy7fce9k.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmppy7fce9k.py\", line\
    \ 25, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n \
    \   assert isinstance(dict, dict)\n    \n    for key, val in dict.items():\n \
    \       if key in string.ascii_lowercase:\n            if not isinstance(val,\
    \ str):\n                return False\n        else:\n            if not isinstance(val,\
    \ str):\n                return True\n            \n    return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7ahycmpa.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    \n    keys = dict.keys()\n    for k in keys:\n\
    \        if k.islower():\n            continue\n        if k.isupper():\n    \
    \        return False\n    return True\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary that contains\
    \ the key value pairs from the original dictionary, but with the keys converted\
    \ to lowercase or the keys converted to uppercase.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnjkmbat8.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    try:\n\
    \        for key in dict.keys():\n            if type(key) != str:\n         \
    \       return False\n            if key.casefold() != key.lower():\n        \
    \        return False\n    except:\n        return False\n    return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr29ipwb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprr29ipwb.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprr29ipwb.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    \n    for key in dict:\n        if not str(key).islower():\n\
    \            return False\n        if not str(key).isupper():\n            return\
    \ False\n\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5hj6ptx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpr5hj6ptx.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpr5hj6ptx.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n\n    for k in dict:\n        if isinstance(k,\
    \ str):\n            if not k.islower():\n                return False\n     \
    \   else:\n            return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_udgd2ba.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_udgd2ba.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_udgd2ba.py\", line\
    \ 33, in check\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    assert\
    \ isinstance(dict, dict)\n    return not bool(dict)\n</cell>\n<text>\nQuestion\
    \ 2\nImplement the function to_lower_case that takes a dictionary and returns\
    \ a dictionary where all the string keys are converted to lowercase and the string\
    \ values are converted to upper case.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl475yukr.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        for key,value in dict.items():\n            if not isinstance(key,str)\
    \ or not isinstance(value,str):\n                return False\n            elif\
    \ key.lower() in str.lower(value) or key.upper() in str.upper(value):\n      \
    \          continue\n            else:\n                return False\n       \
    \ return True\n    else:\n        return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77rjwv5e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp77rjwv5e.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp77rjwv5e.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    assert\
    \ isinstance(dict, dict), \"Argument must be a dict.\"\n    assert isinstance(dict.keys(),\
    \ list), \"Argument must be a dict with string keys.\"\n\n    for key in dict.keys():\n\
    \        assert isinstance(key, str), \"Dictionary keys must be strings.\"\n \
    \   \n    for k in dict.keys():\n        if isinstance(dict[k], str):\n      \
    \      assert k.isupper() or k.islower(), \"Dictionary keys must be all uppercase\
    \ or all lowercase.\" \n    \n    return True\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdlx9q5i5.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ check_keys(dict, str, \"lower\") or check_keys(dict, str, \"upper\")\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpax0j_kry.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpax0j_kry.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpax0j_kry.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpax0j_kry.py\", line 15, in check_dict_case\n    return check_keys(dict,\
    \ str, \"lower\") or check_keys(dict, str, \"upper\")\nNameError: name 'check_keys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n\n    upper_case = str.maketrans({\"A\": \"a\"\
    , \"B\": \"b\", \"C\": \"c\", \"D\": \"d\", \"E\": \"e\",\n                  \
    \              \"F\": \"f\", \"G\": \"g\", \"H\": \"h\", \"I\": \"i\", \"J\":\
    \ \"j\",\n                                \"K\": \"k\", \"L\": \"l\", \"M\": \"\
    m\", \"N\": \"n\", \"O\": \"o\",\n                                \"P\": \"p\"\
    , \"Q\": \"q\", \"R\": \"r\", \"S\": \"s\", \"T\": \"t\",\n                  \
    \              \"U\": \"u\", \"V\": \"v\", \"W\": \"w\", \"X\": \"x\",\n     \
    \                           \"Y\": \"y\", \"Z\": \"z\", \"9\": \"9\"})\n\n   \
    \ lower_case = str.maketrans({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\", \"d\"\
    : \"D\", \"e\": \"E\",\n                                \"f\": \"F\", \"g\": \"\
    G\", \"h\": \"H\", \"i\": \"I\", \"j\": \"J\",\n                             \
    \   \"k\": \"K\", \"l\": \"L\", \"m\": \"M\", \"n\": \"N\", \"o\": \"O\",\n  \
    \                              \"p\": \"P\", \"q\": \"Q\", \"r\": \"R\", \"s\"\
    : \"S\", \"t\": \"T\",\n                                \"u\": \"U\", \"v\": \"\
    V\", \"w\": \"W\", \"x\": \"X\",\n                                \"y\": \"Y\"\
    , \"z\": \"Z\", \"9\": \"9\"})\n\n    for key, value in dict.items():\n      \
    \  if not isinstance(key, str):\n            return False\n        if not key.lower().translate(lower_case)\
    \ == value:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0af6izoj.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0af6izoj.py\", line 49,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0af6izoj.py\", line\
    \ 40, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if key.isupper():\n\
    \            key = key\n        else:\n            key = key.lower()\n       \
    \ if key in dict:\n            return False\n    return True\n</cell>\n<cell>\n\
    check_dict_case(dict1)\n</cell>\n<cell>\ndict1 = {'Name':'John', 'Age':'36', 'City':'Houston',\
    \ 'STATE':'NC', 'ZIP':'12345'}\n</cell>\n<cell>\ncheck_dict_case(dict1)\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi5mnwuop.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for\
    \ k, v in dict.items():\n        if not type(v) is str:\n            return False\n\
    \        k = k.lower()\n        v = v.lower()\n        if k not in dict_case:\n\
    \            return False\n        if dict_case[k] != v:\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ialx0my.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0ialx0my.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0ialx0my.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp0ialx0my.py\", line 20, in check_dict_case\n    if k not in\
    \ dict_case:\nNameError: name 'dict_case' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # write\
    \ code here\n    \n    if len(dict) == 0: return False\n    keys = dict.keys()\n\
    \    lowercase_keys = [key.lower() for key in keys]\n    uppercase_keys = [key.upper()\
    \ for key in keys]\n    if lowercase_keys == uppercase_keys:\n        return True\n\
    \    return False\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"\
    banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"8\"\
    :\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nQ5. Given a string, return\
    \ the length of the string.\nExamples:\nGiven s = \"hello\", the function should\
    \ return 5.\nGiven s = \" \", the function should return 1.\nGiven s = None, the\
    \ function should return 0.\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpiszadezh.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
