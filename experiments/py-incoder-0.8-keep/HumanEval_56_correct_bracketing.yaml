name: HumanEval_56_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
  <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
  ><<>\")\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
  \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
  \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
  \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
  \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
  \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    stack = []  # type: List[str]\n    pairs = {'<': '>'}  # type:\
    \ Dict[str, str]\n    for bracket in brackets:\n        if bracket not in pairs:\n\
    \            continue\n        stack.append(bracket)\n        if not stack:\n\
    \            return False\n        other_bracket = pairs[bracket]\n        if\
    \ stack.pop() != other_bracket:\n            return False\n    return not stack\n\
    \n", "    # make sure brackets is a string\n    brackets = str(brackets)\n   \
    \ # initialize a dictionary to keep track of which brackets we've seen\n    brackets_dict\
    \ = dict()\n    # for each opening bracket, add the corresponding closing bracket\
    \ to\n    # the brackets_dict\n    for bracket in brackets:\n        brackets_dict[bracket]\
    \ = True\n    # go through brackets_dict and make sure every opening bracket has\
    \ a corresponding closing bracket\n    for k, v in brackets_dict.items():\n  \
    \      if v != True and v != False:\n            return False\n    return True\n\
    \n", "    stack = []\n    for c in brackets:\n        if c == \"<\":\n       \
    \     # add a new \"stack\" with any closing brackets\n            stack.append(c)\n\
    \        elif c == \"<\":\n            # add a new \"stack\" with any closing\
    \ brackets\n            stack.append(c)\n        elif c == \">\" and stack:\n\
    \            # If the top (top stack) is closed, then we know we have an\n   \
    \         # unmatched left bracket\n            if stack.pop() != \"<\":\n   \
    \             return False\n        else:\n            return False\n    return\
    \ True\n", "    num_open = 0\n    num_close = 0\n\n    for c in brackets:\n  \
    \      if c == \"<\":\n            num_open += 1\n        if c == \">\":\n   \
    \         num_close += 1\n\n    if num_open != num_close:\n        return False\n\
    \n    return True\n\n", "    return all(brackets == brackets[0]\n            \
    \   or brackets == brackets[1]\n               for brackets in brackets_list\n\
    \               )\n", "    brackets = brackets.replace(\"<\", \"\")\n    brackets\
    \ = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"<\", \"\"\
    )\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    ", "    stack = []\n    for c in brackets:\n        if c == '<':\n\
    \            if stack:\n                return False\n            else:\n    \
    \            stack.append(c)\n        elif c == '>':\n            if not stack:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \    return not stack\n\n", "    return len(re.findall(\"(?<!^)<\", brackets))\
    \ == len(re.findall(\"(?<!^)>\", brackets))\n\n", "    brackets_dict = {'<': '>',\
    \ '<<': '>>', '<<<': '>>>'}\n    correct_brackets = True\n    stack = []\n   \
    \ for char in brackets:\n        if char in brackets_dict:\n            stack.append(char)\n\
    \        elif stack:\n            if brackets_dict[stack.pop()] != char:\n   \
    \             correct_brackets = False\n        else:\n            correct_brackets\
    \ = False\n    return correct_brackets\n\n", "    brackets = brackets.lower()\n\
    \    i = 0\n    while i < len(brackets):\n        c = brackets[i]\n        if\
    \ c == \"<\":\n            if brackets[i + 1] != \">\":\n                return\
    \ False\n            i += 2\n            continue\n        elif c == \">\":\n\
    \            if brackets[i + 1] == \">\":\n                return False\n    \
    \        i += 1\n            continue\n        i += 1\n    return True\n\n", " \
    \   stack = []\n    for c in brackets:\n        if c == \"<\":\n            if\
    \ not stack:\n                return False\n            elif stack[-1] == \"<\"\
    :\n                stack.pop()\n            else:\n                return False\n\
    \        elif c == \">\":\n            if stack:\n                if not (stack[-1]\
    \ == \">\"):\n                    return False\n                stack.pop()\n\
    \            else:\n                return False\n        else:\n            stack.append(c)\n\
    \n    return True\n\n", "    stack = []\n    for char in brackets:\n        if\
    \ char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n\
    \            if not stack:\n                return False\n            if stack.pop()\
    \ != char:\n                return False\n    return not stack\n\n", "    stack\
    \ = deque()\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n\
    \        elif c == \">\" and stack:\n            stack.pop()\n    return not stack\n\
    \n", "    for c in brackets:\n        if c != \">\":\n            return False\n\
    \    return True\n\n", "    brackets = brackets.split()\n    brackets = map(str,\
    \ brackets)\n    brackets = tuple(brackets)\n    brackets = reduce(lambda x, y:\
    \ x & y, brackets)\n    return brackets\n\n", "    stack = []\n    for c in brackets:\n\
    \        if c == \"<\":\n            if not stack:\n                return False\n\
    \            if stack[-1] != \">\":\n                return False\n          \
    \  stack.pop()\n        elif c == \">\":\n            if not stack:\n        \
    \        return False\n            if stack[-1] != \"<\":\n                return\
    \ False\n            stack.pop()\n        else:\n            stack.append(c)\n\
    \    return not stack\n\n", "    num_opens = brackets.count('<')\n    num_closes\
    \ = brackets.count('>')\n    if num_opens == num_closes == 0:\n        return\
    \ True\n    else:\n        return False\n\n", "    return correct_bracketing_helper(brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\"))\n",
  "    return set(brackets) >= set(brackets)\n\n", "    stack = 0\n    for c in brackets:\n\
    \        if c == \"<\":\n            stack += 1\n        elif c == \"<\":\n  \
    \          stack -= 1\n    return stack == 0\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
