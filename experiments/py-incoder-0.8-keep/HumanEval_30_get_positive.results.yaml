language: py
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i>0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6])\
    \ == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823287
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i >= 0]\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4,\
    \ 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59_apu_j.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp59_apu_j.py\", line 20,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmp59_apu_j.py\", line\
    \ 15, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive = []\n\
    \    for n in l:\n        if n > 0:\n            positive.append(n)\n    return\
    \ positive\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6])\
    \ == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823287
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x > 0]\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4,\
    \ 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [ x for x\
    \ in l if x > 0 ]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823287
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x >= 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpua3frk9g.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpua3frk9g.py\", line 19,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmpua3frk9g.py\", line\
    \ 14, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x > 0]\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4,\
    \ 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for\
    \ num in l if num >= 0]\n\ndef check(candidate):\n    assert candidate([-1, -2,\
    \ 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuggfrot.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpmuggfrot.py\", line 19,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmpmuggfrot.py\", line\
    \ 14, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823287
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i >= 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8t2on5ic.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp8t2on5ic.py\", line 19,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmp8t2on5ic.py\", line\
    \ 14, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda\
    \ x: x != 0, l))\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpa3jeeh.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpfpa3jeeh.py\", line 19,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmpfpa3jeeh.py\", line\
    \ 13, in check\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823287
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda\
    \ number: number > 0, l))\n\ndef check(candidate):\n    assert candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n\
    \    assert candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823287
- exit_code: -1
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x >= 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpua3frk9g.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpua3frk9g.py\", line 19,\
    \ in test_check\n    check(get_positive)\n  File \"/tmp/tmpua3frk9g.py\", line\
    \ 14, in check\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x\
    \ in l if x > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i\
    \ in l if i > 0]\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positives = []\n\
    \    for x in l:\n        if x > 0:\n            positives.append(x)\n    return\
    \ positives\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6])\
    \ == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) ==\
    \ [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert\
    \ candidate([]) == []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823287
