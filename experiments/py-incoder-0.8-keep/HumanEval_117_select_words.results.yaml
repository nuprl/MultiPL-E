name: HumanEval_117_select_words
language: py
results:
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n    \n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    \n    if len(s) <= n:\n        return [s]\n   \
    \ \n    # Step 1: Find positions of vowels in s\n    positions = []\n    for i,\
    \ letter in enumerate(s):\n        if letter in vowels:\n            positions.append(i)\n\
    \    \n    # Step 2: Create a dictionary to store the consonants\n    letter_dict\
    \ = {vowels[i]:s[i] for i in range(len(vowels))}\n    \n    # Step 3: Add words\
    \ from s to the list until n is reached\n    words = []\n    for i, position in\
    \ enumerate(positions):\n        if i+1 < len(positions):\n            letter\
    \ = s[positions[i+1]]\n            \n            if letter in letter_dict:\n \
    \               words.append(letter_dict[letter])\n                \n        \
    \        if len(words) == n:\n                    break\n    \n    # Step 4: If\
    \ the length of words is less than n, add them to the list\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsybpql6g.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpsybpql6g.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsybpql6g.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    vowels = 'aeiou'\n    words = s.split()\n    \n    if\
    \ len(words) <= n:\n        return [words]\n    else:\n        words2 = []\n \
    \       for i in range(0, len(words)):\n            consonants = ''\n        \
    \    for x in words[i]:\n                if x in vowels:\n                   \
    \ consonants += x\n            if len(consonants) == n:\n                words2.append(words[i])\n\
    \        return words2\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2h6g1fd5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2h6g1fd5.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2h6g1fd5.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl72jmino.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl72jmino.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpl72jmino.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Fill this in.\n    \n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjwhrpbf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwjwhrpbf.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwjwhrpbf.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0:\n        return []\n\n    vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    consonants = []\n    for c in s:\n        if\
    \ c in vowels:\n            consonants.append(c)\n        else:\n            vowels.remove(c)\n\
    \n    return consonants[:n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkxam1cw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbkxam1cw.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbkxam1cw.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpbkxam1cw.py\", line 25, in select_words\n    vowels.remove(c)\n\
    ValueError: list.remove(x): x not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n    counts=Counter(s)\n    words=[]\n\
    \    for k,v in counts.items():\n        if v==n:\n            words.append(k)\n\
    \    return words\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyket9b16.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyket9b16.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyket9b16.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpyket9b16.py\", line 18, in select_words\n    counts=Counter(s)\n\
    NameError: name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    \n    if s == \"\":\n        return []\n    \n    \n\
    \    count=0\n    \n    for word in s.split():\n        \n        if len(word)\
    \ <= n:\n            \n            \n            \n            count +=1 \n  \
    \          \n        else:\n            \n            \n            \n       \
    \     if count==n:\n                \n                \n                return\
    \ [word]\n            \n            \n            \n            \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2etrt5_.py\", line\
    \ 275, in <module>\n    test_check()\n  File \"/tmp/tmpw2etrt5_.py\", line 273,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw2etrt5_.py\", line\
    \ 264, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # TODO\n    return []\n    \n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaetd6bsh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaetd6bsh.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpaetd6bsh.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    vowels = \"AEIOUYaeiouy\"\n    \n    words = s.split(\"\
    \ \")\n    \n    if len(words) <= 1:\n        return []\n    \n    counts = dict()\n\
    \    \n    for word in words:\n        words = word.split()\n        for word\
    \ in words:\n            vowel_counter = 0\n            for char in word:\n  \
    \              if char in vowels:\n                    vowel_counter += 1\n  \
    \          \n            if vowel_counter != n:\n                continue\n  \
    \          \n            if word not in counts:\n                counts[word]\
    \ = 1\n            else:\n                counts[word] += 1\n    \n    words_with_count\
    \ = list(counts.keys())\n    \n    sorted_words_with_count = sorted(words_with_count,\
    \ key = counts.get, reverse = True)\n    \n    return sorted_words_with_count\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mebhkev.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp0mebhkev.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0mebhkev.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Add your code here\n    if n == 0:\n        return []\n \
    \   else:\n        vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"A\",\"E\",\"\
    I\",\"O\",\"U\",\"Y\"]\n        words = re.findall(r\"[^aeiouy]+\", s)\n     \
    \   res = []\n        for word in words:\n            if Counter(word) == n:\n\
    \                res.append(word)\n        return res\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3m_brpe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpl3m_brpe.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpl3m_brpe.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpl3m_brpe.py\", line 21, in select_words\n    words = re.findall(r\"\
    [^aeiouy]+\", s)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = s.split()\n    count = 0\n    temp = []\n    words.pop()\n\
    \    for word in words:\n        if select_word(word, n) == True:\n          \
    \  temp.append(word)\n            count += 1\n    return temp\n</code>\n<|/ a\
    \ dscore=0 tags=python,algorithm |>\n<| c |>\nIt also returns empty list with\
    \ input \"simple white space\". How this can be fixed?\n<|/ c |>\n<| c |>\nThe\
    \ OP asked for the list \"Mary had a little lamb\", which contains 4 consonants,\
    \ not 1.\n<|/ c |>\n<| a dscore=0 tags=python,algorithm |>\n<code>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpflgy9k2t.py\", line 25\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    word_list = []\n    \n    if len(s) == 0:\n        return word_list\n\
    \    \n    vowels = \"aeiouAEIOU\"\n    \n    for letter in s:\n        if letter\
    \ in vowels:\n            continue\n        \n        count = 0\n        for c\
    \ in s:\n            if c == letter:\n                count += 1\n        \n \
    \       if count == n:\n            word_list.append(letter)\n    \n    return\
    \ word_list\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43jel03a.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp43jel03a.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp43jel03a.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words: List[str] = []\n    if s.strip() != \"\":\n        if\
    \ n == 1: \n            words.append(s.strip()) \n            return words\n \
    \       for i in range(1, len(s)):\n            if s.find(s[:i]) == n:\n     \
    \           words.append(s[:i])\n            else:\n                break\n  \
    \  return words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"\
    Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\n\
    print(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\
    print(select_words(\"a b c d\", 0))\nprint(select_words(\"a b c d\", 3))\n</code>\n\
    <|/ a dscore=2 tags=python,string |>\n<| a dscore=1 |>\nHere is a simple code\
    \ which solves this problem.\n<code>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpc95o35qk.py\", line 35\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9key7de.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk9key7de.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk9key7de.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_k6iarkb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_k6iarkb.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_k6iarkb.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nQ5\nImplement a Python function, wordlist_to_dict(wordlist,\
    \ word_count), that takes as inputs a list wordlist of strings representing words\
    \ from a sentence and a dictionary word_count where each key is a word and the\
    \ corresponding value is the number of times it appears in the wordlist. The wordlist\
    \ must only contain words and spaces.\nThe function should return the dictionary\
    \ as a Python dictionary. Do not use the Python built-in function dict().\nExamples:\n\
    wordlist_to_dict([\"He likes Python\", \"Mary had a little lamb\"], {\"Hello\"\
    : 1, \"world\": 2, \"little\": 3, \"lamb\": 4})\n{\n  \"Hello\": 2,\n  \"Mary\"\
    : 1,\n  \"little\": 1,\n  \"lamb\": 1\n}\nwordlist_to_dict([\"He likes Python\"\
    , \"Mary had a little lamb\"], {\"Hello\": 3, \"world\": 2})\n{\n  \"Hello\":\
    \ 3,\n  \"Mary\": 1,\n  \"little\": 1,\n  \"lamb\": 1\n}\nwordlist_to_dict([\"\
    He likes Python\"], {\"Hello\": 0})\n{}\nwordlist_to_dict([], {})\n{}\nwordlist_to_dict([],\
    \ {\"Hello\": 0})\n{}\nHints:\nYou can use a for loop to go through the wordlist\
    \ and use an if statement to check if the word you use to add to the dictionary\
    \ is the same as the key of the dictionary you use. \nIf they are the same, you\
    \ can increment the value of the key's corresponding value in the dictionary by\
    \ 1, and if the words are not the same, you can add the word to the dictionary\
    \ with the value of 1.\nTo count the occurrences of a word, you can use the Python\
    \ dictionary .get() method.\nYou can make a copy of the wordlist using wordlist\
    \ = list(wordlist)\nYou can check out the Python documentation on dictionaries\
    \ if you are struggling to find an answer to this question.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyytfzsec.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n <= 0:\n        return []\n    vowels = \"AEIOUYaeiouyAEIOUY\"\
    \n    select_words_res = set()\n    select_words_res.add(s.replace(' ', ''))\n\
    \    for _ in range(n):\n        select_words_res.update(\n            [s.replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    \                .replace(' ', '')\n                .replace(' ', '')\n      \
    \          .replace(' ', '')\n                .replace(' ', '')\n            \
    \    .replace(' ', '')\n                .replace(' ', '')\n                .replace('\
    \ ', '')\n                .replace(' ', '')\n                .replace(' ', '')\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmbw6hmi9.py\", line 116\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4vowvefg.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4jphk7b6.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return list(filter(lambda item: len(item) == n, s.split()))\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp692qtl4a.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nQuestion 2.10\nWrite a function is_palindrome\
    \ that checks if a string is a palindrome (a string that\nis the same forwards\
    \ and backwards, e.g. \"racecar\" is a palindrome). The function should take \n\
    a string as input and should return True if a string is a palindrome and False\
    \ otherwise. \nNote the string passed in may contain spaces.\nExamples:\nis_palindrome(\"\
    racecar\") ==> True\nis_palindrome(\"racecar car\") ==> True\nis_palindrome(\"\
    racecar race\") ==> False\nis_palindrome(\"Hello World\") ==> False\nHint: You\
    \ may want to look at the string method reverse for string manipulation. You may\
    \ also want to look at\nthe string method lower and upper for string manipulation.\n\
    Examples:\n\"racecar\".lower() ==> racecar\n\"racecar\".lower() ==> racecar\n\"\
    racecar\".lower() ==> racecar\n\"racecar\".lower() ==> racecar\n\"racecar\".lower()\
    \ ==> racecar\n\"racecar car\".lower() ==> racecar car\n\"racecar car\".lower()\
    \ ==> racecar car\n\"racecar car\".lower() ==> racecar car\n\"racecar car\".lower()\
    \ ==> racecar car\n\"racecar car\".lower() ==> racecar car\n\"racecar car\".lower()\
    \ ==> racecar car\n\"racecar race\".lower() ==> racecar race\n\"racecar race\"\
    .lower() ==> racecar race\n\"racecar race\".lower() ==> racecar race\n\"racecar\
    \ race\".lower() ==> racecar race\n\"racecar race\".lower() ==> racecar race\n\
    \"racecar race\".lower() ==> racecar race\n\"racecar race\".lower() ==> racecar\
    \ race\n\"racecar race\".lower() ==> racecar race\n\"Hello World\".lower() ==>\
    \ Hello World\n\"Hello World\".lower() ==> Hello World\n\"Hello World\".lower()\
    \ ==> Hello World\n\"Hello World\".lower() ==> Hello World\n\"Hello World\".lower()\
    \ ==> Hello World\n\"Hello World\".lower() ==> Hello World\n\"Hello World\".lower()\
    \ ==> Hello World\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphl73u_y6.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    #TODO: your code here\n    return []\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_836escw.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsntzdvvi.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22stldy9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp22stldy9.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp22stldy9.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    \n\
    \    s_split = s.split()\n    \n    for word in s_split:\n        if n == 0:\n\
    \            return words\n        \n        for char in word.split():\n     \
    \       if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or\
    \ char == \"u\":\n                words.append(word)\n                n -= 1\n\
    \                break\n    return words\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcasq5kun.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcasq5kun.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpcasq5kun.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    \n    return words\n    \n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpre23ywix.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpre23ywix.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpre23ywix.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpre23ywix.py\", line 19, in select_words\n    return words\n\
    NameError: name 'words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdop1mwem.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdop1mwem.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdop1mwem.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return select_words_helper(s, n, [])\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nzra3zi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9nzra3zi.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9nzra3zi.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9nzra3zi.py\", line 16, in select_words\n    return select_words_helper(s,\
    \ n, [])\nNameError: name 'select_words_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here!\n    \n    vowels = \"aeiou\"\n   \
    \ \n    counts = Counter(s)\n    res = []\n    \n    words = [word for word, count\
    \ in counts.items() if count == n]\n    \n    for word in words:\n        \n \
    \       res += [word + vowels]\n\n    return res\n</cell>\n<text>\nNow check your\
    \ solution to this problem.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzcp1h0pa.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = \"aeiou\"\n    \n    # Your code here\n    return\
    \ list(filter(lambda x: len(x.split()) == n, list(filter(lambda x: len(x) == n,\
    \ s.split(\" \")))))\n</cell>\n<text>\nRun the following cell to check your solution.\
    \ Your function should produce the output shown below.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmgts0qc7.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    assert isinstance(s, str), \"s should be a string.\"\n    assert\
    \ isinstance(n, int), \"n should be an integer.\"\n    \n    if n == 0:\n    \
    \    return []\n\n    return list(filter(lambda w: len(w) == n, s.split()))\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2b4w4kd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx2b4w4kd.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx2b4w4kd.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpla9b2vui.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpla9b2vui.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpla9b2vui.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps94hp2tz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps94hp2tz.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps94hp2tz.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return list(filter(lambda s: s.count(\"a\") == n and s.count(\"\
    e\") == n and s.count(\"i\") == n and s.count(\"o\") == n and s.count(\"u\") ==\
    \ n, s.split()))\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj_nx5iq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkj_nx5iq.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkj_nx5iq.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7whqlv6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk7whqlv6.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk7whqlv6.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # BEGIN Solution\n    \n    return []\n    \n    # END\
    \ Solution\n    \n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplguqsbsr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplguqsbsr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplguqsbsr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptgwe97l1.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s)==0:\n        return []\n    if n<1:\n        return\
    \ []\n    if n==1:\n        return [s]\n    words=[]\n    \n    vowel_list=['a','e','i','o','u']\n\
    \    \n    for letter in s:\n        if letter in vowel_list:\n            words.append(letter)\n\
    \        elif letter==\"M\":\n            words.append('M')\n        elif letter==\"\
    N\":\n            words.append('N')\n        elif letter==\"R\":\n           \
    \ words.append('R')\n        elif letter==\"S\":\n            words.append('S')\n\
    \        else:\n            words.append(letter)\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvcy7ekr.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpxvcy7ekr.py\", line 51,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxvcy7ekr.py\", line\
    \ 42, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    \n    # Your code here\n    return list(filter(lambda\
    \ x:len(x)==n, s.split()))\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tm2r41w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3tm2r41w.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3tm2r41w.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return list(filter(lambda x: len(x) == n, s.split()))\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9bvuyzu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9bvuyzu.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpl9bvuyzu.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n    \n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    \n    word = []\n    \n    count = 0\n    \n  \
    \  for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n\
    \    \n    if count >= n:\n        word.append(s)\n    \n    return word\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvvzfdg20.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12t5vozo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp12t5vozo.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp12t5vozo.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    vowels = 'AEIOUaeiou'\n    vowel_counts = [s.count(vowel)\
    \ for vowel in vowels]\n    # vowel_count for each word is stored in a dict with\
    \ the key being the word itself\n    # and value being the number of vowels that\
    \ word contains. In this case, vowel_counts is\n    # of the form\n    # {\n \
    \   #     'Mary': 3,\n    #     'little': 2,\n    #     'Hello': 1,\n    #   \
    \  'Uncle': 2,\n    #     'world': 1\n    # }\n    \n    # Here we construct a\
    \ list of all words in the string\n    word_list = []\n    for word in s.split():\n\
    \        word_count = s.count(word)\n        if word_count == n:\n           \
    \ word_list.append(word)\n    return word_list\n\nprint(select_words('Mary had\
    \ a little lamb', 4))\nprint(select_words('Mary had a little lamb', 3))\nprint(select_words('simple\
    \ white space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpk4ruhqic.py\", line 43\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0:\n        return list()\n    words = s.split(\"\
    \ \")\n    word_list = []\n    for word in words:\n        word_list.extend([word\
    \ for word in list(word) if word.count(letter) > 1])\n    return word_list\n \
    \   \nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert\
    \ select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert\
    \ select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\"\
    , 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n</cell>\n\
    <text>\nTask 6 (2 points). Write a Python function filter_words(s, w) that, given\
    \ a string s and a list w, returns the list of words from s that satisfy the criteria\
    \ that the words from w appear in alphabetical order.\nFor example:\nfilter_words(\"\
    Mary had a little lamb\", [\"little\", \"lamb\"]) == [\"Mary\", \"lamb\"]\nfilter_words(\"\
    Mary had a little lamb\", [\"Mary\", \"lamb\"]) == [\"Mary\", \"lamb\"]\nfilter_words(\"\
    Mary had a little lamb\", [\"little\"]) == []\nfilter_words(\"Mary had a little\
    \ lamb\", [\"a\", \"little\"]) == []\nfilter_words(\"Mary had a little lamb\"\
    , [\"Mary\", \"little\", \"a\"]) == [\"Mary\", \"little\"]\nfilter_words(\"Mary\
    \ had a little lamb\", [\"little\", \"lamb\", \"a\"]) == [\"little\", \"lamb\"\
    ]\nfilter_words(\"Mary had a little lamb\", [\"lamb\", \"little\", \"a\"]) ==\
    \ [\"little\", \"lamb\"]\nfilter_words(\"Mary had a little lamb\", [\"a\", \"\
    little\", \"lamb\"]) == [\"little\", \"lamb\"]\nfilter_words(\"Mary had a little\
    \ lamb\", [\"Mary\", \"little\", \"lamb\", \"a\"]) == [\"Mary\", \"little\"]\n\
    filter_words(\"Mary had a little lamb\", [\"a\", \"lamb\", \"little\", \"Mary\"\
    ]) == [\"little\", \"lamb\", \"Mary\"]\nfilter_words(\"Mary had a little lamb\"\
    , [\"a\", \"little\", \"lamb\", \"Mary\"]) == [\"little\", \"lamb\", \"Mary\"\
    ]\nfilter_words(\"Mary had a little lamb\", [\"Mary\", \"little\", \"lamb\", \"\
    a\"]) == [\"Mary\", \"little\", \"lamb\"]\nfilter_words(\"Mary had a little lamb\"\
    , [\"a\", \"lamb\", \"little\", \"Mary\"]) == [\"little\", \"lamb\", \"Mary\"\
    ]\nfilter_words(\"Mary had a little lamb\", [\"Mary\", \"little\", \"lamb\", \"\
    a\"]) == [\"Mary\", \"little\", \"lamb\"]\nfilter_words(\"Mary \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpf4h5nxw9.py\", line 29\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfemwitek.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfemwitek.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfemwitek.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # implement selection sort here\n    \n    return [] \n</cell>\n\
    <text>\nProblem 4.6\nLet's verify that your function works correctly. Select a\
    \ set of test cases for which your function passes, and then select a set of test\
    \ cases for which it does not.\n\n\n</text>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppv5hyve6.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n < 1 or s > len(s):\n        return []\n    vowels = \"\
    aeiouAEIOU\"\n    words = s.split()\n    words = [word for word in words if len(word)\
    \ >= n and len(word) <= len(s) + len(vowels)]\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyqdvv1n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppyqdvv1n.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppyqdvv1n.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmppyqdvv1n.py\", line 16, in select_words\n    if n < 1 or s >\
    \ len(s):\nTypeError: '>' not supported between instances of 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbm2xjfx6.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return s[n:].split()\n    \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2sqye95.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp2sqye95.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp2sqye95.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hwx7epp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8hwx7epp.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp8hwx7epp.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2hy3gx6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg2hy3gx6.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpg2hy3gx6.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return list(filter(lambda x: len(re.findall(f\"[b-df-hj-np-tv-z]{n}\"\
    , x))==n, re.split('\\s+', s)))\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgd90fxaa.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgd90fxaa.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgd90fxaa.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpgd90fxaa.py\", line 17, in select_words\n    return list(filter(lambda\
    \ x: len(re.findall(f\"[b-df-hj-np-tv-z]{n}\", x))==n, re.split('\\s+', s)))\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3wk6w0f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz3wk6w0f.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpz3wk6w0f.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9c067s8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd9c067s8.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpd9c067s8.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    lst = []\n  \
    \  \n    for char in s.lower():\n        if char in vowels:\n            lst.append(char)\n\
    \            \n    for char in s.lower():\n        \n        count = 0\n     \
    \   \n        for char in s.lower():\n            count += 1\n            \n \
    \           if count < n:\n                if char in vowels:\n              \
    \      lst.append(char)\n    return lst\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11_2mw6b.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp11_2mw6b.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp11_2mw6b.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0:\n        return list()\n    \n    words = list()\n\
    \    for w in s.split():\n        if contains_consonants(w, n):\n            words.append(w)\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99ru4en3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp99ru4en3.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp99ru4en3.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp99ru4en3.py\", line 21, in select_words\n    if contains_consonants(w,\
    \ n):\nNameError: name 'contains_consonants' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # BEGIN PROBLEM 8\n    \n    return []\n    \n    # END\
    \ PROBLEM 8\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_bu4pxr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpq_bu4pxr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq_bu4pxr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    \n    return \n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9ww_hev.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv9ww_hev.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv9ww_hev.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nExercise 10\nImplement a function count_vowels(s)\
    \ that takes a string as input and returns the number of vowels in the string.\
    \ \nYour function should take one parameter and return a number (e.g. int). Your\
    \ function should take one parameter and return a list of all the vowels in the\
    \ string (e.g. List).\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8ta_orpj.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1qoqd5mp.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    s = s.lower()\n    if s == '':\n        return []\n    result\
    \ = []\n    stack = [s]\n    count = 0\n    while count != n:\n        count +=\
    \ 1\n        tmp = stack.pop()\n        words = tmp.split(' ')\n        for word\
    \ in words:\n            if word.isalpha():\n                stack.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb5glju6.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzb5glju6.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzb5glju6.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n    word_set = set()\n    letters\
    \ = ''\n    for word in s.split():\n        for letter in word:\n            letters\
    \ += letter\n        if letters in word_set:\n            word_set.remove(letters)\n\
    \        else:\n            word_set.add(letters)\n        if len(word_set) ==\
    \ n:\n            letters = ''\n            word_set.add(letters)\n    return\
    \ list(word_set)\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9gctmv32.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9gctmv32.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9gctmv32.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglwb33kn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpglwb33kn.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpglwb33kn.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        words\
    \ = []\n        for letter in s:\n            if letter in vowels:\n         \
    \       words.append(letter)\n            else:\n                words += select_words(s,\
    \ n - 1)\n        return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxw8pe55.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjxw8pe55.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjxw8pe55.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpjxw8pe55.py\", line 21, in select_words\n    if letter in vowels:\n\
    NameError: name 'vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    vowels = ['a','e','i','o','u']\n    \n    if n == 1:\n\
    \        return [s]\n    elif n == 2:\n        if s in vowels:\n            return\
    \ [s]\n        elif s in ['i','e']:\n            return ['I']\n        else:\n\
    \            return [s]\n    else:\n        \n        #split the string into words\
    \ by whitespace\n        words = s.split()\n        \n        #loop through each\
    \ word and check for consonants in it\n        for word in words:\n          \
    \  \n            #loop through the consonants in the word\n            for c in\
    \ word:\n                if c in vowels:\n                    \n             \
    \       #if the consonant is in our list of vowels add it to the list\n      \
    \              vowels.append(c)\n                    \n                    #remove\
    \ the consonant from our list of consonants\n                    word.remove(c)\n\
    \                    \n                    #break out of the word loop since we\
    \ don't need to check any more consonants\n                    break\n       \
    \             \n            #if the word only had one consonant, add it to the\
    \ list\n            if len(word) == 1:\n                vowels.append(word[0])\n\
    \                word.remove(word[0])\n                \n            #if the word\
    \ only had two consonants, add it to the list\n            if len(word) == 2:\n\
    \                vowels.append(word[0])\n                vowels.append(word[1])\n\
    \                word.remove(word[0])\n                word.remove(word[1])\n\
    \                \n            #if the word only had three consonants, add it\
    \ to the list\n            if len(word) == 3:\n                vowels.append(word[0])\n\
    \                vowels.append(word[1])\n                vowels.append(word[2])\n\
    \                word.remove(word[0])\n                word.remove(word[1])\n\
    \                word.remove(word[2])\n            \n            #if the word\
    \ only had four consonants, add it to the list\n            if len(word) == 4:\n\
    \                vowels.append(word[0])\n                vowels.append(word[1])\n\
    \                vowels.append(word[2])\n                vowels.append(word[3])\n\
    \                word.remove(word[0])\n                word.remove(word[1])\n\
    \                word.remove(word[2])\n                word.remove(word[3])\n\
    \            \n            #if the word only had five consonants, add it to the\
    \ list\n            if len(word) == 5:\n                vowels.append(word[0])\n\
    \                vowels.append(word[1])\n                vowels.append(word[2])\n\
    \                vowels.append(word[3])\n                vowels.append(word[4])\n\
    \                word.remove(word[0])\n                word.remove(word[1])\n\
    \                word.remove(word[2])\n                word.remove(word[3])\n\
    \                word.remove(word[4])\n            \n            #if the word\
    \ only had six consonants, add it to the list\n            if len(word) == 6:\n\
    \                vowels.append(word[0])\n                vowels.append(word[1])\n\
    \                vowels.append(word[2])\n                vowels.append(word[3])\n\
    \                vowels.append(word[4])\n                vowels.append(word[5\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprq261wez.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    words = s.split(\" \")\n    if n == 0: return []\n  \
    \  if len(words) == 0: return []\n\n    i = 0\n    j = 1\n    \n    while i <\
    \ len(words) and j < len(words[0]):\n        if words[i][j] in {\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}:\n            j += 1\n        elif words[i][j] == words[i][j-1]:\n\
    \            i += 1\n            j += 1\n        else: j += 1\n    \n    return\
    \ [word for word in words if len(word) == n]\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsspbzd19.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsspbzd19.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsspbzd19.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # your code here\n    if len(s) == 0:\n        return []\n\n\
    \    stack = []\n    words = []\n\n    for word in s.split():\n        count =\
    \ 0\n        for i in range(len(word)):\n            if word[i] == word[i][0]\
    \ and count < n:\n                count += 1\n            elif len(word) == i\
    \ + 1:\n                stack.append(word[i])\n            else:\n           \
    \     break\n        if count == n:\n            words.append(\"\".join(stack))\n\
    \            stack = []\n\n    return words\n</cell>\n<cell>\nselect_words(\"\
    Mary had a little lamb\", 4)\n</cell>\n<cell>\nselect_words(\"Mary had a little\
    \ lamb\", 3)\n</cell>\n<cell>\nselect_words(\"simple white space\", 2)\n</cell>\n\
    <cell>\nselect_words(\"Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle\
    \ sam\", 3)\n</cell>\n<text>\nExercise 4\nThree strings s0, s1 and s2 have been\
    \ provided to the function select_words, your task is to return the number of\
    \ times each word from s0 appears in the string s1 and the string s2.\n\nThe words\
    \ can be in any order in the strings.\n\nExample:\n\nInput: s0 = [\"Mary\", \"\
    had\", \"a\", \"little\", \"lamb\"], s1 = \"Mary had a little lamb\", s2 = \"\
    little\"\nOutput: Mary = 3, lamb = 1, little = 1\nExplanation: \"Mary\" appears\
    \ 3 times in s1 and \"little\" appears once, therefore \"Mary\" appears 3 times\
    \ in s1 and \"little\" appears once, therefore \"little\" appears once.\n\nInput\
    \ s0 [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], s1 = \"Mary had a little\
    \ lamb\", s2 = \"little\", s3 = \"had\"\nOutput: Mary = 3, lamb = 1, had = 1\n\
    Explanation: \"Mary\" appears 3 times in s1 and \"little\" appears once, therefore\
    \ \"Mary\" appears 3 times in s1 and \"little\" appears once, therefore \"little\"\
    \ appears once.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj1n5sbrd.py\", line 37\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepwwq085.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpepwwq085.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpepwwq085.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # BEGIN PSEUDOCODE <-- Remove this comment when you implement\
    \ this function\n    \n    '''\n    Given a string s and a number n, return a\
    \ list of the words in the string that \n    contain exactly n consonants. Words\
    \ are separated by spaces.\n    For example, select_words(\"Mary had a little\
    \ lamb\", 4) ==> [\"little\"]\n    Note that the string \"s\" may be empty so\
    \ you should return a list of an empty string \"\".\n    Also note that the string\
    \ \"s\" does not contain any spaces. \n    '''\n    \n    # END PSEUDOCODE\n \
    \   \n    return [] # Replace this comment with your code \n    \nselect_words('abc\
    \ de', 2)\n</cell>\n<text>\nTest your Code\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1f71gwqe.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ppjirm0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2ppjirm0.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2ppjirm0.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc24hvzu9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc24hvzu9.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc24hvzu9.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n</code>\n<|/ q |>\n<| c |>\nI'm voting to close\
    \ this question as off-topic because it is about debugging errors in an online\
    \ judge.\n<|/ c |>\n<| c |>\nThis question would be better asked on https://codegolf.stackexchange.com/\
    \ or https://cs.stackexchange.com/\n<|/ c |>\n<| a dscore=0 tags=python,python-3.x\
    \ |>\nThis is not an answer but an explanation of why your function does not work.\
    \ Your function does not work because you forgot to include the n in the function\
    \ signature.\nYour function does not work because when you call select_words(\"\
    Hello world\", 4), the function gets only two arguments: \"Hello world\" and 4\
    \ (the 4 is the third argument). The function does not receive any argument from\
    \ the calling function and therefore it knows nothing about the n (second argument).\n\
    <code>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmkwb_3ti.py\", line 17\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgajc7fhr.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN SOLUTION\n    # Create a set of words from s.\n   \
    \ words = set(s.split())\n    \n    # Return the list of words that are the desired\
    \ length\n    return [word for word in words if len(word) == n]\n    # END SOLUTION\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4yhvywna.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppwwfpdte.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppwwfpdte.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppwwfpdte.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return # your answer below!\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1qw2qphg.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    words = []\n    i = 0\n    while i < len(s):\n      \
    \  i += 1\n        char = s[i]\n        for char in s:\n            if char ==\
    \ \" \":\n                continue\n            if char == \"n\" and s[i+1] ==\
    \ \"a\" and s[i+2] == \"m\" and s[i+3] == \"y\" and s[i+4] == \" \":\n       \
    \         continue\n            if char == \"e\" and s[i+1] == \"l\" and s[i+2]\
    \ == \"l\" and s[i+3] == \" \":\n                continue\n            if char\
    \ == \"s\" and s[i+1] == \"p\" and s[i+2] == \"l\" and s[i+3] == \" \":\n    \
    \            continue\n            if char == \"t\" and s[i+1] == \"h\" and s[i+2]\
    \ == \"o\" and s[i+3] == \" \":\n                continue\n            if char\
    \ == \"h\" and s[i+1] == \"o\" and s[i+2] == \" \":\n                continue\n\
    \            if char == \"w\" and s[i+1] == \"o\" and s[i+2] == \"r\" and s[i+3]\
    \ == \" \":\n                continue\n            if char == \"a\" and s[i+1]\
    \ == \"t\" and s[i+2] == \"h\" and s[i+3] == \" \":\n                continue\n\
    \            if char == \"l\" and s[i+1] == \"a\" and s[i+2] == \" \":\n     \
    \           continue\n            if char == \"u\" and s[i+1] == \"c\" and s[i+2]\
    \ == \"s\" and s[i+3] == \" \":\n                continue\n            if char\
    \ == \"c\" and s[i+1] == \"u\" and s[i+2] == \"n\" and s[i+3] == \" \":\n    \
    \            continue\n            if char == \"s\" and s[i+1] == \"p\" and s[i+2]\
    \ == \"h\" and s[i+3] == \" \":\n                continue\n            if char\
    \ == \"p\" and s[i+1] == \"l\" and s[i+2] == \" \":\n                continue\n\
    \            if char == \"m\" and s[i+1] == \"a\" and s[i+2] == \" \":\n     \
    \           continue\n            if char == \"y\" and s[i+1] == \"s\" and s[i+2]\
    \ == \" \":\n                continue\n            if char == \"a\" and s[i+1]\
    \ == \"m\" and s[i+2] == \" \":\n                continue\n            if char\
    \ == \"o\" and s[i+1] == \" \":\n                continue\n            if char\
    \ == \"e\" and s[i+1] == \" \":\n                continue\n            if char\
    \ == \"m\" and s[i+1] == \"e\" and s[i+2] == \" \":\n                continue\n\
    \            if char == \"e\" and s[i+1] == \" \":\n                continue\n\
    \            if char == \"a\" and s[i+1] == \" \":\n                continue\n\
    \            if char == \"n\" and s[i+1] == \" \":\n                continue\n\
    \            if char == \"l\" and s[i+1] == \" \":\n                continue\n\
    \            if char == \"a\" and s[i+1] == \" \":\n                continue\n\
    \            if char == \" \" and s[i+1] == \" \":\n                continue\n\
    \            if char == \"a\" and s[i+1] == \" \":\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpad0iyzcm.py\", line 75\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n == 1:\n        return list(filter(lambda x: x not in [\"\
    a\", \"e\", \"i\", \"o\", \"u\"], s.split(\" \")))\n    elif n == 2:\n       \
    \ return list(filter(lambda x: x not in [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\"], s.split(\" \")))\n    else:\n        word = s.split()\n        word_list\
    \ = list(filter(lambda x: len(x) == n and x not in [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"], word))\n        return word_list\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptq5gdyuy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptq5gdyuy.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptq5gdyuy.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcew0cb3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxcew0cb3.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxcew0cb3.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # your code here\n    if s == \"\":\n        return []\n\
    \    if len(s) <= n:\n        return [\"*\"]\n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmenpreg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdmenpreg.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdmenpreg.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposyjcx4t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmposyjcx4t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmposyjcx4t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    words = [w for w in s.split() if len(w)>=n and all(elem in vowels for elem\
    \ in w)]\n    \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2jxc0fz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_2jxc0fz.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_2jxc0fz.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n\n    # Your code here\n    return list(filter((lambda x:x.count(\"\
    A\")==x.count(\"B\")==x.count(\"C\")==x.count(\"D\")==x.count(\"E\")==x.count(\"\
    F\")==x.count(\"G\")==x.count(\"H\")==x.count(\"I\")==x.count(\"J\")==x.count(\"\
    K\")==x.count(\"L\")==x.count(\"M\")==x.count(\"N\")==x.count(\"O\")==x.count(\"\
    P\")==x.count(\"Q\")==x.count(\"R\")==x.count(\"S\")==x.count(\"T\")==x.count(\"\
    U\")==x.count(\"V\")==x.count(\"W\")==x.count(\"X\")==x.count(\"Y\")==x.count(\"\
    Z\")==x.count(\"a\")==x.count(\"b\")==x.count(\"c\")==x.count(\"d\")==x.count(\"\
    e\")==x.count(\"f\")==x.count(\"g\")==x.count(\"h\")==x.count(\"i\")==x.count(\"\
    j\")==x.count(\"k\")==x.count(\"l\")==x.count(\"m\")==x.count(\"n\")==x.count(\"\
    o\")==x.count(\"p\")==x.count(\"q\")==x.count(\"r\")==x.count(\"s\")==x.count(\"\
    t\")==x.count(\"u\")==x.count(\"v\")==x.count(\"w\")==x.count(\"x\")==x.count(\"\
    y\")==x.count(\"z\")==x.count(\"A\")==x.count(\"B\")==x.count(\"C\")==x.count(\"\
    D\")==x.count(\"E\")==x.count(\"F\")==x.count(\"G\")==x.count(\"H\")==x.count(\"\
    I\")==x.count(\"J\")==x.count(\"K\")==x.count(\"L\")==x.count(\"M\")==x.count(\"\
    N\")==x.count(\"O\")==x.count(\"P\")==x.count(\"Q\")==x.count(\"R\")==x.count(\"\
    S\")==x.count(\"T\")==x.count(\"U\")==x.count(\"V\")==x.count(\"W\")==x.count(\"\
    X\")==x.count(\"Y\")==x.count(\"Z\")==x.count(\"a\")==x.count(\"b\")==x.count(\"\
    c\")==x.count(\"d\")==x.count(\"e\")==x.count(\"f\")==x.count(\"g\")\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0g6l1nn_.py\", line 20\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptujv0q7p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptujv0q7p.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptujv0q7p.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Write your code here\n    if n == 0:\n        return []\n\
    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Find length of string\n\
    \    len_s = len(''.join(s))\n\n    # Initialize empty list\n    ans = []\n\n\
    \    # Iterating over the string and counting the number of vowels\n    for i\
    \ in range(len_s):\n        count = 0\n        for vowel in vowels:\n        \
    \    if s[i].lower() == vowel.lower():\n                count += 1\n\n       \
    \ # Count if there are n vowels\n        if count == n:\n            ans.append(s[i].lower())\n\
    \n    return ans\n    \n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5no430d.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpc5no430d.py\", line 52,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc5no430d.py\", line\
    \ 43, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    vowels = 'aeiou'\n  \
    \  alphabet = set(vowels + s.lower())\n    letter_to_count = dict()\n    for letter\
    \ in alphabet:\n        if letter in vowels:\n            continue\n        count\
    \ = 0\n        for c in s:\n            if c == letter:\n                count\
    \ += 1\n        letter_to_count[letter] = count\n    letter_to_count = sorted(letter_to_count.items(),\
    \ key=lambda item: item[1], reverse=True)\n    words = []\n    for letter,count\
    \ in letter_to_count:\n        words += find_words(s, letter, count)\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg635fkvh.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpg635fkvh.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpg635fkvh.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpg635fkvh.py\", line 32, in select_words\n    words += find_words(s,\
    \ letter, count)\nNameError: name 'find_words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    else:\n        vowels\
    \ = \"aeiouAEIOU\"\n        \n        \n    \n        \n        \n        #vowels\
    \ = \"aeiouAEIOU\"\n        #vowels = ''\n        #s = s.lower()\n        #n =\
    \ int(n)\n        #s = ''.join([i for i in s if i not in vowels])\n        #vowels\
    \ = ''.join([i for i in vowels if i not in s])\n        #vowels = ''.join([i for\
    \ i in vowels if i in s])\n        #return [s]\n        \n        \n        \n\
    \        \n        #s = s.lower()\n        #n = int(n)\n        \n\n        \n\
    \        \n        #vowels = s.lower()\n        vowels = ''.join([i for i in vowels\
    \ if i in s])\n        \n        #vowels = ''.join([i for i in vowels if i in\
    \ s])\n        \n        #vowels = ''.join([i for i in vowels if i in s])\n  \
    \      \n        #return [s]\n        #vowels = ''.join([i for i in vowels if\
    \ i in s])\n        \n        \n        \n        \n        \n        #vowels\
    \ = ''.join([i for i in vowels if i in s])\n        #vowels = ''.join([i for i\
    \ in vowels if i in s])\n        \n        #vowels = ''.join([i for i in vowels\
    \ if i in s])\n        \n        #return [s]\n        #vowels = ''.join([i for\
    \ i in vowels if i in s])\n        \n        #vowels = ''.join([i for i in vowels\
    \ if i in s])\n        \n        #return [s]\n        #vowels = ''.join([i for\
    \ i in vowels if i in s])\n        \n        #vowels = ''.join([i for i in vowels\
    \ if i in s])\n        #vowels = ''.join([i for i in vowels if i in s])\n    \
    \    \n        #return [s]\n        #vowels = ''.join([i for i in vowels if i\
    \ in s])\n        #vowels = ''.join([i for i in vowels if i in s])\n        \n\
    \        #vowels = ''.join([i for i in vowels if i in s])\n        \n        #return\
    \ [s]\n        #vowels = ''.join([i for i in vowels if i in s])\n        #vowels\
    \ = ''.join([i for i in vowels if i in s])\n        \n        \n        #vowels\
    \ = ''.join([i for i in vowels if i in s])\n        #vowels = ''.join([i for i\
    \ in vowels if i in s])\n        \n        #vowels = ''.join([i for i in vowels\
    \ if i in s])\n        \n        #vowels = ''.join([i for i in vowels if i in\
    \ s])\n        \n        #return [s]\n        #vowels = ''.join([i for i in vowels\
    \ if i in s])\n        \n        #vowels = ''.join([i for i in vowels if i in\
    \ s])\n        \n        #vowels = ''.join([i for i in vowels if i in s])\n  \
    \      \n        #vowels = ''.join([i for i in vowels if i in s])\n        \n\
    \        #vowels = ''.join([i for i in vowels if i in s])\n        \n        #vowels\
    \ = ''.join([i for i in vowels if i in s])\n        \n        #vowels = ''.join([i\
    \ for i in vowels if i in s])\n        #\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb9ihqkr.py\", line\
    \ 118, in <module>\n    test_check()\n  File \"/tmp/tmpzb9ihqkr.py\", line 116,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzb9ihqkr.py\", line\
    \ 107, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n    res = []\n    s = s.split()\n\
    \    i = 0\n    while i < len(s):\n        if s[i][0] in vowels:\n           \
    \ if len(s[i]) == n or n == -1:\n                res.append(s[i])\n          \
    \  i += 1\n        else:\n            i += 1\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0oiskr5n.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0oiskr5n.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0oiskr5n.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp0oiskr5n.py\", line 22, in select_words\n    if s[i][0] in vowels:\n\
    NameError: name 'vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzphl63e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkzphl63e.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkzphl63e.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    #return # TODO\n    return \n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu57xwjxj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu57xwjxj.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu57xwjxj.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    s=list(s.lower())\n    lst = []\n    firstLetter=s[0]\n   \
    \ if n<len(s)-1:\n        if n==1:\n            if firstLetter in \"aeiouy\":\n\
    \                lst=s[0:n]\n            else:\n                lst=s[0:n+1]\n\
    \        else:\n            if firstLetter in \"aeiouy\":\n                lst=s[0:n]\n\
    \            else:\n                lst=s[0:n+1]\n                lst+=s[0:1]\n\
    \                lst+=s[0:1]\n                lst+=s[0:2]\n    else:\n       \
    \ if firstLetter in \"aeiouy\":\n            lst=s[0:n]\n        else:\n     \
    \       lst=s[0:n+1]\n    return lst\n    \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps668_ggn.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmps668_ggn.py\", line 50,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps668_ggn.py\", line\
    \ 41, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n == 1: # Return list of words\n        return [w for w\
    \ in s.split() if len(w) == n+1]\n    else: # Return list of words that contain\
    \ only n consonants\n        results = []\n        count = 0 # Count of consonants\
    \ in string s\n        for c in s:\n            if c.isalpha():\n            \
    \    if count == n:\n                    results.append(w)\n                count\
    \ = count + 1\n        return results\n</cell>\n<text>\nTest Your Solution\n\n\
    </text>\n<cell>\n%%writefile ../test_solutions/test_select_words.py\nfrom nose.tools\
    \ import assert_equal, assert_true\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj5p3yli0.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # your code here\n    vowels = set('aeiouAEIOU')\n    s_splitted\
    \ = s.split()\n    words = []\n    for word in s_splitted:\n        count = 0\n\
    \        for letter in word:\n            if letter in vowels:\n             \
    \   count += 1\n        if count >= n:\n            words.append(word)\n    return\
    \ words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7ctg5abo.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lhl0wmn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4lhl0wmn.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4lhl0wmn.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps01rtle2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmps01rtle2.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps01rtle2.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n == 0: return []\n    if n == 1: return [s]\n    \n   \
    \ letters = Counter(s)\n    words = []\n    for letter, count in letters.items():\n\
    \        if count == n:\n            words.append(letter)\n    return words\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1eke4x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwz1eke4x.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwz1eke4x.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwz1eke4x.py\", line 19, in select_words\n    letters = Counter(s)\n\
    NameError: name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # TODO: Write your code here\n    if n == 0: return []\n  \
    \  if len(s) <= 1: return [s]\n    \n    vowels = set('aeiou')\n    letters =\
    \ set(s)\n    vowel_letters = []\n    \n    for letter in letters:\n        if\
    \ letter in vowels:\n            vowel_letters.append(letter)\n    \n    if len(vowel_letters)>0:\
    \ \n        vowel_letters.sort()\n        return [s for s in vowel_letters]\n\
    \    \n    return []\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6imq269k.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # TODO 2: your code here\n    word_list = []\n    for i in\
    \ range(len(s)):\n        if s[i].lower() in 'aeiou':\n            pass\n    \
    \    else:\n            word_list.append(s[i])\n    word_list = list(set(word_list))\n\
    \    if len(word_list) < n:\n        pass\n    else:\n        word_list = list(set(word_list))\n\
    \        word_list.sort()\n    return word_list\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdltufquw.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdltufquw.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdltufquw.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6c24_ea.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy6c24_ea.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpy6c24_ea.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0: return []\n    \n    chars = s.split()\n  \
    \  \n    temp = []\n    \n    for c in chars:\n        if c in consonants:\n \
    \           if len(temp) < n:\n                temp.append(c)\n        elif c\
    \ in vowels:\n            temp.append(c)\n    \n    return temp\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdtgf87h.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpfdtgf87h.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfdtgf87h.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpfdtgf87h.py\", line 23, in select_words\n    if c in consonants:\n\
    NameError: name 'consonants' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = []\n    word = ''\n    \n    for letter in s:\n   \
    \     if letter.isalpha():\n            if word != '':\n                words.append(word)\n\
    \                word = ''\n            words.append(letter)\n        else:\n\
    \            word += letter\n    \n    if word != '':\n        words.append(word)\n\
    \        \n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwydg15iy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpwydg15iy.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwydg15iy.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34mi04g4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp34mi04g4.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp34mi04g4.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nTest your Code\nRun the cell below to\
    \ test your code.\n\nNote that passing in the expected parameter results in a\
    \ failure.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxz8z5162.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # your code here\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvpurif3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfvpurif3.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfvpurif3.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    #Your code here\n    return []\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4e6w0rb7.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_dict = {\n  \
    \      \"a\" : ['e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o',\
    \ 'u'],\n        \"e\" : ['i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i',\
    \ 'o', 'u'],\n        \"i\" : ['o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i',\
    \ 'o', 'u'],\n        \"o\" : ['u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o',\
    \ 'u'],\n        \"u\" : ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']\n\
    \    }\n    vowel_order = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']\n\
    \    vowel_position = {\n        'A' : 0,\n        'E' : 1,\n        'I' : 2,\n\
    \        'O' : 3,\n        'U' : 4,\n        'a' : 0,\n        'e' : 1,\n    \
    \    'i' : 2,\n        'o' : 3,\n        'u' : 4\n    }\n\n    # Initialize an\
    \ empty list to store our results\n    words = []\n\n    # Initialize a variable\
    \ for counting consonants\n    consonant_count = 0\n\n    # Loop through each\
    \ character in s\n    for letter in s:\n        # Check if the current character\
    \ is a space\n        if letter == ' ':\n            # If this is the first letter\
    \ in the string, add it to our list\n            words.append(letter)\n      \
    \      continue\n\n        # If we are not on the first letter in the string then\
    \ count consonants\n        if consonant_count != 0 and consonant_count < len(vowel_dict[letter]):\n\
    \            # If consonant count is more than the length of the current vowel\
    \ list, \n            # then we keep adding consonants to the list until we have\
    \ used all of them.\n            consonant_count += (len(vowel_dict[letter]) -\
    \ consonant_count)\n        else:\n            # Add the current vowel list to\
    \ the list\n            words.append(vowel_dict[letter])\n\n            # Increment\
    \ consonant count\n            consonant_count += 1\n\n            # If the current\
    \ letter is a vowel then increment our vowel count\n            if letter in vowel_order:\n\
    \                vowel_count += 1\n\n            # If the current letter was a\
    \ vowel but hasn't been counted yet, \n            # then we add it to the vowel\
    \ list\n            if letter in vowel_position and vowel_position[letter] >=\
    \ vowel_count:\n                vowel_position[letter] += 1\n\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprn0wyrys.py\", line\
    \ 87, in <module>\n    test_check()\n  File \"/tmp/tmprn0wyrys.py\", line 85,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmprn0wyrys.py\", line\
    \ 76, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmprn0wyrys.py\", line 59, in select_words\n    words.append(vowel_dict[letter])\n\
    KeyError: 'M'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nTest your implementation\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqqd004gp.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    else:\n        consonants\
    \ = [\n            \"b\",\n            \"p\",\n            \"k\",\n          \
    \  \"d\",\n            \"m\",\n            \"s\",\n            \"t\",\n      \
    \      \"l\",\n            \"v\",\n            \"w\",\n            \"y\",\n  \
    \          \"x\",\n            \"z\",\n            \"h\",\n            \"j\",\n\
    \            \"n\",\n            \"q\",\n            \"w\",\n            \"v\"\
    ,\n            \"x\",\n            \"d\",\n            \"s\",\n            \"\
    m\",\n            \"t\",\n            \"l\",\n            \"h\",\n        ]\n\
    \        vowels = [\n            \"a\",\n            \"e\",\n            \"i\"\
    ,\n            \"o\",\n            \"u\",\n            \"A\",\n            \"\
    E\",\n            \"I\",\n            \"O\",\n            \"U\",\n           \
    \ \"a\",\n            \"e\",\n            \"i\",\n            \"o\",\n       \
    \     \"u\",\n            \"A\",\n            \"E\",\n            \"I\",\n   \
    \         \"O\",\n            \"U\",\n        ]\n        words = s.split()\n \
    \       res = []\n        for word in words:\n            wordlist = list(word)\n\
    \            count = 0\n            i = len(wordlist) - 1\n            while i\
    \ >= 0 and count < n:\n                if wordlist[i] in consonants:\n       \
    \             wordlist[i] = wordlist[i]\n                    count += i + 1\n\
    \                    i -= 1\n                if wordlist[i] in vowels:\n     \
    \               wordlist[i] = wordlist[i]\n                    count += i + 1\n\
    \                    i -= 1\n                i -= 1\n            word = \"\".join(wordlist)\n\
    \            res.append(word)\n        return res\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdia62coh.py\", line\
    \ 102, in <module>\n    test_check()\n  File \"/tmp/tmpdia62coh.py\", line 100,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdia62coh.py\", line\
    \ 91, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqwnl9p_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuqwnl9p_.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpuqwnl9p_.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    s = s.replace(' ','')\n    if s.isalpha():\n        return\
    \ list(s)\n    return []\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zav5333.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5zav5333.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5zav5333.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    word_list = list()\n\
    \    if len(s) < n:\n        return []\n    word_list.extend(s.split(\" \"))\n\
    \    word_list.sort()\n    word_list = list(filter(lambda x: len(x)==n, word_list))\n\
    \    word_list = list(filter(lambda x: set(\"\".join(x).replace(\" \", \"\"))\
    \ in set(\"\".join([c for c in s]).replace(\" \", \"\")), word_list))\n    return\
    \ word_list\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjo64ej1b.py\", line 26\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Your code here\n    words = re.findall(r'[a-z]+', s.lower())\n\
    \    if words == []:\n        return []\n    else:\n        return [w for w in\
    \ words if len(w) == n]\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tw0dfm6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_tw0dfm6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_tw0dfm6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp_tw0dfm6.py\", line 17, in select_words\n    words = re.findall(r'[a-z]+',\
    \ s.lower())\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # BEGIN your code here\n    return list(filter(lambda\
    \ x: len(x) == n, re.split(r\"(\\W+)({n})\".format(n=n), s))) \n    # END your\
    \ code here\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2z2phy03.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n==0:\n        return []\n    words = s.split()\n    \n\
    \    return words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqje92whe.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    def helper(s: str, n: int):\n        if len(s) <= n:\n    \
    \        return []\n        return helper(s[:n], n) + helper(s[n:], n)\n\n   \
    \ if n == 0:\n        return []\n    return helper(s, n)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=recursion,python,list,string |>\n<code>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn2yf8pyw.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsei9z_t2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsei9z_t2.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsei9z_t2.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgokc9a6p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgokc9a6p.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgokc9a6p.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_dict = {v: True\
    \ for v in vowels}\n    vowels_dict = {v: False for v in vowels}\n    s = []\n\
    \    vowels_dict = vowels_dict.copy()\n    vowels_dict.update({\"a\": True, \"\
    e\": True, \"i\": True, \"o\": True, \"u\": True})\n    vowels_dict.update({\"\
    A\": True, \"E\": True, \"I\": True, \"O\": True, \"U\": True})\n    vowels_dict\
    \ = vowels_dict.copy()\n    vowels_dict.update({\"a\": False, \"e\": False, \"\
    i\": False, \"o\": False, \"u\": False})\n    vowels_dict = vowels_dict.copy()\n\
    \    vowels_dict.update({\"A\": False, \"E\": False, \"I\": False, \"O\": False,\
    \ \"U\": False})\n\n    word = s.split()\n\n    count = 0\n    word_list = []\n\
    \    for i in word:\n        if vowels_dict[i] == \"True\":\n            count\
    \ += 1\n    if count == n:\n        word_list.extend(word)\n    return word_list\n\
    \    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqn660b_.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptqn660b_.py\", line 50,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptqn660b_.py\", line\
    \ 41, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmptqn660b_.py\", line 28, in select_words\n    word = s.split()\n\
    AttributeError: 'list' object has no attribute 'split'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzs7znbrr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzs7znbrr.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzs7znbrr.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    word_list = []\n    if s == \"\":\n        return word_list\n\
    \    for i in range(len(s)-n):\n        if s[i:i+n] in [\"bcdfghjklmnpqrstvwxyz\"\
    ]:\n            word_list.append(s[i:i+n])\n    return word_list\n</code>\n<|/\
    \ a dscore=0 tags=python-3.x,python |>\n<| a |>\nThe issue is that you are using\
    \ the 'in' operator to match your input strings. As you can see here:\n<code>\n\
    >>> 'm' in  'abc'\nTrue\n>>> 'n' in  'abc'\nFalse\n</code>\nThe 'in' operator\
    \ checks if the string 'n' is in the string, 'abc'.\nInstead, you want to check\
    \ if the length of the input string is equal to the length of the string you are\
    \ matching. This can be done by using the length function. For example:\n<code>\n\
    >>>'n' in 'abc'\nFalse\n>>>'a' in 'abc'\nTrue\n>>>'n' in 'ab'\nTrue\n</code>\n\
    In your code, the following line should be:\n<code>\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsul0uh48.py\", line 23\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    s = []\n    count = 0\n    for i in range(len(s) - 1):\n  \
    \      if s[i] == s[i+1]:\n            count += 1\n        if count == n:\n  \
    \          s.append(s[i+1])\n            count = 0\n    return s\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvxbtl5t.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvvxbtl5t.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvvxbtl5t.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n\n    word_list = []\n  \
    \  word_list.append(s)\n\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n\n    vowel_count = {}\n    vowel_count['a'] = 1\n    vowel_count['e'] = 1\n\
    \    vowel_count['i'] = 1\n    vowel_count['o'] = 1\n    vowel_count['u'] = 1\n\
    \n    consonant_count = {}\n    consonant_count['z'] = 0\n    consonant_count['b']\
    \ = 1\n    consonant_count['c'] = 1\n    consonant_count['d'] = 1\n    consonant_count['f']\
    \ = 1\n    consonant_count['g'] = 1\n    consonant_count['j'] = 1\n    consonant_count['k']\
    \ = 1\n    consonant_count['l'] = 1\n    consonant_count['m'] = 1\n    consonant_count['n']\
    \ = 1\n    consonant_count['p'] = 1\n    consonant_count['q'] = 1\n    consonant_count['r']\
    \ = 1\n    consonant_count['s'] = 1\n    consonant_count['t'] = 1\n    consonant_count['v']\
    \ = 1\n    consonant_count['w'] = 1\n    consonant_count['x'] = 1\n    consonant_count['y']\
    \ = 1\n    consonant_count['z'] = 1\n\n    consonant_list = {}\n    consonant_list['z']\
    \ = [\"z\"]\n    consonant_list['b'] = [\"b\", \"b\", \"b\", \"b\"]\n    consonant_list['c']\
    \ = [\"c\", \"c\", \"c\", \"c\"]\n    consonant_list['d'] = [\"d\", \"d\", \"\
    d\", \"d\"]\n    consonant_list['f'] = [\"f\", \"f\", \"f\", \"f\"]\n    consonant_list['g']\
    \ = [\"g\", \"g\", \"g\", \"g\"]\n    consonant_list['j'] = [\"j\", \"j\", \"\
    j\", \"j\"]\n    consonant_list['k'] = [\"k\", \"k\", \"k\", \"k\"]\n    consonant_list['l']\
    \ = [\"l\", \"l\", \"l\", \"l\"]\n    consonant_list['m'] = [\"m\", \"m\", \"\
    m\", \"m\"]\n    consonant_list['n'] = [\"n\", \"n\", \"n\", \"n\"]\n    consonant_list['p']\
    \ = [\"p\", \"p\", \"p\", \"p\"]\n    consonant_list['q'] = [\"q\", \"q\", \"\
    q\", \"q\"]\n    consonant_list['r'] = [\"r\", \"r\", \"r\", \"r\"]\n    consonant_list['s']\
    \ = [\"s\", \"s\", \"s\", \"s\"]\n    conson\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplq03rq0l.py\", line\
    \ 84, in <module>\n    test_check()\n  File \"/tmp/tmplq03rq0l.py\", line 82,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplq03rq0l.py\", line\
    \ 73, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmplq03rq0l.py\", line 71, in select_words\n    conson\nNameError:\
    \ name 'conson' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n == 1:\n        return list(filter(lambda x: x != \" \"\
    , s.split()))\n\n    word = s.split(\" \")\n    words = [\" \".join(word[:i+1])\
    \ for i in range(len(word))]\n    words = words + [word]\n    words = list(filter(lambda\
    \ w: len(w) == n, words))\n\n    return list(filter(lambda x: x != \" \", words))\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphbqtao5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpphbqtao5.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpphbqtao5.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN PROBLEM 1\n    return s.split(\" \")[0:n] \n    # END\
    \ PROBLEM 1\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ejwzcn6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9ejwzcn6.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9ejwzcn6.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Add your own code here\n    if len(s)<=0 or n>len(s):\n \
    \       return []\n    elif s[0]==' ':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='-':\n        return select_words(s[1:],n)\n    elif s[0]=='N':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='W':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='U':\n        return select_words(s[1:],n)\n    elif s[0]=='R':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='M':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='C':\n        return select_words(s[1:],n)\n    elif s[0]=='V':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='S':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='L':\n        return select_words(s[1:],n)\n    elif s[0]=='O':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='W':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='I':\n        return select_words(s[1:],n)\n    elif s[0]=='E':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='X':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='H':\n        return select_words(s[1:],n)\n    elif s[0]=='R':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='E':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='A':\n        return select_words(s[1:],n)\n    elif s[0]=='T':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='Y':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='I':\n        return select_words(s[1:],n)\n    elif s[0]=='E':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='L':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='E':\n        return select_words(s[1:],n)\n    elif s[0]=='S':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='P':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='P':\n        return select_words(s[1:],n)\n    elif s[0]=='E':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='V':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='A':\n        return select_words(s[1:],n)\n    elif s[0]=='G':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='A':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='S':\n        return select_words(s[1:],n)\n    elif s[0]=='I':\n\
    \        return select_words(s[1:],n)\n    elif s[0]=='S':\n        return select_words(s[1:],n)\n\
    \    elif s[0]=='P':\n        return select_words(s[1:],n)\n    elif \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpp5t2u_8q.py\", line 95\n    elif \n        ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    words = s.split()\n    vowels = ['a','e','i','o','u']\n\
    \    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z']\n\
    \    \n    # write your code here\n    words = []\n    for word in words:\n  \
    \      if n == len(word):\n            words.append(word)\n    return words\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsxkjgs5w.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [\n  \
    \      'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't',\n        'v', 'w', 'z', 's'\n    ]\n    ans = []\n    i = 0\n    \n   \
    \ while i < len(s):\n        if s[i] in vowels:\n            ans.append(s[i])\n\
    \            i += 1\n        else:\n            if i > 0 and s[i-1] in consonants:\n\
    \                ans.append(s[i-1])\n            i += 1\n    \n    if len(ans)\
    \ == n:\n        return ans\n    \n    return []\n    \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rofq5vo.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp4rofq5vo.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4rofq5vo.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    word_list = []\n    \n    for i in range(len(s)):\n       \
    \ if s[i] == 'e':\n            if s[i-1] == 'o' and s[i-2] == 'u':\n         \
    \       if s[i-3] == 'c':\n                    word_list.append(s[i-3])\n    \
    \    if s[i] == 'a':\n            if s[i-1] == 'l' and s[i-2] == 'l':\n      \
    \          if s[i-3] == 'h':\n                    word_list.append(s[i-3])\n \
    \       if s[i] == 'i':\n            if s[i-1] == 'n' and s[i-2] == 'e':\n   \
    \             if s[i-3] == 'n':\n                    word_list.append(s[i-3])\n\
    \        if s[i] == 'u':\n            if s[i-1] == 'c' and s[i-2] == 's':\n  \
    \              if s[i-3] == 'a':\n                    word_list.append(s[i-3])\n\
    \        if s[i] == 'l':\n            if s[i-1] == 'l' and s[i-2] == 'i':\n  \
    \              if s[i-3] == 'c':\n                    word_list.append(s[i-3])\n\
    \    \n    \n    return word_list\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vgn6urf.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp6vgn6urf.py\", line 53,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6vgn6urf.py\", line\
    \ 44, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN PSEUDOCODE\n    if n == 0:\n        return []\n   \
    \ \n    words = []\n    \n    # count number of consonants\n    consonants = 0\n\
    \    for i in range(len(s) - 1):\n        if s[i] in 'AEIOU':\n            consonants\
    \ += 1\n            \n    # check for number of consonants being equal to number\
    \ of letters \n    # in the string (including the space)\n    if consonants ==\
    \ len(s) - 1:\n        words.append(s[:n])\n        \n    # check for number of\
    \ consonants being greater than number of letters \n    # in the string (excluding\
    \ the space)\n    if consonants > len(s) - 1:\n        \n        # count number\
    \ of consonants greater than n (excluding space)\n        consonants_greater_than\
    \ = n\n        \n        # iterate through string\n        for i in range(0, len(s)\
    \ - 1):\n            if s[i] in 'AEIOU':\n                \n                #\
    \ increment the number of consonants greater than n by 1\n                consonants_greater_than\
    \ += 1\n                \n                # if it reaches the letter in the string\n\
    \                if s[i] == s[n]:\n                    \n                    #\
    \ append the word\n                    words.append(s[:i + 1])\n             \
    \   \n                # if the number of consonants greater than n equals \n \
    \               # the number of consonants in the string, it adds the \n     \
    \           # word and resets the number of consonants to 0\n                if\
    \ consonants_greater_than == consonants:\n                    words.append(s[:i\
    \ + 1])\n                    consonants = 0\n                    consonants_greater_than\
    \ = 0\n    \n    # return the list of words\n    return words\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6vawefzi.py\", line 63\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppknz8n4k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppknz8n4k.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppknz8n4k.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return [] \n</code>\nMy solution to this is as follows: \n\
    <code>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmfrhur5y.py\", line 17\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    \n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx21g8x5r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx21g8x5r.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx21g8x5r.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjtqatzt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprjtqatzt.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmprjtqatzt.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpms7xp0y1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpms7xp0y1.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpms7xp0y1.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return []\n\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphhzu_zvi.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    word_list = re.findall(r'\\w{%d,}' % n, s)\n    select_words\
    \ = []\n    for word in word_list:\n        select_words.append(word)\n    return\
    \ select_words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnhmsekf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbnhmsekf.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbnhmsekf.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpbnhmsekf.py\", line 16, in select_words\n    word_list = re.findall(r'\\\
    w{%d,}' % n, s)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\": return []\n    words = []\n    for word in s.split():\n\
    \        if n == 1:\n            words.append(word)\n        else:\n         \
    \   for letter in word:\n                if letter in 'bcdfghjklmnpqrstvwxyz':\n\
    \                    n -= 1\n                    if n == 0:\n                \
    \        words.append(word)\n    return words\n</cell>\n<text>\nQuestion 5\nImplement\
    \ the function count_vowels(s) which takes in a string and returns the number\
    \ of vowels found in the string s.\n\nExamples:\ncount_vowels(\"Hello world\"\
    ) ==> 3\ncount_vowels(\"Hello world!\") ==> 0\ncount_vowels(\"I love peas!\")\
    \ ==> 3\ncount_vowels(\"I love peas!\", 3) ==> 0\ncount_vowels(\"I love peas!\"\
    , 0) ==> 0\ncount_vowels(\"\") ==> 0\ncount_vowels(\" \") ==> 0\ncount_vowels(\"\
    Hello\") ==> 0\ncount_vowels(\" Hello\") ==> 0\ncount_vowels(\"A\") ==> 0\ncount_vowels(\"\
    A  \") ==> 0\ncount_vowels(\"A  B \") ==> 0\ncount_vowels(\"A B\") ==> 0\ncount_vowels(\"\
    A B C\") ==> 0\ncount_vowels(\"A B  C\") ==> 0\ncount_vowels(\"A  B  C\") ==>\
    \ 0\ncount_vowels(\"A  B  C  D\") ==> 0\ncount_vowels(\"A  B  C  D  E\") ==> 0\n\
    count_vowels(\"A  B  C  D  E  F\") ==> 0\ncount_vowels(\"A  B  C  D  E  F  G\"\
    ) ==> 0\ncount_vowels(\"A  B  C  D  E  F  G  H\") ==> 0\ncount_vowels(\"A  B \
    \ C  D  E  F  G  H  I\") ==> 0\ncount_vowels(\"A  B  C  D  E  F  G  H  I  J\"\
    ) ==> 0\ncount_vowels(\"A  B  C  D  E  F  G  H  I  J  K\") ==> 0\ncount_vowels(\"\
    A  B  C  D  E  F  G  H  I  J  K  L\") ==> 0\ncount_vowels(\"A  B  C  D  E  F \
    \ G  H  I  J  K  L  M\") ==> 0\ncount_vowels(\"A  B  C  D  E  F  G  H  I  \ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplz88pfkq.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpzv8qsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdpzv8qsu.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdpzv8qsu.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if not s:\n        return []\n\n    letters = []\n    for index,\
    \ char in enumerate(s):\n        if char in \"aeiouAEIOU\":\n            letters.append(s[index])\n\
    \    return letters\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchtir5vx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpchtir5vx.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpchtir5vx.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnuqxa3r3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnuqxa3r3.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnuqxa3r3.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count =\
    \ count_vowels(s)\n    words = s.split(\" \")\n    res = []\n    for word in words:\n\
    \        word = word.lower()\n        if len(word) > n:\n            break\n \
    \       \n        if count_vowels(word) == vowel_count:\n            res.append(word)\n\
    \            \n    return res\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ghpklzb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5ghpklzb.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5ghpklzb.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp5ghpklzb.py\", line 18, in select_words\n    vowel_count = count_vowels(s)\n\
    NameError: name 'count_vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return [] # implement here\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjrf01k1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnjrf01k1.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnjrf01k1.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # BEGIN Question 7\n    # Convert s to lower case\n \
    \   s = s.lower()\n\n    # Initialize an empty list to store the results\n   \
    \ result = []\n\n    # Write the solution code here\n    consonant_pattern = \"\
    [bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\n    vowel_pattern = \"[aeiouAEIOU]\"\
    \n    words = s.split()\n    \n    for word in words:\n        if len(word) >\
    \ 0 and len(word) <= n:\n            if word[0] in vowel_pattern:\n          \
    \      consonant_word = word[0]+word[1:]\n            else:\n                consonant_word\
    \ = word[0:1]+word[1:]\n            \n            for consonant in consonant_word:\n\
    \                if consonant in consonant_pattern:\n                    result.append(consonant)\n\
    \                    break\n    return result\n    # END Question 7\n\n    \n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpste4zino.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpste4zino.py\", line 54,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpste4zino.py\", line\
    \ 45, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = s.split()\n    if len(words)<=1:\n        return []\n\
    \    ans = set()\n    i = 0\n    l = len(s)\n    while i<l:\n        if len(words)>=i+n:\n\
    \            while len(words)>=i+n:\n                ans.add(words[i])\n     \
    \           i+=1\n            break\n        else:\n            i+=1\n    return\
    \ list(ans)\n    \n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj6wdt4cq.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    vowels = 'aeiou'\n    words = s.split(\"\
    \ \")\n    \n    words = [word for word in words if len(word) == n and word.lower()\
    \ in vowels]\n    \n    return words\n\nselect_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"simple white space\", 2) ==> []\n\
    select_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\",\
    \ 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"simple\
    \ white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\n\
    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"simple white space\", 2) ==> []\n\
    select_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\",\
    \ 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"simple\
    \ white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\n\
    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn0i8qxe0.py\", line 25\n    select_words(\"Mary had a\
    \ little lamb\", 4) ==> [\"little\"]\n                                       \
    \         ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    \n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvjd1pjm1.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_p51t9p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj_p51t9p.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj_p51t9p.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuchuuu7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxuchuuu7.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxuchuuu7.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n\n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphl3906u7.py\", line\
    \ 287, in <module>\n    test_check()\n  File \"/tmp/tmphl3906u7.py\", line 285,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphl3906u7.py\", line\
    \ 276, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0h_2uu6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps0h_2uu6.py\", line 27,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps0h_2uu6.py\", line\
    \ 18, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    for\
    \ letter in s:\n        if letter.islower():\n            words.append(letter)\n\
    \        if len(words) == n:\n            break\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_7febre.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc_7febre.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc_7febre.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = s.split(' ')\n    words = [w for w in words if w.replace('\
    \ ', '') != '']\n    words = [w for w in words if len(w) > 1]\n    words = [w.replace('\
    \ ', '').replace(',', '').replace('\\'', '') for w in words]\n    words = [w.replace('!',\
    \ '').replace('\"', '').replace('.', '').replace(';', '') for w in words]\n  \
    \  words = [w.replace(':', '').replace('-', '').replace('.', '').replace(',',\
    \ '') for w in words]\n    words = [w.replace('!', '').replace('\"', '').replace(';',\
    \ '').replace('-', '') for w in words]\n    words = [w.replace(',', '').replace('\\\
    '', '').replace(':', '').replace(';', '').replace('-', '') for w in words]\n \
    \   words = [w.replace(',', '').replace('-', '') for w in words]\n    words =\
    \ [w.replace('\"', '').replace('.', '') for w in words]\n    words = [w.replace('\"\
    ', '').replace('.', '') for w in words]\n    words = [w.replace('\"', '').replace('!',\
    \ '') for w in words]\n    words = [w.replace('!', '') for w in words]\n    words\
    \ = [w.replace('\\'', '') for w in words]\n    words = [w.replace('\\'', '') for\
    \ w in words]\n    words = [w.replace('!', '') for w in words]\n    words = [w.replace('!',\
    \ '') for w in words]\n    words = [w.replace('\"', '') for w in words]\n    words\
    \ = [w.replace('\"', '') for w in words]\n    words = [w.replace(',', '') for\
    \ w in words]\n    words = [w.replace(',', '') for w in words]\n    words = [w.replace('.',\
    \ '') for w in words]\n    words = [w.replace('.', '') for w in words]\n    words\
    \ = [w.replace(';', '') for w in words]\n    words = [w.replace(';', '') for w\
    \ in words]\n    words = [w.replace('.', '') for w in words]\n    words = [w.replace('-',\
    \ '') for w in words]\n    words = [w.replace('-', '') for w in words]\n    words\
    \ = [w.replace(':', '') for w in words]\n    words = [w.replace(':', '') for w\
    \ in words]\n    words = [w.replace(',', '') for w in words]\n    words = [w.replace(',',\
    \ '') for w in words]\n    words = [w.replace(':', '') for w in words]\n    words\
    \ = [w.replace(':', '') for w in words]\n    words = [w.replace(';', '') for w\
    \ in words]\n    words = [w.replace('\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1edpyxjk.py\", line 51\n    words = [w.replace('\n   \
    \                    ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = []\n    words_in_string = []\n    count_words = 0\n\
    \n    for c in s:\n        count_words += 1\n\n        if count_words == 1:\n\
    \            if c == \" \":\n                words_in_string.append(' ')\n   \
    \         else:\n                words_in_string.append(c)\n            continue\n\
    \n        if c == \" \":\n            words_in_string.append(' ')\n          \
    \  continue\n        \n        if count_words > n:\n            words.append(\"\
    \".join(words_in_string))\n            words_in_string = []\n            count_words\
    \ = 0\n            continue\n        \n        words_in_string.append(c)\n\n \
    \   if count_words > n:\n        words.append(\"\".join(words_in_string))\n  \
    \      words_in_string = []\n        count_words = 0\n\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16l7g2x7.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp16l7g2x7.py\", line 59,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp16l7g2x7.py\", line\
    \ 50, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    \n    return []\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3moq4g9w.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n\n    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3c7ot1t.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmps3c7ot1t.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps3c7ot1t.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9465lyyu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9465lyyu.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9465lyyu.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN Practice:\n    if s == '':\n        return []\n\n \
    \   vowels = ['a','e','i','o','u']\n    my_vowels = [v + str(i + 1) for k, v in\
    \ enumerate(vowels)]\n    count = 0\n    words = []\n    my_words = s.split()\n\
    \    for w in my_words:\n        if w == ' ':\n            count += len(w)\n \
    \       else:\n            count = 0\n        \n        if count > n:\n      \
    \      break\n        \n        if w in my_vowels:\n            words.append(w)\n\
    \            \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqt85mwk.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpxqt85mwk.py\", line 50,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxqt85mwk.py\", line\
    \ 41, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpxqt85mwk.py\", line 21, in select_words\n    my_vowels = [v\
    \ + str(i + 1) for k, v in enumerate(vowels)]\n  File \"/tmp/tmpxqt85mwk.py\"\
    , line 21, in <listcomp>\n    my_vowels = [v + str(i + 1) for k, v in enumerate(vowels)]\n\
    NameError: name 'i' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    words = re.findall(r'\\w+', s)\n    return [w for w in\
    \ words if len(w) == n and all(c in consonants for c in w)]\n</cell>\n<cell>\n\
    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple\
    \ white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"\
    ]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n</cell>\n<text>\nThe\
    \ function select_words appears below. It should return the list of words in the\
    \ string s. Use a for loop to iterate through the string and append each word\
    \ to the list words.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6sjh0k81.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN Question 3\n    # YOUR CODE HERE\n    if n == 0:\n\
    \        return \"\"\n    words = []\n    for letter in s:\n        if letter\
    \ not in 'aeiou':\n            words.append(letter)\n        elif letter in 'aeiou'\
    \ and len(words) == 0:\n            words.append(letter)\n    return words\n \
    \   # END Question 3\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bfe5a2p.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9bfe5a2p.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9bfe5a2p.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = []\n    if n == 0: return []\n    splitted = s.split('\
    \ ')\n    if len(splitted) == 0: return []\n    for i in range(1, len(splitted)):\n\
    \        if len(splitted[i]) < n:\n            for word in splitted[:i]:\n   \
    \             words.append(word)\n            if len(splitted[i:]) > 0:\n    \
    \            words.extend(reversed(select_words(splitted[i+1:], n-1)))\n     \
    \       else:\n                break\n        else:\n            if len(splitted[i])\
    \ == n:\n                words.append(splitted[i])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3pb8qq5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpk3pb8qq5.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk3pb8qq5.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpk3pb8qq5.py\", line 25, in select_words\n    words.extend(reversed(select_words(splitted[i+1:],\
    \ n-1)))\n  File \"/tmp/tmpk3pb8qq5.py\", line 18, in select_words\n    splitted\
    \ = s.split(' ')\nAttributeError: 'list' object has no attribute 'split'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = re.findall(\"[a-zA-Z]+\", s)\n    result = [words[i]\
    \ for i in range(len(words)) if len(words[i].split()) == n]\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwt6687ey.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwt6687ey.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwt6687ey.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpwt6687ey.py\", line 16, in select_words\n    words = re.findall(\"\
    [a-zA-Z]+\", s)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN Question 3\n    # END Question 3\n    \n    # BEGIN\
    \ Question 4\n    # END Question 4\n    \n    # BEGIN Question 5\n    # END Question\
    \ 5\n    \n    # BEGIN Question 6\n    # END Question 6\n    \n    # BEGIN Question\
    \ 7\n    # END Question 7\n    \n    # BEGIN Question 8\n    # END Question 8\n\
    \    \n    return []\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw8ip5tbv.py\", line 35\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # BEGIN Practice 3\n    # return []\n    pass\n    # END Practice\
    \ 3\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdo932tkg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdo932tkg.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdo932tkg.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    \n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'y']\n    \n    word_list = []\n    for i in range(len(s)):\n\
    \        if s[i] in vowels:\n            if word_list == []:\n               \
    \ word_list.append(s[i])\n            else:\n                if word_list[-1][-1]\
    \ == s[i]:\n                    word_list[-1] = word_list[-1] + s[i]\n       \
    \         else:\n                    word_list.append(s[i])\n        elif s[i]\
    \ in vowels:\n            if word_list[-1][-1] != s[i]:\n                word_list.append(s[i])\n\
    \        else:\n            if word_list[-1][-1] != s[i]:\n                word_list[-1]\
    \ = word_list[-1] + s[i]\n        \n    if word_list == []:\n        return []\n\
    \    else:\n        return word_list\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_huevd_.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpo_huevd_.py\", line 53,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpo_huevd_.py\", line\
    \ 44, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpo_huevd_.py\", line 35, in select_words\n    if word_list[-1][-1]\
    \ != s[i]:\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return []\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_9o033h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5_9o033h.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5_9o033h.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # Your code here\n    \n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvlgdeq7w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvlgdeq7w.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvlgdeq7w.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb20f2nta.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb20f2nta.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb20f2nta.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0: return []\n    \n    count = 0\n    \n    arr\
    \ = [s]\n    \n    while(True):\n        count += 1\n        if count > n:\n \
    \           return arr\n        \n        ans = []\n        for i in range(len(arr)):\n\
    \            if(i == len(arr)-1):\n                ans.append(arr[i])\n      \
    \      else:\n                ans.append(arr[i] + arr[i+1])\n        arr.append(ans)\n\
    \        \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpts1q3oux.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpts1q3oux.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpts1q3oux.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpts1q3oux.py\", line 32, in select_words\n    ans.append(arr[i]\
    \ + arr[i+1])\nTypeError: can only concatenate str (not \"list\") to str\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # TODO 2b\n    if len(s) == 0:\n        return []\n    vowels\
    \ = \"aeiou\"\n    words = []\n    for letter in s:\n        if letter in vowels:\n\
    \            words.append(letter)\n    \n    \n    # TODO 2b\n    if len(s) ==\
    \ n and s == ''.join(words):\n        return words\n    # TODO 2b\n    \n    #\
    \ TODO 2c\n    vowels = \"aeiou\"\n    words = []\n    for letter in s:\n    \
    \    if letter in vowels and letter not in words:\n            words.append(letter)\n\
    \    \n    # TODO 2c\n    if len(s) == n and s == ''.join(words):\n        return\
    \ words\n    # TODO 2c\n    \n    # TODO 2d\n    vowels = \"aeiouAEIOU\"\n   \
    \ words = []\n    for letter in s:\n        if letter in vowels and letter not\
    \ in words:\n            words.append(letter)\n    \n    # TODO 2d\n    if len(s)\
    \ == n and s == ''.join(words):\n        return words\n    # TODO 2d\n    \n \
    \   # TODO 2e\n    vowels = \"AEIOUaeiou\"\n    words = []\n    for letter in\
    \ s:\n        if letter in vowels and letter not in words:\n            words.append(letter)\n\
    \    \n    # TODO 2e\n    if len(s) == n and s == ''.join(words):\n        return\
    \ words\n    # TODO 2e\n    \n    # TODO 2f\n    vowels = \"AEIOUaeiouAEIOU\"\n\
    \    words = []\n    for letter in s:\n        if letter in vowels and letter\
    \ not in words:\n            words.append(letter)\n    \n    # TODO 2f\n    if\
    \ len(s) == n and s == ''.join(words):\n        return words\n    # TODO 2f\n\
    \    \n    # TODO 2g\n    vowels = \"AEIOUaeiouAEIOU\"\n    words = []\n    for\
    \ letter in s:\n        if letter in vowels and letter not in words and letter\
    \ not in [' ', ' ']:\n            words.append(letter)\n    \n    # TODO 2g\n\
    \    if len(s) == n and s == ''.join(words):\n        return words\n    # TODO\
    \ 2g\n    \n    # TODO 2h\n    vowels = \"AEIOUaeiouAEIOU\"\n    words = []\n\
    \    for letter in s:\n        if letter in vowels and letter not in words and\
    \ letter not in [' ', ' ']:\n            words.append(letter)\n    \n    # TODO\
    \ 2h\n    if len(s) == n and s == ''.join(words):\n        return words\n    #\
    \ TODO 2h\n    \n    # TODO 2i\n    vowels = \"AEIOUaeiouAEIOU\"\n    words =\
    \ []\n    for letter in s:\n        if letter in vowels and letter not in words\
    \ and letter not in [' ', ' ']:\n            words.append(letter)\n    \n    #\
    \ TODO 2\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpje610wjx.py\", line\
    \ 123, in <module>\n    test_check()\n  File \"/tmp/tmpje610wjx.py\", line 121,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpje610wjx.py\", line\
    \ 112, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n == 0:\n        return []\n    vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\"]\n    \n    words = s.split()\n    \n    for i in\
    \ range(len(words)):\n        \n        if words[i] not in vowels:\n         \
    \   \n            if i == len(words)-1:\n                \n                return\
    \ words\n            \n            if words[i+1] not in vowels:\n            \
    \    \n                return words\n            \n            if words[i+1] not\
    \ in vowels and words[i-1] not in vowels:\n                \n                return\
    \ words\n            \n            if words[i-1] not in vowels and words[i+1]\
    \ not in vowels:\n                \n                return words\n           \
    \     \n        if words[i] in vowels and words[i-1] not in vowels and words[i+1]\
    \ not in vowels:\n            \n            return words\n    \n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnyv9lh7w.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpnyv9lh7w.py\", line 58,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnyv9lh7w.py\", line\
    \ 49, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Your code here\n    vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    vowel_count = s.count(\"aeiou\")\n    if vowel_count != n+1:\n \
    \       return []\n    else:\n        vowel_count = s.count(\"aeiou\")\n     \
    \   count = 0\n        words = []\n        word_list = s.split()\n        for\
    \ i in word_list:\n            if i.count(\"aeiou\") == vowel_count:\n       \
    \         count += 1\n                if count == n:\n                    words.append(i)\n\
    \        if count == len(word_list):\n            return words\n        else:\n\
    \            return []\n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1jygnli2.py\", line 36\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if n < 2:\n        return []\n\n    # Convert s to a list of\
    \ words, splitting at spaces.\n    words = s.split(\" \")\n\n    # Select words\
    \ that only contain n consonants.\n    words = [w for w in words if count_consonants(w)\
    \ == n]\n\n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvughenlp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvughenlp.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvughenlp.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpvughenlp.py\", line 23, in select_words\n    words = [w for\
    \ w in words if count_consonants(w) == n]\n  File \"/tmp/tmpvughenlp.py\", line\
    \ 23, in <listcomp>\n    words = [w for w in words if count_consonants(w) == n]\n\
    NameError: name 'count_consonants' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"]\n    words = s.split()\n\
    \    filtered_words = []\n    for word in words:\n        if sum(1 for char in\
    \ word if char in consonants) == n:\n            filtered_words.append(word)\n\
    \    return filtered_words\n</code>\n<code>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmzsleczb.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # todo your solution here\n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mpnjzer.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4mpnjzer.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4mpnjzer.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    words = s.split(' ')\n    return [w for w in words if len(w)\
    \ == n and w[0].isalpha() and w[-1].isalpha()] \n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01zy3ylr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp01zy3ylr.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp01zy3ylr.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    #Your code here\n    #return [x for x in s.split() if len(x)\
    \ == n]\n    return list(set(s.split()))[:n]\n\nassert select_words(\"Mary had\
    \ a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\"\
    , 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8wykz59.py\", line\
    \ 20, in <module>\n    assert select_words(\"Mary had a little lamb\", 4) == [\"\
    little\"]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n</cell>\n<text>\nExercise:\nImplement the select_words_function\
    \ below which takes in a string and an integer n and returns a list of all words\
    \ in the string that contain exactly n consonants.\n\nThe string s can contain\
    \ only letters and spaces.\nThe integer n can contain only digits between 1 and\
    \ 99.\n\nHint: You may use the re library and the functions re.search() and re.findall()\
    \ to find consonants.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbeghx0nt.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return []\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4_6n2fy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu4_6n2fy.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu4_6n2fy.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    return \"\"\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06ergbaz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp06ergbaz.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp06ergbaz.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    if len(s) == 0:\n        return []\n    \n    vowels\
    \ = \"AEIOUaeiou\"\n    \n    vowels_set = {x for x in vowels}\n    \n    count\
    \ = 0\n    \n    split_list = []\n    \n    split_list = s.split()\n    \n   \
    \ split_list.sort(key=str.casefold)\n    \n    split_list = list(set(split_list))\n\
    \    \n    if split_list[0] == \"a\":\n        split_list.remove(\"a\")\n    \
    \    \n    if split_list[-1] == \"a\":\n        split_list.remove(\"a\")\n   \
    \ \n    \n    filtered_list = []\n    \n    for word in split_list:\n        \n\
    \        count += len(word)\n        \n        for letter in word:\n         \
    \   if letter in vowels_set:\n                continue\n            else:\n  \
    \              filtered_list.append(word)\n        \n        if count >= n:\n\
    \            return filtered_list\n        else:\n            count = 0\n    \
    \        \n            filtered_list = []\n            \n    \n            \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeefcrhdc.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmpeefcrhdc.py\", line 75,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpeefcrhdc.py\", line\
    \ 66, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    return []\n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7v59b3z6.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    s = s.lower()\n    # create list of empty lists to hold words\
    \ that satisfy the condition\n    words: List[List[str]] = [[] for _ in range(n)]\n\
    \    # loop through every letter in string\n    for letter in s:\n        # create\
    \ list of letters that satisfy the condition\n        letters: List[str] = [letter\
    \ if letter in vowels else ' ' for vowels in vowels]\n        # check if there\
    \ are enough letters within current word\n        if len(letters) == n:\n    \
    \        # append the letters to word\n            words[len(letters) - 1] +=\
    \ letters\n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpws8sb6db.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpws8sb6db.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpws8sb6db.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpws8sb6db.py\", line 22, in select_words\n    letters: List[str]\
    \ = [letter if letter in vowels else ' ' for vowels in vowels]\nNameError: name\
    \ 'vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    def contains_consonant(s: str, i: int, n: int) -> bool:\n \
    \       return s[i] in 'bcdfghjklmnpqrstvwxyz'\n\n    words = s.split()\n    \n\
    \    return list(filter(contains_consonant, words))\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmknlx7rn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmknlx7rn.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmknlx7rn.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpmknlx7rn.py\", line 21, in select_words\n    return list(filter(contains_consonant,\
    \ words))\nTypeError: contains_consonant() missing 2 required positional arguments:\
    \ 'i' and 'n'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    words_list = []\n    \n    if n == 0 or s == \"\":\n\
    \        return words_list\n    \n    if s.count(\"x\") > 0:\n        for word\
    \ in s.split():\n            if word.count(\"x\") >= n:\n                words_list.append(word)\n\
    \        return words_list\n    \n    for word in s.split():\n        if len(word)\
    \ == n:\n            words_list.append(word)\n    return words_list\n\nassert\
    \ select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple\
    \ white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"\
    ]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n</cell>\n<text>\nStep\
    \ 3\nImplement count_occurrences of your count_words function.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpo34xk2tr.py\", line 38\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    word\
    \ = s.split(\" \")\n    word_length = len(word)\n    select_list = []\n\n    for\
    \ index in range(0, word_length):\n        word[index] = word[index].lower()\n\
    \    \n    for index in range(0, word_length):\n        if len(word[index]) !=\
    \ n:\n            continue\n        for vowel in vowels:\n            if word[index].find(vowel)\
    \ == -1:\n                break\n        else:\n            select_list.append(word[index])\n\
    \n    return select_list\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsk5_t86l.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsk5_t86l.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsk5_t86l.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    vowels_set\
    \ = set(vowels)\n    words = s.split()\n    word_counts = [sum(1 for i in g if\
    \ i in vowels_set) for g in groupby(words)]\n    word_counts_filtered = [i for\
    \ i in word_counts if i <= n]\n    filtered_words = [i for i in words if i in\
    \ vowels_set]\n    return filtered_words\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndte_m0a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpndte_m0a.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpndte_m0a.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpndte_m0a.py\", line 19, in select_words\n    word_counts = [sum(1\
    \ for i in g if i in vowels_set) for g in groupby(words)]\nNameError: name 'groupby'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # Solution begins here\n    vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    vowels_with_consonants = [*vowels, \"b\", \"c\",\"d\",\"\
    f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    v\",\"w\",\"x\",\"y\",\"z\"]\n    consonants = [*vowels_with_consonants, \"b\"\
    , \"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    \n    words = []\n    for c in\
    \ s:\n        if c in vowels_with_consonants:\n            words.append(c)\n \
    \       elif c in vowels:\n            words.append(c)\n        elif c in consonants:\n\
    \            words.append(c)\n            \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmbn5s__.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpzmbn5s__.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzmbn5s__.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s.isspace():\n        return []\n    if s.count(\"\\n\"\
    ) != 0:\n        return []\n    if n == 0:\n        return [s]\n    \n    word_list\
    \ = s.split(\" \")\n    \n    return word_list\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0c0si1a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe0c0si1a.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpe0c0si1a.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # todo your code here\n    if n == 0:\n        return []\n\n\
    \    words = s.split(' ')\n    words2 = words.copy()\n    words3.clear()\n\n \
    \   while len(words2) != len(words3):\n        words3.append(words2[-1])\n   \
    \     words2.pop()\n    return words3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nHere is another solution. My code is only to show how to find all matching\
    \ words in given string with exactly n characters. Hope it helps. \n<code>\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp62ujfokb.py\", line 28\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    alphabet\
    \ = list(string.ascii_letters + string.digits)\n    words = []\n    i = 0\n  \
    \  length = len(s)\n    while i < length:\n        if s[i] in vowels:\n      \
    \      i += 1\n            continue\n        words.append(s[i:i+n])\n        i\
    \ += 1\n    return words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxugjtlgo.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return []\n    if n == 0: return [s]\n\
    \    elif n in (0, 1):\n        return s[n:].split()\n    else:\n        res =\
    \ []\n        start = 0\n        while n > 0:\n            end = start + len(s[start:].split())\n\
    \            res.extend(s[start:end].split())\n            n -= 1\n          \
    \  start = end\n        return res\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4ju32cs.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_4ju32cs.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_4ju32cs.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    # Implement here\n\
    \    return [] \n    \ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmpi6uqz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvmpi6uqz.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvmpi6uqz.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9d8jqn9m.py\", line\
    \ 286, in <module>\n    test_check()\n  File \"/tmp/tmp9d8jqn9m.py\", line 284,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9d8jqn9m.py\", line\
    \ 275, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    if s == \"\":\n        return list()\n\n    remaining = len(s)\
    \ - 1\n    words = list()\n\n    while remaining > 0:\n        if s[remaining]\
    \ in \"aeiouAEIOU\":\n            words.append(s[remaining])\n            remaining\
    \ -= 1\n        else:\n            remaining -= 1\n            \n        if remaining\
    \ == 0:\n            break\n\n    return words\n\nprint(select_words(\"Mary had\
    \ a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"\
    simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"\
    Uncle sam\", 3))\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer OP's question.\
    \  He is trying to find strings that contain exactly 3 letters.\n<|/ c |>\n<|\
    \ c |>\nThanks. I edited my answer to match the question. Also, thank you for\
    \ the code suggestion, I'll give it a try.\n<|/ c |>\n<| c |>\nYour code doesn't\
    \ produce the correct results for \"Uncle sam\", 3; it produces [\"sam\", \"Uncle\"\
    ].  OP's code produces [\"sam\", \"Uncle\"].\n<|/ c |>\n<| c |>\nI made a typo\
    \ in the for loop. Thanks for catching that. I am still new at this and I am not\
    \ sure what the purpose of the while loop was. Is it just to make the code more\
    \ readable or is there more to it?\n<|/ c |>\n<| c |>\nThe while loop was to handle\
    \ the last iteration of the while loop, which was necessary because I did not\
    \ know how many consonants were in each string. My code is pretty straight forward\
    \ and I did not know how many consonants there were in each string, so I had to\
    \ use a while loop. I will definitely keep this code in mind next time I need\
    \ to find out how many consonants are in a string. Thanks for catching that!\n\
    <|/ c |>\n<| a tags=string,list,python dscore=1 |>\nYou can use regular expressions\
    \ to solve this problem\n<code>\nimport re\n\ns = \"Hello world\"\nmatch = re.search(\"\
    (\\w{3})\", s)\nprint(match.groups())\n</code>\nOutput\n<code>\n('Hel', 'lo',\
    \ 'wo')\n</code>\n<|/ a |>\n<| c |>\nThe question is tagged Python, so why not\
    \ use the standard library?\n<|/ c |>\n<| c |>\nI agree that using standard library\
    \ would be a better solution, I just wanted to show that regular expressions can\
    \ be used for this\n<|/ c |>\n<| c |>\nYeah, I know that regex, but I wanted it\
    \ \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmwvp705l.py\", line 39\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    # your work here\n    # ...\n    # ...\n    # ...\n \
    \   return words\n    \n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr13way27.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr13way27.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr13way27.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpr13way27.py\", line 21, in select_words\n    return words\n\
    NameError: name 'words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    letters = s.split(\" \")\n    if n == 0 or letters == []:\n\
    \        return letters\n    if n > 1:\n        letters = letters[:n]\n      \
    \  letters.append(letters[0])\n    letters = [letter for letter in letters if\
    \ len(letter) == n]\n    return letters\n    \n    \ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1fdswto.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpd1fdswto.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpd1fdswto.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    if n == 0: \n        return []\n    \n    return [i.split()[0]\
    \ for i in re.finditer(re.escape(s), \"{}{}\".format(s[:len(s)-n], s[len(s)-n:]))]\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport re\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj7s7r3lh.py\", line 21\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw3saa2q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxw3saa2q.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxw3saa2q.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    # implement here\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29_okdr_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp29_okdr_.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp29_okdr_.py\", line\
    \ 21, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\n    \n    s = []\n    for letter in s:\n        if letter.isalpha()\
    \ and letter not in ('',' '):\n            if len(s) <= n:\n                s.append(letter)\n\
    \                \n    return s[:]\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2c1y56b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv2c1y56b.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv2c1y56b.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
