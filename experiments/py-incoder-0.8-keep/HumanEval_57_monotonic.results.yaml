language: py
name: HumanEval_57_monotonic
results:
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 0:\n        return True\n    elif len(l) == 1:\n        return l[0] < l[0]\n\
    \    else:\n        last = l[-1]\n        l0 = l[0]\n        return ((l0 < last)\
    \ is not (last < l0))\n\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32fnik9k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp32fnik9k.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp32fnik9k.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n\
    \        iter(l)\n    except TypeError:\n        return False\n    else:\n   \
    \     i = iter(l).__next__\n        li = [iter(l).__next__ for _ in range(1000)]\n\
    \        for _ in li:\n            if i >= li:\n                return False\n\
    \            elif i() >= li[0]:\n                return True\n            i -=\
    \ 1\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjcasy59j.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjcasy59j.py\", line 38,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjcasy59j.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpjcasy59j.py\"\
    , line 20, in monotonic\n    if i >= li:\nTypeError: '>=' not supported between\
    \ instances of 'method-wrapper' and 'list'\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    a = l[0]\n\
    \    b = l[-1]\n    if b < a:\n        return False\n    for i in l[1:-1]:\n \
    \       if b < i:\n            return False\n        if b >= i:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1d3863z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpl1d3863z.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpl1d3863z.py\", line 27,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        if l[-1] < l[-2]:\n          \
    \  return not (\n                monotonic(l[0:len(l)-1])\n                or\n\
    \                monotonic(l[1:len(l)])\n            )\n        else:\n      \
    \      return not (\n                monotonic(l[0:len(l)-1])\n              \
    \  or\n                monotonic(l[1:len(l)])\n            )\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_hkoc24.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpy_hkoc24.py\", line 39,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpy_hkoc24.py\", line 29,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return False\n    it = 1\n    i = 2\n    while i < len(l):\n \
    \       if l[i] - l[i-1] > 1:\n            i += 1\n        elif l[i] - l[i-1]\
    \ < 0:\n            i -= 1\n        it += 1\n    return it == len(l)\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls6khd4h.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpls6khd4h.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpls6khd4h.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(i < j for i, j in zip(l, l[1:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvrdnhx5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbvrdnhx5.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbvrdnhx5.py\", line 18,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfc0hfkm6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfc0hfkm6.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfc0hfkm6.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpfc0hfkm6.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined. Did you mean: 'range'?\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i + 1] for i in xrange(len(l)\
    \ - 1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1s1o1gvx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1s1o1gvx.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1s1o1gvx.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp1s1o1gvx.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i + 1] for i in xrange(len(l)\
    \ - 1))\nNameError: name 'xrange' is not defined. Did you mean: 'range'?\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    first = l[0]\n    for i in l:\n        if i >\
    \ first:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61qrtb_r.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp61qrtb_r.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp61qrtb_r.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # From\
    \ http://stackoverflow.com/a/24575092\n    if len(l) != len(set(l)):\n       \
    \ return False\n    else:\n        return all(x < y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3hwv1f1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt3hwv1f1.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpt3hwv1f1.py\", line 22,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)==0:\n\
    \        return True\n    if l[0] <= l[-1]:\n        l, r = l[:1], l[1:]\n   \
    \ else:\n        l, r = l[1:], l[:1]\n    return not (r<=l)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmwcvq0l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvmwcvq0l.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpvmwcvq0l.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i = len(l)-1\n\
    \    j = 0\n    while i > 0:\n        ti = l[i]\n        tj = l[j]\n        if\
    \ ti < tj:\n            return True\n        if ti > tj:\n            return False\n\
    \        if ti == tj:\n            l[j] += 1\n        i -= 1\n        j += 1\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1qkizra.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpe1qkizra.py\", line 38,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpe1qkizra.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(sorted(l))\n\
    \    if len(l) < 2:\n        return True\n    if l[1] > l[0]:\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99slixaj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp99slixaj.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp99slixaj.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ != len(set(l)):\n        return True\n    diffs = [max(i) - min(i) for i in\
    \ l]\n    return all([d <= 0 for d in diffs])\n\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83aj9219.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp83aj9219.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp83aj9219.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp83aj9219.py\"\
    , line 14, in monotonic\n    diffs = [max(i) - min(i) for i in l]\n  File \"/tmp/tmp83aj9219.py\"\
    , line 14, in <listcomp>\n    diffs = [max(i) - min(i) for i in l]\nTypeError:\
    \ 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = sorted(l)\n\
    \    return all(i > j for i, j in zip(l, l[1:]))\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchs7o06y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpchs7o06y.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpchs7o06y.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if not l:\n        return False\n    last = l[0]\n\
    \    return all(a >= last for a in l[1:])\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoazj2f2d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoazj2f2d.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpoazj2f2d.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return False\n    return l[-1] - l[0] == l[1] - l[-2]\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7uohn0g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph7uohn0g.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph7uohn0g.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(i < j or j == 0 for\
    \ i in l for j in l if i < j)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bj0ol8x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7bj0ol8x.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp7bj0ol8x.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Code\
    \ inspired by http://www.oreilly.com/opencourse/os-course-online.aspx\n    if\
    \ len(l) == 0:\n        return True\n    if l[0] == l[-1]:\n        return True\n\
    \    if l[0] == l[1]:\n        return False\n\n    # Sort the elements. If the\
    \ last element is not the smallest or the second\n    # last is not the largest,\
    \ those are the two extreme elements.\n    last_extreme = min(l)\n    second_last_extreme\
    \ = sorted(l, key=lambda e: e, reverse=True)[0]\n    return last_extreme <= second_last_extreme\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94yynsz_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp94yynsz_.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp94yynsz_.py\", line 29,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        current = l[0]\n        for elem\
    \ in l[1:]:\n            if elem < current:\n                return False\n  \
    \          elif elem > current:\n                return True\n            current\
    \ = elem\n        return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls9u7yda.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpls9u7yda.py\", line 35,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpls9u7yda.py\", line 27,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823498
