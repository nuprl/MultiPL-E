language: py
name: HumanEval_58_common
results:
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common_items = []\n    for i in l1:\n        if i in l2:\n            common_items.append(i)\n\
    \    return sorted(common_items)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  c1 = Counter(l1)\n    c2 = Counter(l2)\n    common = c1.intersection(c2)\n\
    \    return sorted(list(c1.keys()) + list(c2.keys()))[\n        list(common)\n\
    \    ]\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8],\
    \ [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n\
    \    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wz6u7z4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6wz6u7z4.py\", line 25,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp6wz6u7z4.py\", line 19, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\n  File \"/tmp/tmp6wz6u7z4.py\", line 11, in common\n    c1 =\
    \ Counter(l1)\nNameError: name 'Counter' is not defined\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    set1 = set(l1)\n    set2 = set(l2)\n    common = list(set1\
    \ & set2)\n    common.sort()\n    return common\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1).intersection(set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            i += 1\n            j += 1\n        elif l1[i]\
    \ < l2[j]:\n            common.append(l1[i])\n            i += 1\n        else:\n\
    \            common.append(l2[j])\n            j += 1\n\n    return common\n\n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkgo6qb3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbkgo6qb3.py\", line 33,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbkgo6qb3.py\", line 27, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    res = []\n    for x in l1:\n\
    \        if x in l2:\n            res.append(x)\n            l2.remove(x)\n  \
    \  return res\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3,\
    \ 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1).intersection(set(l2)))\n\n\ndef check(candidate):\n \
    \   assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823311
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  set2 = set(l2)\n    return [x for x in l1 if x in set2]\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6tzt19v.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmps6tzt19v.py\", line 21,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmps6tzt19v.py\", line 15, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = sorted(l1)\n    l2 = sorted(l2)\n    s = set(l1) & set(l2)\n    return\
    \ sorted(list(s))\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  sorted_list1 = sorted(l1)\n    sorted_list2 = sorted(l2)\n    diff1 = sorted_list1[1:]\n\
    \    diff2 = sorted_list2[1:]\n    diff1.extend(sorted_list2[:1])\n    common\
    \ = set(sorted_list1).intersection(set(sorted_list2))\n    diff1.extend(common)\n\
    \    diff2.extend(common)\n    return sorted(diff1), sorted(diff2)\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpee3essgs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpee3essgs.py\", line 28,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpee3essgs.py\", line 22, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1).intersection(set(l2))))\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = sorted(l1)\n    l2 = sorted(l2)\n    common_list = []\n    for i in range(len(l1)):\n\
    \        if l1[i]==l2[i]:\n            common_list.append(l1[i])\n    return common_list\n\
    \ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dnz5w9c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1dnz5w9c.py\", line 26,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp1dnz5w9c.py\", line 20, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  from bisect import bisect_left\n    insert = bisect_left\n    return [l[i -\
    \ 1] for i in insert(l1, l2) for l in (l1, l2)]\n\ndef check(candidate):\n   \
    \ assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xegue2s.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2xegue2s.py\", line 22,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp2xegue2s.py\", line 16, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\n  File \"/tmp/tmp2xegue2s.py\", line 13, in common\n    return\
    \ [l[i - 1] for i in insert(l1, l2) for l in (l1, l2)]\nTypeError: '<' not supported\
    \ between instances of 'int' and 'list'\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823331
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1_items = list(set(l1))\n    l2_items = list(set(l2))\n    return sorted(l1_items\
    \ & l2_items)\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3,\
    \ 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqxmw_jg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoqxmw_jg.py\", line 22,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpoqxmw_jg.py\", line 16, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\n  File \"/tmp/tmpoqxmw_jg.py\", line 13, in common\n    return\
    \ sorted(l1_items & l2_items)\nTypeError: unsupported operand type(s) for &: 'list'\
    \ and 'list'\n"
  stdout: ''
  timestamp: 1659823331
- exit_code: 1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  # Get the indices of the two lists\n    i1, i2 = 0, 0\n    size1, size2 = len(l1),\
    \ len(l2)\n    # Go through them in parallel\n    while i1 < size1 and i2 < size2:\n\
    \        if l1[i1] == l2[i2]:\n            i1 += 1\n            i2 += 1\n    \
    \    elif l1[i1] < l2[i2]:\n            i2 += 1\n        else:\n            i1\
    \ += 1\n    if i1 == size1:\n        return l2[:i2]\n    elif i2 == size2:\n \
    \       return l1[:i1]\n    else:\n        return l1[:i1], l2[:i2]\n</code>\n\
    <|/ a tags=python |>\n<| c |>\nI like the solution but I think the complexity\
    \ is O(n\xB2). I can imagine this can be improved by sorting the lists at the\
    \ beginning, but then it would be O(n log n). I do not know a solution better\
    \ than O(n\xB2).\n<|/ c |>\n<| c |>\nThis is O(n\xB2) because of the for loop\
    \ and recursion. Without that it's O(n)\n<|/ c |>\n<| c |>\nYes, I think your\
    \ solution is better than mine, but I think the complexity is still O(n\xB2),\
    \ isn't it?\n<|/ c |>\n<| a tags=python |>\nI thought I would share my solution\
    \ to this problem as it's one of the first things I googled when I was trying\
    \ to solve this problem.\n<code>\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsx6bp7eo.py\", line 32\n    I like the solution but I\
    \ think the complexity is O(n\xB2). I can imagine this can be improved by sorting\
    \ the lists at the beginning, but then it would be O(n log n). I do not know a\
    \ solution better than O(n\xB2).\n                                           \
    \              ^\nSyntaxError: invalid character '\xB2' (U+00B2)\n"
  stdout: ''
  timestamp: 1659823331
