name: HumanEval_61_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    opening_bracket = False\n    for char in brackets:\n       \
    \ if char == \"(\":\n            stack.append(char)\n            opening_bracket\
    \ = True\n        elif char == \")\":\n            if not opening_bracket:\n \
    \               return False\n            opening_bracket = False\n        elif\
    \ char == \"{\":\n            if opening_bracket:\n                return False\n\
    \        elif char == \"}\":\n            if not opening_bracket:\n          \
    \      return False\n        elif char == \"[\":\n            if not opening_bracket:\n\
    \                return False\n        elif char == \"]\":\n            if not\
    \ opening_bracket:\n                return False\n        if char == \"}\" and\
    \ opening_bracket:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqs9e6jmh.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpqs9e6jmh.py\", line 56,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqs9e6jmh.py\"\
    , line 43, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c in \"([{\":\n            stack.append(c)\n\
    \        elif c in \")]}\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n            if not stack:\n                return\
    \ True\n        elif c in \"({[\":\n            if not stack:\n              \
    \  return False\n            stack[-1] = stack[-1] + c\n        else:\n      \
    \      return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubg3fjgb.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpubg3fjgb.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpubg3fjgb.py\"\
    , line 38, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return not (len(brackets) % (len(brackets) - 1))\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2borgsw1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2borgsw1.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2borgsw1.py\"\
    , line 19, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    i = 0\n    length = len(brackets)\n    while i < length:\n \
    \       if brackets[i] == \"(\":\n            if not stack:\n                return\
    \ False\n            stack.append(brackets[i])\n            i += 1\n        elif\
    \ brackets[i] == \")\":\n            if not stack:\n                return False\n\
    \            opening = stack.pop()\n            if opening != brackets[i]:\n \
    \               return False\n            i += 1\n        else:\n            i\
    \ += 1\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjk98qn8m.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpjk98qn8m.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjk98qn8m.py\"\
    , line 36, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if \"(\" not in brackets:\n        return False\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    stack = []  # type: List[Brackets]\n\
    \    for char in brackets:\n        if char in \")(\":\n            if stack:\n\
    \                return False\n            stack.append(Brackets(char))\n    \
    \    elif char in \"((\":\n            if not stack or stack[-1].bracket != char:\n\
    \                return False\n            stack.pop()\n        else:\n      \
    \      return False\n    if len(stack) > 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_iauvhj.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpn_iauvhj.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn_iauvhj.py\"\
    , line 34, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpn_iauvhj.py\"\
    , line 21, in correct_bracketing\n    stack.append(Brackets(char))\nNameError:\
    \ name 'Brackets' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets != \"()\" * len(brackets)\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33pgfsvw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp33pgfsvw.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp33pgfsvw.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        if c == \")\" and stack:\n            if len(stack) == 1:\n         \
    \       return True\n            stack.pop()\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnoimsjn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbnoimsjn.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbnoimsjn.py\"\
    , line 30, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == '':\n        return True\n    if '(' not in brackets:\n     \
    \   return False\n    left_counts = {x: brackets.count(x) for x in brackets if\
    \ x == ')'}\n    for c in brackets:\n        if c not in ')(':\n            continue\n\
    \        if c in left_counts:\n            if left_counts[c] != 1:\n         \
    \       return False\n        else:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jm6c_m0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7jm6c_m0.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7jm6c_m0.py\"\
    , line 31, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for char in brackets:\n        if char == '(':\n           \
    \ if not stack or stack[-1] != '(':\n                return False\n          \
    \  stack.pop()\n        else:\n            if stack:\n                if not (stack[-1]\
    \ == '(' or stack[-1] == ')'):\n                    return False\n           \
    \ stack.append(char)\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbkp1w_v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmbkp1w_v.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmbkp1w_v.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != \"(\":\n                return False\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = [\"(\", \")\"]\n    close_brackets = [\")(\", \")\"]\n\n   \
    \ for bracket in brackets:\n        if bracket not in open_brackets:\n       \
    \     return False\n\n    stack = [brackets[0]]\n    for index in range(1, len(brackets)):\n\
    \        if brackets[index] == \")\":\n            stack.pop()\n            if\
    \ stack[-1] != brackets[index]:\n                return False\n        else:\n\
    \            stack.append(brackets[index])\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm78imkeb.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpm78imkeb.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm78imkeb.py\"\
    , line 33, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpm78imkeb.py\"\
    , line 25, in correct_bracketing\n    if stack[-1] != brackets[index]:\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n   \
    \         stack.append(bracket)\n        elif bracket == \")\":\n            if\
    \ len(stack) == 0:\n                return False\n            top_bracket = stack.pop()\n\
    \            if top_bracket != \"(\":\n                return False\n        else:\n\
    \            return False\n    if len(stack) != 0:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for index, value in enumerate(brackets):\n        if value in\
    \ \")(\" and stack:\n            stack.pop()\n        else:\n            stack.append(value)\n\
    \n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyhjy65k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdyhjy65k.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdyhjy65k.py\"\
    , line 30, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n    return\
    \ count > 0\n\ndef check(candidate):\n    assert candidate('()') == True\n   \
    \ assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeak3ic0k.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpeak3ic0k.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpeak3ic0k.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == '(':\n        return False \n    if brackets == '[':\n      \
    \  return True \n    if brackets == '{':\n        return True \n    if brackets\
    \ == '<':\n        return True \n    if brackets == '>':\n        return True\
    \ \n    if brackets == '+':\n        return True \n    if brackets == '-':\n \
    \       return True \n    if brackets == '*':\n        return True \n    if brackets\
    \ == '/':\n        return True \n    if brackets == '%':\n        return True\
    \ \n    if brackets == '^':\n        return True \n    if brackets == '=':\n \
    \       return True \n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6g2187vd.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp6g2187vd.py\", line 56,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6g2187vd.py\"\
    , line 42, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []  # type: List[str]\n    for char in brackets:\n        if char ==\
    \ \"(\":\n            if not stack or stack[-1] != \"(\":\n                return\
    \ False\n            stack.pop()\n        elif char == \")\":\n            if\
    \ not stack or stack[-1] != \")\":\n                return False\n           \
    \ stack.pop()\n        elif char == \"[\":\n            if not stack or stack[-1]\
    \ != \"[\":\n                return False\n            stack.pop()\n        elif\
    \ char == \"]\":\n            if not stack or stack[-1] != \"]\":\n          \
    \      return False\n            stack.pop()\n        elif char == \"{\":\n  \
    \          if not stack or stack[-1] != \"{\":\n                return False\n\
    \            stack.pop()\n        elif char == \"}\":\n            if not stack\
    \ or stack[-1] != \"{\":\n                return False\n            stack.pop()\n\
    \        elif char == \",\":\n            if not stack or stack[-1] != \",\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    .\":\n            if not stack or stack[-1] != \".\":\n                return\
    \ False\n            stack.pop()\n        elif char == \"=\":\n            if\
    \ not stack or stack[-1] != \"=\":\n                return False\n           \
    \ stack.pop()\n        elif char == \"\\\\\":\n            if not stack or stack[-1]\
    \ != \"\\\\\":\n                return False\n            stack.pop()\n      \
    \  elif char == \":\":\n            if not stack or stack[-1] != \":\":\n    \
    \            return False\n            stack.pop()\n        elif char == \"-\"\
    :\n            if not stack or stack[-1] != \"-\":\n                return False\n\
    \            stack.pop()\n        elif char == \"*\":\n            if not stack\
    \ or stack[-1] != \"*\":\n                return False\n            stack.pop()\n\
    \        elif char == \"+\":\n            if not stack or stack[-1] != \"+\"\n\
    \                or not stack or stack[-1] != \"=\":\n                return False\n\
    \            stack.pop()\n        elif char == \"?\":\n            if not stack\
    \ or stack[-1] != \"?\":\n                return False\n            stack.pop()\n\
    \        elif char == \">\":\n            if not stack or stack[-1] != \">\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    <\":\n            if not stack or stack[-1] != \"<\":\n                return\
    \ False\n            stack.pop()\n        elif char == \">=\":\n            if\
    \ not stack or stack[-1] != \">=\":\n                return False\n          \
    \  stack.pop()\n        elif char == \"<=\":\n            if not stack or stack[-1]\
    \ != \"<=\":\n                return False\n            stack.pop()\n        elif\
    \ char == \"^\":\n            if not stack or stack[-1] != \"^\":\n          \
    \      return False\n            stack.pop()\n        elif char == \"$\":\n  \
    \          if not stack or stack[-1] != \"$\":\n                return False\n\
    \            stack.pop()\n        elif char == \"|\":\n            if not stack\
    \ or stack[-1] != \"|\":\n                return False\n            stack.pop()\n\
    \        elif char == \"%\":\n            if not stack or stack[-1] != \"%\":\n\
    \                return False\n            stack.pop()\n        elif char == \"\
    &\":\n            if not \ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm9op5yv8.py\", line 69\n    if not stack or stack[-1]\
    \ != \"+\"\n                                   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = 0\n    for c in brackets:\n        if c == '(':\n            stack +=\
    \ 1\n        elif c == ')':\n            if not stack:\n                return\
    \ False\n            stack -= 1\n    if stack != 0:\n        return False\n  \
    \  return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for char in brackets:\n        if char == '(':\n           \
    \ stack.append(char)\n        if char == ')':\n            if len(stack) == 0:\n\
    \                return False\n            elif stack.pop() != '(':\n        \
    \        return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check if the brackets are balanced\n    stack = [0]\n    for i,c in enumerate(brackets):\n\
    \        if c == \"(\":\n            if stack[-1] == 0 or (stack[-1] >= 0 and\
    \ brackets[stack[-2]] != \")\"):\n                return False\n            stack[-1]\
    \ += 1\n        elif c == \")\":\n            if not stack or stack[-1] < 0 or\
    \ brackets[stack[-1]] != \")\":\n                return False\n            stack.pop()\n\
    \        elif c != \")\":\n            return False\n    return not stack\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv0zbt_8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppv0zbt_8.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppv0zbt_8.py\"\
    , line 30, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
