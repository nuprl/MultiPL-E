name: HumanEval_12_longest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of list of strings, return the longest one. Return the\
  \ first one in case of multiple\n    // strings of the same length. Return None\
  \ in case the input list is empty.\n    public static Optional<String> longest(ArrayList<String>\
  \ strings) {\n"
tests: "return Optional.empty();\n    }\n    public static void main(String[] args)\
  \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
  \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
  y\", (String)\"z\")))).equals(\"x\"));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
  x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
  abc\")))).equals(\"zzzz\"));\n    }\n\n}\n"
completions: ["        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int maxLength = 0;\n        String maxString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                maxString = s;\n   \
    \         }\n        }\n        return Optional.of(maxString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max_len = 0;\n\
    \        String max_str = \"\";\n        for (String s : strings) {\n        \
    \    if (s.length() > max_len) {\n                max_len = s.length();\n    \
    \            max_str = s;\n            }\n        }\n        return Optional.of(max_str);",
  '        return strings.stream().reduce((a, b) -> a.length() > b.length() ? a :
    b);', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int maxLength = 0;\n        String longestString = \"\";\n\
    \        for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        int maxLength = 0;\n        String longestString = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > maxLength) {\n  \
    \              maxLength = s.length();\n                longestString = s;\n \
    \           }\n        }\n        return Optional.of(longestString);", "     \
    \   if (strings.size() == 0) {\n            return Optional.empty();\n       \
    \ }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = strings.get(0).length();\n        int index = 0;\n  \
    \      for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
    \ > max) {\n                max = strings.get(i).length();\n                index\
    \ = i;\n            }\n        }\n        return Optional.of(strings.get(index));",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longest = null;\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int max_length\
    \ = 0;\n        String longest = \"\";\n        for (String s : strings) {\n \
    \           if (s.length() > max_length) {\n                max_length = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = null;\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int max = 0;\n        String longest = \"\";\n        for (String s :\
    \ strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = 0;\n        String maxString = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     // TODO: implement me\n        return Optional.empty();", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longest = null;\n        for (String s : strings) {\n   \
    \         if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max = strings.get(0).length();\n        int maxIndex = 0;\n\
    \        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
    \ > max) {\n                max = strings.get(i).length();\n                maxIndex\
    \ = i;\n            }\n        }\n        return Optional.of(strings.get(maxIndex));",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int maxLength\
    \ = 0;\n        String maxString = \"\";\n        for (String s : strings) {\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLen = 0;\n        String maxStr = null;\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLen) {\n                maxLen\
    \ = s.length();\n                maxStr = s;\n            }\n        }\n     \
    \   return Optional.of(maxStr);", "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        int maxLength = 0;\n     \
    \   String longest = null;\n        for (String s : strings) {\n            if\
    \ (s.length() > maxLength) {\n                maxLength = s.length();\n      \
    \          longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().reduce((a,
    b) -> a.length() > b.length() ? a : b);', "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longestString = \"\";\n    \
    \    for (String s : strings) {\n            if (s.length() > maxLength) {\n \
    \               maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLen = 0;\n        String maxStr = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLen) {\n                maxLen\
    \ = s.length();\n                maxStr = s;\n            }\n        }\n     \
    \   return Optional.of(maxStr);", "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max_len = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max_len) {\n                max_len\
    \ = s.length();\n                longest = s;\n            }\n        }\n    \
    \    return Optional.of(longest);", "        if (strings.size() == 0) {\n    \
    \        return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longestString = null;\n    \
    \    for (String s : strings) {\n            if (s.length() > maxLength) {\n \
    \               maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max_len = 0;\n\
    \        String max_str = \"\";\n        for (String s : strings) {\n        \
    \    if (s.length() > max_len) {\n                max_len = s.length();\n    \
    \            max_str = s;\n            }\n        }\n        return Optional.of(max_str);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longest = null;\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().reduce((a,
    b) -> a.length() > b.length() ? a : b);', "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        int maxLen = 0;\n  \
    \      String maxStr = \"\";\n        for (String s : strings) {\n           \
    \ if (s.length() > maxLen) {\n                maxLen = s.length();\n         \
    \       maxStr = s;\n            }\n        }\n        return Optional.of(maxStr);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longestString = \"\";\n    \
    \    for (String s : strings) {\n            if (s.length() > maxLength) {\n \
    \               maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
    \            if (s.length() > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String maxString = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                maxString = s;\n           \
    \ }\n        }\n        return Optional.of(maxString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        Optional<String> longest = Optional.of(strings.get(0));\n    \
    \    for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max = 0;\n \
    \       String longest = \"\";\n        for (String s : strings) {\n         \
    \   if (s.length() > max) {\n                max = s.length();\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = null;\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        int maxLength = 0;\n        String longestString = null;\n     \
    \   for (String s : strings) {\n            if (s.length() > maxLength) {\n  \
    \              maxLength = s.length();\n                longestString = s;\n \
    \           }\n        }\n        return Optional.of(longestString);", "     \
    \   if (strings.size() == 0) {\n            return Optional.empty();\n       \
    \ }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLen = 0;\n        String maxStr = \"\";\n        for (String\
    \ str : strings) {\n            if (str.length() > maxLen) {\n               \
    \ maxLen = str.length();\n                maxStr = str;\n            }\n     \
    \   }\n        return Optional.of(maxStr);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longestString = \"\";\n        for (String s : strings) {\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);", "        int maxLength = 0;\n        String longest\
    \ = null;\n        for (String s : strings) {\n            if (s.length() > maxLength)\
    \ {\n                maxLength = s.length();\n                longest = s;\n \
    \           }\n        }\n        return Optional.ofNullable(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : strings) {\n            if (!longest.isPresent()\
    \ || s.length() > longest.get().length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int maxLength\
    \ = 0;\n        String maxString = \"\";\n        for (String s : strings) {\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                longest = s;\n            }\n        }\n    \
    \    return Optional.of(longest);", "        if (strings.size() == 0) {\n    \
    \        return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : strings)\
    \ {\n            if (!longest.isPresent() || s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n\
    \        int maxIndex = 0;\n        for (int i = 1; i < strings.size(); i++) {\n\
    \            if (strings.get(i).length() > maxLength) {\n                maxLength\
    \ = strings.get(i).length();\n                maxIndex = i;\n            }\n \
    \       }\n        return Optional.of(strings.get(maxIndex));", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
    \            if (s.length() > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longest = \"\";\n        for (String s : strings) {\n   \
    \         if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String result\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > result.length()) {\n                result = s;\n            }\n        }\n\
    \        return Optional.of(result);", "        if (strings.size() == 0) {\n \
    \           return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = 0;\n        String longest = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.of(strings.get(0));\n     \
    \   for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longestString = \"\";\n    \
    \    for (String s : strings) {\n            if (s.length() > maxLength) {\n \
    \               maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().reduce((a, b) -> a.length() > b.length() ? a : b);', "      \
    \  if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String maxString = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                maxString = s;\n            }\n        }\n  \
    \      return Optional.of(maxString);", "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
    \ {\n            if (!longest.isPresent() || s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String longest = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longest = s;\n            }\n\
    \        }\n        return Optional.of(longest);", "        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : strings) {\n            if (!longest.isPresent()\
    \ || s.length() > longest.get().length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
    \            if (s.length() > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = strings.get(0).length();\n        int index = 0;\n  \
    \      for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
    \ > max) {\n                max = strings.get(i).length();\n                index\
    \ = i;\n            }\n        }\n        return Optional.of(strings.get(index));",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : strings)\
    \ {\n            if (!longest.isPresent() || s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max = strings.get(0).length();\n        int max_index = 0;\n\
    \        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
    \ > max) {\n                max = strings.get(i).length();\n                max_index\
    \ = i;\n            }\n        }\n        return Optional.of(strings.get(max_index));",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int maxLength = 0;\n        String longestString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                longestString = s;\n\
    \            }\n        }\n        return Optional.of(longestString);", "    \
    \    if (strings.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLen = 0;\n        String maxStr = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLen) {\n                maxLen\
    \ = s.length();\n                maxStr = s;\n            }\n        }\n     \
    \   return Optional.of(maxStr);", "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        int max_length = 0;\n    \
    \    String longest = \"\";\n        for (String s : strings) {\n            if\
    \ (s.length() > max_length) {\n                max_length = s.length();\n    \
    \            longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().reduce((a, b) -> a.length() > b.length() ? a : b);', "      \
    \  if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        int maxLength = 0;\n        String longestString = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                longestString = s;\n       \
    \     }\n        }\n        return Optional.of(longestString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int maxLen\
    \ = 0;\n        String maxStr = \"\";\n        for (String s : strings) {\n  \
    \          if (s.length() > maxLen) {\n                maxLen = s.length();\n\
    \                maxStr = s;\n            }\n        }\n        return Optional.of(maxStr);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String maxString = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                maxString = s;\n           \
    \ }\n        }\n        return Optional.of(maxString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int maxLen\
    \ = 0;\n        String longest = \"\";\n        for (String s : strings) {\n \
    \           if (s.length() > maxLen) {\n                maxLen = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String maxString = null;\n        for (String s : strings) {\n \
    \           if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                maxString = s;\n            }\n        }\n        return Optional.of(maxString);"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
