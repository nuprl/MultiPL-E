name: HumanEval_159_eat
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return an array of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // Variables:\n    // @number\
  \ : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n\
  \    // the number of carrots that you need to eat.\n    // @remaining : integer\n\
  \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
  \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
  \ <= 1000\n    // Have fun :)\n    public static ArrayList<Integer> eat(int number,\
  \ int need, int remaining) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(eat((5), (6), (10)).equals((new ArrayList<Integer>(Arrays.asList((int)11,\
  \ (int)4)))));\n    assert(eat((4), (8), (9)).equals((new ArrayList<Integer>(Arrays.asList((int)12,\
  \ (int)1)))));\n    assert(eat((1), (10), (10)).equals((new ArrayList<Integer>(Arrays.asList((int)11,\
  \ (int)0)))));\n    assert(eat((2), (11), (5)).equals((new ArrayList<Integer>(Arrays.asList((int)7,\
  \ (int)0)))));\n    assert(eat((4), (5), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)9,\
  \ (int)2)))));\n    assert(eat((4), (5), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)0)))));\n    }\n\n}\n"
completions: ["        ArrayList<Integer> result = new ArrayList<Integer>();\n   \
    \     if (remaining >= need) {\n            result.add(number + need);\n     \
    \       result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        int eaten = number + Math.min(need, remaining);\n        int left = Math.max(0,\
    \ remaining - need);\n        return new ArrayList<Integer>(Arrays.asList(eaten,\
    \ left));", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (need > remaining) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining >= need) {\n            result.add(number + need);\n   \
    \         result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + remaining;\n        if (total >= need) {\n            result.add(need);\n\
    \            result.add(total - need);\n        } else {\n            result.add(total);\n\
    \            result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        int left = remaining - need;\n   \
    \     if (left < 0) {\n            total = total + left;\n            left = 0;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        int total = number + need;\n        int left\
    \ = 0;\n        if (total > remaining) {\n            total = remaining;\n   \
    \         left = 0;\n        } else {\n            left = remaining - total;\n\
    \        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      result.add(total);\n        result.add(left);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total >= need) {\n            result.add(need);\n            result.add(total\
    \ - need);\n        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        int total = number + Math.min(need,\
    \ remaining);\n        int left = Math.max(0, remaining - need);\n        return\
    \ new ArrayList<Integer>(Arrays.asList(total, left));", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + need;\n   \
    \     if (total <= remaining) {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + need;\n   \
    \     if (total > remaining) {\n            result.add(remaining);\n         \
    \   result.add(0);\n        } else {\n            result.add(total);\n       \
    \     result.add(remaining - total);\n        }\n        return result;", "  \
    \      ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(number\
    \ + Math.min(need, remaining));\n        result.add(Math.max(0, remaining - need));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        int left = total - need;\n \
    \       if (left < 0) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(left);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        result.add(number + Math.min(need, remaining));\n\
    \        result.add(Math.max(0, remaining - need));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + remaining;\n        int eaten = 0;\n        if (total >= need) {\n\
    \            eaten = need;\n        } else {\n            eaten = total;\n   \
    \     }\n        result.add(eaten);\n        result.add(total - eaten);\n    \
    \    return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        int total = number +\
    \ remaining;\n        int eaten = 0;\n        if (total >= need) {\n         \
    \   eaten = need;\n        } else {\n            eaten = total;\n        }\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(eaten);\n\
    \        result.add(total - eaten);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - (number + need));\n        }\n  \
    \      return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        int total = number + Math.min(need, remaining);\n\
    \        int left = Math.max(0, remaining - need);\n        return new ArrayList<Integer>(Arrays.asList(total,\
    \ left));", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (number < 0 || need < 0 || remaining\
    \ < 0) {\n            result.add(0);\n            result.add(0);\n           \
    \ return result;\n        }\n        if (number + need > remaining) {\n      \
    \      result.add(remaining);\n            result.add(0);\n            return\
    \ result;\n        }\n        result.add(number + need);\n        result.add(remaining\
    \ - (number + need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        int eaten = number + Math.min(need, remaining);\n       \
    \ int left = Math.max(0, remaining - need);\n        return new ArrayList<Integer>(Arrays.asList(eaten,\
    \ left));", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        if (total > remaining) {\n       \
    \     result.add(remaining);\n            result.add(0);\n        } else {\n \
    \           result.add(total);\n            result.add(remaining - total);\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + need;\n        int left = remaining - need;\n  \
    \      if (left < 0) {\n            total = total + left;\n            left =\
    \ 0;\n        }\n        result.add(total);\n        result.add(left);\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        if (total > remaining) {\n       \
    \     result.add(remaining);\n            result.add(0);\n        } else {\n \
    \           result.add(total);\n            result.add(remaining - total);\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        int eaten = 0;\n        if (total\
    \ >= need) {\n            eaten = need;\n        } else {\n            eaten =\
    \ total;\n        }\n        result.add(eaten);\n        result.add(total - eaten);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number;\n        if (remaining <\
    \ need) {\n            total += remaining;\n            remaining = 0;\n     \
    \   } else {\n            total += need;\n            remaining -= need;\n   \
    \     }\n        result.add(total);\n        result.add(remaining);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0);\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        int eaten = 0;\n        if (total\
    \ >= need) {\n            eaten = need;\n        } else {\n            eaten =\
    \ total;\n        }\n        result.add(eaten);\n        result.add(total - eaten);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        int left = remaining - need;\n   \
    \     if (left < 0) {\n            total = total + left;\n            left = 0;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        if (total > remaining) {\n       \
    \     result.add(remaining);\n            result.add(0);\n        } else {\n \
    \           result.add(total);\n            result.add(remaining - total);\n \
    \       }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (number + need > remaining) {\n            result.add(remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - (number + need));\n        }\n  \
    \      return result;", "        int total = number + need;\n        int left\
    \ = 0;\n        if (total > remaining) {\n            total = remaining;\n   \
    \         left = 0;\n        } else {\n            left = remaining - total;\n\
    \        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      result.add(total);\n        result.add(left);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        // Write\
    \ your code here\n        // Return an array of integers\n        // [ total number\
    \ of eaten carrots after your meals,\n        // the number of carrots left after\
    \ your meals ]\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + need;\n        int left = remaining - need;\n  \
    \      if (left < 0) {\n            total = total + left;\n            left =\
    \ 0;\n        }\n        result.add(total);\n        result.add(left);\n     \
    \   return result;", "        int total = number + Math.min(need, remaining);\n\
    \        int left = Math.max(0, remaining - need);\n        return new ArrayList<Integer>(Arrays.asList(total,\
    \ left));", "        if (number < 0 || need < 0 || remaining < 0) {\n        \
    \    throw new IllegalArgumentException(\"Invalid input\");\n        }\n     \
    \   if (number > 1000 || need > 1000 || remaining > 1000) {\n            throw\
    \ new IllegalArgumentException(\"Invalid input\");\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total >= need) {\n            result.add(need);\n            result.add(total\
    \ - need);\n        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + remaining;\n        if (total\
    \ >= need) {\n            result.add(need);\n            result.add(total - need);\n\
    \        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", '        return new ArrayList<Integer>(Arrays.asList(number + Math.min(need,
    remaining), Math.max(0, remaining - need)));', "        int eaten = number + Math.min(need,\
    \ remaining);\n        int left = Math.max(0, remaining - need);\n        return\
    \ new ArrayList<Integer>(Arrays.asList(eaten, left));", "        // Write your\
    \ code here\n        int total = number + need;\n        int left = 0;\n     \
    \   if (total > remaining) {\n            total = remaining;\n            left\
    \ = 0;\n        } else {\n            left = remaining - total;\n        }\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(total);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        result.add(number + Math.min(need, remaining));\n\
    \        result.add(Math.max(0, remaining - need));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        int total = number +\
    \ remaining;\n        int eaten = total - need;\n        int left = total - eaten;\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(eaten);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + need;\n        if\
    \ (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + need;\n        if (total\
    \ > remaining) {\n            result.add(remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        // Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        // Write your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + need;\n        if\
    \ (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        }\n        return result;", "        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + remaining;\n        if (total < need) {\n            result.add(total);\n\
    \            result.add(0);\n        } else {\n            result.add(need);\n\
    \            result.add(total - need);\n        }\n        return result;", " \
    \       // Your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + remaining;\n        if (total >= need) {\n            result.add(need);\n\
    \            result.add(total - need);\n        } else {\n            result.add(total);\n\
    \            result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        int total = number +\
    \ Math.min(need, remaining);\n        int left = Math.max(0, remaining - need);\n\
    \        return new ArrayList<Integer>(Arrays.asList(total, left));", "      \
    \  // your code here\n        int total = number + need;\n        int left = remaining\
    \ - need;\n        if (left < 0) {\n            total += left;\n            left\
    \ = 0;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(total);\n        result.add(left);\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        // Write your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + need;\n        if\
    \ (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(total);\n            result.add(remaining\
    \ - total);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        int eaten = 0;\n        if (total\
    \ >= need) {\n            eaten = need;\n        } else {\n            eaten =\
    \ total;\n        }\n        result.add(eaten);\n        result.add(total - eaten);\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(number\
    \ + Math.min(need, remaining));\n        result.add(Math.max(0, remaining - need));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total < need) {\n       \
    \     result.add(total);\n            result.add(0);\n        } else {\n     \
    \       result.add(need);\n            result.add(total - need);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        // Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        int eaten = number +\
    \ Math.min(need, remaining);\n        int left = Math.max(0, remaining - need);\n\
    \        return new ArrayList<Integer>(Arrays.asList(eaten, left));", "      \
    \  ArrayList<Integer> result = new ArrayList<Integer>();\n        int total =\
    \ number + remaining;\n        int eaten = 0;\n        if (total >= need) {\n\
    \            eaten = need;\n        } else {\n            eaten = total;\n   \
    \     }\n        result.add(eaten);\n        result.add(total - eaten);\n    \
    \    return result;", "        // Your code here\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (number + need <= remaining) {\n   \
    \         result.add(number + need);\n            result.add(remaining - (number\
    \ + need));\n        } else {\n            result.add(remaining);\n          \
    \  result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total >= need) {\n      \
    \      result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        // Write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + Math.min(need, remaining);\n        int left = Math.max(0, remaining\
    \ - need);\n        result.add(total);\n        result.add(left);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        if (total < need) {\n       \
    \     result.add(total);\n            result.add(0);\n        } else {\n     \
    \       result.add(need);\n            result.add(total - need);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number;\n        if (remaining >= need) {\n            total\
    \ += need;\n            remaining -= need;\n        } else {\n            total\
    \ += remaining;\n            remaining = 0;\n        }\n        result.add(total);\n\
    \        result.add(remaining);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (need > remaining) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        int total = number + remaining;\n        int eaten = 0;\n\
    \        if (total >= need) {\n            eaten = need;\n        } else {\n \
    \           eaten = total;\n        }\n        int left = total - eaten;\n   \
    \     ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(eaten);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   if (need > total) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0);\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total < need) {\n      \
    \      result.add(total);\n            result.add(0);\n        } else {\n    \
    \        result.add(need);\n            result.add(total - need);\n        }\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(total);\n\
    \            result.add(remaining - total);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(number\
    \ + Math.min(need, remaining));\n        result.add(Math.max(0, remaining - need));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining >= need) {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        } else {\n    \
    \        result.add(number + remaining);\n            result.add(0);\n       \
    \ }\n        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + need;\n        if (total > remaining) {\n      \
    \      result.add(remaining);\n            result.add(0);\n        } else {\n\
    \            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + remaining;\n        if (total\
    \ >= need) {\n            result.add(need);\n            result.add(total - need);\n\
    \        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + Math.min(need, remaining);\n\
    \        int left = Math.max(0, remaining - need);\n        result.add(total);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        int total = number +\
    \ Math.min(need, remaining);\n        int left = Math.max(0, remaining - need);\n\
    \        return new ArrayList<Integer>(Arrays.asList(total, left));", "      \
    \  // Your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + need;\n        int left = 0;\n        if (total\
    \ > remaining) {\n            total = remaining;\n            left = 0;\n    \
    \    } else {\n            left = remaining - total;\n        }\n        result.add(total);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        result.add(number + Math.min(need, remaining));\n\
    \        result.add(Math.max(0, remaining - need));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ < need) {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + remaining;\n     \
    \   int eaten = 0;\n        if (total >= need) {\n            eaten = need;\n\
    \        } else {\n            eaten = total;\n        }\n        result.add(eaten);\n\
    \        result.add(total - eaten);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining < need) {\n      \
    \      result.add(number + remaining);\n            result.add(0);\n        }\
    \ else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int total = number + Math.min(need, remaining);\n\
    \        result.add(total);\n        result.add(remaining - Math.min(need, remaining));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (number < 0 || need < 0 || remaining < 0) {\n            result.add(0);\n\
    \            result.add(0);\n            return result;\n        }\n        if\
    \ (remaining < need) {\n            result.add(number + remaining);\n        \
    \    result.add(0);\n            return result;\n        }\n        result.add(number\
    \ + need);\n        result.add(remaining - need);\n        return result;", " \
    \       // your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(number + Math.min(need, remaining));\n        result.add(Math.max(0,\
    \ remaining - need));\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + need;\n        int left = remaining - need;\n   \
    \     if (left < 0) {\n            total = total + left;\n            left = 0;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining >= need) {\n            result.add(number + need);\n   \
    \         result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number;\n        if (remaining < need) {\n            total += remaining;\n\
    \            remaining = 0;\n        } else {\n            total += need;\n  \
    \          remaining -= need;\n        }\n        result.add(total);\n       \
    \ result.add(remaining);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (remaining >= need) {\n     \
    \       result.add(number + need);\n            result.add(remaining - need);\n\
    \        } else {\n            result.add(number + remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total >= need) {\n            result.add(need);\n            result.add(total\
    \ - need);\n        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + remaining;\n        int\
    \ eaten = 0;\n        if (total >= need) {\n            eaten = need;\n      \
    \  } else {\n            eaten = total;\n        }\n        result.add(eaten);\n\
    \        result.add(total - eaten);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total < need) {\n            result.add(total);\n            result.add(0);\n\
    \        } else {\n            result.add(need);\n            result.add(total\
    \ - need);\n        }\n        return result;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        int eaten = number;\n        int left = remaining;\n    \
    \    if (left >= need) {\n            eaten += need;\n            left -= need;\n\
    \        } else {\n            eaten += left;\n            left = 0;\n       \
    \ }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(eaten);\n\
    \        result.add(left);\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total >= need) {\n            result.add(need);\n            result.add(total\
    \ - need);\n        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + remaining;\n        if (total\
    \ >= need) {\n            result.add(need);\n            result.add(total - need);\n\
    \        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = number + Math.min(need, remaining);\n\
    \        result.add(total);\n        result.add(remaining - Math.min(need, remaining));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (number + need <= remaining) {\n            result.add(number + need);\n\
    \            result.add(remaining - (number + need));\n        } else {\n    \
    \        result.add(remaining);\n            result.add(0);\n        }\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
    \ = number + remaining;\n        if (total >= need) {\n            result.add(need);\n\
    \            result.add(total - need);\n        } else {\n            result.add(total);\n\
    \            result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + need;\n   \
    \     int left = 0;\n        if (total > remaining) {\n            total = remaining;\n\
    \            left = 0;\n        } else {\n            left = remaining - total;\n\
    \        }\n        result.add(total);\n        result.add(left);\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining >= need) {\n            result.add(number + need);\n   \
    \         result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int total = number + remaining;\n\
    \        if (total >= need) {\n            result.add(need);\n            result.add(total\
    \ - need);\n        } else {\n            result.add(total);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        if (number + need <= remaining) {\n         \
    \   result.add(number + need);\n            result.add(remaining - (number + need));\n\
    \        } else {\n            result.add(remaining);\n            result.add(0);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        if (remaining < need) {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        } else {\n            result.add(number\
    \ + need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (number < 0 || need < 0 || remaining < 0) {\n            result.add(0);\n\
    \            result.add(0);\n            return result;\n        }\n        if\
    \ (number + need > remaining) {\n            result.add(remaining);\n        \
    \    result.add(0);\n            return result;\n        }\n        result.add(number\
    \ + need);\n        result.add(remaining - (number + need));\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(number\
    \ + Math.min(need, remaining));\n        result.add(Math.max(0, remaining - need));\n\
    \        return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       if (remaining < need) {\n            result.add(number + remaining);\n\
    \            result.add(0);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n \
    \       int total = number + remaining;\n        int eaten = 0;\n        if (total\
    \ >= need) {\n            eaten = need;\n        } else {\n            eaten =\
    \ total;\n        }\n        result.add(eaten);\n        result.add(total - eaten);\n\
    \        return result;", "        // Write your code here\n        return new\
    \ ArrayList<Integer>();", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int total = number + remaining;\n        if (total >= need) {\n     \
    \       result.add(need);\n            result.add(total - need);\n        } else\
    \ {\n            result.add(total);\n            result.add(0);\n        }\n \
    \       return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (remaining >= need) {\n            result.add(number + need);\n  \
    \          result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add(0);\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining\
    \ >= need) {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        } else {\n            result.add(number + remaining);\n  \
    \          result.add(0);\n        }\n        return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
