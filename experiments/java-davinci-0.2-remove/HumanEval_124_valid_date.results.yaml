language: java
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        try {\n            String[] dateParts = date.split(\"-\");\n        \
    \    int month = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            if (month\
    \ < 1 || month > 12) {\n                return false;\n            }\n       \
    \     if (day < 1 || day > 31) {\n                return false;\n            }\n\
    \            if (month == 2) {\n                if (day > 29) {\n            \
    \        return false;\n                }\n            }\n            if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (day\
    \ > 30) {\n                    return false;\n                }\n            }\n\
    \            return true;\n        } catch (Exception e) {\n            return\
    \ false;\n        }\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n\
    \        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) return false;\n  \
    \      String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n            if (day > 31) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ return false;\n        } else if (month == 2) {\n            if (day > 29) return\
    \ false;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.length() == 0) {\n        \
    \    return false;\n        }\n        String[] split = date.split(\"-\");\n \
    \       if (split.length != 3) {\n            return false;\n        }\n     \
    \   int month = Integer.parseInt(split[0]);\n        int day = Integer.parseInt(split[1]);\n\
    \        int year = Integer.parseInt(split[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fdufs2q.java:22)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpapi0da0_.java:19)\n\tat Problem.main(tmpapi0da0_.java:47)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        // Check if date is empty\n        if (date.length()\
    \ == 0) {\n            return false;\n        }\n        // Check if date is in\
    \ the format mm-dd-yyyy\n        String[] dateArray = date.split(\"-\");\n   \
    \     if (dateArray.length != 3) {\n            return false;\n        }\n   \
    \     // Check if month is valid\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        // Check if day is valid\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        // Check if year is\
    \ valid\n        int year = Integer.parseInt(dateArray[2]);\n        if (year\
    \ < 1) {\n            return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if\
    \ (dateArr.length != 3) {\n            return false;\n        }\n        int month\
    \ = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArray = date.split(\"-\");\n        if (dateArray.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1) {\n    \
    \        return false;\n        }\n        if (month == 2) {\n            if (day\
    \ > 29) {\n                return false;\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArray = date.split(\"-\");\n\
    \        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011516
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day\
    \ > 29) return false;\n        } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n  \
    \      } else {\n            if (day < 1 || day > 31) return false;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1) {\n    \
    \        return false;\n        }\n        if (month == 2) {\n            if (day\
    \ > 29) {\n                return false;\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        String[] parts = date.split(\"-\");\n\
    \        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) return false;\n        } else {\n            if (day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.length() == 0) {\n        \
    \    return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n\
    \        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] date_split = date.split(\"-\");\n        if (date_split.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(date_split[0]);\n\
    \        int day = Integer.parseInt(date_split[1]);\n        int year = Integer.parseInt(date_split[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArr = date.split(\"-\");\n        if (dateArr.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (year < 0) {\n            return false;\n        }\n        if (month\
    \ < 1 || month > 12) {\n            return false;\n        }\n        if (day\
    \ < 1) {\n            return false;\n        }\n        if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n            if (day > 31) {\n                return false;\n            }\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       } else if (month == 2) {\n            if (day > 29) {\n              \
    \  return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] date_parts = date.split(\"-\");\n        if (date_parts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(date_parts[0]);\n\
    \        int day = Integer.parseInt(date_parts[1]);\n        int year = Integer.parseInt(date_parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if\
    \ (dateArr.length != 3) {\n            return false;\n        }\n        int month\
    \ = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArray = date.split(\"-\");\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day < 1 || day > 31) {\n                return false;\n\
    \            }\n        }\n        if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n            if (day < 1 || day > 30) {\n                return\
    \ false;\n            }\n        }\n        if (month == 2) {\n            if\
    \ (day < 1 || day > 29) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpbm8wvvgd.java:19)\n\tat Problem.main(tmpbm8wvvgd.java:49)\n"
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateSplit = date.split(\"-\");\n\
    \        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateSplit = date.split(\"-\");\n\
    \        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] date_split = date.split(\"-\");\n        if (date_split.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(date_split[0]);\n\
    \        int day = Integer.parseInt(date_split[1]);\n        int year = Integer.parseInt(date_split[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) return false;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) return false;\n  \
    \      String[] dateArr = date.split(\"-\");\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmphq7qin41.java:21)\n\
    \tat Problem.main(tmphq7qin41.java:44)\n"
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n    \
    \        return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] d = date.split(\"-\");\n        if\
    \ (d.length != 3) return false;\n        int month = Integer.parseInt(d[0]);\n\
    \        int day = Integer.parseInt(d[1]);\n        int year = Integer.parseInt(d[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month % 2 == 0) {\n            if (day > 30) return\
    \ false;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateParts = date.split(\"-\");\n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n\
    \        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        // Split the date string into an array of\
    \ strings\n        String[] dateArray = date.split(\"-\");\n        // Check if\
    \ the date string is empty\n        if (dateArray.length == 0) {\n           \
    \ return false;\n        }\n        // Check if the date string is in the correct\
    \ format\n        if (dateArray.length != 3) {\n            return false;\n  \
    \      }\n        // Check if the month is valid\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        // Check if the day is valid\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      // Check if the day is valid for the month\n        if (month == 2 && day\
    \ > 29) {\n            return false;\n        }\n        if ((month == 4 || month\
    \ == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n\
    \        }\n        // Check if the year is valid\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (year < 0) {\n            return false;\n        }\n        // Return\
    \ true if all the above conditions are satisfied\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9p3wji7.java:22)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) return false;\n        } else {\n            if (day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        // Check if the date is empty\n        if\
    \ (date.isEmpty()) {\n            return false;\n        }\n        // Check if\
    \ the date is in the format mm-dd-yyyy\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) {\n            return false;\n     \
    \   }\n        // Check if the month is between 1 and 12\n        int month =\
    \ Integer.parseInt(dateArray[0]);\n        if (month < 1 || month > 12) {\n  \
    \          return false;\n        }\n        // Check if the day is between 1\
    \ and 31\n        int day = Integer.parseInt(dateArray[1]);\n        if (day <\
    \ 1 || day > 31) {\n            return false;\n        }\n        // Check if\
    \ the day is between 1 and 30 for months 4,6,9,11\n        if ((month == 4 ||\
    \ month == 6 || month == 9 || month == 11) && (day > 30)) {\n            return\
    \ false;\n        }\n        // Check if the day is between 1 and 29 for month\
    \ 2\n        if (month == 2 && day > 29) {\n            return false;\n      \
    \  }\n        // Check if the year is between 1000 and 9999\n        int year\
    \ = Integer.parseInt(dateArray[2]);\n        if (year < 1000 || year > 9999) {\n\
    \            return false;\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        String[] date_arr = date.split(\"-\");\n        if\
    \ (date_arr.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(date_arr[0]);\n        int day = Integer.parseInt(date_arr[1]);\n\
    \        int year = Integer.parseInt(date_arr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateSplit = date.split(\"-\");\n\
    \        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] date_arr = date.split(\"-\");\n \
    \       int month = Integer.parseInt(date_arr[0]);\n        int day = Integer.parseInt(date_arr[1]);\n\
    \        int year = Integer.parseInt(date_arr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpf5pes3sc.java:19)\n\tat Problem.main(tmpf5pes3sc.java:47)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n    \
    \        return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        String[] dateParts = date.split(\"-\"\
    );\n        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) return false;\n        } else {\n            if (day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if\
    \ (dateArr.length != 3) {\n            return false;\n        }\n        int month\
    \ = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArr = date.split(\"-\");\n        if (dateArr.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day\
    \ > 29) return false;\n        } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n  \
    \      } else {\n            if (day < 1 || day > 31) return false;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        try {\n            String[] parts = date.split(\"-\");\n            int\
    \ month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n\
    \            int year = Integer.parseInt(parts[2]);\n            if (month < 1\
    \ || month > 12) {\n                return false;\n            }\n           \
    \ if (day < 1 || day > 31) {\n                return false;\n            }\n \
    \           if (month == 2) {\n                if (day > 29) {\n             \
    \       return false;\n                }\n            }\n            if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (day\
    \ > 30) {\n                    return false;\n                }\n            }\n\
    \            return true;\n        } catch (Exception e) {\n            return\
    \ false;\n        }\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateArray = date.split(\"-\");\n        if (dateArray.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateParts = date.split(\"-\");\n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        String[] dateParts = date.split(\"-\"\
    );\n        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        String[] dateArray = date.split(\"-\"\
    );\n        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) return false;\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9p3wji7.java:22)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateSplit = date.split(\"-\");\n\
    \        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) return false;\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArr = date.split(\"-\");\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpqyt1t6du.java:18)\n\tat Problem.main(tmpqyt1t6du.java:46)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph7iro_ma.java:21)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        // Split the date string into an array of\
    \ strings\n        String[] dateArray = date.split(\"-\");\n        // Check if\
    \ the date string is empty\n        if (dateArray.length == 0) {\n           \
    \ return false;\n        }\n        // Check if the date string is in the format:\
    \ mm-dd-yyyy\n        if (dateArray.length != 3) {\n            return false;\n\
    \        }\n        // Check if the months are less than 1 or higher than 12\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        // Check if the\
    \ number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n        int day = Integer.parseInt(dateArray[1]);\n        if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n            if (day < 1 || day > 31) {\n                return\
    \ false;\n            }\n        } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n           \
    \     return false;\n            }\n        } else if (month == 2) {\n       \
    \     if (day < 1 || day > 29) {\n                return false;\n            }\n\
    \        }\n        // Return true if all of the above rules are satisfied\n \
    \       return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n\
    \        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dates = date.split(\"-\");\n    \
    \    if (dates.length != 3) return false;\n        int month = Integer.parseInt(dates[0]);\n\
    \        int day = Integer.parseInt(dates[1]);\n        int year = Integer.parseInt(dates[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if (day > 31) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        } else if (month ==\
    \ 2) {\n            if (day > 29) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArray = date.split(\"-\");\n\
    \        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n \
    \       int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArr = date.split(\"-\");\n        if (dateArr.length !=\
    \ 3) return false;\n        int month = Integer.parseInt(dateArr[0]);\n      \
    \  int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if\
    \ (dateArr.length != 3) {\n            return false;\n        }\n        String\
    \ month = dateArr[0];\n        String day = dateArr[1];\n        String year =\
    \ dateArr[2];\n        if (month.length() != 2 || day.length() != 2 || year.length()\
    \ != 4) {\n            return false;\n        }\n        int monthInt = Integer.parseInt(month);\n\
    \        int dayInt = Integer.parseInt(day);\n        int yearInt = Integer.parseInt(year);\n\
    \        if (monthInt < 1 || monthInt > 12) {\n            return false;\n   \
    \     }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt >\
    \ 29) {\n                return false;\n            }\n        } else if (monthInt\
    \ == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if\
    \ (dayInt < 1 || dayInt > 30) {\n                return false;\n            }\n\
    \        } else {\n            if (dayInt < 1 || dayInt > 31) {\n            \
    \    return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        // Check if the date is empty\n        if\
    \ (date.isEmpty()) {\n            return false;\n        }\n        // Check if\
    \ the date is in the correct format\n        if (!date.matches(\"\\\\d{2}-\\\\\
    d{2}-\\\\d{4}\")) {\n            return false;\n        }\n        // Check if\
    \ the month is valid\n        int month = Integer.parseInt(date.substring(0, 2));\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        // Check if the day is valid\n        int day = Integer.parseInt(date.substring(3,\
    \ 5));\n        if (day < 1 || day > 31) {\n            return false;\n      \
    \  }\n        // Check if the day is valid for the month\n        if (month ==\
    \ 2) {\n            if (day > 29) {\n                return false;\n         \
    \   }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        String[] dateArray = date.split(\"-\");\n        if\
    \ (dateArray.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1) {\n    \
    \        return false;\n        }\n        if (month == 2) {\n            if (day\
    \ > 29) {\n                return false;\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.length() == 0) {\n        \
    \    return false;\n        }\n        String[] dateArr = date.split(\"-\");\n\
    \        if (dateArr.length != 3) {\n            return false;\n        }\n  \
    \      int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if (day > 31) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        } else if (month ==\
    \ 2) {\n            if (day > 29) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateParts = date.split(\"-\");\n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if (day > 31) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        } else if (month ==\
    \ 2) {\n            if (day > 29) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmp73rb71wb.java:18)\n\tat Problem.main(tmp73rb71wb.java:46)\n"
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArr = date.split(\"-\");\n        if (dateArr.length !=\
    \ 3) return false;\n        int month = Integer.parseInt(dateArr[0]);\n      \
    \  int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] date_parts = date.split(\"-\");\n      \
    \  if (date_parts.length != 3) {\n            return false;\n        }\n     \
    \   int month = Integer.parseInt(date_parts[0]);\n        int day = Integer.parseInt(date_parts[1]);\n\
    \        int year = Integer.parseInt(date_parts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.length() == 0) {\n        \
    \    return false;\n        }\n        String[] dateArr = date.split(\"-\");\n\
    \        if (dateArr.length != 3) {\n            return false;\n        }\n  \
    \      int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day\
    \ > 29) return false;\n        } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n  \
    \      } else {\n            if (day < 1 || day > 31) return false;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1) {\n    \
    \        return false;\n        }\n        if (month == 2) {\n            if (day\
    \ > 29) {\n                return false;\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArray = date.split(\"-\");\n        if (dateArray.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] parts = date.split(\"-\");\n    \
    \    if (parts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1) {\n    \
    \        return false;\n        }\n        if (month == 2) {\n            if (day\
    \ > 29) {\n                return false;\n            }\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \            if (day == 29) {\n                if (year % 4 != 0) return false;\n\
    \                if (year % 100 == 0 && year % 400 != 0) return false;\n     \
    \       }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) return false;\n        } else {\n      \
    \      if (day > 31) return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        try {\n            String[] parts = date.split(\"-\");\n            int\
    \ month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n\
    \            int year = Integer.parseInt(parts[2]);\n            if (month < 1\
    \ || month > 12) {\n                return false;\n            }\n           \
    \ if (day < 1 || day > 31) {\n                return false;\n            }\n \
    \           if (month == 2) {\n                if (day > 29) {\n             \
    \       return false;\n                }\n            }\n            if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (day\
    \ > 30) {\n                    return false;\n                }\n            }\n\
    \            return true;\n        } catch (Exception e) {\n            return\
    \ false;\n        }\n}\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        int\
    \ month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpovfwan33.java:23)\n\
    \tat Problem.main(tmpovfwan33.java:55)\n"
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArray = date.split(\"-\");\n\
    \        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011516
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if\
    \ (dateArr.length != 3) {\n            return false;\n        }\n        int month\
    \ = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpapi0da0_.java:19)\n\tat Problem.main(tmpapi0da0_.java:47)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9p3wji7.java:22)\n"
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3)\
    \ {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateArray = date.split(\"-\");\n        if (dateArray.length\
    \ != 3) return false;\n        int month = Integer.parseInt(dateArray[0]);\n \
    \       int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 2) {\n            if (day > 29) return\
    \ false;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1) return false;\n        if (month ==\
    \ 2) {\n            if (day > 29) return false;\n            if (day == 29) {\n\
    \                if (year % 4 != 0) return false;\n                if (year %\
    \ 100 == 0 && year % 400 != 0) return false;\n            }\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false;\n        } else {\n            if (day > 31) return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        String[] date_split = date.split(\"-\");\n      \
    \  if (date_split.length != 3) {\n            return false;\n        }\n     \
    \   int month = Integer.parseInt(date_split[0]);\n        int day = Integer.parseInt(date_split[1]);\n\
    \        int year = Integer.parseInt(date_split[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.length() == 0) {\n        \
    \    return false;\n        }\n        String[] dateArray = date.split(\"-\");\n\
    \        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        if (date.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] dateParts = date.split(\"-\");\n       \
    \ if (dateParts.length != 3) {\n            return false;\n        }\n       \
    \ int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n\
    \        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateArr = date.split(\"-\");\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n\
    \                return false;\n            }\n        } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day >\
    \ 30) {\n                return false;\n            }\n        } else if (month\
    \ == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpkeo1g5ef.java:22)\n\
    \tat Problem.main(tmpkeo1g5ef.java:54)\n"
  stdout: ''
  timestamp: 1660011520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpbakib2ea.java:19)\n\tat Problem.main(tmpbakib2ea.java:47)\n"
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArray = date.split(\"-\");\n\
    \        if (dateArray.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011519
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0nmpn0v.java:21)\n"
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateParts = date.split(\"-\");\n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month == 2)\
    \ {\n            if (day < 1 || day > 29) {\n                return false;\n \
    \           }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) return false;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return false;\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1) return\
    \ false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) return false;\n        } else {\n            if (day\
    \ > 31) return false;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011518
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Write your code here\n        String[] dateParts = date.split(\"-\"\
    );\n        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day > 30) {\n                return false;\n        \
    \    }\n        } else {\n            if (day > 31) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011520
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     String[] dateParts = date.split(\"-\");\n        if (dateParts.length !=\
    \ 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else {\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011517
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        // Your code here\n        String[] dateArr = date.split(\"-\");\n  \
    \      if (dateArr.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n\
    \        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n        } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 ||\
    \ day > 31) {\n                return false;\n            }\n        } else {\n\
    \            if (day < 1 || day > 30) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    public static boolean validDate(String date) {\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011515
