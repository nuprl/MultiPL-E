completions:
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        int x = modp(n / 2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 != 0) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        int result = (int) ((long) half * half % p);\n      \
  \  if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r *\
  \ 2) % p;\n        }\n        return r;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int r = modp(n\
  \ / 2, p);\n        r = (int) ((long) r * r % p);\n        if (n % 2 == 1) r = (int)\
  \ ((long) r * 2 % p);\n        return r;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int t = modp(n / 2, p);\n            return (int) ((long)\
  \ t * t % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r *\
  \ 2) % p;\n        }\n        return r;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int result = 1;\n        int base = 2;\n        while (n > 0) {\n     \
  \       if (n % 2 == 1) {\n                result = (result * base) % p;\n     \
  \       }\n            n = n / 2;\n            base = (base * base) % p;\n     \
  \   }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) return modp(n/2, p) * modp(n/2, p) % p;\n        return modp(n-1, p) * 2\
  \ % p;"
- "        if (n == 0) return 1;\n        int x = modp(n/2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 == 1) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)((long)x * x % p);\n        if (n % 2 == 1) x = (int)((long)x\
  \ * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        int x = modp(n/2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 == 1) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        int res = modp(n/2, p);\n        res = (int)\
  \ ((long) res * res % p);\n        if (n % 2 != 0) res = (int) ((long) res * 2 %\
  \ p);\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        int res = modp(n / 2, p);\n        res =\
  \ (int) ((long) res * res % p);\n        if (n % 2 != 0) res = (int) ((long) res\
  \ * 2 % p);\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        int result = (int) ((long) half * half % p);\n      \
  \  if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int m = modp(n\
  \ / 2, p);\n        if (n % 2 == 0) return (int) ((long) m * m % p);\n        return\
  \ (int) (((long) m * m % p) * 2 % p);"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        if (n % 2 == 0) return (x*x) % p;\n        else return (2*x*x) %\
  \ p;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int t = modp(n / 2, p);\n            return (int) ((long)\
  \ t * t % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
  \ {\n            int x = modp(n / 2, p);\n            return (int) ((long) x * x\
  \ % p);\n        }\n        return (int) ((long) modp(n - 1, p) * 2 % p);"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = half * half % p;\n        if (n % 2 ==\
  \ 1) result = result * 2 % p;\n        return result;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)(((long)x * x) % p);\n        if (n % 2 == 1) x = (int)(((long)x\
  \ * 2) % p);\n        return x;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        int result = (int) ((long) half * half % p);\n      \
  \  if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        if (n % 2 == 0) return (half * half) % p;\n        else\
  \ return (2 * half * half) % p;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        int result = (int) ((long) half * half % p);\n      \
  \  if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)(((long)x * x) % p);\n        if (n % 2 == 1) x = (int)(((long)x\
  \ * 2) % p);\n        return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r *\
  \ 2) % p;\n        }\n        return r;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)(((long)res * cur) % p);\n   \
  \         }\n            cur = (int)(((long)cur * cur) % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (2 *\
  \ r) % p;\n        }\n        return r;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)(((long)x * x) % p);\n        if (n % 2 == 1) x = (int)(((long)x\
  \ * 2) % p);\n        return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        int x = modp(n / 2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 != 0) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) (((long)\
  \ x * x) % p);\n        } else {\n            return (int) (((long) 2 * modp(n -\
  \ 1, p)) % p);\n        }"
- "        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r *\
  \ 2) % p;\n        }\n        return r;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        int x = modp(n/2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 == 1) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        int a = modp(n / 2, p);\n        a = (int)\
  \ ((long) a * a % p);\n        if (n % 2 == 1) a = (int) ((long) a * 2 % p);\n \
  \       return a;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        int x = modp(n / 2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 != 0) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        if (n % 2 == 0) return (int) ((long) half * half %\
  \ p);\n        return (int) ((long) half * half * 2 % p);"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)((long)x * x % p);\n        if (n % 2 == 1) x = (int)((long)x\
  \ * 2 % p);\n        return x;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int ret = 1;\n        int base = 2;\n        while (n > 0) {\n        \
  \    if (n % 2 == 1) {\n                ret = (ret * base) % p;\n            }\n\
  \            base = (base * base) % p;\n            n /= 2;\n        }\n       \
  \ return ret;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        int x = modp(n / 2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 != 0) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        int res = 1;\n        int cur = 2;\n        while (n > 0) {\n         \
  \   if (n % 2 == 1) {\n                res = (int)((long)res * cur % p);\n     \
  \       }\n            cur = (int)((long)cur * cur % p);\n            n /= 2;\n\
  \        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        int x = modp(n/2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 == 1) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        if (n == 0) return 1;\n        int x = modp(n / 2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 != 0) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
  \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        }\n      \
  \  return 2 * modp(n - 1, p) % p;"
- "        if (n == 0) return 1;\n        int res = modp(n / 2, p);\n        res =\
  \ (int) ((long) res * res % p);\n        if (n % 2 != 0) res = (int) ((long) res\
  \ * 2 % p);\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        if (n == 0) return 1;\n        int x = modp(n/2, p);\n        x = (int)\
  \ ((long) x * x % p);\n        if (n % 2 == 1) x = (int) ((long) x * 2 % p);\n \
  \       return x;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret =\
  \ (ret * 2) % p;\n        }\n        return ret;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        int a = 2;\n        while (n > 0) {\n           \
  \ if (n % 2 == 1) {\n                res = (res * a) % p;\n            }\n     \
  \       a = (a * a) % p;\n            n = n / 2;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n/2, p);\n        int result = (int) ((long) half * half % p);\n      \
  \  if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
  \ = (result * 2) % p;\n        }\n        return result;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int t = modp(n / 2, p);\n            return (int) ((long)\
  \ t * t % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n/2,\
  \ p);\n        x = (int)(((long)x * x) % p);\n        if (n % 2 == 1) x = (int)(((long)x\
  \ * 2) % p);\n        return x;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int r = 1;\n        for (int i = 0; i < n; i++)\n            r = (r * 2)\
  \ % p;\n        return r;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n % 2\
  \ == 0) {\n            int x = modp(n / 2, p);\n            return (int) ((long)\
  \ x * x % p);\n        } else {\n            return (int) ((long) 2 * modp(n - 1,\
  \ p) % p);\n        }"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int x = modp(n\
  \ / 2, p);\n        x = (int) ((long) x * x % p);\n        if (n % 2 == 1) x = (int)\
  \ ((long) x * 2 % p);\n        return x;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int result = 1;\n        int base = 2;\n        while (n > 0) {\n     \
  \       if (n % 2 == 1) {\n                result = (result * base) % p;\n     \
  \       }\n            n /= 2;\n            base = (base * base) % p;\n        }\n\
  \        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (2 * res) % p;\n        }\n        return res;"
- "        if (n == 0) return 1;\n        if (n == 1) return 2;\n        int half\
  \ = modp(n / 2, p);\n        int result = (int) ((long) half * half % p);\n    \
  \    if (n % 2 == 1) result = (int) ((long) result * 2 % p);\n        return result;"
- "        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
  \ (res * 2) % p;\n        }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
- "        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
  \                res = (res * 2) % p;\n            }\n            n >>= 1;\n   \
  \     }\n        return res;"
language: java
name: HumanEval_49_modp
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public\
  \ static int modp(int n, int p) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(modp((3), (5))\
  \ == (3));\n    assert(modp((1101), (101)) == (2));\n    assert(modp((0), (101))\
  \ == (1));\n    assert(modp((3), (11)) == (8));\n    assert(modp((100), (101)) ==\
  \ (1));\n    assert(modp((30), (5)) == (4));\n    assert(modp((31), (5)) == (3));\n\
  \    }\n\n}\n"
