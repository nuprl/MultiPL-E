completions:
- "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\
  \        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols;\
  \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count / capacity;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        int max = 0;\n        for (int i = 0; i < grid.size();\
  \ i++) {\n            max = 0;\n            for (int j = 0; j < grid.get(i).size();\
  \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max++;\n\
  \                }\n            }\n            count += max / capacity;\n      \
  \      if (max % capacity != 0) {\n                count++;\n            }\n   \
  \     }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer well : row) {\n                if\
  \ (well == 1) {\n                    fill++;\n                } else {\n       \
  \             maxFill = Math.max(maxFill, fill);\n                    fill = 0;\n\
  \                }\n            }\n            maxFill = Math.max(maxFill, fill);\n\
  \        }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans += dp[i][j] / capacity;\n                    if (dp[i][j]\
  \ % capacity > 0) {\n                        ans++;\n                    }\n   \
  \             }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int fill = 0;\n            for (int j = 0; j < grid.get(i).size(); j++)\
  \ {\n                if (grid.get(i).get(j) == 1) {\n                    fill++;\n\
  \                }\n            }\n            count += fill / capacity;\n     \
  \       if (fill % capacity != 0) {\n                count++;\n            }\n \
  \       }\n        return count;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            max = 0;\n            for (Integer i : row) {\n       \
  \         if (i == 1) {\n                    max++;\n                }\n       \
  \     }\n            count += max / capacity;\n            if (max % capacity !=\
  \ 0) {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = dp[i][j];\n\
  \                ans += cur / capacity;\n                if (cur % capacity != 0)\
  \ {\n                    ans++;\n                }\n                dp[i][j] = 0;\n\
  \                if (i + 1 < n) {\n                    dp[i + 1][j] += cur;\n  \
  \              }\n                if (j + 1 < m) {\n                    dp[i][j\
  \ + 1] += cur;\n                }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int[][] grid2 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid2[i][j] = grid.get(i).get(j);\n            }\n        }\n        int ans\
  \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m;\
  \ j++) {\n                if (grid2[i][j] == 1) {\n                    dp[i][j]\
  \ = 1;\n                    ans = 1;\n                }\n            }\n       \
  \ }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < m; j++)\
  \ {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = Math.min(dp[i\
  \ - 1][j] + 1, capacity);\n                    ans = Math.max(ans, dp[i][j]);\n\
  \                }\n            }\n        }\n        for (int i = n - 2; i >= 0;\
  \ i--) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j]\
  \ == 1) {\n                    dp[i][j] = Math.min(dp[i + 1][j] + 1, capacity);\n\
  \                    ans = Math.max(ans, dp[i][j]);\n                }\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 1; j < m; j++) {\n                if (dp[i][j] == 1) {\n                 \
  \   dp[i][j] = Math.min(dp[i][j - 1] + 1, capacity);\n                    ans =\
  \ Math.max(ans, dp[i][j]);\n                }\n            }\n        }\n      \
  \  for (int i = 0; i < n; i++) {\n            for"
- "        // fill the buckets\n        // lower the buckets\n        int count =\
  \ 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\
  \        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols;\
  \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                    count++;\n\
  \                    for (int k = i; k < rows; k++) {\n                        grid.get(k).set(j,\
  \ 0);\n                    }\n                }\n            }\n        }\n    \
  \    return count;"
- "        int rows = grid.size();\n        int cols = grid.get(0).size();\n     \
  \   int[][] water = new int[rows][cols];\n        int[][] buckets = new int[rows][cols];\n\
  \        int count = 0;\n        for (int i = 0; i < rows; i++) {\n            for\
  \ (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n\
  \                    water[i][j] = 1;\n                    buckets[i][j] = 1;\n\
  \                    count++;\n                }\n            }\n        }\n   \
  \     int result = 0;\n        while (count > 0) {\n            for (int i = 0;\
  \ i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n         \
  \           if (buckets[i][j] > 0) {\n                        buckets[i][j] = 0;\n\
  \                        if (i > 0) {\n                            water[i - 1][j]\
  \ += 1;\n                            buckets[i - 1][j] = 1;\n                  \
  \      }\n                        if (i < rows - 1) {\n                        \
  \    water[i + 1][j] += 1;\n                            buckets[i + 1][j] = 1;\n\
  \                        }\n                        if (j > 0) {\n             \
  \               water[i][j - 1] += 1;\n                            buckets[i][j\
  \ - 1] = 1;\n                        }\n                        if (j < cols - 1)\
  \ {\n                            water[i][j + 1] += 1;\n                       \
  \     buckets[i][j + 1] = 1;\n                        }\n                      \
  \  count--;\n                    }\n                }\n            }\n         \
  \   result++;\n        }\n        return result;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int ans = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (i == 0) {\n\
  \                    dp[i][j] = grid.get(i).get(j);\n                } else {\n\
  \                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n           \
  \     }\n                ans = Math.max(ans, dp[i][j]);\n            }\n       \
  \ }\n        return ans / capacity + (ans % capacity > 0 ? 1 : 0);"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    count++;\n                }\n            }\n    \
  \    }\n        return count / capacity;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer cell : row) {\n                fill\
  \ += cell;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (i == 0) {\n                    dp[i][j]\
  \ = grid.get(i).get(j);\n                } else {\n                    dp[i][j]\
  \ = dp[i - 1][j] + grid.get(i).get(j);\n                }\n            }\n     \
  \   }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n           \
  \ for (int j = 0; j < m; j++) {\n                if (dp[i][j] > capacity) {\n  \
  \                  ans += dp[i][j] - capacity;\n                    dp[i][j] = capacity;\n\
  \                }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int times = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\
  \        int[] rowMax = new int[rows];\n        for (int i = 0; i < rows; i++) {\n\
  \            int max = 0;\n            for (int j = 0; j < cols; j++) {\n      \
  \          if (grid.get(i).get(j) > max) {\n                    max = grid.get(i).get(j);\n\
  \                }\n            }\n            rowMax[i] = max;\n        }\n   \
  \     for (int i = 0; i < rows; i++) {\n            times += rowMax[i] / capacity;\n\
  \            if (rowMax[i] % capacity != 0) {\n                times++;\n      \
  \      }\n        }\n        return times;"
- "        int total = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowTotal = 0;\n            for (Integer i : row) {\n                rowTotal\
  \ += i;\n            }\n            total += Math.ceil((double) rowTotal / capacity);\n\
  \        }\n        return total;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ grid2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for\
  \ (int j = 0; j < m; j++) {\n                grid2[i][j] = grid.get(i).get(j);\n\
  \            }\n        }\n        return maxFill(grid2, capacity);"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int fill = 0;\n            for (Integer i : row) {\n                fill +=\
  \ i;\n            }\n            count += (int) Math.ceil((double) fill / capacity);\n\
  \        }\n        return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer well : row) {\n                fill\
  \ += well;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        int[] max = new int[grid.size()];\n        for\
  \ (int i = 0; i < grid.size(); i++) {\n            max[i] = grid.get(i).stream().mapToInt(Integer::intValue).sum();\n\
  \        }\n        int maxSum = Arrays.stream(max).sum();\n        while (maxSum\
  \ > 0) {\n            for (int i = 0; i < grid.size(); i++) {\n                if\
  \ (max[i] > 0) {\n                    max[i] -= capacity;\n                    maxSum\
  \ -= capacity;\n                }\n            }\n            count++;\n       \
  \ }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = dp[i][j];\n\
  \                dp[i][j] = 0;\n                int rem = capacity - cur;\n    \
  \            if (rem == 0) {\n                    ans++;\n                    continue;\n\
  \                }\n                for (int k = i + 1; k < n; k++) {\n        \
  \            if (dp[k][j] == 0) {\n                        continue;\n         \
  \           }\n                    int take = Math.min(rem, dp[k][j]);\n       \
  \             dp[k][j] -= take;\n                    rem -= take;\n            \
  \        if (rem == 0) {\n                        break;\n                    }\n\
  \                }\n                ans++;\n            }\n        }\n        return\
  \ ans;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[][] grid_ = new int[row][col];\n        for (int i = 0; i < row; i++)\
  \ {\n            for (int j = 0; j < col; j++) {\n                grid_[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        while (true) {\n      \
  \      int[][] grid_copy = new int[row][col];\n            for (int i = 0; i < row;\
  \ i++) {\n                for (int j = 0; j < col; j++) {\n                    grid_copy[i][j]\
  \ = grid_[i][j];\n                }\n            }\n            for (int i = 0;\
  \ i < row; i++) {\n                for (int j = 0; j < col; j++) {\n           \
  \         if (grid_[i][j] > 0) {\n                        if (i == 0) {\n      \
  \                      if (j == 0) {\n                                if (grid_[i][j]\
  \ > capacity) {\n                                    grid_copy[i][j] = grid_[i][j]\
  \ - capacity;\n                                    grid_copy[i][j + 1] = grid_[i][j\
  \ + 1] + capacity;\n                                } else {\n                 \
  \                   grid_copy[i][j] = 0;\n                                    grid_copy[i][j\
  \ + 1] = grid_[i][j + 1] + grid_[i][j];\n                                }\n   \
  \                         } else if (j == col - 1) {\n                         \
  \       if (grid_[i][j] > capacity) {\n                                    grid_copy[i][j]\
  \ = grid_[i][j] - capacity;\n                                    grid_copy[i + 1][j]\
  \ = grid_[i + 1][j] + capacity;\n                                } else {\n    \
  \                                grid_copy[i][j] = 0;\n                        \
  \            grid_copy[i + 1][j] = grid_[i + 1][j] + grid_[i][j];\n            \
  \                    }\n                            } else {\n                 \
  \               if ("
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer cell : row) {\n                fill\
  \ += cell;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = row.stream().mapToInt(Integer::intValue).sum();\n\
  \            if (sum > capacity) {\n                count += sum / capacity;\n \
  \               if (sum % capacity != 0) {\n                    count++;\n     \
  \           }\n            } else {\n                count++;\n            }\n \
  \       }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int fill = 0;\n            for (int j = 0; j < grid.get(i).size(); j++)\
  \ {\n                fill += grid.get(i).get(j);\n            }\n            if\
  \ (fill > capacity) {\n                count += fill / capacity;\n             \
  \   if (fill % capacity != 0) {\n                    count++;\n                }\n\
  \            } else {\n                count++;\n            }\n        }\n    \
  \    return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    int fill = Math.min(capacity, dp[i][j]);\n                \
  \    ans += fill;\n                    dp[i][j] -= fill;\n                    if\
  \ (i > 0) {\n                        int fill2 = Math.min(capacity, dp[i - 1][j]);\n\
  \                        ans += fill2;\n                        dp[i - 1][j] -=\
  \ fill2;\n                    }\n                    if (j > 0) {\n            \
  \            int fill2 = Math.min(capacity, dp[i][j - 1]);\n                   \
  \     ans += fill2;\n                        dp[i][j - 1] -= fill2;\n          \
  \          }\n                }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                 \
  \   continue;\n                }\n                if (i > 0) {\n               \
  \     dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n\
  \                    dp[i][j] += dp[i][j - 1];\n                }\n            \
  \    if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n\
  \                }\n            }\n        }\n        int ans = 0;\n        for\
  \ (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n       \
  \         int sum = dp[i][j];\n                if (i > 0) {\n                  \
  \  sum -= dp[i - 1][j];\n                }\n                if (j > 0) {\n     \
  \               sum -= dp[i][j - 1];\n                }\n                if (i >\
  \ 0 && j > 0) {\n                    sum += dp[i - 1][j - 1];\n                }\n\
  \                if (sum > capacity) {\n                    ans += sum / capacity;\n\
  \                    if (sum % capacity != 0) {\n                        ans++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int[][] grid_ = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid_[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    if (i == 0 && j == 0) {\n                    dp[i][j] = grid_[i][j];\n    \
  \            } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] +\
  \ grid_[i][j];\n                } else if (j == 0) {\n                    dp[i][j]\
  \ = dp[i - 1][j] + grid_[i][j];\n                } else {\n                    dp[i][j]\
  \ = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid_[i][j];\n                }\n   \
  \         }\n        }\n        int max = dp[n - 1][m - 1];\n        int count =\
  \ 0;\n        while (max > 0) {\n            max -= capacity;\n            count++;\n\
  \        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int ans = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    dp[i][j] = 1;\n                    if (i - 1 >= 0)\
  \ {\n                        dp[i][j] += dp[i - 1][j];\n                    }\n\
  \                    if (j - 1 >= 0) {\n                        dp[i][j] += dp[i][j\
  \ - 1];\n                    }\n                    if (i - 1 >= 0 && j - 1 >= 0)\
  \ {\n                        dp[i][j] -= dp[i - 1][j - 1];\n                   \
  \ }\n                    ans += dp[i][j] / capacity;\n                    if (dp[i][j]\
  \ % capacity != 0) {\n                        ans++;\n                    }\n  \
  \              }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        int max = 0;\n        for (int i = 0; i < grid.size();\
  \ i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n         \
  \       if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max,\
  \ j);\n                }\n            }\n        }\n        while (max > 0) {\n\
  \            count++;\n            for (int i = 0; i < grid.size(); i++) {\n   \
  \             for (int j = 0; j < grid.get(i).size(); j++) {\n                 \
  \   if (grid.get(i).get(j) == 1) {\n                        grid.get(i).set(j, 0);\n\
  \                        if (j < max) {\n                            grid.get(i).set(j\
  \ + 1, 1);\n                        }\n                    }\n                }\n\
  \            }\n            max--;\n        }\n        return count;"
- "        // Fill this in.\n        return 0;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer cell : row) {\n             \
  \   rowFill += cell;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] += dp[i - 1][j];\n            }\n\
  \        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n      \
  \      for (int j = 0; j < m; j++) {\n                int cur = dp[i][j];\n    \
  \            if (cur == 0) {\n                    continue;\n                }\n\
  \                ans += (cur + capacity - 1) / capacity;\n                for (int\
  \ k = i + 1; k < n; k++) {\n                    dp[k][j] -= Math.min(cur, capacity);\n\
  \                }\n            }\n        }\n        return ans;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numFills = 0;\n        for (int col = 0; col < numCols; col++) {\n\
  \            int numBuckets = 0;\n            for (int row = 0; row < numRows; row++)\
  \ {\n                numBuckets += grid.get(row).get(col);\n            }\n    \
  \        numFills += Math.ceil((double)numBuckets / capacity);\n        }\n    \
  \    return numFills;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                 \
  \   continue;\n                }\n                int min = Math.min(dp[i][j], capacity);\n\
  \                dp[i][j] -= min;\n                int left = j - 1;\n         \
  \       int right = j + 1;\n                while (left >= 0 && right < m) {\n \
  \                   if (dp[i][left] == 0 && dp[i][right] == 0) {\n             \
  \           break;\n                    }\n                    if (dp[i][left] ==\
  \ 0) {\n                        dp[i][right] = Math.max(0, dp[i][right] - min);\n\
  \                        right++;\n                    } else if (dp[i][right] ==\
  \ 0) {\n                        dp[i][left] = Math.max(0, dp[i][left] - min);\n\
  \                        left--;\n                    } else {\n               \
  \         int leftMin = Math.min(dp[i][left], min);\n                        dp[i][left]\
  \ -= leftMin;\n                        min -= leftMin;\n                       \
  \ int rightMin = Math.min(dp[i][right], min);\n                        dp[i][right]\
  \ -= rightMin;\n                        min -= rightMin;\n                     \
  \   left--;\n                        right++;\n                    }\n         \
  \       }\n                while (left >= 0) {\n                    dp[i][left]\
  \ = Math.max(0, dp[i][left] - min);\n                    left--;\n             \
  \   }\n                while (right < m) {\n                    dp[i][right] = Math.max(0,\
  \ dp[i][right] - min);\n                    right++;\n                }"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                 \
  \   continue;\n                }\n                if (i > 0) {\n               \
  \     dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n\
  \                    dp[i][j] += dp[i][j - 1];\n                }\n            \
  \    if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n\
  \                }\n            }\n        }\n        int ans = 0;\n        for\
  \ (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n       \
  \         int cur = dp[i][j];\n                if (i > 0) {\n                  \
  \  cur -= dp[i - 1][j];\n                }\n                if (j > 0) {\n     \
  \               cur -= dp[i][j - 1];\n                }\n                if (i >\
  \ 0 && j > 0) {\n                    cur += dp[i - 1][j - 1];\n                }\n\
  \                if (cur > 0) {\n                    ans += (cur - 1) / capacity\
  \ + 1;\n                }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int fill = Math.min(capacity,\
  \ dp[i][j]);\n                ans += fill;\n                dp[i][j] -= fill;\n\
  \                if (i + 1 < n) {\n                    dp[i + 1][j] += fill;\n \
  \               }\n                if (j + 1 < m) {\n                    dp[i][j\
  \ + 1] += fill;\n                }\n            }\n        }\n        return ans;"
- "        // Your code here\n        return 0;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer cell : row) {\n                sum\
  \ += cell;\n            }\n            count += sum / capacity;\n            if\
  \ (sum % capacity != 0) {\n                count++;\n            }\n        }\n\
  \        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans++;\n                    dfs(dp, i, j, capacity);\n    \
  \            }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int ans = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    dp[i][j] = 1;\n                    ans++;\n     \
  \           }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n\
  \                    for (int k = i + 1; k < n; k++) {\n                       \
  \ if (dp[k][j] == 1) {\n                            break;\n                   \
  \     }\n                        dp[k][j] = 1;\n                    }\n        \
  \            for (int k = i - 1; k >= 0; k--) {\n                        if (dp[k][j]\
  \ == 1) {\n                            break;\n                        }\n     \
  \                   dp[k][j] = 1;\n                    }\n                    for\
  \ (int k = j + 1; k < m; k++) {\n                        if (dp[i][k] == 1) {\n\
  \                            break;\n                        }\n               \
  \         dp[i][k] = 1;\n                    }\n                    for (int k =\
  \ j - 1; k >= 0; k--) {\n                        if (dp[i][k] == 1) {\n        \
  \                    break;\n                        }\n                       \
  \ dp[i][k] = 1;\n                    }\n                }\n            }\n     \
  \   }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m;\
  \ j++) {\n                if (dp[i][j] == 1) {\n                    ans--;\n   \
  \             }\n            }\n        }\n        return ans;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer i : row) {\n                fill\
  \ += i;\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
  \ }\n        return maxFill;"
- "        int total = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowTotal = 0;\n            for (Integer i : row) {\n                rowTotal\
  \ += i;\n            }\n            total += (int) Math.ceil((double) rowTotal /\
  \ capacity);\n        }\n        return total;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int result = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[] max = new int[col];\n        for (int i = 0; i < row; i++) {\n  \
  \          for (int j = 0; j < col; j++) {\n                max[j] = Math.max(max[j],\
  \ grid.get(i).get(j));\n            }\n        }\n        for (int i = 0; i < row;\
  \ i++) {\n            for (int j = 0; j < col; j++) {\n                int diff\
  \ = max[j] - grid.get(i).get(j);\n                if (diff > 0) {\n            \
  \        result += diff;\n                    grid.get(i).set(j, max[j]);\n    \
  \            }\n            }\n        }\n        return result;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer i : row) {\n                fill\
  \ += i;\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
  \ }\n        return maxFill;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = row.stream().mapToInt(Integer::intValue).sum();\n\
  \            int buckets = sum / capacity;\n            if (sum % capacity != 0)\
  \ {\n                buckets++;\n            }\n            count += buckets;\n\
  \        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j]\
  \ = Math.max(dp[i][j], dp[i - 1][j]);\n                }\n                if (j\
  \ > 0) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);\n   \
  \             }\n            }\n        }\n        int ans = 0;\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    ans += dp[i][j];\n            }\n        }\n        return ans;"
- "        int max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n       \
  \     for (int j = 0; j < grid.get(i).size(); j++) {\n                max = Math.max(max,\
  \ grid.get(i).get(j));\n            }\n        }\n        int min = 0;\n       \
  \ while (min < max) {\n            int mid = (min + max) / 2;\n            if (canFill(grid,\
  \ capacity, mid)) {\n                min = mid + 1;\n            } else {\n    \
  \            max = mid;\n            }\n        }\n        return min;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                if (i == 0 &&\
  \ j == 0) {\n                    ans += dp[i][j] / capacity;\n                 \
  \   dp[i][j] %= capacity;\n                    continue;\n                }\n  \
  \              if (i == 0) {\n                    dp[i][j] += dp[i][j - 1];\n  \
  \                  ans += dp[i][j] / capacity;\n                    dp[i][j] %=\
  \ capacity;\n                    continue;\n                }\n                if\
  \ (j == 0) {\n                    dp[i][j] += dp[i - 1][j];\n                  \
  \  ans += dp[i][j] / capacity;\n                    dp[i][j] %= capacity;\n    \
  \                continue;\n                }\n                dp[i][j] += Math.max(dp[i\
  \ - 1][j], dp[i][j - 1]);\n                ans += dp[i][j] / capacity;\n       \
  \         dp[i][j] %= capacity;\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = 0;\n\
  \                for (int k = i; k < n; k++) {\n                    cur += dp[k][j];\n\
  \                    if (cur > capacity) {\n                        break;\n   \
  \                 }\n                    for (int l = k; l >= i; l--) {\n      \
  \                  dp[l][j] = 0;\n                    }\n                    ans++;\n\
  \                }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                ans++;\n    \
  \            int rem = capacity;\n                rem -= dp[i][j];\n           \
  \     dp[i][j] = 0;\n                for (int k = i + 1; k < n && rem > 0; k++)\
  \ {\n                    int fill = Math.min(rem, dp[k][j]);\n                 \
  \   rem -= fill;\n                    dp[k][j] -= fill;\n                }\n   \
  \         }\n        }\n        return ans;"
- "        int total = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowTotal = 0;\n            for (Integer i : row) {\n                rowTotal\
  \ += i;\n            }\n            total += rowTotal / capacity;\n            if\
  \ (rowTotal % capacity != 0) {\n                total++;\n            }\n      \
  \  }\n        return total;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            for (Integer i : row) {\n                if (i == 1) {\n\
  \                    max++;\n                }\n            }\n        }\n     \
  \   while (max > 0) {\n            for (ArrayList<Integer> row : grid) {\n     \
  \           for (int i = 0; i < row.size(); i++) {\n                    if (row.get(i)\
  \ == 1) {\n                        row.set(i, 0);\n                        max--;\n\
  \                        if (max == 0) {\n                            return count;\n\
  \                        }\n                    }\n                }\n         \
  \   }\n            count++;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int result = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[][] grid2 = new int[row][col];\n        for (int i = 0; i < row; i++)\
  \ {\n            for (int j = 0; j < col; j++) {\n                grid2[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < row;\
  \ i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid2[i][j]\
  \ == 1) {\n                    result++;\n                    int water = capacity;\n\
  \                    while (water > 0) {\n                        if (i > 0 && grid2[i\
  \ - 1][j] == 1) {\n                            grid2[i - 1][j] = 0;\n          \
  \                  water--;\n                        } else if (i < row - 1 && grid2[i\
  \ + 1][j] == 1) {\n                            grid2[i + 1][j] = 0;\n          \
  \                  water--;\n                        } else if (j > 0 && grid2[i][j\
  \ - 1] == 1) {\n                            grid2[i][j - 1] = 0;\n             \
  \               water--;\n                        } else if (j < col - 1 && grid2[i][j\
  \ + 1] == 1) {\n                            grid2[i][j + 1] = 0;\n             \
  \               water--;\n                        } else {\n                   \
  \         break;\n                        }\n                    }\n           \
  \     }\n            }\n        }\n        return result;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = 0;\n      \
  \      for (int j = 0; j < row.size(); j++) {\n                sum += row.get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int row = grid.get(i).size();\n            int sum = 0;\n            for\
  \ (int j = 0; j < row; j++) {\n                sum += grid.get(i).get(j);\n    \
  \        }\n            if (sum > capacity) {\n                count += sum / capacity;\n\
  \                if (sum % capacity != 0) {\n                    count++;\n    \
  \            }\n            } else {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        // fill the wells with the buckets\n        // return the number of times\
  \ you need to lower the buckets\n        // return -1 if you can't fill the wells\n\
  \        // fill the wells with the buckets\n        // return the number of times\
  \ you need to lower the buckets\n        // return -1 if you can't fill the wells\n\
  \        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ grid2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for\
  \ (int j = 0; j < m; j++) {\n                grid2[i][j] = grid.get(i).get(j);\n\
  \            }\n        }\n        int[][] grid3 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid3[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][]\
  \ grid4 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for\
  \ (int j = 0; j < m; j++) {\n                grid4[i][j] = grid.get(i).get(j);\n\
  \            }\n        }\n        int[][] grid5 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid5[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][]\
  \ grid6 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for\
  \ (int j = 0; j < m; j++) {\n                grid6[i][j] = grid.get(i).get(j);\n\
  \            }\n        }\n        int[][] grid7 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = 0;\n      \
  \      for (int j = 0; j < row.size(); j++) {\n                sum += row.get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++)\
  \ {\n                if (grid.get(i).get(j) == 1) {\n                    count++;\n\
  \                    int k = i;\n                    while (k < row && grid.get(k).get(j)\
  \ == 1) {\n                        grid.get(k).set(j, 0);\n                    \
  \    k++;\n                    }\n                }\n            }\n        }\n\
  \        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer unit : row) {\n             \
  \   rowFill += unit;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans++;\n                    dfs(dp, i, j, capacity);\n    \
  \            }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        for (int i = 0; i < row; i++) {\n            int sum = 0;\n           \
  \ for (int j = 0; j < col; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = dp[i][j];\n\
  \                dp[i][j] = 0;\n                ans += cur / capacity;\n       \
  \         if (cur % capacity != 0) {\n                    ans++;\n             \
  \   }\n                int[] dx = {-1, 0, 1, 0};\n                int[] dy = {0,\
  \ 1, 0, -1};\n                for (int k = 0; k < 4; k++) {\n                  \
  \  int x = i + dx[k];\n                    int y = j + dy[k];\n                \
  \    if (x < 0 || x >= n || y < 0 || y >= m) {\n                        continue;\n\
  \                    }\n                    dp[x][y] += cur % capacity;\n      \
  \          }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            count +=\
  \ Math.ceil((double)sum / capacity);\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                 \
  \   continue;\n                }\n                int left = j - 1;\n          \
  \      int right = j + 1;\n                int up = i - 1;\n                int\
  \ down = i + 1;\n                if (left >= 0 && dp[i][left] > 0) {\n         \
  \           int diff = dp[i][left] - dp[i][j];\n                    if (diff < 0)\
  \ {\n                        dp[i][left] += diff;\n                        dp[i][j]\
  \ = 0;\n                    } else if (diff > 0) {\n                        dp[i][j]\
  \ += diff;\n                        dp[i][left] = 0;\n                    }\n  \
  \              }\n                if (right < m && dp[i][right] > 0) {\n       \
  \             int diff = dp[i][right] - dp[i][j];\n                    if (diff\
  \ < 0) {\n                        dp[i][right] += diff;\n                      \
  \  dp[i][j] = 0;\n                    } else if (diff > 0) {\n                 \
  \       dp[i][j] += diff;\n                        dp[i][right] = 0;\n         \
  \           }\n                }\n                if (up >= 0 && dp[up][j] > 0)\
  \ {\n                    int diff = dp[up][j] - dp[i][j];\n                    if\
  \ (diff < 0) {\n                        dp[up][j] += diff;\n                   \
  \     dp[i][j] = 0;\n                    } else if (diff > 0) {\n              \
  \          dp[i][j] += diff;\n                        dp[up"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[][] grid2 = new int[row][col];\n        for (int i = 0; i < row; i++)\
  \ {\n            for (int j = 0; j < col; j++) {\n                grid2[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        while (true) {\n      \
  \      int[][] grid3 = new int[row][col];\n            for (int i = 0; i < row;\
  \ i++) {\n                for (int j = 0; j < col; j++) {\n                    grid3[i][j]\
  \ = grid2[i][j];\n                }\n            }\n            for (int i = 0;\
  \ i < row; i++) {\n                for (int j = 0; j < col; j++) {\n           \
  \         if (grid2[i][j] == 1) {\n                        if (i - 1 >= 0 && grid2[i\
  \ - 1][j] == 0) {\n                            grid3[i - 1][j] = 1;\n          \
  \                  grid3[i][j] = 0;\n                        } else if (i + 1 <\
  \ row && grid2[i + 1][j] == 0) {\n                            grid3[i + 1][j] =\
  \ 1;\n                            grid3[i][j] = 0;\n                        } else\
  \ if (j - 1 >= 0 && grid2[i][j - 1] == 0) {\n                            grid3[i][j\
  \ - 1] = 1;\n                            grid3[i][j] = 0;\n                    \
  \    } else if (j + 1 < col && grid2[i][j + 1] == 0) {\n                       \
  \     grid3[i][j + 1] = 1;\n                            grid3[i][j] = 0;\n     \
  \                   }\n                    }\n                }\n            }\n\
  \            boolean isSame = true;\n            for (int i = 0; i < row; i++) {\n\
  \                for (int j = 0; j < col; j++) {\n                    if (grid2[i][j]\
  \ != grid3[i][j]) {\n                       "
- "        int total = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowTotal = 0;\n            for (Integer i : row) {\n                rowTotal\
  \ += i;\n            }\n            total += (int) Math.ceil((double) rowTotal /\
  \ capacity);\n        }\n        return total;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int rowSum = grid.get(i).stream().mapToInt(Integer::intValue).sum();\n \
  \           if (rowSum > capacity) {\n                count += rowSum / capacity;\n\
  \                if (rowSum % capacity != 0) {\n                    count++;\n \
  \               }\n            } else {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       maxFill += row.stream().mapToInt(Integer::intValue).sum();\n        }\n\
  \        return maxFill / capacity;"
- "        int times = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[][] grid2 = new int[row][col];\n        for (int i = 0; i < row; i++)\
  \ {\n            for (int j = 0; j < col; j++) {\n                grid2[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < row;\
  \ i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid2[i][j]\
  \ == 1) {\n                    times++;\n                    int fill = capacity;\n\
  \                    while (fill > 0) {\n                        if (i == 0) {\n\
  \                            grid2[i][j] = 0;\n                            fill--;\n\
  \                        } else {\n                            if (grid2[i - 1][j]\
  \ == 1) {\n                                grid2[i - 1][j] = 0;\n              \
  \                  fill--;\n                            } else {\n             \
  \                   grid2[i][j] = 0;\n                                fill--;\n\
  \                            }\n                        }\n                    }\n\
  \                }\n            }\n        }\n        return times;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ (sum / capacity);\n                if (sum % capacity != 0) {\n              \
  \      count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j]\
  \ = Math.max(dp[i][j], dp[i - 1][j]);\n                }\n                if (j\
  \ > 0) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);\n   \
  \             }\n            }\n        }\n        int ans = 0;\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    ans += dp[i][j];\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = dp[i][j];\n\
  \                ans += cur / capacity;\n                if (cur % capacity != 0)\
  \ {\n                    ans++;\n                }\n                if (i + 1 <\
  \ n) {\n                    dp[i + 1][j] += cur % capacity;\n                }\n\
  \            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = 0;\n      \
  \      for (int j = 0; j < row.size(); j++) {\n                sum += row.get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0)\
  \ {\n                    count++;\n                    int water = capacity;\n \
  \                   while (water > 0) {\n                        int min = Integer.MAX_VALUE;\n\
  \                        for (int k = 0; k < n; k++) {\n                       \
  \     for (int l = 0; l < m; l++) {\n                                if (dp[k][l]\
  \ > 0) {\n                                    min = Math.min(min, dp[k][l]);\n \
  \                               }\n                            }\n             \
  \           }\n                        for (int k = 0; k < n; k++) {\n         \
  \                   for (int l = 0; l < m; l++) {\n                            \
  \    if (dp[k][l] > 0) {\n                                    if (dp[k][l] - min\
  \ <= water) {\n                                        water -= dp[k][l] - min;\n\
  \                                        dp[k][l] = min;\n                     \
  \               } else {\n                                        dp[k][l] -= water;\n\
  \                                        water = 0;\n                          \
  \          }\n                                }\n                            }\n\
  \                        }\n                    }\n                }\n         \
  \   }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numBuckets = 0;\n        for (int i = 0; i < numRows; i++) {\n    \
  \        int numWater = 0;\n            for (int j = 0; j < numCols; j++) {\n  \
  \              numWater += grid.get(i).get(j);\n            }\n            if (numWater\
  \ > 0) {\n                numBuckets += (numWater / capacity);\n               \
  \ if (numWater % capacity > 0) {\n                    numBuckets++;\n          \
  \      }\n            }\n        }\n        return numBuckets;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans += dp[i][j] / capacity;\n                    if (dp[i][j]\
  \ % capacity > 0) {\n                        ans++;\n                    }\n   \
  \             }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int[][] dp2 = new int[n][m];\n        for (int i\
  \ = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n              \
  \  if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n         \
  \           dp2[i][j] = 1;\n                }\n            }\n        }\n      \
  \  for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n  \
  \              if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n   \
  \             }\n                if (j > 0) {\n                    dp2[i][j] +=\
  \ dp2[i][j - 1];\n                }\n            }\n        }\n        int ans =\
  \ 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m;\
  \ j++) {\n                int a = dp[i][j];\n                int b = dp2[i][j];\n\
  \                if (a > capacity) {\n                    ans += a - capacity;\n\
  \                }\n                if (b > capacity) {\n                    ans\
  \ += b - capacity;\n                }\n            }\n        }\n        return\
  \ ans;"
- "        int fillCount = 0;\n        int rowCount = grid.size();\n        int colCount\
  \ = grid.get(0).size();\n        int[] rowMax = new int[rowCount];\n        int[]\
  \ colMax = new int[colCount];\n        for (int i = 0; i < rowCount; i++) {\n  \
  \          int max = 0;\n            for (int j = 0; j < colCount; j++) {\n    \
  \            max = Math.max(max, grid.get(i).get(j));\n            }\n         \
  \   rowMax[i] = max;\n        }\n        for (int j = 0; j < colCount; j++) {\n\
  \            int max = 0;\n            for (int i = 0; i < rowCount; i++) {\n  \
  \              max = Math.max(max, grid.get(i).get(j));\n            }\n       \
  \     colMax[j] = max;\n        }\n        for (int i = 0; i < rowCount; i++) {\n\
  \            for (int j = 0; j < colCount; j++) {\n                int max = Math.max(rowMax[i],\
  \ colMax[j]);\n                int diff = max - grid.get(i).get(j);\n          \
  \      fillCount += diff;\n                grid.get(i).set(j, max);\n          \
  \  }\n        }\n        return fillCount;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        for (int i = 0; i < row; i++) {\n            int sum = 0;\n           \
  \ for (int j = 0; j < col; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int max = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j\
  \ == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                }\
  \ else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n\
  \                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j]\
  \ + grid.get(i).get(j);\n                } else {\n                    dp[i][j]\
  \ = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n               \
  \ }\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n\
  \        return max / capacity;"
- "        int result = 0;\n        for (int i = 0; i < grid.size(); i++) {\n    \
  \        int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++)\
  \ {\n                sum += grid.get(i).get(j);\n            }\n            result\
  \ += Math.ceil((double)sum / capacity);\n        }\n        return result;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            max = 0;\n            for (Integer i : row) {\n       \
  \         if (i == 1) {\n                    max++;\n                }\n       \
  \     }\n            count += max / capacity;\n            if (max % capacity !=\
  \ 0) {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int\
  \ ans = 0;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n  \
  \          for (int j = 0; j < m; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            ans += Math.ceil((double)sum / capacity);\n        }\n\
  \        return ans;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            max = 0;\n            for (Integer i : row) {\n       \
  \         if (i == 1) {\n                    max++;\n                }\n       \
  \     }\n            count += max / capacity;\n            if (max % capacity !=\
  \ 0) {\n                count++;\n            }\n        }\n        return count;"
- "        // Your code here\n        return 0;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (i == 0) {\n                    dp[i][j]\
  \ = grid.get(i).get(j);\n                } else {\n                    dp[i][j]\
  \ = dp[i - 1][j] + grid.get(i).get(j);\n                }\n            }\n     \
  \   }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n           \
  \ for (int j = 0; j < m; j++) {\n                if (dp[i][j] > capacity) {\n  \
  \                  ans += dp[i][j] - capacity;\n                    dp[i][j] = capacity;\n\
  \                }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] ==\
  \ 1) {\n                    count++;\n                    dfs(dp, i, j, capacity);\n\
  \                }\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            count +=\
  \ (int) Math.ceil((double) sum / capacity);\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer well : row) {\n             \
  \   rowFill += well;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill;"
- "        int result = 0;\n        for (int i = 0; i < grid.size(); i++) {\n    \
  \        int fill = 0;\n            for (int j = 0; j < grid.get(i).size(); j++)\
  \ {\n                fill += grid.get(i).get(j);\n            }\n            if\
  \ (fill > capacity) {\n                result += fill / capacity;\n            \
  \    if (fill % capacity != 0) {\n                    result++;\n              \
  \  }\n            } else {\n                result++;\n            }\n        }\n\
  \        return result;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += (int) Math.ceil((double) sum / capacity);\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int fillCount = 0;\n        for (int i = 0; i < grid.size(); i++) {\n \
  \           ArrayList<Integer> row = grid.get(i);\n            int rowFillCount\
  \ = 0;\n            for (int j = 0; j < row.size(); j++) {\n                int\
  \ cell = row.get(j);\n                if (cell == 1) {\n                    rowFillCount++;\n\
  \                }\n            }\n            if (rowFillCount > 0) {\n       \
  \         fillCount += (int) Math.ceil((double) rowFillCount / capacity);\n    \
  \        }\n        }\n        return fillCount;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ (sum / capacity);\n                if (sum % capacity > 0) {\n               \
  \     count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numFills = 0;\n        for (int i = 0; i < numRows; i++) {\n      \
  \      for (int j = 0; j < numCols; j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    numFills++;\n                    int numBuckets =\
  \ capacity;\n                    while (numBuckets > 0) {\n                    \
  \    // fill bucket\n                        numBuckets--;\n                   \
  \     // empty bucket\n                        grid.get(i).set(j, 0);\n        \
  \                // move bucket\n                        if (i < numRows - 1) {\n\
  \                            i++;\n                        } else {\n          \
  \                  break;\n                        }\n                    }\n  \
  \              }\n            }\n        }\n        return numFills;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int fill = 0;\n     \
  \       for (int j = 0; j < row.size(); j++) {\n                int water = row.get(j);\n\
  \                if (water == 1) {\n                    fill++;\n              \
  \  }\n            }\n            count += Math.ceil((double) fill / capacity);\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            count +=\
  \ (int) Math.ceil((double) sum / capacity);\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans++;\n                    dfs(dp, i, j, capacity);\n    \
  \            }\n            }\n        }\n        return ans;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int[][] grid2 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid2[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    if (i == 0 && j == 0) {\n                    dp[i][j] = grid2[i][j];\n    \
  \            } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] +\
  \ grid2[i][j];\n                } else if (j == 0) {\n                    dp[i][j]\
  \ = dp[i - 1][j] + grid2[i][j];\n                } else {\n                    dp[i][j]\
  \ = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid2[i][j];\n                }\n   \
  \         }\n        }\n        int max = dp[n - 1][m - 1];\n        return (max\
  \ + capacity - 1) / capacity;"
- "        int rows = grid.size();\n        int cols = grid.get(0).size();\n     \
  \   int[][] grid2 = new int[rows][cols];\n        for (int i = 0; i < rows; i++)\
  \ {\n            for (int j = 0; j < cols; j++) {\n                grid2[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        return maxFill(grid2, capacity);"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer cell : row) {\n                fill\
  \ += cell;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int max = 0;\n        for (ArrayList<Integer> row : grid) {\n         \
  \   int sum = 0;\n            for (Integer i : row) {\n                sum += i;\n\
  \            }\n            max = Math.max(max, sum);\n        }\n        return\
  \ max / capacity + (max % capacity == 0 ? 0 : 1);"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int ans = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j\
  \ == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                }\
  \ else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n\
  \                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j]\
  \ + grid.get(i).get(j);\n                } else {\n                    dp[i][j]\
  \ = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n               \
  \ }\n                ans = Math.max(ans, dp[i][j]);\n            }\n        }\n\
  \        return ans / capacity;"
- "        // fill the buckets\n        // lower the buckets\n        // repeat until\
  \ all wells are empty\n        int count = 0;\n        while (!isEmpty(grid)) {\n\
  \            count++;\n            fill(grid, capacity);\n            lower(grid);\n\
  \        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int fill = Math.min(capacity,\
  \ dp[i][j]);\n                dp[i][j] -= fill;\n                ans += fill;\n\
  \                if (i + 1 < n) {\n                    dp[i + 1][j] += fill;\n \
  \               }\n                if (j + 1 < m) {\n                    dp[i][j\
  \ + 1] += fill;\n                }\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        int[][] grid2 = new int[row][col];\n        for (int i = 0; i < row; i++)\
  \ {\n            for (int j = 0; j < col; j++) {\n                grid2[i][j] =\
  \ grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < row;\
  \ i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid2[i][j]\
  \ == 1) {\n                    count++;\n                    int water = capacity;\n\
  \                    while (water > 0) {\n                        if (i > 0 && grid2[i\
  \ - 1][j] == 1) {\n                            grid2[i - 1][j] = 0;\n          \
  \                  water--;\n                        } else if (i < row - 1 && grid2[i\
  \ + 1][j] == 1) {\n                            grid2[i + 1][j] = 0;\n          \
  \                  water--;\n                        } else if (j > 0 && grid2[i][j\
  \ - 1] == 1) {\n                            grid2[i][j - 1] = 0;\n             \
  \               water--;\n                        } else if (j < col - 1 && grid2[i][j\
  \ + 1] == 1) {\n                            grid2[i][j + 1] = 0;\n             \
  \               water--;\n                        } else {\n                   \
  \         break;\n                        }\n                    }\n           \
  \     }\n            }\n        }\n        return count;"
- "        int fillCount = 0;\n        int rowCount = grid.size();\n        int colCount\
  \ = grid.get(0).size();\n        for (int i = 0; i < rowCount; i++) {\n        \
  \    int fill = 0;\n            for (int j = 0; j < colCount; j++) {\n         \
  \       fill += grid.get(i).get(j);\n            }\n            fillCount += Math.ceil((double)fill\
  \ / capacity);\n        }\n        return fillCount;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer well : row) {\n             \
  \   rowFill += well;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer i : row) {\n                fill\
  \ += i;\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
  \ }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++)\
  \ {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0)\
  \ {\n                    count++;\n                    int c = capacity;\n     \
  \               while (c > 0) {\n                        int min = Math.min(c, dp[i][j]);\n\
  \                        dp[i][j] -= min;\n                        c -= min;\n \
  \                       if (i > 0) {\n                            dp[i - 1][j] +=\
  \ min;\n                        }\n                        if (j > 0) {\n      \
  \                      dp[i][j - 1] += min;\n                        }\n       \
  \                 if (i < n - 1) {\n                            dp[i + 1][j] +=\
  \ min;\n                        }\n                        if (j < m - 1) {\n  \
  \                          dp[i][j + 1] += min;\n                        }\n   \
  \                 }\n                }\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ sum / capacity;\n                if (sum % capacity != 0) {\n                \
  \    count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer column : row) {\n              \
  \  if (column == 1) {\n                    fill++;\n                }\n        \
  \    }\n            maxFill = Math.max(maxFill, fill);\n        }\n        return\
  \ maxFill;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numFills = 0;\n        for (int i = 0; i < numRows; i++) {\n      \
  \      int numOnes = 0;\n            for (int j = 0; j < numCols; j++) {\n     \
  \           if (grid.get(i).get(j) == 1) {\n                    numOnes++;\n   \
  \             }\n            }\n            if (numOnes > 0) {\n               \
  \ numFills += (numOnes / capacity);\n                if (numOnes % capacity > 0)\
  \ {\n                    numFills++;\n                }\n            }\n       \
  \ }\n        return numFills;"
- "        int count = 0;\n        int n = grid.size();\n        int m = grid.get(0).size();\n\
  \        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for\
  \ (int j = 0; j < m; j++) {\n                sum += grid.get(i).get(j);\n      \
  \      }\n            if (sum > capacity) {\n                count += sum / capacity;\n\
  \                if (sum % capacity != 0) {\n                    count++;\n    \
  \            }\n            }\n        }\n        return count;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            max = 0;\n            for (Integer i : row) {\n       \
  \         if (i == 1) {\n                    max++;\n                }\n       \
  \     }\n            count += max / capacity;\n            if (max % capacity !=\
  \ 0) {\n                count++;\n            }\n        }\n        return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer cell : row) {\n             \
  \   rowFill += cell;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill / capacity;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer well : row) {\n             \
  \   rowFill += well;\n            }\n            maxFill = Math.max(maxFill, rowFill);\n\
  \        }\n        return maxFill;"
- "        int total = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            total += sum / capacity;\n            if (sum %\
  \ capacity != 0) {\n                total++;\n            }\n        }\n       \
  \ return total;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer cell : row) {\n                fill\
  \ += cell;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numFills = 0;\n        for (int i = 0; i < numRows; i++) {\n      \
  \      for (int j = 0; j < numCols; j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    numFills++;\n                    int numRowsToFill\
  \ = Math.min(numRows - i, capacity);\n                    for (int k = 0; k < numRowsToFill;\
  \ k++) {\n                        int numColsToFill = Math.min(numCols - j, capacity);\n\
  \                        for (int l = 0; l < numColsToFill; l++) {\n           \
  \                 grid.get(i + k).set(j + l, 0);\n                        }\n  \
  \                  }\n                }\n            }\n        }\n        return\
  \ numFills;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j]\
  \ = Math.max(dp[i][j], dp[i - 1][j]);\n                }\n                if (j\
  \ > 0) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);\n   \
  \             }\n            }\n        }\n        int ans = 0;\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    ans += dp[i][j];\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += (int) Math.ceil((double) sum / capacity);\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int filled = 0;\n            for (Integer i : row) {\n                filled\
  \ += i;\n            }\n            if (filled > capacity) {\n                filled\
  \ = capacity;\n            }\n            count += filled;\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        int[][] grid2 = new int[n][m];\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    grid2[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int\
  \ i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
  \    if (i == 0 && j == 0) {\n                    dp[i][j] = grid2[i][j];\n    \
  \            } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] +\
  \ grid2[i][j];\n                } else if (j == 0) {\n                    dp[i][j]\
  \ = dp[i - 1][j] + grid2[i][j];\n                } else {\n                    dp[i][j]\
  \ = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid2[i][j];\n                }\n   \
  \         }\n        }\n        int max = dp[n - 1][m - 1];\n        int count =\
  \ 0;\n        while (max > 0) {\n            max -= capacity;\n            count++;\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ (sum / capacity);\n                if (sum % capacity != 0) {\n              \
  \      count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int sum = 0;\n        for (ArrayList<Integer> row : grid) {\n         \
  \   sum += row.stream().mapToInt(Integer::intValue).sum();\n        }\n        return\
  \ sum / capacity;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n\
  \                    continue;\n                }\n                int cur = dp[i][j];\n\
  \                if (cur > capacity) {\n                    ans += cur / capacity;\n\
  \                    cur %= capacity;\n                }\n                if (cur\
  \ == 0) {\n                    continue;\n                }\n                if\
  \ (i + 1 < n) {\n                    dp[i + 1][j] += cur;\n                }\n \
  \               if (j + 1 < m) {\n                    dp[i][j + 1] += cur;\n   \
  \             }\n                ans++;\n            }\n        }\n        return\
  \ ans;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int rowFill = 0;\n            for (Integer well : row) {\n             \
  \   if (well == 1) {\n                    rowFill++;\n                }\n      \
  \      }\n            maxFill += Math.ceil((double) rowFill / capacity);\n     \
  \   }\n        return maxFill;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][]\
  \ dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int\
  \ j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n       \
  \     }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n\
  \            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > 0) {\n\
  \                    ans += dp[i][j] / capacity;\n                    if (dp[i][j]\
  \ % capacity > 0) {\n                        ans++;\n                    }\n   \
  \             }\n            }\n        }\n        return ans;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer well : row) {\n                fill\
  \ += well;\n            }\n            maxFill = Math.max(maxFill, fill);\n    \
  \    }\n        return maxFill / capacity + (maxFill % capacity == 0 ? 0 : 1);"
- "        int maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n   \
  \         for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
  \ == 1) {\n                    maxFill++;\n                }\n            }\n  \
  \      }\n        return maxFill;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            count +=\
  \ sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowCount = 0;\n            for (Integer cell : row) {\n              \
  \  rowCount += cell;\n            }\n            count += rowCount / capacity;\n\
  \            if (rowCount % capacity != 0) {\n                count++;\n       \
  \     }\n        }\n        return count;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer i : row) {\n                fill\
  \ += i;\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
  \ }\n        return maxFill;"
- "        int fillCount = 0;\n        int rowCount = grid.size();\n        int colCount\
  \ = grid.get(0).size();\n        int[][] gridArray = new int[rowCount][colCount];\n\
  \        for (int i = 0; i < rowCount; i++) {\n            for (int j = 0; j < colCount;\
  \ j++) {\n                gridArray[i][j] = grid.get(i).get(j);\n            }\n\
  \        }\n        while (true) {\n            int[][] newGrid = new int[rowCount][colCount];\n\
  \            for (int i = 0; i < rowCount; i++) {\n                for (int j =\
  \ 0; j < colCount; j++) {\n                    if (gridArray[i][j] > 0) {\n    \
  \                    int fill = Math.min(capacity, gridArray[i][j]);\n         \
  \               newGrid[i][j] = gridArray[i][j] - fill;\n                      \
  \  if (i > 0) {\n                            newGrid[i - 1][j] += fill;\n      \
  \                  }\n                        if (i < rowCount - 1) {\n        \
  \                    newGrid[i + 1][j] += fill;\n                        }\n   \
  \                     if (j > 0) {\n                            newGrid[i][j - 1]\
  \ += fill;\n                        }\n                        if (j < colCount\
  \ - 1) {\n                            newGrid[i][j + 1] += fill;\n             \
  \           }\n                    }\n                }\n            }\n       \
  \     if (Arrays.deepEquals(gridArray, newGrid)) {\n                break;\n   \
  \         }\n            gridArray = newGrid;\n            fillCount++;\n      \
  \  }\n        return fillCount;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            count +=\
  \ Math.ceil((double)sum / capacity);\n        }\n        return count;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int\
  \ count = 0;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n\
  \            for (int j = 0; j < m; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            count += Math.ceil((double)sum / capacity);\n      \
  \  }\n        return count;"
- "        int numRows = grid.size();\n        int numCols = grid.get(0).size();\n\
  \        int numBuckets = numRows;\n        int numFills = 0;\n        ArrayList<Integer>\
  \ buckets = new ArrayList<Integer>(Collections.nCopies(numBuckets, 0));\n      \
  \  for (int i = 0; i < numCols; i++) {\n            for (int j = 0; j < numRows;\
  \ j++) {\n                if (grid.get(j).get(i) == 1) {\n                    if\
  \ (buckets.get(j) < capacity) {\n                        buckets.set(j, buckets.get(j)\
  \ + 1);\n                    } else {\n                        numFills++;\n   \
  \                 }\n                }\n            }\n        }\n        return\
  \ numFills;"
- "        int maxFill = 0;\n        for (ArrayList<Integer> row : grid) {\n     \
  \       int fill = 0;\n            for (Integer i : row) {\n                fill\
  \ += i;\n            }\n            maxFill = Math.max(maxFill, fill);\n       \
  \ }\n        return maxFill;"
- "        // your code goes here\n        int count = 0;\n        for (int i = 0;\
  \ i < grid.size(); i++) {\n            int sum = 0;\n            for (int j = 0;\
  \ j < grid.get(i).size(); j++) {\n                sum += grid.get(i).get(j);\n \
  \           }\n            if (sum > capacity) {\n                count += (sum\
  \ / capacity);\n                if (sum % capacity != 0) {\n                   \
  \ count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int max = 0;\n        for (ArrayList<Integer> row : grid) {\n         \
  \   int sum = 0;\n            for (Integer i : row) {\n                sum += i;\n\
  \            }\n            max = Math.max(max, sum);\n        }\n        return\
  \ max / capacity + (max % capacity > 0 ? 1 : 0);"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            if (sum > capacity) {\n                count +=\
  \ (sum / capacity);\n                if (sum % capacity != 0) {\n              \
  \      count++;\n                }\n            } else {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += (int) Math.ceil((double) sum / capacity);\n\
  \        }\n        return count;"
- "        int maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n   \
  \         int fill = 0;\n            for (int j = 0; j < grid.get(i).size(); j++)\
  \ {\n                if (grid.get(i).get(j) == 1) {\n                    fill++;\n\
  \                }\n            }\n            if (fill > maxFill) {\n         \
  \       maxFill = fill;\n            }\n        }\n        return maxFill;"
- "        int n = grid.size();\n        int m = grid.get(0).size();\n        int\
  \ ans = 0;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n  \
  \          for (int j = 0; j < m; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            ans += sum / capacity;\n            if (sum % capacity\
  \ != 0) {\n                ans++;\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int sum = 0;\n            for (Integer i : row) {\n                sum +=\
  \ i;\n            }\n            count += Math.ceil((double)sum / capacity);\n \
  \       }\n        return count;"
- "        int count = 0;\n        int max = 0;\n        for (int i = 0; i < grid.size();\
  \ i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n         \
  \       if (grid.get(i).get(j) == 1) {\n                    count++;\n         \
  \       }\n            }\n            if (count > max) {\n                max =\
  \ count;\n            }\n            count = 0;\n        }\n        return max /\
  \ capacity;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            max = 0;\n            for (Integer i : row) {\n       \
  \         if (i == 1) {\n                    max++;\n                }\n       \
  \     }\n            count += max / capacity;\n            if (max % capacity !=\
  \ 0) {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (ArrayList<Integer> row : grid) {\n       \
  \     int rowCount = 0;\n            for (Integer cell : row) {\n              \
  \  if (cell == 1) {\n                    rowCount++;\n                }\n      \
  \      }\n            count += (int) Math.ceil((double) rowCount / capacity);\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += sum / capacity;\n                if (sum\
  \ % capacity != 0) {\n                    count++;\n                }\n        \
  \    } else {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            int num\
  \ = sum / capacity;\n            if (sum % capacity != 0) {\n                num++;\n\
  \            }\n            count += num;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                return -1;\n            }\n            count +=\
  \ sum;\n        }\n        return count;"
- "        int count = 0;\n        int n = grid.size();\n        int m = grid.get(0).size();\n\
  \        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++)\
  \ {\n                if (grid.get(i).get(j) == 1) {\n                    count++;\n\
  \                    for (int k = 0; k < capacity; k++) {\n                    \
  \    if (i + k < n) {\n                            grid.get(i + k).set(j, 0);\n\
  \                        }\n                    }\n                }\n         \
  \   }\n        }\n        return count;"
- "        int count = 0;\n        int row = grid.size();\n        int col = grid.get(0).size();\n\
  \        for (int i = 0; i < row; i++) {\n            int sum = 0;\n           \
  \ for (int j = 0; j < col; j++) {\n                sum += grid.get(i).get(j);\n\
  \            }\n            if (sum > capacity) {\n                count += sum\
  \ / capacity;\n                if (sum % capacity != 0) {\n                    count++;\n\
  \                }\n            } else {\n                count++;\n           \
  \ }\n        }\n        return count;"
- "        int count = 0;\n        int max = 0;\n        for (ArrayList<Integer> row\
  \ : grid) {\n            for (Integer cell : row) {\n                if (cell >\
  \ max) {\n                    max = cell;\n                }\n            }\n  \
  \      }\n        for (int i = 0; i < max; i++) {\n            for (ArrayList<Integer>\
  \ row : grid) {\n                for (Integer cell : row) {\n                  \
  \  if (cell > 0) {\n                        cell -= 1;\n                       \
  \ count += 1;\n                    }\n                }\n            }\n       \
  \ }\n        return count;"
- "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\
  \        int[] rowMax = new int[rows];\n        for (int i = 0; i < rows; i++) {\n\
  \            int max = 0;\n            for (int j = 0; j < cols; j++) {\n      \
  \          if (grid.get(i).get(j) > max) {\n                    max = grid.get(i).get(j);\n\
  \                }\n            }\n            rowMax[i] = max;\n        }\n   \
  \     int max = 0;\n        for (int i = 0; i < rows; i++) {\n            if (rowMax[i]\
  \ > max) {\n                max = rowMax[i];\n            }\n        }\n       \
  \ while (max > 0) {\n            count++;\n            for (int i = 0; i < rows;\
  \ i++) {\n                if (rowMax[i] > 0) {\n                    rowMax[i] -=\
  \ capacity;\n                }\n            }\n            max = 0;\n          \
  \  for (int i = 0; i < rows; i++) {\n                if (rowMax[i] > max) {\n  \
  \                  max = rowMax[i];\n                }\n            }\n        }\n\
  \        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       ArrayList<Integer> row = grid.get(i);\n            int sum = row.stream().mapToInt(Integer::intValue).sum();\n\
  \            if (sum > capacity) {\n                count += sum / capacity;\n \
  \               if (sum % capacity != 0) {\n                    count++;\n     \
  \           }\n            } else {\n                count++;\n            }\n \
  \       }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n\
  \                sum += grid.get(i).get(j);\n            }\n            if (sum\
  \ > capacity) {\n                count += (sum / capacity);\n                if\
  \ (sum % capacity != 0) {\n                    count++;\n                }\n   \
  \         } else {\n                count++;\n            }\n        }\n       \
  \ return count;"
language: java
name: HumanEval_115_max_fill
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example 3:\n\
  \    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length\
  \ <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n\
  \    // * 1 <= capacity <= 10\n    public static int maxFill(ArrayList<ArrayList<Integer>>\
  \ grid, int capacity) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)1, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)1, (int)0, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1))))), (1)) ==\
  \ (6));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)1, (int)1, (int)1))))), (2)) ==\
  \ (5));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0))))), (5)) == (0));\n\
  \    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1))))), (2)) ==\
  \ (4));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1))))), (9)) ==\
  \ (2));\n    }\n\n}\n"
