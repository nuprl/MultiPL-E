language: java
name: HumanEval_148_bf
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (!planets.contains(planet1) || !planets.contains(planet2))\
    \ {\n            return result;\n        }\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start > end) {\n   \
    \         int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 < 0 || i2 < 0) {\n  \
    \          return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n  \
    \          }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (planets.indexOf(planet1)\
    \ < 0 || planets.indexOf(planet2) < 0) {\n            return new ArrayList<String>();\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ int start = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n\
    \        if (start > end) {\n            int tmp = start;\n            start =\
    \ end;\n            end = tmp;\n        }\n        for (int i = start + 1; i <\
    \ end; i++) {\n            res.add(planets.get(i));\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n      \
    \  for (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n\
    \        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return res;\n        if (i1 > i2) {\n     \
    \       int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n\
    \        for (int i = i1 + 1; i < i2; i++) res.add(planets.get(i));\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int temp\
    \ = i;\n            i = j;\n            j = temp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n\
    \        }\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 > i2) {\n            int tmp = i1;\n            i1 = i2;\n   \
    \         i2 = tmp;\n        }\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n\
    \        }\n        int start = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n\
    \        if (start > end) {\n            int temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (int i = start + 1; i < end; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        for (int i = i1 + 1; i < i2; i++) {\n\
    \            res.add(planets.get(i));\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwcvrr8a.java:42)\n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n      \
    \  for (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for\
    \ (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        int min = Math.min(index1,\
    \ index2);\n        int max = Math.max(index1, index2);\n        for (int i =\
    \ min + 1; i < max; i++) {\n            result.add(planets.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n\
    \            return new ArrayList<String>();\n        }\n        if (p1 > p2)\
    \ {\n            int tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return new ArrayList<String>(planets.subList(p1 + 1, p2));\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fromIndex(3)\
    \ > toIndex(2)\n\tat java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:509)\n\
    \tat java.base/java.util.ArrayList.subList(ArrayList.java:1108)\n\tat Problem.bf(tmpqksr8y76.java:39)\n\
    \tat Problem.main(tmpqksr8y76.java:46)\n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int temp\
    \ = i;\n            i = j;\n            j = temp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (p1 >\
    \ p2) {\n            int temp = p1;\n            p1 = p2;\n            p2 = temp;\n\
    \        }\n        return new ArrayList<String>(planets.subList(p1 + 1, p2));\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fromIndex(3)\
    \ > toIndex(2)\n\tat java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:509)\n\
    \tat java.base/java.util.ArrayList.subList(ArrayList.java:1108)\n\tat Problem.bf(tmp6f0yf8rw.java:39)\n\
    \tat Problem.main(tmp6f0yf8rw.java:46)\n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n\
    \        }\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 > i2) {\n            int temp = i1;\n            i1 = i2;\n  \
    \          i2 = temp;\n        }\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n      \
    \  for (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int index1 = planets.indexOf(planet1);\n            int index2\
    \ = planets.indexOf(planet2);\n            if (index1 < index2) {\n          \
    \      for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = index2\
    \ + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n \
    \               }\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n      \
    \  int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n    \
    \        return res;\n        }\n        if (i > j) {\n            int tmp = i;\n\
    \            i = j;\n            j = tmp;\n        }\n        for (int k = i +\
    \ 1; k < j; k++) {\n            res.add(planets.get(k));\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 < 0 || i2 < 0) {\n\
    \            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n  \
    \          }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n\
    \            if (p1 > p2) {\n                int tmp = p1;\n                p1\
    \ = p2;\n                p2 = tmp;\n            }\n            for (int i = p1\
    \ + 1; i < p2; i++) {\n                result.add(planets.get(i));\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) return\
    \ result;\n        if (i1 > i2) {\n            int tmp = i1;\n            i1 =\
    \ i2;\n            i2 = tmp;\n        }\n        for (int i = i1 + 1; i < i2;\
    \ i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (!planets.contains(planet1) || !planets.contains(planet2))\
    \ {\n            return result;\n        }\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start > end) {\n   \
    \         int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int tmp\
    \ = i;\n            i = j;\n            j = tmp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n     \
    \   int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return res;\n        }\n        if (p1 > p2) {\n            int tmp\
    \ = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for (int\
    \ i = p1 + 1; i < p2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 < 0 || index2\
    \ < 0) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int idx1 = planets.indexOf(planet1);\n\
    \        int idx2 = planets.indexOf(planet2);\n        if (idx1 == -1 || idx2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        if\
    \ (idx1 > idx2) {\n            int tmp = idx1;\n            idx1 = idx2;\n   \
    \         idx2 = tmp;\n        }\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (int i = idx1 + 1; i < idx2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n      \
    \  int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n    \
    \        return res;\n        }\n        if (i > j) {\n            int tmp = i;\n\
    \            i = j;\n            j = tmp;\n        }\n        for (int k = i +\
    \ 1; k < j; k++) {\n            res.add(planets.get(k));\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        int min = Math.min(i1, i2);\n   \
    \     int max = Math.max(i1, i2);\n        for (int i = min + 1; i < max; i++)\
    \ {\n            res.add(planets.get(i));\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        if\
    \ (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n      \
    \  int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n    \
    \        return res;\n        }\n        if (i > j) {\n            int tmp = i;\n\
    \            i = j;\n            j = tmp;\n        }\n        for (int k = i +\
    \ 1; k < j; k++) {\n            res.add(planets.get(k));\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        int index1 = planets.indexOf(planet1);\n        int\
    \ index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1)\
    \ {\n            return result;\n        }\n        if (index1 < index2) {\n \
    \           for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = index2 + 1; i < index1;\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (index1 < index2) {\n        \
    \    for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = index2 + 1; i < index1;\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n\
    \        }\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        if (i1 < i2)\
    \ {\n            for (int i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                res.add(planets.get(i));\n            }\n        }\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        int i = planets.indexOf(planet1);\n        int j = planets.indexOf(planet2);\n\
    \        if (i == -1 || j == -1) {\n            return result;\n        }\n  \
    \      if (i > j) {\n            int tmp = i;\n            i = j;\n          \
    \  j = tmp;\n        }\n        for (int k = i + 1; k < j; k++) {\n          \
    \  result.add(planets.get(k));\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        int min = Math.min(i1, i2);\n\
    \        int max = Math.max(i1, i2);\n        for (int i = min + 1; i < max; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n      \
    \  for (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i = planets.indexOf(planet1);\n\
    \        int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n\
    \            return new ArrayList<String>();\n        }\n        if (i > j) {\n\
    \            int tmp = i;\n            i = j;\n            j = tmp;\n        }\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        for (int k\
    \ = i + 1; k < j; k++) {\n            res.add(planets.get(k));\n        }\n  \
    \      return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n\
    \        }\n        int start = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n\
    \        if (start > end) {\n            int temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (int i = start + 1; i < end; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        if\
    \ (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                res.add(planets.get(i));\n     \
    \       }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                res.add(planets.get(i));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (index1 < index2) {\n        \
    \    for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = index2 + 1; i < index1;\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        int i1 = planets.indexOf(planet1);\n        int i2 =\
    \ planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return result;\n        }\n        if (i1 > i2) {\n            int tmp = i1;\n\
    \            i1 = i2;\n            i2 = tmp;\n        }\n        for (int i =\
    \ i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i < j) {\n            for (int\
    \ k = i + 1; k < j; k++) {\n                result.add(planets.get(k));\n    \
    \        }\n        } else {\n            for (int k = j + 1; k < i; k++) {\n\
    \                result.add(planets.get(k));\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int t = i1;\n            i1 = i2;\n            i2 = t;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976163
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 < p2) {\n            for\
    \ (int i = p1 + 1; i < p2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976163
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i < j) {\n            for (int\
    \ k = i+1; k < j; k++) {\n                result.add(planets.get(k));\n      \
    \      }\n        } else {\n            for (int k = j+1; k < i; k++) {\n    \
    \            result.add(planets.get(k));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            int\
    \ tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for\
    \ (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int index1 = planets.indexOf(planet1);\n            int index2\
    \ = planets.indexOf(planet2);\n            if (index1 < index2) {\n          \
    \      for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = index2\
    \ + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n \
    \               }\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n\
    \        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return res;\n        }\n   \
    \     if (i1 > i2) {\n            int tmp = i1;\n            i1 = i2;\n      \
    \      i2 = tmp;\n        }\n        for (int i = i1 + 1; i < i2; i++) {\n   \
    \         res.add(planets.get(i));\n        }\n        return res;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int tmp\
    \ = i;\n            i = j;\n            j = tmp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start < end) {\n \
    \           for (int i = start + 1; i < end; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = end + 1; i < start;\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        int start = Math.min(index1,\
    \ index2);\n        int end = Math.max(index1, index2);\n        for (int i =\
    \ start + 1; i < end; i++) {\n            result.add(planets.get(i));\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        int i1 = planets.indexOf(planet1);\n        int i2 =\
    \ planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return result;\n        }\n        if (i1 > i2) {\n            int temp = i1;\n\
    \            i1 = i2;\n            i2 = temp;\n        }\n        for (int i =\
    \ i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (p1 >\
    \ p2) {\n            int tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = p1 + 1; i < p2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) return\
    \ res;\n        if (i1 > i2) {\n            int tmp = i1;\n            i1 = i2;\n\
    \            i2 = tmp;\n        }\n        for (int i = i1 + 1; i < i2; i++) {\n\
    \            res.add(planets.get(i));\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int t\
    \ = i1;\n            i1 = i2;\n            i2 = t;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        // Write your code here\n    \
    \    return null;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.bf(String,\
    \ String)\" is null\n\tat Problem.main(tmphnv5br13.java:24)\n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        int start = planets.indexOf(planet1);\n        int end\
    \ = planets.indexOf(planet2);\n        if (start == -1 || end == -1) {\n     \
    \       return result;\n        }\n        if (start > end) {\n            int\
    \ temp = start;\n            start = end;\n            end = temp;\n        }\n\
    \        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n  \
    \          }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        ArrayList<String> res = new\
    \ ArrayList<String>();\n        if (p1 == -1 || p2 == -1) {\n            return\
    \ res;\n        }\n        if (p1 > p2) {\n            int tmp = p1;\n       \
    \     p1 = p2;\n            p2 = tmp;\n        }\n        for (int i = p1 + 1;\
    \ i < p2; i++) {\n            res.add(planets.get(i));\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int tmp\
    \ = i;\n            i = j;\n            j = tmp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n  \
    \          return result;\n        }\n        if (i > j) {\n            int temp\
    \ = i;\n            i = j;\n            j = temp;\n        }\n        for (int\
    \ k = i + 1; k < j; k++) {\n            result.add(planets.get(k));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i = planets.indexOf(planet1);\n\
    \        int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n\
    \            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (i < j) {\n            for (int k\
    \ = i + 1; k < j; k++) {\n                res.add(planets.get(k));\n         \
    \   }\n        } else {\n            for (int k = j + 1; k < i; k++) {\n     \
    \           res.add(planets.get(k));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (i1 < i2) {\n            for (int\
    \ i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n  \
    \          }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int pos1 = planets.indexOf(planet1);\n \
    \       int pos2 = planets.indexOf(planet2);\n        if (pos1 == -1 || pos2 ==\
    \ -1) {\n            return result;\n        }\n        if (pos1 > pos2) {\n \
    \           int temp = pos1;\n            pos1 = pos2;\n            pos2 = temp;\n\
    \        }\n        for (int i = pos1 + 1; i < pos2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if(i1 < 0 || i2 < 0) return\
    \ new ArrayList<String>();\n        if(i1 > i2) {\n            int tmp = i1;\n\
    \            i1 = i2;\n            i2 = tmp;\n        }\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        for(int i = i1 + 1; i < i2; i++) {\n\
    \            res.add(planets.get(i));\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new ArrayList<String>();\n        }\n        if\
    \ (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int index1 = planets.indexOf(planet1);\n            int index2\
    \ = planets.indexOf(planet2);\n            if (index1 < index2) {\n          \
    \      for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = index2\
    \ + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n \
    \               }\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> res = new ArrayList<>();\n\
    \        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return res;\n        if (i1 > i2) {\n     \
    \       int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n\
    \        for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<>();\n        }\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        if (i1 < i2) {\n            for (int i = i1\
    \ + 1; i < i2; i++) {\n                res.add(planets.get(i));\n            }\n\
    \        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n         \
    \       res.add(planets.get(i));\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (index1 == -1 || index2 == -1) {\n  \
    \          return result;\n        }\n        if (index1 > index2) {\n       \
    \     int temp = index1;\n            index1 = index2;\n            index2 = temp;\n\
    \        }\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        int min = Math.min(i1, i2);\n   \
    \     int max = Math.max(i1, i2);\n        for (int i = min + 1; i < max; i++)\
    \ {\n            res.add(planets.get(i));\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int min = Math.min(i1, i2);\n   \
    \     int max = Math.max(i1, i2);\n        for (int i = min + 1; i < max; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           int tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> res =\
    \ new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n     \
    \   int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return res;\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = planets.indexOf(planet1);\n    \
    \    int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) return\
    \ result;\n        if (i > j) {\n            int tmp = i;\n            i = j;\n\
    \            j = tmp;\n        }\n        for (int k = i + 1; k < j; k++) {\n\
    \            result.add(planets.get(k));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n   \
    \     int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return result;\n        }\n        if (i1 > i2) {\n            int\
    \ temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n      \
    \  for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        if (i1 < i2) {\n            for (int i\
    \ = i1 + 1; i < i2; i++) {\n                result.add(planets.get(i));\n    \
    \        }\n        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n\
    \                result.add(planets.get(i));\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int t = i1;\n            i1 = i2;\n            i2 = t;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976163
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.add(planets.get(i));\n            }\n        } else {\n            for\
    \ (int i = index2 + 1; i < index1; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        if (i1 >\
    \ i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        ArrayList<String> res = new ArrayList<>();\n\
    \        int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return res;\n        }\n   \
    \     if (p1 > p2) {\n            int tmp = p1;\n            p1 = p2;\n      \
    \      p2 = tmp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n   \
    \         res.add(planets.get(i));\n        }\n        return res;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int start = planets.indexOf(planet1);\n            int end =\
    \ planets.indexOf(planet2);\n            if (start > end) {\n                int\
    \ temp = start;\n                start = end;\n                end = temp;\n \
    \           }\n            for (int i = start + 1; i < end; i++) {\n         \
    \       result.add(planets.get(i));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n  \
    \          return result;\n        }\n        if (p1 > p2) {\n            int\
    \ tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for\
    \ (int i = p1 + 1; i < p2; i++) {\n            result.add(planets.get(i));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new ArrayList<String>();\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (int i = i1 + 1; i < i2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjl6u3lxp.java:40)\n"
  stdout: ''
  timestamp: 1659976164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
    \ bf(String planet1, String planet2) {\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int index1 = planets.indexOf(planet1);\n        int\
    \ index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1)\
    \ {\n            return result;\n        }\n        if (index1 > index2) {\n \
    \           int temp = index1;\n            index1 = index2;\n            index2\
    \ = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n  \
    \          result.add(planets.get(i));\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976165
