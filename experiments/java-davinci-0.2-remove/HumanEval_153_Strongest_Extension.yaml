completions:
- "        // Write your code here\n        return null;"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        int max = Integer.MIN_VALUE;\n        String\
  \ strongest = \"\";\n        for (String ext : extensions) {\n            int cap\
  \ = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length(); i++)\
  \ {\n                if (Character.isUpperCase(ext.charAt(i))) {\n             \
  \       cap++;\n                } else {\n                    sm++;\n          \
  \      }\n            }\n            int strength = cap - sm;\n            if (strength\
  \ > max) {\n                max = strength;\n                strongest = ext;\n\
  \            }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        String strongest = \"\";\n        double\
  \ strength = 0;\n        for (String ext : extensions) {\n            double cap\
  \ = ext.chars().filter(Character::isUpperCase).count();\n            double sm =\
  \ ext.chars().filter(Character::isLowerCase).count();\n            double curr_strength\
  \ = cap - sm;\n            if (curr_strength > strength) {\n                strength\
  \ = curr_strength;\n                strongest = ext;\n            }\n        }\n\
  \        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        String strongest = \"\";\n        double strength = 0;\n        for (String\
  \ ext : extensions) {\n            double cap = ext.chars().filter(Character::isUpperCase).count();\n\
  \            double sm = ext.chars().filter(Character::isLowerCase).count();\n \
  \           double new_strength = cap - sm;\n            if (new_strength > strength)\
  \ {\n                strength = new_strength;\n                strongest = ext;\n\
  \            }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return null;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        String strongest = \"\";\n        double strength = 0;\n        for (String\
  \ extension : extensions) {\n            double cap = extension.chars().filter(Character::isUpperCase).count();\n\
  \            double sm = extension.chars().filter(Character::isLowerCase).count();\n\
  \            double new_strength = cap - sm;\n            if (new_strength > strength)\
  \ {\n                strength = new_strength;\n                strongest = extension;\n\
  \            }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        // You will be given the name of a class (a\
  \ string) and a list of extensions.\n        // The extensions are to be used to\
  \ load additional classes to the class. The\n        // strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n        // letters in the\
  \ extension's name, and let SM be the number of lowercase letters \n        // in\
  \ the extension's name, the strength is given by the fraction CAP - SM. \n     \
  \   // You should find the strongest extension and return a string in this \n  \
  \      // format: ClassName.StrongestExtensionName.\n        // If there are two\
  \ or more extensions with the same strength, you should\n        // choose the one\
  \ that comes first in the list.\n        // For example, if you are given \"Slices\"\
  \ as the class and a list of the\n        // extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n        // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n        // (its strength is -1).\n        // Example:\n\
  \        // StrongestExtension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n\
  \        // returns 'Slices.SErviNGSliCes'\n        // StrongestExtension(\"Slices\"\
  , ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices'])\n        // returns 'Slices.Slices'\n\
  \        // StrongestExtension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed',\
  \ 'Slices', 'Slices'])\n        // returns 'Slices.Slices'\n        // StrongestExtension(\"\
  Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Slices', 'Slices'])\n\
  \        // returns 'Slices.Slices'\n        // StrongestExtension(\"Slices\", ['SErviNGSliCes',\
  \ 'Che"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        double max = -1;\n        String strongest = \"\";\n        for (String\
  \ extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
  \            for (int i = 0; i < extension.length(); i++) {\n                if\
  \ (Character.isUpperCase(extension.charAt(i))) {\n                    cap++;\n \
  \               } else {\n                    sm++;\n                }\n       \
  \     }\n            double strength = (double)cap - (double)sm;\n            if\
  \ (strength > max) {\n                max = strength;\n                strongest\
  \ = extension;\n            }\n        }\n        return class_name + \".\" + strongest;"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String strongest = \"\";\n        double strength = 0;\n        for (String\
  \ ext : extensions) {\n            double s = 0;\n            for (int i = 0; i\
  \ < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
  \ {\n                    s++;\n                } else {\n                    s--;\n\
  \                }\n            }\n            if (s > strength) {\n           \
  \     strength = s;\n                strongest = ext;\n            }\n        }\n\
  \        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- '        return "";'
- "        // Your code here\n        int max = 0;\n        String ans = \"\";\n \
  \       for (String s : extensions) {\n            int cap = 0;\n            int\
  \ sm = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if\
  \ (Character.isUpperCase(s.charAt(i))) {\n                    cap++;\n         \
  \       } else {\n                    sm++;\n                }\n            }\n\
  \            if (cap - sm > max) {\n                max = cap - sm;\n          \
  \      ans = s;\n            }\n        }\n        return class_name + \".\" + ans;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return null;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        String strongest_extension = \"\";\n        double strongest_strength =\
  \ 0;\n        for (String extension : extensions) {\n            double strength\
  \ = 0;\n            for (char c : extension.toCharArray()) {\n                if\
  \ (Character.isUpperCase(c)) {\n                    strength += 1;\n           \
  \     } else {\n                    strength -= 1;\n                }\n        \
  \    }\n            if (strength > strongest_strength) {\n                strongest_strength\
  \ = strength;\n                strongest_extension = extension;\n            }\n\
  \        }\n        return class_name + \".\" + strongest_extension;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int max = 0;\n        String max_ext = \"\";\n        for\
  \ (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
  \            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
  \ {\n                    cap++;\n                } else {\n                    sm++;\n\
  \                }\n            }\n            int strength = cap - sm;\n      \
  \      if (strength > max) {\n                max = strength;\n                max_ext\
  \ = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return null;"
- "        // Write your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        String strongest_extension = \"\";\n        double strongest_strength =\
  \ 0;\n        for (String extension : extensions) {\n            double strength\
  \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n           \
  \     if (Character.isUpperCase(extension.charAt(i))) {\n                    strength++;\n\
  \                } else {\n                    strength--;\n                }\n\
  \            }\n            if (strength > strongest_strength) {\n             \
  \   strongest_strength = strength;\n                strongest_extension = extension;\n\
  \            }\n        }\n        return class_name + \".\" + strongest_extension;"
- "        // Your code here\n        return \"\";"
- "        int max_strength = Integer.MIN_VALUE;\n        String strongest_extension\
  \ = \"\";\n        for (String ext : extensions) {\n            int strength = 0;\n\
  \            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
  \ {\n                    strength++;\n                } else {\n               \
  \     strength--;\n                }\n            }\n            if (strength >\
  \ max_strength) {\n                max_strength = strength;\n                strongest_extension\
  \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here.\n        return \"\";"
- "        // Your code here\n        String strongest = \"\";\n        int strength\
  \ = 0;\n        for (String extension : extensions) {\n            int cap = 0;\n\
  \            int sm = 0;\n            for (int i = 0; i < extension.length(); i++)\
  \ {\n                if (Character.isUpperCase(extension.charAt(i))) {\n       \
  \             cap++;\n                } else {\n                    sm++;\n    \
  \            }\n            }\n            if (cap - sm > strength) {\n        \
  \        strength = cap - sm;\n                strongest = extension;\n        \
  \    }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int cap = 0;\n        int sm = 0;\n        int strength =\
  \ 0;\n        String strongest = \"\";\n        for (String extension : extensions)\
  \ {\n            for (int i = 0; i < extension.length(); i++) {\n              \
  \  if (Character.isUpperCase(extension.charAt(i))) {\n                    cap++;\n\
  \                } else {\n                    sm++;\n                }\n      \
  \      }\n            if (cap - sm > strength) {\n                strength = cap\
  \ - sm;\n                strongest = extension;\n            }\n            cap\
  \ = 0;\n            sm = 0;\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        String strongest = \"\";\n        double strength = 0;\n \
  \       for (String ext : extensions) {\n            double cap = ext.chars().filter(Character::isUpperCase).count();\n\
  \            double sm = ext.chars().filter(Character::isLowerCase).count();\n \
  \           double curr_strength = cap - sm;\n            if (curr_strength > strength)\
  \ {\n                strength = curr_strength;\n                strongest = ext;\n\
  \            }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        int max = 0;\n        String max_ext = \"\"\
  ;\n        for (String ext : extensions) {\n            int cap = 0;\n         \
  \   int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n        \
  \        if (Character.isUpperCase(ext.charAt(i))) {\n                    cap++;\n\
  \                } else {\n                    sm++;\n                }\n      \
  \      }\n            if (cap - sm > max) {\n                max = cap - sm;\n \
  \               max_ext = ext;\n            }\n        }\n        return class_name\
  \ + \".\" + max_ext;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code goes here\n        return \"\";"
- "        // Your code here\n        int max = 0;\n        String max_ext = \"\"\
  ;\n        for (String ext : extensions) {\n            int cap = 0;\n         \
  \   int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n        \
  \        if (Character.isUpperCase(ext.charAt(i))) {\n                    cap++;\n\
  \                } else {\n                    sm++;\n                }\n      \
  \      }\n            if (cap - sm > max) {\n                max = cap - sm;\n \
  \               max_ext = ext;\n            }\n        }\n        return class_name\
  \ + \".\" + max_ext;"
- "        // Write your code here\n        String strongest = \"\";\n        double\
  \ strength = 0;\n        for (String ext : extensions) {\n            double cap\
  \ = ext.chars().filter(Character::isUpperCase).count();\n            double sm =\
  \ ext.chars().filter(Character::isLowerCase).count();\n            double curr_strength\
  \ = cap - sm;\n            if (curr_strength > strength) {\n                strength\
  \ = curr_strength;\n                strongest = ext;\n            }\n        }\n\
  \        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int max = 0;\n        String strongest = \"\";\n        for\
  \ (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
  \            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
  \ {\n                    cap++;\n                } else {\n                    sm++;\n\
  \                }\n            }\n            if (cap - sm > max) {\n         \
  \       max = cap - sm;\n                strongest = ext;\n            }\n     \
  \   }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        String strongest = \"\";\n        double strength\
  \ = 0;\n        for (String ext : extensions) {\n            double cap = ext.replaceAll(\"\
  [^A-Z]\", \"\").length();\n            double sm = ext.replaceAll(\"[^a-z]\", \"\
  \").length();\n            double str = cap - sm;\n            if (str > strength)\
  \ {\n                strength = str;\n                strongest = ext;\n       \
  \     }\n        }\n        return class_name + \".\" + strongest;"
- "        // Your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Your code here.\n        return \"\";"
language: java
name: HumanEval_153_Strongest_Extension
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    public static String StrongestExtension(String class_name, ArrayList<String>\
  \ extensions) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
