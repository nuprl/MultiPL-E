language: java
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f_pip51.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45etgsej.java:21)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to a binary string.\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplt4zflxy.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        return Integer.toBinaryString(N);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzswu8tbi.java:21)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary string\n        // Hint: You can use String.chars() to get a stream\
    \ of chars in a string\n        // Hint: You can use Stream.mapToInt(x -> x -\
    \ '0') to convert a stream of chars to a stream of ints\n        // Hint: You\
    \ can use Stream.sum() to sum a stream of ints\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn2csriz.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to binary string.\n        return Integer.toBinaryString(N);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrw6bbhj.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        int sum = 0;\n\
    \        String binary = Integer.toBinaryString(N);\n        for (int i = 0; i\
    \ < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv2n712iy.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(N)\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf207fl44.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(N) to convert N to binary\n\
    \        // Hint: Use String.chars() to convert a string to a stream of characters\n\
    \        // Hint: Use Stream.reduce(0, (a, b) -> a + b) to sum the stream of characters\n\
    \        return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38h4gict.java:24)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(int) to convert an integer\
    \ to binary string.\n        String binary = Integer.toBinaryString(N);\n    \
    \    int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n     \
    \       sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n    \
    \    return Integer.toString(sum);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwklyznak.java:27)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int)\n      \
    \  return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_62xfcv.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(N) to convert N to binary\n\
    \        // Hint: Use Integer.parseInt(String, 2) to convert binary to integer\n\
    \        // Hint: Use Integer.toString(N) to convert N to string\n        // Hint:\
    \ Use String.chars() to convert string to stream\n        // Hint: Use Stream.mapToInt(...)\
    \ to convert stream to int stream\n        // Hint: Use IntStream.sum() to sum\
    \ up int stream\n        return Integer.toString(Integer.toBinaryString(N).chars().mapToInt(Character::getNumericValue).sum());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4cqnhje.java:24: error: cannot find symbol\n        return Integer.toString(Integer.toBinaryString(N).chars().mapToInt(Character::getNumericValue).sum());\n\
    \                                                                 ^\n  symbol:\
    \   method mapToInt(Character:[...]Value)\n  location: interface IntStream\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You may use the Integer.toBinaryString(int) method.\n\
    \        return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71snsn_m.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6kcvd5_3.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 0;\n        while (N > 0) {\n   \
    \         sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzyg7ar2.java:26)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp502yr76y.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yc3qb6j.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to a binary string.\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplt4zflxy.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jbbuop1.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String s = Integer.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return\
    \ Integer.toString(sum);\n}\n    public static void main(String[] args) {\n  \
    \  assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps00zomd0.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You may use the built-in method Integer.toBinaryString(int)\n\
    \        return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4kqbohx.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to a binary string.\n        String binary = Integer.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n \
    \           sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd4ybuhk.java:27)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return String.valueOf(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprohpo2hw.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp502yr76y.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = (N % 2) + result;\n \
    \           N /= 2;\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelcidxe0.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary.\n        return Integer.toBinaryString(N);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbifrrcb.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            int digit = Character.getNumericValue(binary.charAt(i));\n\
    \            sum += digit;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkam3cyqw.java:26)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ogikwc9.java:28)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to a binary string.\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplt4zflxy.java:22)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can convert a decimal number to binary using\
    \ Integer.toBinaryString(int)\n        // Hint: You can convert a binary number\
    \ to decimal using Integer.parseInt(String, int)\n        // Hint: You can convert\
    \ a character to integer using Character.getNumericValue(char)\n        // Hint:\
    \ You can convert a string to an array of characters using String.toCharArray()\n\
    \        // Hint: You can convert a string to an array of integers using String.chars().map(c\
    \ -> c - '0').toArray()\n        // Hint: You can convert an array of integers\
    \ to an array of characters using Arrays.stream(int[]).mapToObj(i -> (char) i).toArray(Character[]::new)\n\
    \        // Hint: You can convert an array of characters to a string using String.valueOf(Character[])\n\
    \        // Hint: You can convert an array of integers to a string using Arrays.toString(int[])\n\
    \        // Hint: You can convert an array of integers to a string using String.join(\"\
    , \", int[])\n        // Hint: You can convert an array of integers to a string\
    \ using String.format(\"%s\", int[])\n        // Hint: You can convert an array\
    \ of integers to a string using String.format(\"%s\", Arrays.stream(int[]).mapToObj(String::valueOf).toArray(String[]::new))\n\
    \        // Hint: You can convert an array of integers to a string using String.format(\"\
    %s\", Arrays.stream(int[]).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    , \")))\n        // Hint: You can convert an array of integers to a string using\
    \ String.format(\"%s\", Arrays.stream(int[]).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    , \", \"[\", \"]\")))\n        // Hint: You can convert an array of integers to\
    \ a string using String.format(\"%s\", Arrays.stream(int[]).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    , \", \"{\", \"}\")))\n        // Hint: You can convert an array of integers to\
    \ a string using\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmppwy54vax.java:33: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary.\n        // Hint: You can use Integer.bitCount(N) to count the\
    \ number of 1s in N.\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string.\n        // Hint: You can use Integer.parseInt(N) to convert N\
    \ to integer.\n        // Hint: You can use Integer.parseInt(N, 2) to convert\
    \ N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 10) to convert N to integer with base 10.\n        // Hint: You can use Integer.parseInt(N,\
    \ 16) to convert N to integer with base 16.\n        // Hint: You can use Integer.parseInt(N,\
    \ 8) to convert N to integer with base 8.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint: You can use Integer.parseInt(N,\
    \ 2) to convert N to integer with base 2.\n        // Hint:\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpba5zuerj.java:38: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(N) to convert N to binary\n\
    \        // Hint: Use String.chars() to convert a string to a stream of characters\n\
    \        // Hint: Use Stream.mapToInt() to convert a stream of characters to a\
    \ stream of integers\n        // Hint: Use Stream.sum() to sum up a stream of\
    \ integers\n        return Integer.toBinaryString(N);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj84y1ogy.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string\n        // Hint: You can use Integer.parseInt(string) to convert\
    \ string to integer\n        // Hint: You can use Integer.toString(N, 2) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string\n        // Hint: You can use Integer.parseInt(string) to convert\
    \ string to integer\n        // Hint: You can use Integer.toString(N, 2) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string\n        // Hint: You can use Integer.parseInt(string) to convert\
    \ string to integer\n        // Hint: You can use Integer.toString(N, 2) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string\n        // Hint: You can use Integer.parseInt(string) to convert\
    \ string to integer\n        // Hint: You can use Integer.toString(N, 2) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N to string\n        // Hint: You can use Integer.parseInt(string) to convert\
    \ string to integer\n        // Hint: You can use Integer.toString(N, 2) to convert\
    \ N to binary\n        // Hint: You can use Integer.parseInt(binary, 2) to convert\
    \ binary to integer\n        // Hint: You can use Integer.toString(N) to convert\
    \ N\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3ezbjk1c.java:41: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(int)\n        return\
    \ Integer.toBinaryString(N);\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6u24k03.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use Integer.toBinaryString(N) to convert N to binary\n\
    \        // Hint: Use String.chars() to convert a string to a stream of characters\n\
    \        // Hint: Use Stream.mapToInt() to convert a stream of characters to a\
    \ stream of integers\n        // Hint: Use Stream.sum() to sum up a stream of\
    \ integers\n        return Integer.toBinaryString(N);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj84y1ogy.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary.\n        // Hint: You can use String.chars() to get a stream of\
    \ characters.\n        // Hint: You can use Stream.mapToInt() to convert a stream\
    \ of characters to a stream of integers.\n        // Hint: You can use Stream.sum()\
    \ to sum a stream of integers.\n        return Integer.toBinaryString(N);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppefb0hyh.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp502yr76y.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ an integer to binary string.\n        return Integer.toBinaryString(N);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hhkpfrh.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yc3qb6j.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pg1316o.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary.\n        // Hint: You can use Integer.parseInt(String, radix) to\
    \ convert a string to an integer.\n        // Hint: You can use Character.getNumericValue(char)\
    \ to convert a character to an integer.\n        // Hint: You can use Character.forDigit(int,\
    \ radix) to convert an integer to a character.\n        // Hint: You can use Character.isDigit(char)\
    \ to check if a character is a digit.\n        // Hint: You can use Character.isLetter(char)\
    \ to check if a character is a letter.\n        // Hint: You can use Character.isLetterOrDigit(char)\
    \ to check if a character is a letter or a digit.\n        // Hint: You can use\
    \ Character.isLowerCase(char) to check if a character is a lowercase letter.\n\
    \        // Hint: You can use Character.isUpperCase(char) to check if a character\
    \ is an uppercase letter.\n        // Hint: You can use Character.toLowerCase(char)\
    \ to convert a character to a lowercase letter.\n        // Hint: You can use\
    \ Character.toUpperCase(char) to convert a character to an uppercase letter.\n\
    \        // Hint: You can use Character.toString(char) to convert a character\
    \ to a string.\n        // Hint: You can use String.valueOf(char) to convert a\
    \ character to a string.\n        // Hint: You can use String.valueOf(int) to\
    \ convert an integer to a string.\n        // Hint: You can use String.valueOf(Object)\
    \ to convert an object to a string.\n        // Hint: You can use String.valueOf(char[])\
    \ to convert a character array to a string.\n        // Hint: You can use String.valueOf(char[],\
    \ offset, count) to convert a character array to a string.\n        // Hint: You\
    \ can use String.valueOf(boolean) to convert a boolean to a string.\n        //\
    \ Hint: You can use String.valueOf(char) to convert a character to a string.\n\
    \        //\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp0isrg807.java:38: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0s9c21_h.java:23)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(int) to convert\
    \ an integer to a binary string.\n        // Hint: You can use String.chars()\
    \ to convert a string to a stream of characters.\n        // Hint: You can use\
    \ Stream.mapToInt(ToIntFunction<? super T> mapper) to convert a stream of characters\
    \ to a stream of integers.\n        // Hint: You can use Stream.sum() to sum up\
    \ a stream of integers.\n        return Integer.toBinaryString(N).chars().mapToInt(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpab0tmkv5.java:22: error: cannot find symbol\n        return Integer.toBinaryString(N).chars().mapToInt(x\
    \ -> x - '0').sum() + \"\";\n                                                ^\n\
    \  symbol:   method mapToInt((x)->x - '0')\n  location: interface IntStream\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hkgmjmq.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You may use toBinaryString(int)\n        return\
    \ Integer.toBinaryString(N);\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfib70xsm.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3s1skk_.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binaryString\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binaryString.length(); i++) {\n            sum += Integer.parseInt(binaryString.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwo4xuep6.java:28)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplotx98oo.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9hrf1bp.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here.\n        String binary = Integer.toBinaryString(N);\n        int\
    \ sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum\
    \ += Integer.parseInt(String.valueOf(binary.charAt(i)));\n        }\n        return\
    \ String.valueOf(sum);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp66e1egp6.java:26)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: You can use Integer.toBinaryString(N) to convert\
    \ N to binary.\n        return Integer.toBinaryString(N);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbifrrcb.java:22)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm4zum3p.java:25)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnly3g12.java:20)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        // Write your\
    \ code here\n        // Hint: Use the Integer.toBinaryString() method.\n     \
    \   return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuyohsvoe.java:22)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // Variables:\n    // @N integer\n  \
    \  // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of\
    \ binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 0;\n        while (N > 0) {\n   \
    \         sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzyg7ar2.java:26)\n"
  stdout: ''
  timestamp: 1660011768
