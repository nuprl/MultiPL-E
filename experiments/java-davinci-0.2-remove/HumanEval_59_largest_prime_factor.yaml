completions:
- "        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n\
  \ % i == 0) {\n                max = i;\n                n /= i;\n             \
  \   i--;\n            }\n        }\n        return max;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i * i <= n; i++) {\n        \
  \    if (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n                if (isPrime(n / i)) {\n             \
  \       largest = n / i;\n                }\n            }\n        }\n        return\
  \ largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i * i <= n; i++) {\n        \
  \    if (n % i == 0) {\n                largest = i;\n                while (n %\
  \ i == 0) {\n                    n /= i;\n                }\n            }\n   \
  \     }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
  \ largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- '        return 0;'
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        int i = 2;\n        while (i <= n) {\n      \
  \      if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
  \            } else {\n                i++;\n            }\n        }\n        return\
  \ largest;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i * i <= n; i++) {\n\
  \            if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
  \          while (n % i == 0) {\n                    n /= i;\n                }\n\
  \            }\n        }\n        if (n > 1) {\n            largestPrimeFactor\
  \ = n;\n        }\n        return largestPrimeFactor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (n % i != 0) {\n            i++;\n        }\n\
  \        if (n == i) {\n            return n;\n        }\n        return largestPrimeFactor(n\
  \ / i);"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        int i = 2;\n        while (i * i <= n) {\n  \
  \          if (n % i == 0) {\n                largest = i;\n                n /=\
  \ i;\n            } else {\n                i++;\n            }\n        }\n   \
  \     return Math.max(largest, n);"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 2;\n        while (n % largestPrimeFactor == 0)\
  \ {\n            n /= largestPrimeFactor;\n        }\n        int factor = 3;\n\
  \        while (n > 1) {\n            while (n % factor == 0) {\n              \
  \  n /= factor;\n                largestPrimeFactor = factor;\n            }\n \
  \           factor += 2;\n        }\n        return largestPrimeFactor;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        // TODO: Implement this method.\n        return 0;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i * i <=\
  \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n  \
  \      }\n        return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
  \        }\n        if (n == factor) {\n            return n;\n        }\n     \
  \   return largestPrimeFactor(n / factor);"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
  \        }\n        if (n == factor) {\n            return n;\n        }\n     \
  \   return largestPrimeFactor(n / factor);"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
  \         return largestPrimeFactor(n / i);\n            }\n        }\n        return\
  \ n;"
- "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor\
  \ = i;\n            }\n        }\n        return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        int i = 2;\n        while (i * i <= n) {\n  \
  \          if (n % i == 0) {\n                largest = i;\n                n /=\
  \ i;\n            } else {\n                i++;\n            }\n        }\n   \
  \     return Math.max(largest, n);"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n)\
  \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n  \
  \              n /= i;\n            } else {\n                i++;\n           \
  \ }\n        }\n        return largestPrimeFactor;"
- "        int largestPrimeFactor = 1;\n        int i = 2;\n        while (i * i <=\
  \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n  \
  \      }\n        return largestPrimeFactor;"
- "        int largest = -1;\n        for (int i = 2; i <= n; i++) {\n           \
  \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n   \
  \             i--;\n            }\n        }\n        return largest;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
  \        }\n        int nextFactor = factor + 1;\n        while (n % nextFactor\
  \ != 0) {\n            nextFactor++;\n        }\n        return nextFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                if (isPrime(i)) {\n             \
  \       largestPrimeFactor = i;\n                }\n            }\n        }\n \
  \       return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        int i = 2;\n        while (i * i <=\
  \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n  \
  \      }\n        return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ n;"
- "        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
  \         return largestPrimeFactor(n / i);\n            }\n        }\n        return\
  \ n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (n % i != 0) {\n            i++;\n        }\n\
  \        if (n == i) {\n            return n;\n        }\n        return largestPrimeFactor(n\
  \ / i);"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
  \        }\n        if (factor == n) {\n            return n;\n        }\n     \
  \   return largestPrimeFactor(n / factor);"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i * i <= n; i++) {\n\
  \            while (n % i == 0) {\n                largestPrimeFactor = i;\n   \
  \             n /= i;\n            }\n        }\n        if (n > 1) {\n        \
  \    largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;"
- "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n)\
  \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n  \
  \              n /= i;\n            } else {\n                i++;\n           \
  \ }\n        }\n        return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int p = 2;\n        while (n % p != 0) {\n            p++;\n        }\n\
  \        return p;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        // TODO: Implement this function.\n        return 0;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
  \         return largestPrimeFactor(n / i);\n            }\n        }\n        return\
  \ n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        // TODO: Implement me!\n        return 0;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
  \         return largestPrimeFactor(n / i);\n            }\n        }\n        return\
  \ n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n \
  \               n /= i;\n            } else {\n                i++;\n          \
  \  }\n        }\n        return i;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         while (n % i == 0) {\n                    n /= i;\n                }\n\
  \            }\n        }\n        return largestPrimeFactor;"
- "        int p = 2;\n        while (n % p != 0) {\n            p++;\n        }\n\
  \        return p;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = -1;\n        for (int i = 2; i <= n; i++) {\n\
  \            if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
  \          n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n)\
  \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n  \
  \              n /= i;\n            } else {\n                i++;\n           \
  \ }\n        }\n        return largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                if (isPrime(i)) {\n             \
  \       largestPrimeFactor = i;\n                }\n            }\n        }\n \
  \       return largestPrimeFactor;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (n % i != 0) {\n            i++;\n        }\n\
  \        return i;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n \
  \               n /= i;\n            } else {\n                i++;\n          \
  \  }\n        }\n        return i;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                while (n % i ==\
  \ 0) {\n                    n /= i;\n                }\n            }\n        }\n\
  \        return largest;"
- "        int factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
  \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
  \            }\n        }\n        return factor;"
- "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int ans = 0;\n        for (int i = 2; i * i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                ans = i;\n                while (n % i == 0) {\n\
  \                    n /= i;\n                }\n            }\n        }\n    \
  \    if (n > 1) {\n            ans = n;\n        }\n        return ans;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int largestPrimeFactor = 0;\n        int i = 2;\n        while (i <= n)\
  \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n  \
  \              n /= i;\n            } else {\n                i++;\n           \
  \ }\n        }\n        return largestPrimeFactor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
  \ = i;\n                }\n            }\n        }\n        return largest;"
- "        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++) {\n \
  \           if (n % i == 0) {\n                largestPrimeFactor = i;\n       \
  \         n /= i;\n                i--;\n            }\n        }\n        return\
  \ largestPrimeFactor;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        // TODO: Implement me!\n        return 0;"
- "        int largestPrimeFactor = 1;\n        int i = 2;\n        while (i * i <=\
  \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n  \
  \      }\n        return largestPrimeFactor;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if\
  \ (n % i == 0) {\n                largest = i;\n                n /= i;\n      \
  \          i--;\n            }\n        }\n        return largest;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
- "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
  \                n /= i;\n            } else {\n                i++;\n         \
  \   }\n        }\n        return n;"
language: java
name: HumanEval_59_largest_prime_factor
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    public static int largestPrimeFactor(int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
  \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
  \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
  \ == (29));\n    }\n\n}\n"
