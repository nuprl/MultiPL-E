name: HumanEval_148_bf
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // There are eight planets in our solar system: the closerst\
  \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a tuple\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty tuple if planet1 or planet2\n   \
  \ // are not correct planet names. \n    // Examples\n    public static ArrayList<String>\
  \ bf(String planet1, String planet2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
  ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
  , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
  ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\",\
  \ (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n\
  \    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\"\
  )))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
