name: HumanEval_142_sum_squares
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"\n    // This function will take a list of integers. For\
  \ all entries in the list, the function shall square the integer entry if its index\
  \ is a \n    // multiple of 3 and will cube the integer entry if its index is a\
  \ multiple of 4 and not a multiple of 3. The function will not \n    // change the\
  \ entries in the list whose indexes are not a multiple of 3 or 4. The function shall\
  \ then return the sum of all entries. \n    // Examples:\n    public static long\
  \ sumSquares(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n   \
  \ assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l))))\
  \ == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
  \    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
  \ (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n   \
  \ assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l,\
  \ (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n\
  \    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n\
  \    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l,\
  \ (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l,\
  \ (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l,\
  \ (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new\
  \ ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l,\
  \ (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l,\
  \ (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l,\
  \ (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l,\
  \ (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l))))\
  \ == (-1448l));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // \"\n        // This function will take a list\
    \ of integers. For all entries in the list, the function shall square the integer\
    \ entry if its index is a \n        // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n        // change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \        // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1 + 4 +\
    \ 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 = 1225\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728\
    \ + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 = 17096\n        // \"\n        //\
    \ \"\n        // This function will take a list of integers. For all entries in\
    \ the list, the function shall square the integer entry if its index is a \n \
    \       // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343\
    \ + 512 = 1225\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728\
    \ + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 = 17096", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n    \
    \        } else {\n                sum += lst.get(i);\n            }\n       \
    \ }\n        return sum;", "        // \"\n        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n        \
    \        sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            long entry = lst.get(i);\n            if (i % 3 == 0) {\n\
    \                entry = entry * entry;\n            } else if (i % 4 == 0) {\n\
    \                entry = entry * entry * entry;\n            }\n            sum\
    \ += entry;\n        }\n        return sum;", "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n    \
    \            sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // \"\n        // This function will take a list\
    \ of integers. For all entries in the list, the function shall square the integer\
    \ entry if its index is a \n        // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n        // change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \        // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1^2 + 2^2\
    \ + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 = 385\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 + 11^2 + 12^3 +\
    \ 13^2 + 14^2 + 15^3 + 16^2 + 17^2 + 18^3 + 19^2 + 20^2 = 985\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\
    \ = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 + 11^2 + 12^3 +\
    \ 13^2 + 14^2 + 15^3 + 16^2 + 17^2 + 18^3 + 19^2 + 20^2 + 21^2 + 22^2 + 23^3 +\
    \ 24^2 + 25^2 + 26^3 + 27^2 + 28^2 + 29^3 + 30^2 = 1575\n        // \"\n     \
    \   // Your code goes here\n        long sum = 0;", "        // \"\n        //\
    \ The function shall return 0 if the list is empty.\n        if (lst.size() ==\
    \ 0) {\n            return 0;\n        }\n        // \"\n        // The function\
    \ shall return the sum of the squares of all entries in the list if the list contains\
    \ only one entry.\n        if (lst.size() == 1) {\n            return lst.get(0)\
    \ * lst.get(0);\n        }\n        // \"\n        // The function shall return\
    \ the sum of the squares of all entries in the list if the list contains only\
    \ two entries.\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ * lst.get(0) + lst.get(1) * lst.get(1);\n        }\n        // \"\n        //\
    \ The function shall return the sum of the squares of all entries in the list\
    \ if the list contains only three entries.\n        if (lst.size() == 3) {\n \
    \           return lst.get(0) * lst.get(0) + lst.get(1) * lst.get(1) + lst.get(2)\
    \ * lst.get(2);\n        }\n        // \"\n        // The function shall return\
    \ the sum of the squares of all entries in the list if the list contains only\
    \ four entries.\n        if (lst.size() == 4) {\n            return lst.get(0)\
    \ * lst.get(0) + lst.get(1) * lst.get(1) + lst.get(2) * lst.get(2) + lst.get(3)\
    \ * lst.get(3);\n        }\n        // \"\n        // The function shall return\
    \ the sum of the squares of all entries in the list if the list contains only\
    \ five entries.\n        if (lst.size() == 5) {\n            return lst.get(0)\
    \ * lst.get(0) + lst.get(1) * lst.get(1) + lst.get(2) * lst.get(2) + lst.get(3)\
    \ * lst.get(3) + lst.get(4) * lst.", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n             \
    \   sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n  \
    \              sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        // \"\n        // This function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n        // multiple of 3 and will cube the integer entry if\
    \ its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n        // change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n       \
    \ // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1^2 + 2^2 + 3^3\
    \ + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 = 385\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 + 11^2 + 12^3 +\
    \ 13^2 + 14^2 + 15^3 + 16^2 + 17^2 + 18^3 + 19^2 + 20^2 = 1285\n        // \"\n\
    \        // \"\n        // This function will take a list of integers. For all\
    \ entries in the list, the function shall square the integer entry if its index\
    \ is a \n        // multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n       \
    \ // change the entries in the list whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \n        // Examples:\n\
    \        // sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 +\
    \ 6^3 + 7^2 + 8^2 + 9^3 + 10^2 = 385\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12",
  "        // \"\n        // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \        // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2\
    \ + 8^2 + 9^3 + 10^2 = 385\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 + 11^2 + 12^3 +\
    \ 13^2 + 14^2 + 15^3 + 16^2 + 17^2 + 18^3 + 19^2 + 20^2 = 1185\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\
    \ = 1^2 + 2^2 + 3^3 + 4^2 + 5^2 + 6^3 + 7^2 + 8^2 + 9^3 + 10^2 + 11^2 + 12^3 +\
    \ 13^2 + 14^2 + 15^3 + 16^2 + 17^2 + 18^3 + 19^2 + 20^2 + 21^2 + 22^2 + 23^3 +\
    \ 24^2 + 25^2 + 26^3 + 27^2 + 28^2 + 29^3 + 30^2 = 2185\n        // \"\n     \
    \   // Your code here\n        long sum = 0;\n", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n \
    \               sum += lst.get(i) * lst.get(i);\n            } else if (i % 4\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n    \
    \        } else {\n                sum += lst.get(i);\n            }\n       \
    \ }\n        return sum;", "        // \"\n        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n        \
    \        sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            long entry = lst.get(i);\n            if (i % 3 == 0) {\n\
    \                entry = entry * entry;\n            } else if (i % 4 == 0) {\n\
    \                entry = entry * entry * entry;\n            }\n            sum\
    \ += entry;\n        }\n        return sum;", "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n    \
    \            sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long num = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                num = num * num;\n           \
    \ } else if (i % 4 == 0) {\n                num = num * num * num;\n         \
    \   }\n            sum += num;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // \"\n        return lst.stream().mapToLong(i\
    \ -> i * i).sum();", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 = 1225\n\
    \        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 + 729 + 1000\
    \ + 1331 + 1728 + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 = 20449\n        //\
    \ sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) = 1 + 4 + 9 + 8 + 27 + 64 +\
    \ 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728 + 2197 + 2744 + 3375 + 4096\
    \ + 4913 + 5832 + 6859 + 8000 + 9261 + 10648 + 12167 + 13824 + 15625 + 17576 +\
    \ 19683 + 21952 + 24389 + 27000 + 29791 + 32768 + 35937 + 39304 + 42875 + 46656\
    \ + 50653 + 54872 + 59319 + 64000 + 68921 + 74088 + 79507 + 85184 + 91125 + 97336\
    \ = 8980150\n        // sumSquares([1, 2", "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n        \
    \        sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        // \"\n        // This function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n        // multiple of 3 and will cube the integer entry if\
    \ its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n        // change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n       \
    \ // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10]) -> 1 + 2 + 3^2 +\
    \ 4^3 + 5 + 6^2 + 7 + 8^3 + 9^2 + 10 = 441\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ -> 1 + 2 + 3^2 + 4^3 + 5 + 6^2 + 7 + 8^3 + 9^2 + 10 + 11^2 + 12^3 + 13^2 + 14\
    \ + 15^3 + 16^2 + 17 + 18^3 + 19^2 + 20 = 1381\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\
    \ -> 1 + 2 + 3^2 + 4^3 + 5 + 6^2 + 7 + 8^3 + 9^2 + 10 + 11^2 + 12^3 + 13^2 + 14\
    \ + 15^3 + 16^2 + 17 + 18^3 + 19^2 + 20 + 21^2 + 22^3 + 23^2 + 24 + 25^3 + 26^2\
    \ + 27 + 28^3 + 29^2 + 30 = 2161\n        // \"\n        // Your code goes here\n\
    \        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n     \
    \       if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(", "  \
    \      // \"\n        // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \        // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 64 + 125\
    \ + 216 + 343 + 512 = 1225\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 64 + 125\
    \ + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728 + 2197 + 2744 + 3375 + 4096 + 4913\
    \ + 5832 = 16900\n        // \"\n        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // The\
    \ function shall take a list of integers and return the sum of the squares of\
    \ all entries in the list.\n        // \"\n        return lst.stream().mapToLong(x\
    \ -> x * x).sum();", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            long num = lst.get(i);\n            if (i % 3 == 0) {\n\
    \                num = num * num;\n            } else if (i % 4 == 0) {\n    \
    \            num = num * num * num;\n            }\n            sum += num;\n\
    \        }\n        return sum;", "        // \"\n        // This function will\
    \ take a list of integers. For all entries in the list, the function shall square\
    \ the integer entry if its index is a \n        // multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n        // change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 = 2850\n  \
    \      // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 +\
    \ 1728 + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 + 6859 + 8000 = 2850\n      \
    \  // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\
    \ 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\
    \ 95, 96, 97, 98, 99, 100]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000\
    \ + 1331 + 1728 + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 + 6859 + 8000 +", " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n  \
    \          } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // sumSquares([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729\
    \ + 1000 = 3025\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 +\
    \ 729 + 1000 + 1331 + 1728 + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 + 6859 +\
    \ 8000 = 3025\n        // \"\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        // \"\n        // Your code here\n        // \"\n        return 0;", " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n  \
    \          } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10])\
    \ -> 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 = 1225\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ -> 1 + 4 + 9 + 8 + 27 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728\
    \ + 2197 + 2744 + 3375 + 4096 + 4913 + 5832 + 6859 = 14198\n        // \"\n  \
    \      long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // Your\
    \ code here\n        // \"\n        return 0;", "        long sum = 0;\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n  \
    \              sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10])\
    \ -> 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 = 385\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ -> 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121 + 144 + 169 + 196 + 225\
    \ + 256 + 289 + 324 + 361 + 400 = 3136\n        // \"\n        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n    \
    \        } else {\n                sum += lst.get(i);\n            }\n       \
    \ }\n        return sum;", "        // \"\n        return lst.stream().mapToLong(x\
    \ -> x * x).sum();", "        // \"\n        // This function will take a list\
    \ of integers. For all entries in the list, the function shall square the integer\
    \ entry if its index is a \n        // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n        // change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \        // Examples:\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 = 1067\n        // sumSquares([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) = 1 + 4\
    \ + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 + 11 + 12 + 13 + 14 + 15 + 16 + 17\
    \ + 18 + 19 + 20 = 1251\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 + 11 + 12 + 13 + 14 +\
    \ 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30\
    \ = 1501\n        // \"\n        // \"\n        // This function will take a list\
    \ of integers. For all entries in the list, the function shall square the integer\
    \ entry if its index is a \n        // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n        // change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \        // Examples:\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9,", " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n  \
    \          } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", '        return lst.stream().mapToLong(x
    -> x * x).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long num = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                num = num * num;\n           \
    \ } else if (i % 4 == 0) {\n                num = num * num * num;\n         \
    \   }\n            sum += num;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long val = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                val = val * val;\n           \
    \ } else if (i % 4 == 0) {\n                val = val * val * val;\n         \
    \   }\n            sum += val;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 = 1067\n \
    \       // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 + 11 + 12\
    \ + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 1215\n        // sumSquares([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100\
    \ + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 +\
    \ 26 + 27 + 28 + 29 + 30 = 1395\n        // \"\n        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9,", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 = 1067\n \
    \       // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 + 11 + 12\
    \ + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 1167\n        // \"\n        // \"\
    \n        // This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n     \
    \   // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 16 + 125\
    \ + 64 + 729 + 100 = 1067\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64\
    \ + 729 + 100 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 1167\n     \
    \   // \"\n        // \"\n        // This function will", "        long sum =\
    \ 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if\
    \ (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else\
    \ if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        // \"\n        // Your code here\n        // \"\n        return 0;", " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n  \
    \          } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else\
    \ if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long val = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                val = val * val;\n           \
    \ } else if (i % 4 == 0) {\n                val = val * val * val;\n         \
    \   }\n            sum += val;\n        }\n        return sum;", "        // \"\
    \n        // This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n     \
    \   // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 1 + 2 + 3^2 + 4^3 + 5 + 6^2 +\
    \ 7 + 8^3 + 9^2 + 10 = 291\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) = 1 + 2 + 3^2 + 4^3 + 5 + 6^2 +\
    \ 7 + 8^3 + 9^2 + 10 + 11^2 + 12^3 + 13^2 + 14 + 15^3 + 16^4 + 17^2 + 18^3 + 19^2\
    \ + 20 = 1471\n        // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) = 1 + 2\
    \ + 3^2 + 4^3 + 5 + 6^2 + 7 + 8^3 + 9^2 + 10 + 11^2 + 12^3 + 13^2 + 14 + 15^3\
    \ + 16^4 + 17^2 + 18^3 + 19^2 + 20 + 21^2 + 22^3 + 23^2 + 24 + 25^3 + 26^4 + 27^2\
    \ + 28^3 + 29^2 + 30 = 2261\n        // \"\n        // Your code here\n      \
    \  long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n           \
    \ if (i % 3 == 0) {\n                sum += lst.get(i) * l", "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            long n = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                n = n * n;\n            } else\
    \ if (i % 4 == 0) {\n                n = n * n * n;\n            }\n         \
    \   sum += n;\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n  \
    \              sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().mapToLong(x -> x).sum();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            long val = lst.get(i);\n            if (i % 3 == 0) {\n\
    \                val = val * val;\n            } else if (i % 4 == 0) {\n    \
    \            val = val * val * val;\n            }\n            sum += val;\n\
    \        }\n        return sum;", "        // \"\n        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n \
    \               sum += lst.get(i) * lst.get(i);\n            } else if (i % 4\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n    \
    \        } else {\n                sum += lst.get(i);\n            }\n       \
    \ }\n        return sum;", "        long sum = 0;\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i)\
    \ * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n              \
    \  sum += lst.get(i);\n            }\n        }\n        return sum;", "     \
    \   long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n          \
    \  if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n      \
    \      } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long entry = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                entry = entry * entry;\n     \
    \       } else if (i % 4 == 0) {\n                entry = entry * entry * entry;\n\
    \            }\n            sum += entry;\n        }\n        return sum;", " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n  \
    \          } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // \"\n        // This function will take a list\
    \ of integers. For all entries in the list, the function shall square the integer\
    \ entry if its index is a \n        // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n        // change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \        // Examples:\n        // sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1 + 4 +\
    \ 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 = 2850\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728 + 2197 +\
    \ 2744 + 3375 + 4096 + 4913 + 5832 + 6859 + 8000 = 2850\n        // \"\n     \
    \   // \"\n        // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \        // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n        // change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n        // Examples:\n        //\
    \ sumSquares([1,2,3,4,5,6,7,8,9,10]) = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512\
    \ + 729 + 1000 = 2850\n        // sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ = 1 + 4 + 9 + 64 + 125 + 216 + 343 + 512 + 729 + 1000 + 1331 + 1728 + 2197 +\
    \ 2744 + 3375 + 4096 + 4913 + 5832 + 6859 + 8000 =", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n\
    \                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4\
    \ == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n    \
    \        } else {\n                sum += lst.get(i);\n            }\n       \
    \ }\n        return sum;", "        long sum = 0;\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i)\
    \ * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n              \
    \  sum += lst.get(i);\n            }\n        }\n        return sum;", "     \
    \   long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n          \
    \  if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n      \
    \      } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        // \"\n        // This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n        // multiple of 3\
    \ and will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \n        // change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n        // Examples:\n        // sumSquares([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 = 1030\n \
    \       // sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]) = 1 + 4 + 9 + 8 + 27 + 16 + 125 + 64 + 729 + 100 + 11 + 12\
    \ + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 1095\n        // \"\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            long val = lst.get(i);\n\
    \            if (i % 3 == 0) {\n                val = val * val;\n           \
    \ } else if (i % 4 == 0) {\n                val = val * val * val;\n         \
    \   }\n            sum += val;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n\
    \            } else {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n   \
    \         } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i)\
    \ * lst.get(i));\n            } else if (i % 4 == 0) {\n                lst.set(i,\
    \ lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum +=\
    \ lst.get(i);\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n  \
    \              sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n\
    \            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i)\
    \ * lst.get(i);\n            } else {\n                sum += lst.get(i);\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n   \
    \             sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n       \
    \     } else {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += Math.pow(lst.get(i),\
    \ 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(lst.get(i),\
    \ 3);\n            } else {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum\
    \ += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n        \
    \        sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n\
    \                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;"]
stop_tokens:
- "\n    }\n"
