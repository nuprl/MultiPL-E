language: java
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpyl1hkk7z.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // Sort the array in descending order.\n        Collections.sort(arr,\
    \ Collections.reverseOrder());\n        // Return the first k elements.\n    \
    \    return new ArrayList<Integer>(arr.subList(0, k));\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6ykl26ta.java:23: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // 1. Sort the array\n        // 2. Return the last k\
    \ elements\n        Collections.sort(arr);\n        return new ArrayList<Integer>(arr.subList(arr.size()\
    \ - k, arr.size()));\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpxdouoswr.java:23: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        if (k == 0) {\n            return new ArrayList<Integer>();\n\
    \        }\n        if (k == arr.size()) {\n            return arr;\n        }\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (!pq.isEmpty()) {\n\
    \            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgmrc126d.java:41: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        Collections.reverse(result);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpmoqaskci.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        Collections.reverse(result);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpoycmz5g3.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        if (arr.size() == 2) {\n            result.add(Math.max(arr.get(0), arr.get(1)));\n\
    \            result.add(Math.min(arr.get(0), arr.get(1)));\n            return\
    \ result;\n        }\n        if (k == 0) return result;\n        if (k == 1)\
    \ {\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i <\
    \ arr.size(); i++) {\n                if (arr.get(i) > max) max = arr.get(i);\n\
    \            }\n            result.add(max);\n            return result;\n   \
    \     }\n        if (k == arr.size()) {\n            result.addAll(arr);\n   \
    \         Collections.sort(result);\n            return result;\n        }\n \
    \       ArrayList<Integer> left = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ right = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (i < arr.size() / 2) left.add(arr.get(i));\n            else\
    \ right.add(arr.get(i));\n        }\n        ArrayList<Integer> leftMax = maximum(left,\
    \ k);\n        ArrayList<Integer> rightMax = maximum(right, k);\n        ArrayList<Integer>\
    \ max = new ArrayList<Integer>();\n        max.addAll(leftMax);\n        max.addAll(rightMax);\n\
    \        Collections.sort(max);\n        result.addAll(max.subList(max.size()\
    \ - k, max.size()));\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv_y0rkg.java:58: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n          \
    \      pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (pq.size() > 0) {\n\
    \            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpombdbodp.java:39: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                return b - a;\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpybm0omfp.java:46: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        // Sort the array in descending order.\n        Collections.sort(arr,\
    \ Collections.reverseOrder());\n        // Add the first k elements to the result.\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpsko3x7v8.java:37: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // Sort the array in descending order.\n        Collections.sort(arr,\
    \ Collections.reverseOrder());\n        // Return the first k elements.\n    \
    \    return new ArrayList<Integer>(arr.subList(0, k));\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6ykl26ta.java:23: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            ans.add(pq.poll());\n\
    \        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpx1fdaz_p.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjhil7agy.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                return\
    \ b - a;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0;\
    \ i < k; i++) {\n            res.add(pq.poll());\n        }\n        return res;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7j65r3mm.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjhil7agy.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer a, Integer\
    \ b) {\n                return b - a;\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (!pq.isEmpty()) {\n\
    \            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpl65ov5yb.java:43: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            heap.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc307e2tk.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        int max = arr.get(0);\n        for (int i = 1; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n            }\n        }\n        int[] count = new int[max +\
    \ 1];\n        for (int i = 0; i < arr.size(); i++) {\n            count[arr.get(i)]++;\n\
    \        }\n        for (int i = count.length - 1; i >= 0; i--) {\n          \
    \  if (count[i] > 0) {\n                result.add(i);\n                if (result.size()\
    \ == k) {\n                    break;\n                }\n            }\n    \
    \    }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp90hbkfle.java:46: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                return b - a;\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (!pq.isEmpty()) {\n\
    \            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpwe3p1xsx.java:49: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpniqr9pyp.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8d1_q311.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        PriorityQueue<Integer> queue\
    \ = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            public\
    \ int compare(Integer a, Integer b) {\n                return b - a;\n       \
    \     }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     queue.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(queue.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmptp1es4sh.java:33: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgqlhvww1.java:36: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() > arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpids_w57v.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        Collections.reverse(result);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpmoqaskci.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (queue.size() < k) {\n                queue.add(arr.get(i));\n\
    \            } else {\n                if (queue.peek() < arr.get(i)) {\n    \
    \                queue.poll();\n                    queue.add(arr.get(i));\n \
    \               }\n            }\n        }\n        while (!queue.isEmpty())\
    \ {\n            result.add(queue.poll());\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpaeitvnu0.java:45: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                return\
    \ b - a;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add(pq.poll());\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpo0z8q5rx.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8d1_q311.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        if (k == 0) {\n            return result;\n        }\n   \
    \     if (k == 1) {\n            int max = arr.get(0);\n            for (int i\
    \ = 1; i < arr.size(); i++) {\n                if (arr.get(i) > max) {\n     \
    \               max = arr.get(i);\n                }\n            }\n        \
    \    result.add(max);\n            return result;\n        }\n        if (k ==\
    \ 2) {\n            int max = arr.get(0);\n            int max2 = arr.get(1);\n\
    \            if (max2 > max) {\n                int temp = max;\n            \
    \    max = max2;\n                max2 = temp;\n            }\n            for\
    \ (int i = 2; i < arr.size(); i++) {\n                if (arr.get(i) > max) {\n\
    \                    max2 = max;\n                    max = arr.get(i);\n    \
    \            } else if (arr.get(i) > max2) {\n                    max2 = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n            result.add(max2);\n\
    \            return result;\n        }\n        if (k == 3) {\n            int\
    \ max = arr.get(0);\n            int max2 = arr.get(1);\n            int max3\
    \ = arr.get(2);\n            if (max2 > max) {\n                int temp = max;\n\
    \                max = max2;\n                max2 = temp;\n            }\n  \
    \          if (max3 > max) {\n                int temp = max;\n              \
    \  max = max3;\n                max3 = temp;\n            }\n            if (max3\
    \ > max2) {\n                int temp = max2;\n                max2 = max3;\n\
    \                max3 = temp;\n            }\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ogop_i3.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmplh7x5wps.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        for (int i = 0; i < k; i++) {\n            int max\
    \ = Integer.MIN_VALUE;\n            int index = -1;\n            for (int j =\
    \ 0; j < arr.size(); j++) {\n                if (arr.get(j) > max) {\n       \
    \             max = arr.get(j);\n                    index = j;\n            \
    \    }\n            }\n            result.add(max);\n            arr.remove(index);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpfpt5gfcu.java:40: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmplh7x5wps.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8d1_q311.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // Time complexity: O(n log n)\n        // Space complexity:\
    \ O(n)\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  if (k == 0) {\n            return result;\n        }\n        Collections.sort(arr);\n\
    \        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n          \
    \  result.add(arr.get(i));\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuh1nzusp.java:30: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjhil7agy.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // Use a min-heap to store the k largest elements.\n\
    \        // Time: O(n log k)\n        // Space: O(k)\n        PriorityQueue<Integer>\
    \ minHeap = new PriorityQueue<>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (minHeap.size() < k) {\n                minHeap.add(arr.get(i));\n\
    \            } else {\n                if (minHeap.peek() < arr.get(i)) {\n  \
    \                  minHeap.poll();\n                    minHeap.add(arr.get(i));\n\
    \                }\n            }\n        }\n        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        while (!minHeap.isEmpty()) {\n            result.add(minHeap.poll());\n\
    \        }\n        Collections.reverse(result);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpxksht14y.java:39: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // Time: O(n)\n        // Space: O(k)\n        // PriorityQueue<Integer>\
    \ pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        //\
    \ for (int i = 0; i < arr.size(); i++) {\n        //     if (pq.size() < k) {\n\
    \        //         pq.add(arr.get(i));\n        //     } else {\n        // \
    \        if (pq.peek() < arr.get(i)) {\n        //             pq.poll();\n  \
    \      //             pq.add(arr.get(i));\n        //         }\n        //  \
    \   }\n        // }\n        // ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        // while (!pq.isEmpty()) {\n        //     ans.add(pq.poll());\n    \
    \    // }\n        // return ans;\n        // Time: O(n)\n        // Space: O(k)\n\
    \        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (ans.size() < k) {\n         \
    \       ans.add(arr.get(i));\n            } else {\n                int j = ans.size()\
    \ - 1;\n                while (j >= 0 && ans.get(j) < arr.get(i)) {\n        \
    \            j--;\n                }\n                if (j < ans.size() - 1)\
    \ {\n                    ans.remove(ans.size() - 1);\n                    ans.add(j\
    \ + 1, arr.get(i));\n                }\n            }\n        }\n        return\
    \ ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpldnd2qos.java:55: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int i = 0;\n        while (i < k) {\n            int max =\
    \ Integer.MIN_VALUE;\n            int maxIndex = -1;\n            for (int j =\
    \ i; j < arr.size(); j++) {\n                if (arr.get(j) > max) {\n       \
    \             max = arr.get(j);\n                    maxIndex = j;\n         \
    \       }\n            }\n            result.add(max);\n            arr.set(maxIndex,\
    \ Integer.MIN_VALUE);\n            i++;\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpdlvkk3cz.java:45: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpyl1hkk7z.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp68j_fo6n.java:40: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (pq.size() > 0) {\n            result.add(pq.poll());\n       \
    \ }\n        Collections.reverse(result);\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5t5sqa7l.java:44: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < k; i++) {\n            int max = Integer.MIN_VALUE;\n\
    \            int maxIndex = -1;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            arr.remove(maxIndex);\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp0c6o9ry3.java:33: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // return arr.stream().sorted(Comparator.reverseOrder()).limit(k).collect(Collectors.toCollection(ArrayList::new));\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (!pq.isEmpty()) {\n\
    \            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpo4ewsm3c.java:36: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpniqr9pyp.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgosuic1x.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int max = Integer.MIN_VALUE;\n        int maxIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        result.add(max);\n        arr.remove(maxIndex);\n\
    \        result.addAll(maximum(arr, k - 1));\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8qbmw55b.java:42: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6o2sgw94.java:33: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgqlhvww1.java:36: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (pq.size() > 0) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpas82bfvh.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpg8_dnwdo.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgqlhvww1.java:36: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n          \
    \      pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp91ujignn.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmplh7x5wps.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                return\
    \ b - a;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add(pq.poll());\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpo0z8q5rx.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (pq.size() < k) {\n                pq.add(arr.get(i));\n     \
    \       } else {\n                if (pq.peek() < arr.get(i)) {\n            \
    \        pq.poll();\n                    pq.add(arr.get(i));\n               \
    \ }\n            }\n        }\n        while (pq.size() > 0) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpmvkwuas2.java:45: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        if (arr.size() == 2) {\n            result.add(Math.max(arr.get(0), arr.get(1)));\n\
    \            result.add(Math.min(arr.get(0), arr.get(1)));\n            return\
    \ result;\n        }\n        if (k == 0) return result;\n        if (k == 1)\
    \ {\n            int max = arr.get(0);\n            for (int i = 1; i < arr.size();\
    \ i++) {\n                max = Math.max(max, arr.get(i));\n            }\n  \
    \          result.add(max);\n            return result;\n        }\n        if\
    \ (k == arr.size()) {\n            for (int i = 0; i < arr.size(); i++) {\n  \
    \              result.add(arr.get(i));\n            }\n            return result;\n\
    \        }\n        int[] max = new int[k];\n        int[] min = new int[k];\n\
    \        for (int i = 0; i < k; i++) {\n            max[i] = arr.get(i);\n   \
    \         min[i] = arr.get(i);\n        }\n        for (int i = k; i < arr.size();\
    \ i++) {\n            int j = 0;\n            while (j < k && arr.get(i) <= max[j])\
    \ {\n                j++;\n            }\n            if (j < k) {\n         \
    \       for (int l = k - 1; l > j; l--) {\n                    max[l] = max[l\
    \ - 1];\n                }\n                max[j] = arr.get(i);\n           \
    \ }\n            j = 0;\n            while (j < k && arr.get(i) >= min[j]) {\n\
    \                j++;\n            }\n            if (j < k) {\n             \
    \   for (int l = k - 1; l > j; l--) {\n                    min[l] = min\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9f1hpz0d.java:68: error: ';' expected\n                    min[l]\
    \ = min\n                                ^\n/tmp/tmp9f1hpz0d.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        // TODO:\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpximr0dii.java:22: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                return b - a;\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphiux0kdm.java:39: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> ans = new ArrayList<>();\n       \
    \ PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            ans.add(pq.poll());\n        }\n        Collections.reverse(ans);\n\
    \        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpovabxfb0.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            int max = Integer.MIN_VALUE;\n\
    \            int maxIndex = -1;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            arr.remove(maxIndex);\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpis56xbvy.java:43: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnml71z8p.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
    \        }\n        for (int i = k; i < arr.size(); i++) {\n            int min\
    \ = result.get(0);\n            int minIndex = 0;\n            for (int j = 1;\
    \ j < result.size(); j++) {\n                if (result.get(j) < min) {\n    \
    \                min = result.get(j);\n                    minIndex = j;\n   \
    \             }\n            }\n            if (arr.get(i) > min) {\n        \
    \        result.set(minIndex, arr.get(i));\n            }\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpe47cjjw7.java:37: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer x, Integer y) {\n                return\
    \ y - x;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (pq.size() < k) {\n                pq.add(arr.get(i));\n\
    \            } else {\n                if (pq.peek() < arr.get(i)) {\n       \
    \             pq.poll();\n                    pq.add(arr.get(i));\n          \
    \      }\n            }\n        }\n        while (!pq.isEmpty()) {\n        \
    \    result.add(pq.poll());\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpznl_gn_b.java:44: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgosuic1x.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            return\
    \ arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_0exbxbn.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int[] max = new int[k];\n        for (int i = 0; i < k; i++)\
    \ {\n            max[i] = arr.get(i);\n        }\n        for (int i = k; i <\
    \ arr.size(); i++) {\n            int min = max[0];\n            int min_index\
    \ = 0;\n            for (int j = 1; j < k; j++) {\n                if (max[j]\
    \ < min) {\n                    min = max[j];\n                    min_index =\
    \ j;\n                }\n            }\n            if (arr.get(i) > min) {\n\
    \                max[min_index] = arr.get(i);\n            }\n        }\n    \
    \    for (int i = 0; i < k; i++) {\n            result.add(max[i]);\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpbe1_emb5.java:51: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // O(n) time and O(k) space\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(arr.get(i));\n        }\n        for (int i = k; i < arr.size();\
    \ i++) {\n            int min = result.get(0);\n            int minIndex = 0;\n\
    \            for (int j = 1; j < result.size(); j++) {\n                if (result.get(j)\
    \ < min) {\n                    min = result.get(j);\n                    minIndex\
    \ = j;\n                }\n            }\n            if (arr.get(i) > min) {\n\
    \                result.set(minIndex, arr.get(i));\n            }\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9uez2mv4.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (pq.size() < k) {\n                pq.add(arr.get(i));\n     \
    \       } else {\n                if (pq.peek() < arr.get(i)) {\n            \
    \        pq.poll();\n                    pq.add(arr.get(i));\n               \
    \ }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n       \
    \     result.add(pq.poll());\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpb3elpent.java:45: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnml71z8p.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int max = Integer.MIN_VALUE;\n        int maxIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        result.add(max);\n        arr.remove(maxIndex);\n\
    \        result.addAll(maximum(arr, k - 1));\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8qbmw55b.java:42: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n     \
    \           pq.add(arr.get(i));\n            } else {\n                if (pq.peek()\
    \ < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (!pq.isEmpty()) {\n\
    \            res.add(pq.poll());\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjr9oxih1.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        if (k == 0) {\n            return result;\n        }\n   \
    \     if (k == 1) {\n            int max = arr.get(0);\n            for (int i\
    \ = 1; i < arr.size(); i++) {\n                if (arr.get(i) > max) {\n     \
    \               max = arr.get(i);\n                }\n            }\n        \
    \    result.add(max);\n            return result;\n        }\n        if (k ==\
    \ 2) {\n            int max = arr.get(0);\n            int max2 = arr.get(1);\n\
    \            if (max2 > max) {\n                int temp = max;\n            \
    \    max = max2;\n                max2 = temp;\n            }\n            for\
    \ (int i = 2; i < arr.size(); i++) {\n                if (arr.get(i) > max) {\n\
    \                    max2 = max;\n                    max = arr.get(i);\n    \
    \            } else if (arr.get(i) > max2) {\n                    max2 = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n            result.add(max2);\n\
    \            return result;\n        }\n        if (k == 3) {\n            int\
    \ max = arr.get(0);\n            int max2 = arr.get(1);\n            int max3\
    \ = arr.get(2);\n            if (max2 > max) {\n                int temp = max;\n\
    \                max = max2;\n                max2 = temp;\n            }\n  \
    \          if (max3 > max) {\n                int temp = max;\n              \
    \  max = max3;\n                max3 = temp;\n            }\n            if (max3\
    \ > max2) {\n                int temp = max2;\n                max2 = max3;\n\
    \                max3 = temp;\n            }\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ogop_i3.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                return\
    \ b - a;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (pq.size() < k) {\n                pq.add(arr.get(i));\n\
    \            } else {\n                if (pq.peek() < arr.get(i)) {\n       \
    \             pq.poll();\n                    pq.add(arr.get(i));\n          \
    \      }\n            }\n        }\n        while (pq.size() > 0) {\n        \
    \    result.add(pq.poll());\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_tg8glp_.java:44: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpi20hqd18.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        if (k == 0) return ans;\n        if (k == arr.size()) return arr;\n \
    \       PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                return\
    \ b - a;\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (pq.size() < k) {\n                pq.add(arr.get(i));\n\
    \            } else {\n                if (pq.peek() < arr.get(i)) {\n       \
    \             pq.poll();\n                    pq.add(arr.get(i));\n          \
    \      }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n  \
    \          ans.add(pq.poll());\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmps360vqvl.java:41: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                return b - a;\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3mtprleo.java:42: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        if (k == 0) {\n            return result;\n        }\n   \
    \     if (k == 1) {\n            int max = arr.get(0);\n            for (int i\
    \ = 1; i < arr.size(); i++) {\n                if (arr.get(i) > max) {\n     \
    \               max = arr.get(i);\n                }\n            }\n        \
    \    result.add(max);\n            return result;\n        }\n        int[] max\
    \ = new int[k];\n        for (int i = 0; i < k; i++) {\n            max[i] = arr.get(i);\n\
    \        }\n        for (int i = k; i < arr.size(); i++) {\n            int min\
    \ = max[0];\n            int minIndex = 0;\n            for (int j = 1; j < k;\
    \ j++) {\n                if (max[j] < min) {\n                    min = max[j];\n\
    \                    minIndex = j;\n                }\n            }\n       \
    \     if (arr.get(i) > min) {\n                max[minIndex] = arr.get(i);\n \
    \           }\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(max[i]);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpdaz_o_ql.java:64: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8d1_q311.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
    \            }\n        }\n        result.add(max);\n        arr.remove(new Integer(max));\n\
    \        return maximum(arr, k - 1);\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsubsdpon.java:37: warning: [removal] Integer(int) in Integer has\
    \ been deprecated and marked for removal\n        arr.remove(new Integer(max));\n\
    \                   ^\n/tmp/tmpsubsdpon.java:39: error: unreachable statement\n\
    return new ArrayList<Integer>(Arrays.asList());\n^\n1 error\n1 warning\n"
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() <= k) return\
    \ arr;\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ pq.add(arr.get(i));\n            else {\n                if (pq.peek() < arr.get(i))\
    \ {\n                    pq.poll();\n                    pq.add(arr.get(i));\n\
    \                }\n            }\n        }\n        while (pq.size() > 0) result.add(pq.poll());\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpt0cmzn6g.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpyl1hkk7z.java:34: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        // TODO: Implement your solution here\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpm8uqp7r6.java:22: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (pq.size() > 0) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpszl0w_gv.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        int max = Integer.MIN_VALUE;\n        int maxIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        result.add(max);\n        arr.remove(maxIndex);\n\
    \        result.addAll(maximum(arr, k - 1));\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8qbmw55b.java:42: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int n = arr.size();\n        if (k > n) {\n            return result;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < n; i++) {\n      \
    \      pq.add(arr.get(i));\n            if (pq.size() > k) {\n               \
    \ pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n    \
    \        result.add(pq.poll());\n        }\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp58rlz2c2.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (pq.size() < k) {\n                pq.add(arr.get(i));\n     \
    \       } else {\n                if (pq.peek() < arr.get(i)) {\n            \
    \        pq.poll();\n                    pq.add(arr.get(i));\n               \
    \ }\n            }\n        }\n        while (pq.size() > 0) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpmvkwuas2.java:45: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmplh7x5wps.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) return result;\n        if (arr.size() == 1) {\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\
    \        if (arr.size() == 2) {\n            result.add(Math.max(arr.get(0), arr.get(1)));\n\
    \            result.add(Math.min(arr.get(0), arr.get(1)));\n            return\
    \ result;\n        }\n        if (k > arr.size()) {\n            for (int i =\
    \ 0; i < arr.size(); i++) {\n                result.add(arr.get(i));\n       \
    \     }\n            return result;\n        }\n        int pivot = arr.get(0);\n\
    \        ArrayList<Integer> left = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ right = new ArrayList<Integer>();\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) > pivot) {\n                left.add(arr.get(i));\n\
    \            } else {\n                right.add(arr.get(i));\n            }\n\
    \        }\n        if (left.size() == k) {\n            result.addAll(left);\n\
    \            return result;\n        }\n        if (left.size() > k) {\n     \
    \       return maximum(left, k);\n        }\n        result.addAll(left);\n  \
    \      result.add(pivot);\n        if (left.size() + 1 == k) {\n            return\
    \ result;\n        }\n        return maximum(right, k - left.size() - 1);\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_6luz_ur.java:59: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpvr4f6dhn.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> res = new ArrayList<>();\n       \
    \ if (arr == null || arr.size() == 0 || k <= 0) {\n            return res;\n \
    \       }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n\
    \        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7g8h1qf3.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjhil7agy.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjhil7agy.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpi20hqd18.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpvr4f6dhn.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        // 1. Sort the array in ascending order.\n        //\
    \ 2. Return the last k elements.\n        Collections.sort(arr);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = arr.size() - 1; i >=\
    \ arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n   \
    \     return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp1rhtfq4j.java:27: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            queue.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8d1_q311.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < k; i++) {\n            int max = Integer.MIN_VALUE;\n\
    \            int maxIndex = -1;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) > max) {\n                    max = arr.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            arr.remove(maxIndex);\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp0c6o9ry3.java:33: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuubncj83.java:32: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        int i = 0;\n        int j = arr.size() - 1;\n  \
    \      int pivot = arr.get(j);\n        while (i < j) {\n            while (i\
    \ < j && arr.get(i) <= pivot) {\n                i++;\n            }\n       \
    \     while (i < j && arr.get(j) >= pivot) {\n                j--;\n         \
    \   }\n            if (i < j) {\n                int temp = arr.get(i);\n    \
    \            arr.set(i, arr.get(j));\n                arr.set(j, temp);\n    \
    \        }\n        }\n        arr.set(arr.size() - 1, arr.get(i));\n        arr.set(i,\
    \ pivot);\n        if (i == k - 1) {\n            for (int m = 0; m < k; m++)\
    \ {\n                result.add(arr.get(m));\n            }\n            return\
    \ result;\n        }\n        if (i > k - 1) {\n            return maximum(new\
    \ ArrayList<Integer>(arr.subList(0, i)), k);\n        }\n        if (i < k - 1)\
    \ {\n            result.addAll(maximum(new ArrayList<Integer>(arr.subList(0, i\
    \ + 1)), i + 1));\n            result.addAll(maximum(new ArrayList<Integer>(arr.subList(i\
    \ + 1, arr.size())), k - i - 1));\n            return result;\n        }\n   \
    \     return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpfstt1z_3.java:60: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        if (arr.size() == k) {\n            return arr;\n\
    \        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmplh7x5wps.java:38: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n      \
    \  }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjgrgd_v8.java:28: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() == 1) {\n            result.add(arr.get(0));\n            return\
    \ result;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k,\
    \ Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp78ujgozd.java:35: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (arr.size() <= k) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k)\
    \ {\n                pq.add(arr.get(i));\n            } else {\n             \
    \   if (pq.peek() < arr.get(i)) {\n                    pq.poll();\n          \
    \          pq.add(arr.get(i));\n                }\n            }\n        }\n\
    \        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n       \
    \ }\n        Collections.reverse(result);\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnp159umc.java:44: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer>\
    \ arr, int k) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \            if (pq.size() > k) {\n                pq.poll();\n            }\n\
    \        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8ufsbrw.java:31: error: unreachable statement

    return new ArrayList<Integer>(Arrays.asList());

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659793500
