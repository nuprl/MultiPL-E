name: HumanEval_96_count_up_to
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Implement a function that takes an non-negative integer\
  \ and returns an array of the first n\n    // integers that are prime numbers and\
  \ less than n.\n    // for example:\n    public static ArrayList<Integer> countUpTo(int\
  \ n) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(countUpTo((5)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3)))));\n    assert(countUpTo((6)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)5)))));\n    assert(countUpTo((7)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)5)))));\n    assert(countUpTo((10)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)5, (int)7)))));\n    assert(countUpTo((0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(countUpTo((22)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)5, (int)7, (int)11, (int)13, (int)17, (int)19)))));\n    assert(countUpTo((1)).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    assert(countUpTo((18)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)5, (int)7, (int)11, (int)13,\
  \ (int)17)))));\n    assert(countUpTo((47)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)5, (int)7, (int)11, (int)13, (int)17, (int)19, (int)23, (int)29,\
  \ (int)31, (int)37, (int)41, (int)43)))));\n    assert(countUpTo((101)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)5, (int)7, (int)11, (int)13,\
  \ (int)17, (int)19, (int)23, (int)29, (int)31, (int)37, (int)41, (int)43, (int)47,\
  \ (int)53, (int)59, (int)61, (int)67, (int)71, (int)73, (int)79, (int)83, (int)89,\
  \ (int)97)))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
