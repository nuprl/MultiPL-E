name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    public static Pair<Optional<Long>,\
  \ Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Pair.with(-2l,\
  \ 1l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Pair.with(-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: ["        // Your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                if (!a.isPresent()\
    \ || i > a.get()) {\n                    a = Optional.of(i);\n               \
    \ }\n            } else {\n                if (!b.isPresent() || i < b.get())\
    \ {\n                    b = Optional.of(i);\n                }\n            }\n\
    \        }\n        return new Pair<Optional<Long>, Optional<Long>>(a, b);", " \
    \       Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  '        return null;', "        // Write your code here\n        return null;",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        Optional<Long> largestNegative =\
    \ lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Write your code here\n        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                if (!largest.isPresent()\
    \ || i > largest.get()) {\n                    largest = Optional.of(i);\n   \
    \             }\n            } else {\n                if (!smallest.isPresent()\
    \ || i < smallest.get()) {\n                    smallest = Optional.of(i);\n \
    \               }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largest, smallest);", "        // your code here\n        return\
    \ null;", "        // Your code here\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(Optional.empty(), Optional.empty());", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        Long maxNeg = null;\n        Long\
    \ minPos = null;\n        for (Long i : lst) {\n            if (i < 0) {\n   \
    \             if (maxNeg == null || i > maxNeg) {\n                    maxNeg\
    \ = i;\n                }\n            } else {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Pair<Optional<Long>, Optional<Long>>(Optional.ofNullable(maxNeg),\
    \ Optional.ofNullable(minPos));", "        // Write your code here\n        return\
    \ null;", "        Optional<Long> largest = Optional.empty();\n        Optional<Long>\
    \ smallest = Optional.empty();\n        for (Long i : lst) {\n            if (i\
    \ < 0) {\n                if (!largest.isPresent() || largest.get() < i) {\n \
    \                   largest = Optional.of(i);\n                }\n           \
    \ } else {\n                if (!smallest.isPresent() || smallest.get() > i) {\n\
    \                    smallest = Optional.of(i);\n                }\n         \
    \   }\n        }\n        return new Pair<Optional<Long>, Optional<Long>>(largest,\
    \ smallest);", "        // Your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        Optional<Long> largestNegative =\
    \ Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || i > largestNegative.get()) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || i < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || i > largestNegative.get()) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || i < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        return new Pair<Optional<Long>, Optional<Long>>(\n\
    \            lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder()),\n\
    \            lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder())\n\
    \        );", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> smallest = lst.stream().filter(x\
    \ -> x > 0).min(Comparator.naturalOrder());\n        Optional<Long> largest =\
    \ lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largest, smallest);", "        Optional<Long>\
    \ largest = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largest, smallest);",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(Optional.empty(), Optional.empty());",
  "        // Your code here\n        return null;", "        // your code here\n\
    \        return null;", "        // Write your code here\n        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long l : lst) {\n            if (l < 0) {\n\
    \                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || i > largestNegative.get()) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || i < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", '        return null;', "        // Your code here\n        return\
    \ null;", "        // Write your code here\n        return null;", "        //\
    \ Write your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", "        // Write your code here\n        return null;", "  \
    \      // your code here\n        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);", "    \
    \    Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ l : lst) {\n            if (l < 0) {\n                if (!largestNegative.isPresent()\
    \ || l > largestNegative.get()) {\n                    largestNegative = Optional.of(l);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || l < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);", "    \
    \    // Write your code here\n        return new Pair<Optional<Long>, Optional<Long>>(Optional.empty(),\
    \ Optional.empty());", "        // Write your code here\n        return null;",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largestNegative, smallestPositive);", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);",
  "        // Your code here\n        return null;", "        Optional<Long> largestNegative\
    \ = Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\
    \        for (Long l : lst) {\n            if (l < 0) {\n                if (!largestNegative.isPresent()\
    \ || l > largestNegative.get()) {\n                    largestNegative = Optional.of(l);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || l < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        Optional<Long> largest = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largest, smallest);",
  "        // >>> largestSmallestIntegers([-1, -2, -3, 4, 5])\n        // (Optional.of(-1),\
    \ Optional.of(4))\n        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5])\n\
    \        // (Optional.of(-1), Optional.empty())\n        // >>> largestSmallestIntegers([1,\
    \ 2, 3, 4, 5])\n        // (Optional.empty(), Optional.of(1))\n        // >>>\
    \ largestSmallestIntegers([])\n        // (Optional.empty(), Optional.empty())\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, 0, 1, 2, 3])\n        //\
    \ (Optional.of(-1), Optional.of(1))\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])\n        // (Optional.of(-1), Optional.of(1))\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5,\
    \ -10, -20, -30, -40, -50])\n        // (Optional.of(-1), Optional.of(1))\n  \
    \      // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -10,\
    \ -20, -30, -40, -50, -100, -200, -300, -400, -500])\n        // (Optional.of(-1),\
    \ Optional.of(1))\n        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5,\
    \ 0, 1, 2, 3, 4, 5, -10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -1000,\
    \ -2000, -3000, -4000, -5000])\n        // (Optional.of(-1), Optional.of(1))\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 0, 1, 2, 3", "  \
    \      // Write your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || largestNegative.get() < i) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || smallestPositive.get() > i) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        Optional<Long> largestNegative =\
    \ lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largestNegative, smallestPositive);", "        // your code\
    \ here\n        return null;", "        // Write your code here\n        return\
    \ null;", "        Optional<Long> largestNegative = lst.stream().filter(x -> x\
    \ < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largest.isPresent() || largest.get() < i) {\n          \
    \          largest = Optional.of(i);\n                }\n            } else {\n\
    \                if (!smallest.isPresent() || smallest.get() > i) {\n        \
    \            smallest = Optional.of(i);\n                }\n            }\n  \
    \      }\n        return new Pair<Optional<Long>, Optional<Long>>(largest, smallest);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return new Pair<Optional<Long>, Optional<Long>>(Optional.empty(),\
    \ Optional.empty());", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ Optional<Long> neg = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> pos = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(neg, pos);", "      \
    \  Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Your code here\n        return null;", "        Optional<Long> largestNegative\
    \ = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(i -> i < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(i -> i > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);",
  "        Optional<Long> largest = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largest, smallest);",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || i > largestNegative.get()) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || i < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // >>> largestSmallestIntegers([1,\
    \ 2, 3, 4, 5])\n        // (None, None)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5])\n        // (-5, None)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 1, 2, 3, 4, 5])\n        // (-5, 1)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])\n        // (-5, 0)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, -1, -2, -3, -4, -5])\n        // (-5, None)\n        // >>>\
    \ largestSmallestIntegers([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        // (None, 1)\n\
    \        // >>> largestSmallestIntegers([])\n        // (None, None)\n       \
    \ // >>> largestSmallestIntegers([0])\n        // (None, 0)\n        // >>> largestSmallestIntegers([-1])\n\
    \        // (-1, None)\n        // >>> largestSmallestIntegers([-1, 0])\n    \
    \    // (-1, 0)\n        // >>> largestSmallestIntegers([-1, 0, 1])\n        //\
    \ (-1, 1)\n        // >>> largestSmallestIntegers([-1, -2, 0, 1])\n        //\
    \ (-2, 1)\n        // >>> largestSmallestIntegers([-1, -2, 0, 1, 2])\n       \
    \ // (-2, 2)\n        // >>> largestSmallestIntegers([-1, -2, 0, 1, 2, 3])\n \
    \       // (-2, 3)\n        // >>> largestSmallestIntegers([-1, -2, 0, 1, 2, 3,\
    \ 4])\n        // (-2, 4)\n        // >>> largestSmallestIntegers([-1, -2, 0,\
    \ 1, 2, 3, 4, 5])\n        // (-2, 5)\n        // >>> largestSmallestIntegers",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> maxNegative = Optional.empty();\n        Optional<Long>\
    \ minPositive = Optional.empty();\n        for (Long l : lst) {\n            if\
    \ (l < 0) {\n                if (!maxNegative.isPresent() || l > maxNegative.get())\
    \ {\n                    maxNegative = Optional.of(l);\n                }\n  \
    \          } else {\n                if (!minPositive.isPresent() || l < minPositive.get())\
    \ {\n                    minPositive = Optional.of(l);\n                }\n  \
    \          }\n        }\n        return Pair.with(maxNegative, minPositive);",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // >>> largestSmallestIntegers([-1, -2, -3, 4,\
    \ 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1, -2, -3,\
    \ -4, -5])\n        // (-5, None)\n        // >>> largestSmallestIntegers([1,\
    \ 2, 3, 4, 5])\n        // (None, 1)\n        // >>> largestSmallestIntegers([])\n\
    \        // (None, None)\n        // >>> largestSmallestIntegers([0])\n      \
    \  // (None, None)\n        // >>> largestSmallestIntegers([-1])\n        // (-1,\
    \ None)\n        // >>> largestSmallestIntegers([1])\n        // (None, 1)\n \
    \       // >>> largestSmallestIntegers([-1, 1])\n        // (-1, 1)\n        //\
    \ >>> largestSmallestIntegers([-1, -2, 1, 2])\n        // (-2, 1)\n        //\
    \ >>> largestSmallestIntegers([-1, -2, -3, 1, 2, 3])\n        // (-3, 1)\n   \
    \     // >>> largestSmallestIntegers([-1, -2, -3, 1, 2, 3, -4, -5, 4, 5])\n  \
    \      // (-3, 1)\n        // >>> largestSmallestIntegers([-1, -2, -3, 1, 2, 3,\
    \ -4, -5, 4, 5, -6, -7, 6, 7])\n        // (-3, 1)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 1, 2, 3, -4, -5, 4, 5, -6, -7, 6, 7, -8, -9, 8, 9])\n        // (-3,\
    \ 1)\n        // >>> largestSmallestIntegers([-1, -2, -3, 1, 2, 3, -4, -5, 4,\
    \ 5, -6, -7, 6, 7, -8, -9, 8, 9, -10, -11, 10, 11])\n        // (-3, 1)\n    \
    \    // >>> largestSmallestIntegers([-1, -2, -3, 1, 2, 3", "        // Your code\
    \ here\n        return null;", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ l : lst) {\n            if (l < 0) {\n                if (!largestNegative.isPresent()\
    \ || l > largestNegative.get()) {\n                    largestNegative = Optional.of(l);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || l < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(maxNegative, minPositive);", "    \
    \    // Write your code here\n        return null;", "        // your code here\n\
    \        return null;", "        // Write your code here\n        return null;",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // TODO: Implement me\n        return null;",
  "        // your code here\n        return null;", "        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-10,\
    \ -20, -30, 40, 50])\n        // (-10, 40)\n        // >>> largestSmallestIntegers([0,\
    \ 0, 0, 0, 0])\n        // (None, None)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "    \
    \    // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        // >>> largestSmallestIntegers([-1, -2, -3, 4,\
    \ 5])\n        // (Optional[-1], Optional[4])\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5])\n        // (Optional[-1], Optional[None])\n        // >>>\
    \ largestSmallestIntegers([1, 2, 3, 4, 5])\n        // (Optional[None], Optional[1])\n\
    \        // >>> largestSmallestIntegers([])\n        // (Optional[None], Optional[None])\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])\n\
    \        // (Optional[-1], Optional[1])\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 1, 2, 3, 4, 5, 0])\n        // (Optional[-1], Optional[0])\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0,\
    \ -10])\n        // (Optional[-10], Optional[0])\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, -10, -100])\n        // (Optional[-100], Optional[0])\n\
    \        // >>> largestSmallestIntegers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0,\
    \ -10, -100, -1000])\n        // (Optional[-1000], Optional[0])\n        // >>>\
    \ largestSmallestIntegers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, -10, -100, -1000,\
    \ -10000])\n        // (Optional[-10000], Optional[0])\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, -10, -100, -1000, -10000, -100000])\n    \
    \   ", "        Optional<Long> smallest = Optional.empty();\n        Optional<Long>\
    \ largest = Optional.empty();\n        for (Long i : lst) {\n            if (i\
    \ > 0) {\n                if (!smallest.isPresent() || i < smallest.get()) {\n\
    \                    smallest = Optional.of(i);\n                }\n         \
    \   } else if (i < 0) {\n                if (!largest.isPresent() || i > largest.get())\
    \ {\n                    largest = Optional.of(i);\n                }\n      \
    \      }\n        }\n        return new Pair<Optional<Long>, Optional<Long>>(largest,\
    \ smallest);", "        return new Pair<Optional<Long>, Optional<Long>>(\n   \
    \         lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder()),\n  \
    \          lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder())\n  \
    \      );", "        // Write your code here\n        return null;", "       \
    \ // Write your code here\n        return null;", "        Optional<Long> largestNegative\
    \ = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largestNegative, smallestPositive);", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long num : lst) {\n            if (num < 0)\
    \ {\n                if (!largestNegative.isPresent() || num > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(num);\n               \
    \ }\n            } else {\n                if (!smallestPositive.isPresent() ||\
    \ num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largest = Optional.empty();\n \
    \       Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                if (!largest.isPresent() || i >\
    \ largest.get()) {\n                    largest = Optional.of(i);\n          \
    \      }\n            } else {\n                if (!smallest.isPresent() || i\
    \ < smallest.get()) {\n                    smallest = Optional.of(i);\n      \
    \          }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largest, smallest);", "        Optional<Long> largestNegative\
    \ = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largestNegative, smallestPositive);", "        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-10,\
    \ -20, -30, 40, 50])\n        // (-10, 40)\n        // >>> largestSmallestIntegers([0,\
    \ 0, 0, 0, 0])\n        // (None, None)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4.4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4.4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4.4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4.4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4.4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4.4, 5.5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1.1,\
    \ -2.2, -3.3, 4, 5])\n        // (-1, 4)\n        // >>> largestSmallestIntegers([-1,\
    \ -2, -3, 4,", "        // your code here\n        return null;", "        //\
    \ Your code here\n        return null;", "        Optional<Long> largestNegative\
    \ = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ i : lst) {\n            if (i < 0) {\n                if (!largestNegative.isPresent()\
    \ || largestNegative.get() < i) {\n                    largestNegative = Optional.of(i);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || smallestPositive.get() > i) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largestNegative = lst.stream().filter(x\
    \ -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long> smallestPositive\
    \ = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ l : lst) {\n            if (l < 0) {\n                if (!largestNegative.isPresent()\
    \ || l > largestNegative.get()) {\n                    largestNegative = Optional.of(l);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || l < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || l > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(l);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || l\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        // your code here\n        return null;", '        return
    null;', "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long i : lst) {\n       \
    \     if (i < 0) {\n                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largestNegative, smallestPositive);", '        return null;',
  "        // your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        Optional<Long> largest = Optional.empty();\n\
    \        Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i > 0) {\n                if (smallest.isPresent()) {\n \
    \                   if (i < smallest.get()) {\n                        smallest\
    \ = Optional.of(i);\n                    }\n                } else {\n       \
    \             smallest = Optional.of(i);\n                }\n            } else\
    \ if (i < 0) {\n                if (largest.isPresent()) {\n                 \
    \   if (i > largest.get()) {\n                        largest = Optional.of(i);\n\
    \                    }\n                } else {\n                    largest\
    \ = Optional.of(i);\n                }\n            }\n        }\n        return\
    \ new Pair<Optional<Long>, Optional<Long>>(largest, smallest);", "        // Your\
    \ code here\n        return null;", "        Optional<Long> largestNegative =\
    \ lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        Optional<Long> largestNegative = Optional.empty();\n\
    \        Optional<Long> smallestPositive = Optional.empty();\n        for (Long\
    \ l : lst) {\n            if (l < 0) {\n                if (!largestNegative.isPresent()\
    \ || l > largestNegative.get()) {\n                    largestNegative = Optional.of(l);\n\
    \                }\n            } else {\n                if (!smallestPositive.isPresent()\
    \ || l < smallestPositive.get()) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", "        Optional<Long> largest = Optional.empty();\n \
    \       Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                if (!largest.isPresent() || i >\
    \ largest.get()) {\n                    largest = Optional.of(i);\n          \
    \      }\n            } else {\n                if (!smallest.isPresent() || i\
    \ < smallest.get()) {\n                    smallest = Optional.of(i);\n      \
    \          }\n            }\n        }\n        return new Pair<Optional<Long>,\
    \ Optional<Long>>(largest, smallest);", "        Optional<Long> largestNegative\
    \ = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return new Pair<Optional<Long>, Optional<Long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        Optional<Long>\
    \ largestNegative = Optional.empty();\n        Optional<Long> smallestPositive\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                if (!largestNegative.isPresent() || i > largestNegative.get())\
    \ {\n                    largestNegative = Optional.of(i);\n                }\n\
    \            } else {\n                if (!smallestPositive.isPresent() || i\
    \ < smallestPositive.get()) {\n                    smallestPositive = Optional.of(i);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);"]
stop_tokens:
- "\n    }\n"
