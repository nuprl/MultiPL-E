language: java
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift >= s.length())\
    \ {\n            sb.append(new StringBuilder(s).reverse());\n        } else {\n\
    \            sb.append(s.substring(s.length() - shift));\n            sb.append(s.substring(0,\
    \ s.length() - shift));\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7df5ggdn.java:25)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String s1 = s.substring(0, s.length() - shift);\n        String\
    \ s2 = s.substring(s.length() - shift);\n        return s2 + s1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String s1 = s.substring(0, shift);\n        String s2 = s.substring(shift);\n\
    \        return s2 + s1;\n}\n    public static void main(String[] args) {\n  \
    \  assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprmdx0dk1.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int n = s.length();\n        if (shift >= n) {\n            return new\
    \ StringBuilder(s).reverse().toString();\n        }\n        return s.substring(n\
    \ - shift) + s.substring(0, n - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfw2utywk.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift >= s.length())\
    \ {\n            for (int i = s.length() - 1; i >= 0; i--) {\n               \
    \ sb.append(s.charAt(i));\n            }\n        } else {\n            for (int\
    \ i = s.length() - shift; i < s.length(); i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < s.length() - shift; i++) {\n \
    \               sb.append(s.charAt(i));\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fl861lu.java:31)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String a = s.substring(0, s.length() - shift);\n        String\
    \ b = s.substring(s.length() - shift);\n        return b + a;\n}\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzwvj1dl.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring(len\
    \ - shift) + s.substring(0, len - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqedufh3.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String a = s.substring(0, s.length() - shift);\n        String\
    \ b = s.substring(s.length() - shift);\n        return b + a;\n}\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int n = s.length();\n        if (shift >= n) {\n            return new\
    \ StringBuilder(s).reverse().toString();\n        }\n        return s.substring(n\
    \ - shift) + s.substring(0, n - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfw2utywk.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f9hwtb2.java:23)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzefe2xsz.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzefe2xsz.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String first = s.substring(0, shift);\n        String second\
    \ = s.substring(shift);\n        return second + first;\n}\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphvucfwp8.java:22)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String first = s.substring(0, s.length() - shift);\n     \
    \   String second = s.substring(s.length() - shift);\n        return second +\
    \ first;\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift > s.length())\
    \ {\n            for (int i = s.length() - 1; i >= 0; i--) {\n               \
    \ sb.append(s.charAt(i));\n            }\n        } else {\n            for (int\
    \ i = s.length() - shift; i < s.length(); i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < s.length() - shift; i++) {\n \
    \               sb.append(s.charAt(i));\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String result = s.substring(s.length() - shift) + s.substring(0,\
    \ s.length() - shift);\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String s1 = s.substring(0, shift);\n        String s2 = s.substring(shift);\n\
    \        return s2 + s1;\n}\n    public static void main(String[] args) {\n  \
    \  assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprmdx0dk1.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int n = s.length();\n        if (shift > n) {\n            return new\
    \ StringBuilder(s).reverse().toString();\n        }\n        return s.substring(n\
    \ - shift) + s.substring(0, n - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring(len\
    \ - shift) + s.substring(0, len - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqedufh3.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String first = s.substring(0, shift);\n        String second\
    \ = s.substring(shift);\n        return second + first;\n}\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e4o3efg.java:22)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        int len = s.length();\n\
    \        if (shift > len) {\n            for (int i = len - 1; i >= 0; i--) {\n\
    \                sb.append(s.charAt(i));\n            }\n        } else {\n  \
    \          for (int i = len - shift; i < len; i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < len - shift; i++) {\n        \
    \        sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f9hwtb2.java:23)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift > s.length())\
    \ {\n            for (int i = s.length() - 1; i >= 0; i--) {\n               \
    \ sb.append(s.charAt(i));\n            }\n        } else {\n            for (int\
    \ i = shift; i < s.length(); i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < shift; i++) {\n              \
    \  sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv646hmuv.java:30)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int n = s.length();\n        if (shift > n) {\n            return new\
    \ StringBuilder(s).reverse().toString();\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        sb.append(s.substring(n - shift));\n       \
    \ sb.append(s.substring(0, n - shift));\n        return sb.toString();\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String a = s.substring(0, s.length() - shift);\n        String\
    \ b = s.substring(s.length() - shift);\n        return b + a;\n}\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift > len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring(len\
    \ - shift) + s.substring(0, len - shift);\n}\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100), (2)).equals((\"001\")));\n    assert(circularShift((12),\
    \ (2)).equals((\"12\")));\n    assert(circularShift((97), (8)).equals((\"79\"\
    )));\n    assert(circularShift((12), (1)).equals((\"21\")));\n    assert(circularShift((11),\
    \ (101)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String left = s.substring(0, s.length() - shift);\n      \
    \  String right = s.substring(s.length() - shift);\n        return right + left;\n\
    }\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzefe2xsz.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = \"\" + x;\n        if\
    \ (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1j73clv8.java:20)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        String s1 = s.substring(0,\
    \ len - shift);\n        String s2 = s.substring(len - shift);\n        return\
    \ s2 + s1;\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9qefmsl.java:24)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift > s.length())\
    \ {\n            for (int i = s.length() - 1; i >= 0; i--) {\n               \
    \ sb.append(s.charAt(i));\n            }\n        } else {\n            for (int\
    \ i = s.length() - shift; i < s.length(); i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < s.length() - shift; i++) {\n \
    \               sb.append(s.charAt(i));\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        if (shift >= s.length())\
    \ {\n            for (int i = s.length() - 1; i >= 0; i--) {\n               \
    \ sb.append(s.charAt(i));\n            }\n        } else {\n            for (int\
    \ i = s.length() - shift; i < s.length(); i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            for (int i = 0; i < s.length() - shift; i++) {\n \
    \               sb.append(s.charAt(i));\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fl861lu.java:31)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = len - shift; i < len; i++) {\n\
    \            sb.append(s.charAt(i));\n        }\n        for (int i = 0; i < len\
    \ - shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp79b5u2.java:29)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsznn82fo.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.append(sb.substring(0,\
    \ shift));\n        sb.delete(0, shift);\n        return sb.toString();\n}\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzefe2xsz.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String a = s.substring(0, shift);\n        String b = s.substring(shift);\n\
    \        return b + a;\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbnthbjpb.java:22)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String a = s.substring(0, shift);\n        String b = s.substring(shift);\n\
    \        return b + a;\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbnthbjpb.java:22)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        int len = s.length();\n        if (shift > len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        String a = s.substring(len\
    \ - shift);\n        String b = s.substring(0, len - shift);\n        return a\
    \ + b;\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - shift) + s.substring(0, s.length()\
    \ - shift);\n}\n    public static void main(String[] args) {\n    assert(circularShift((100),\
    \ (2)).equals((\"001\")));\n    assert(circularShift((12), (2)).equals((\"12\"\
    )));\n    assert(circularShift((97), (8)).equals((\"79\")));\n    assert(circularShift((12),\
    \ (1)).equals((\"21\")));\n    assert(circularShift((11), (101)).equals((\"11\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    public static String\
    \ circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(shift) + s.substring(0, shift);\n}\n  \
    \  public static void main(String[] args) {\n    assert(circularShift((100), (2)).equals((\"\
    001\")));\n    assert(circularShift((12), (2)).equals((\"12\")));\n    assert(circularShift((97),\
    \ (8)).equals((\"79\")));\n    assert(circularShift((12), (1)).equals((\"21\"\
    )));\n    assert(circularShift((11), (101)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo15cr2d6.java:20)\n"
  stdout: ''
  timestamp: 1660011374
