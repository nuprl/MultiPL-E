completions:
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n  \
  \          int n = arr.get(i);\n            while (n > 0) {\n                count\
  \ += n & 1;\n                n >>= 1;\n            }\n            if (count == 0)\
  \ {\n                zeros.add(arr.get(i));\n            } else {\n            \
  \    ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            result.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            result.add(ones.get(i));\n        }\n     \
  \   return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int num = arr.get(i);\n            int ones\
  \ = Integer.bitCount(num);\n            sorted.add(ones * 100000 + num);\n     \
  \   }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            int num = sorted.get(i);\n            sorted.set(i, num %\
  \ 100000);\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                int a1\
  \ = Integer.bitCount(a);\n                int b1 = Integer.bitCount(b);\n      \
  \          if (a1 == b1) {\n                    return a - b;\n                }\n\
  \                return a1 - b1;\n            }\n        });\n        return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> ones = new ArrayList<Pair<Integer, Integer>>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int\
  \ count = 0;\n            while (num > 0) {\n                count += num % 2;\n\
  \                num /= 2;\n            }\n            ones.add(new Pair<Integer,\
  \ Integer>(count, arr.get(i)));\n        }\n        Collections.sort(ones, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
  \ == o2.getValue0()) {\n                    return o1.getValue1() - o2.getValue1();\n\
  \                }\n                return o1.getValue0() - o2.getValue0();\n  \
  \          }\n        });\n        for (int i = 0; i < ones.size(); i++) {\n   \
  \         result.add(ones.get(i).getValue1());\n        }\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 1)\
  \ {\n                    count++;\n                }\n                num /= 2;\n\
  \            }\n            sorted.add(count);\n        }\n        for (int i =\
  \ 0; i < sorted.size(); i++) {\n            for (int j = i + 1; j < sorted.size();\
  \ j++) {\n                if (sorted.get(i) > sorted.get(j)) {\n               \
  \     int temp = sorted.get(i);\n                    sorted.set(i, sorted.get(j));\n\
  \                    sorted.set(j, temp);\n                    temp = arr.get(i);\n\
  \                    arr.set(i, arr.get(j));\n                    arr.set(j, temp);\n\
  \                }\n            }\n        }\n        return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n     \
  \   Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                String\
  \ binary1 = Integer.toBinaryString(o1);\n                String binary2 = Integer.toBinaryString(o2);\n\
  \                int ones1 = 0;\n                int ones2 = 0;\n              \
  \  for (int i = 0; i < binary1.length(); i++) {\n                    if (binary1.charAt(i)\
  \ == '1') {\n                        ones1++;\n                    }\n         \
  \       }\n                for (int i = 0; i < binary2.length(); i++) {\n      \
  \              if (binary2.charAt(i) == '1') {\n                        ones2++;\n\
  \                    }\n                }\n                if (ones1 == ones2) {\n\
  \                    return o1 - o2;\n                }\n                return\
  \ ones1 - ones2;\n            }\n        });\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                ones += num % 2;\n\
  \                num /= 2;\n            }\n            sorted.add(ones);\n     \
  \   }\n        Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 10000000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 10000000);\n        }\n    \
  \    return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (ones(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twos = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ threes = new ArrayList<Integer>();\n        ArrayList<Integer> fours = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fives = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixes = new ArrayList<Integer>();\n        ArrayList<Integer> sevens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> eights = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nines = new ArrayList<Integer>();\n        ArrayList<Integer> tens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> elevens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twelves = new ArrayList<Integer>();\n        ArrayList<Integer> thirteens = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> fourteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fifteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixteens = new ArrayList<Integer>();\n        ArrayList<Integer> seventeens =\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> eigteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ninteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twentys = new ArrayList<Integer>();\n        ArrayList<Integer> twentys1 = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> twentys2 = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twentys3 = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twentys4 = new ArrayList<Integer>();\n        ArrayList<Integer> twentys5 = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> twentys6 = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twentys7 = new ArrayList<Integer>();\n        ArrayList"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
  \        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> zeros = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
  \        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int count = 0;\n            int num = arr.get(i);\n\
  \            while (num > 0) {\n                if (num % 2 == 1) {\n          \
  \          count++;\n                }\n                num /= 2;\n            }\n\
  \            sorted.add(count);\n        }\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            for (int j = 0; j < sorted.size() - 1; j++) {\n          \
  \      if (sorted.get(j) > sorted.get(j + 1)) {\n                    int temp =\
  \ sorted.get(j);\n                    sorted.set(j, sorted.get(j + 1));\n      \
  \              sorted.set(j + 1, temp);\n                    temp = arr.get(j);\n\
  \                    arr.set(j, arr.get(j + 1));\n                    arr.set(j\
  \ + 1, temp);\n                }\n            }\n        }\n        return arr;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
  \        return result;"
- "        // Your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n  \
  \      result.addAll(ones);\n        result.addAll(zeros);\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int ones = 0;\n            int num = arr.get(i);\n\
  \            while (num > 0) {\n                ones += num % 2;\n             \
  \   num /= 2;\n            }\n            sorted.add(ones);\n        }\n       \
  \ Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 10000000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 10000000);\n        }\n    \
  \    return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            int ones = 0;\n            while (num > 0) {\n                if (num\
  \ % 2 == 1) {\n                    ones++;\n                }\n                num\
  \ /= 2;\n            }\n            sorted.add(ones);\n        }\n        ArrayList<Integer>\
  \ sorted2 = new ArrayList<>();\n        for (int i = 0; i < sorted.size(); i++)\
  \ {\n            int num = sorted.get(i);\n            int index = 0;\n        \
  \    for (int j = 0; j < sorted2.size(); j++) {\n                if (num < sorted2.get(j))\
  \ {\n                    index = j;\n                    break;\n              \
  \  }\n            }\n            sorted2.add(index, num);\n        }\n        ArrayList<Integer>\
  \ sorted3 = new ArrayList<>();\n        for (int i = 0; i < sorted2.size(); i++)\
  \ {\n            int num = sorted2.get(i);\n            int index = 0;\n       \
  \     for (int j = 0; j < sorted3.size(); j++) {\n                if (arr.get(i)\
  \ < arr.get(j)) {\n                    index = j;\n                    break;\n\
  \                }\n            }\n            sorted3.add(index, arr.get(i));\n\
  \        }\n        return sorted3;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 1)\
  \ {\n                    count++;\n                }\n                num /= 2;\n\
  \            }\n            sorted.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted2 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted.size();\
  \ j++) {\n                if (sorted.get(i) < sorted.get(j)) {\n               \
  \     count++;\n                }\n            }\n            sorted2.add(count);\n\
  \        }\n        ArrayList<Integer> sorted3 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted2.size(); i++) {\n            int count = 0;\n \
  \           for (int j = 0; j < sorted2.size(); j++) {\n                if (sorted2.get(i)\
  \ < sorted2.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted3.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted4 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted3.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted3.size();\
  \ j++) {\n                if (sorted3.get(i) < sorted3.get(j)) {\n             \
  \       count++;\n                }\n            }\n            sorted4.add(count);\n\
  \        }\n        ArrayList<Integer> sorted5 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted4.size(); i++) {\n            int count = 0;\n \
  \           for (int j = 0; j < sorted4.size(); j++) {\n                if (sorted4.get(i)\
  \ < sorted4.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted5.add(count"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones);\n        }\n\
  \        Collections.sort(sorted);\n        return sorted;"
- "        // Write your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones * 1000000 + arr.get(i));\n        }\n        Collections.sort(sorted);\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i)\
  \ % 1000000);\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones * 10000000 + arr.get(i));\n        }\n        Collections.sort(sorted);\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i)\
  \ % 10000000);\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones * 10000000 + arr.get(i));\n        }\n        Collections.sort(sorted);\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i)\
  \ % 10000000);\n        }\n        return sorted;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (countOnes(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            result.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            result.add(zeros.get(i));\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n\
  \        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                int o1Ones\
  \ = Integer.bitCount(o1);\n                int o2Ones = Integer.bitCount(o2);\n\
  \                if (o1Ones == o2Ones) {\n                    return o1 - o2;\n\
  \                }\n                return o1Ones - o2Ones;\n            }\n   \
  \     });\n        return sorted;"
- "        // Your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            int count = 0;\n            int num = arr.get(i);\n           \
  \ while (num > 0) {\n                if (num % 2 == 1) {\n                    count++;\n\
  \                }\n                num /= 2;\n            }\n            if (count\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0)\
  \ {\n                zeros.add(arr.get(i));\n            } else {\n            \
  \    ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            int ones = 0;\n            while (num > 0) {\n                ones\
  \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
  \        }\n        Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int count = 0;\n            int num = arr.get(i);\n\
  \            while (num > 0) {\n                if (num % 2 == 1) {\n          \
  \          count++;\n                }\n                num /= 2;\n            }\n\
  \            sorted.add(count);\n        }\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            for (int j = i + 1; j < sorted.size(); j++) {\n          \
  \      if (sorted.get(i) > sorted.get(j)) {\n                    int temp = sorted.get(i);\n\
  \                    sorted.set(i, sorted.get(j));\n                    sorted.set(j,\
  \ temp);\n                    temp = arr.get(i);\n                    arr.set(i,\
  \ arr.get(j));\n                    arr.set(j, temp);\n                }\n     \
  \       }\n        }\n        return arr;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ oneCount = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int count = 0;\n            int num = arr.get(i);\n      \
  \      while (num > 0) {\n                if (num % 2 == 1) {\n                \
  \    count++;\n                }\n                num /= 2;\n            }\n   \
  \         oneCount.add(count);\n        }\n        ArrayList<Integer> sorted = new\
  \ ArrayList<Integer>(arr);\n        Collections.sort(sorted);\n        for (int\
  \ i = 0; i < sorted.size(); i++) {\n            int num = sorted.get(i);\n     \
  \       int index = arr.indexOf(num);\n            result.add(index, num);\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            int count = 0;\n            while (num > 0) {\n                if (num\
  \ % 2 == 1) {\n                    count++;\n                }\n               \
  \ num /= 2;\n            }\n            if (count == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < zeros.size(); i++) {\n            result.add(zeros.get(i));\n\
  \        }\n        for (int i = 0; i < ones.size(); i++) {\n            result.add(ones.get(i));\n\
  \        }\n        return result;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n\
  \                num /= 2;\n            }\n            sorted.add(ones);\n     \
  \   }\n        Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n\
  \                num /= 2;\n            }\n            sorted.add(ones);\n     \
  \   }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j\
  \ = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
  \ {\n                    int temp = sorted.get(i);\n                    sorted.set(i,\
  \ sorted.get(j));\n                    sorted.set(j, temp);\n                  \
  \  temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n           \
  \         arr.set(j, temp);\n                }\n            }\n        }\n     \
  \   return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (getOnes(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                return\
  \ getOnes(o1) - getOnes(o2);\n            }\n        });\n        sorted.addAll(zeros);\n\
  \        sorted.addAll(ones);\n        return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twos = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ threes = new ArrayList<Integer>();\n        ArrayList<Integer> fours = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fives = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixes = new ArrayList<Integer>();\n        ArrayList<Integer> sevens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> eights = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nines = new ArrayList<Integer>();\n        ArrayList<Integer> tens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> elevens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twelves = new ArrayList<Integer>();\n        ArrayList<Integer> thirteens = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> fourteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fifteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixteens = new ArrayList<Integer>();\n        ArrayList<Integer> seventeens =\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> eighteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> nineteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twenties = new ArrayList<Integer>();\n        ArrayList<Integer> thirtys = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> fourtys = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fiftys = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixtys = new ArrayList<Integer>();\n        ArrayList<Integer> seventys = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> eighty = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ninety = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ hundred = new ArrayList<Integer>"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                count += num & 1;\n\
  \                num >>= 1;\n            }\n            sorted.add(count);\n   \
  \     }\n        Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n  \
  \          int num = arr.get(i);\n            while (num > 0) {\n              \
  \  if (num % 2 == 1) {\n                    count++;\n                }\n      \
  \          num /= 2;\n            }\n            if (count == 0) {\n           \
  \     zeros.add(arr.get(i));\n            } else {\n                ones.add(arr.get(i));\n\
  \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
  \        for (int i = 0; i < zeros.size(); i++) {\n            result.add(zeros.get(i));\n\
  \        }\n        for (int i = 0; i < ones.size(); i++) {\n            result.add(ones.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n\
  \        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                String\
  \ aBin = Integer.toBinaryString(a);\n                String bBin = Integer.toBinaryString(b);\n\
  \                int aOnes = 0;\n                int bOnes = 0;\n              \
  \  for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
  \ == '1') {\n                        aOnes++;\n                    }\n         \
  \       }\n                for (int i = 0; i < bBin.length(); i++) {\n         \
  \           if (bBin.charAt(i) == '1') {\n                        bOnes++;\n   \
  \                 }\n                }\n                if (aOnes == bOnes) {\n\
  \                    return a - b;\n                }\n                return aOnes\
  \ - bOnes;\n            }\n        });\n        return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> ones = new ArrayList<Pair<Integer, Integer>>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int\
  \ count = 0;\n            while (num > 0) {\n                count += num % 2;\n\
  \                num /= 2;\n            }\n            ones.add(new Pair<Integer,\
  \ Integer>(count, arr.get(i)));\n        }\n        Collections.sort(ones, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> a, Pair<Integer, Integer> b) {\n                if (a.getValue0() ==\
  \ b.getValue0()) {\n                    return a.getValue1() - b.getValue1();\n\
  \                }\n                return a.getValue0() - b.getValue0();\n    \
  \        }\n        });\n        for (int i = 0; i < ones.size(); i++) {\n     \
  \       result.add(ones.get(i).getValue1());\n        }\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (onesInBinary(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones, new Comparator<Integer>() {\n            public\
  \ int compare(Integer a, Integer b) {\n                return onesInBinary(a) -\
  \ onesInBinary(b);\n            }\n        });\n        sorted.addAll(zeros);\n\
  \        sorted.addAll(ones);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        // sort the array\n        Collections.sort(arr, new Comparator<Integer>()\
  \ {\n            @Override\n            public int compare(Integer o1, Integer o2)\
  \ {\n                int o1Ones = Integer.bitCount(o1);\n                int o2Ones\
  \ = Integer.bitCount(o2);\n                if (o1Ones == o2Ones) {\n           \
  \         return o1 - o2;\n                }\n                return o1Ones - o2Ones;\n\
  \            }\n        });\n        return arr;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
  \        return result;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            int ones = 0;\n            while (num > 0) {\n                ones\
  \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
  \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            int num\
  \ = sorted.get(i);\n            int index = i;\n            for (int j = i; j <\
  \ sorted.size(); j++) {\n                if (sorted.get(j) < num) {\n          \
  \          num = sorted.get(j);\n                    index = j;\n              \
  \  }\n            }\n            sorted.set(index, sorted.get(i));\n           \
  \ sorted.set(i, num);\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 10000000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 10000000);\n        }\n    \
  \    return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        return arr;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            int num = arr.get(i);\n            if (num == 0) {\n          \
  \      zeros.add(num);\n            } else {\n                ones.add(num);\n \
  \           }\n        }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n\
  \        for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sorted = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted);\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            int num = sorted.get(i);\n\
  \            int ones = 0;\n            while (num > 0) {\n                if (num\
  \ % 2 == 1) {\n                    ones++;\n                }\n                num\
  \ /= 2;\n            }\n            result.add(ones);\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 10000000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 10000000);\n        }\n    \
  \    return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 100000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 100000);\n        }\n      \
  \  return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num == 0) {\n                zeros.add(num);\n            } else\
  \ {\n                ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<>();\n        ArrayList<Integer> ones = new ArrayList<>();\n\
  \        ArrayList<Integer> twos = new ArrayList<>();\n        ArrayList<Integer>\
  \ threes = new ArrayList<>();\n        ArrayList<Integer> fours = new ArrayList<>();\n\
  \        ArrayList<Integer> fives = new ArrayList<>();\n        ArrayList<Integer>\
  \ sixes = new ArrayList<>();\n        ArrayList<Integer> sevens = new ArrayList<>();\n\
  \        ArrayList<Integer> eights = new ArrayList<>();\n        ArrayList<Integer>\
  \ nines = new ArrayList<>();\n        ArrayList<Integer> tens = new ArrayList<>();\n\
  \        ArrayList<Integer> elevens = new ArrayList<>();\n        ArrayList<Integer>\
  \ twelves = new ArrayList<>();\n        ArrayList<Integer> thirteens = new ArrayList<>();\n\
  \        ArrayList<Integer> fourteens = new ArrayList<>();\n        ArrayList<Integer>\
  \ fifteens = new ArrayList<>();\n        ArrayList<Integer> sixteens = new ArrayList<>();\n\
  \        ArrayList<Integer> seventeens = new ArrayList<>();\n        ArrayList<Integer>\
  \ eighteens = new ArrayList<>();\n        ArrayList<Integer> ninteens = new ArrayList<>();\n\
  \        ArrayList<Integer> twenties = new ArrayList<>();\n        ArrayList<Integer>\
  \ thirties = new ArrayList<>();\n        ArrayList<Integer> fourties = new ArrayList<>();\n\
  \        ArrayList<Integer> fifties = new ArrayList<>();\n        ArrayList<Integer>\
  \ sixties = new ArrayList<>();\n        ArrayList<Integer> seventies = new ArrayList<>();\n\
  \        ArrayList<Integer> eighties = new ArrayList<>();\n        ArrayList<Integer>\
  \ ninties = new ArrayList<>();\n        ArrayList<Integer> hundreds = new ArrayList<>();\n\
  \        ArrayList<Integer> thousands = new ArrayList<>();\n        ArrayList<Integer>\
  \ tenThousands"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            list.add(Integer.bitCount(arr.get(i)));\n\
  \        }\n        Collections.sort(list);\n        return list;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 1)\
  \ {\n                    count++;\n                }\n                num /= 2;\n\
  \            }\n            sorted.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted2 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted.size();\
  \ j++) {\n                if (sorted.get(i) < sorted.get(j)) {\n               \
  \     count++;\n                }\n            }\n            sorted2.add(count);\n\
  \        }\n        ArrayList<Integer> sorted3 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted2.size(); i++) {\n            int count = 0;\n \
  \           for (int j = 0; j < sorted2.size(); j++) {\n                if (sorted2.get(i)\
  \ < sorted2.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted3.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted4 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted3.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted3.size();\
  \ j++) {\n                if (sorted3.get(i) < sorted3.get(j)) {\n             \
  \       count++;\n                }\n            }\n            sorted4.add(count);\n\
  \        }\n        ArrayList<Integer> sorted5 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted4.size(); i++) {\n            int count = 0;\n \
  \           for (int j = 0; j < sorted4.size(); j++) {\n                if (sorted4.get(i)\
  \ < sorted4.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted5.add(count"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            int ones = 0;\n            while (num > 0) {\n                ones\
  \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
  \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int\
  \ j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
  \ {\n                    int temp = sorted.get(i);\n                    sorted.set(i,\
  \ sorted.get(j));\n                    sorted.set(j, temp);\n                  \
  \  temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n           \
  \         arr.set(j, temp);\n                }\n            }\n        }\n     \
  \   return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n  \
  \          int num = arr.get(i);\n            while (num > 0) {\n              \
  \  if (num % 2 == 1) {\n                    count++;\n                }\n      \
  \          num /= 2;\n            }\n            sorted.add(count);\n        }\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = i +\
  \ 1; j < sorted.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
  \ {\n                    int temp = sorted.get(i);\n                    sorted.set(i,\
  \ sorted.get(j));\n                    sorted.set(j, temp);\n                  \
  \  temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n           \
  \         arr.set(j, temp);\n                }\n            }\n        }\n     \
  \   return arr;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            result.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            result.add(zeros.get(i));\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int index = 0;\n            for (int\
  \ j = 0; j < sorted.size(); j++) {\n                if (Integer.bitCount(arr.get(i))\
  \ < Integer.bitCount(sorted.get(j))) {\n                    index = j;\n       \
  \             break;\n                }\n                if (Integer.bitCount(arr.get(i))\
  \ == Integer.bitCount(sorted.get(j))) {\n                    if (arr.get(i) < sorted.get(j))\
  \ {\n                        index = j;\n                        break;\n      \
  \              }\n                }\n            }\n            sorted.add(index,\
  \ arr.get(i));\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        // your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n  \
  \      result.addAll(ones);\n        result.addAll(zeros);\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                count += num & 1;\n\
  \                num >>= 1;\n            }\n            sorted.add(count);\n   \
  \     }\n        Collections.sort(sorted);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            if (sorted.size() == 0) {\n                sorted.add(arr.get(i));\n\
  \            } else {\n                int index = 0;\n                while (index\
  \ < sorted.size()) {\n                    if (Integer.bitCount(sorted.get(index))\
  \ > ones) {\n                        break;\n                    } else if (Integer.bitCount(sorted.get(index))\
  \ == ones) {\n                        if (sorted.get(index) > arr.get(i)) {\n  \
  \                          break;\n                        }\n                 \
  \   }\n                    index++;\n                }\n                sorted.add(index,\
  \ arr.get(i));\n            }\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sortedOnes = new ArrayList<Integer>();\n        ArrayList<Integer> sortedZeros\
  \ = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (countOnes(arr.get(i)) == 0) {\n                sortedZeros.add(arr.get(i));\n\
  \            } else {\n                sortedOnes.add(arr.get(i));\n           \
  \ }\n        }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
  \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> ones = new ArrayList<Pair<Integer, Integer>>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num =\
  \ arr.get(i);\n            while (num > 0) {\n                count += num % 2;\n\
  \                num /= 2;\n            }\n            ones.add(new Pair<Integer,\
  \ Integer>(count, arr.get(i)));\n        }\n        Collections.sort(ones, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
  \ > o2.getValue0()) {\n                    return 1;\n                } else if\
  \ (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n        \
  \        } else {\n                    if (o1.getValue1() > o2.getValue1()) {\n\
  \                        return 1;\n                    } else if (o1.getValue1()\
  \ < o2.getValue1()) {\n                        return -1;\n                    }\
  \ else {\n                        return 0;\n                    }\n           \
  \     }\n            }\n        });\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            result.add(ones.get(i).getValue1());\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twos = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ threes = new ArrayList<Integer>();\n        ArrayList<Integer> fours = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fives = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixes = new ArrayList<Integer>();\n        ArrayList<Integer> sevens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> eights = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nines = new ArrayList<Integer>();\n        ArrayList<Integer> tens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> elevens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twelves = new ArrayList<Integer>();\n        ArrayList<Integer> thirteens = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> fourteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fifteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixteens = new ArrayList<Integer>();\n        ArrayList<Integer> seventeens =\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> eighteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> nineteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twenties = new ArrayList<Integer>();\n        ArrayList<Integer> twentyones =\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> twentytwos = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twentythrees = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twentyfours = new ArrayList<Integer>();\n        ArrayList<Integer> twentyfives\
  \ = new ArrayList<Integer>();\n        ArrayList<Integer> twentysixes = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twentysevens = new ArrayList<Integer>();\n        ArrayList<Integer>"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                int o1Ones\
  \ = Integer.bitCount(o1);\n                int o2Ones = Integer.bitCount(o2);\n\
  \                return o1Ones == o2Ones ? o1 - o2 : o1Ones - o2Ones;\n        \
  \    }\n        });\n        return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
  \ int ones = Integer.bitCount(num);\n            sorted.add(ones * 1000000 + num);\n\
  \        }\n        Collections.sort(sorted);\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            sorted.set(i, sorted.get(i) % 1000000);\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n  \
  \          int num = arr.get(i);\n            while (num > 0) {\n              \
  \  if (num % 2 == 1) {\n                    count++;\n                }\n      \
  \          num /= 2;\n            }\n            if (count == 0) {\n           \
  \     zeros.add(arr.get(i));\n            } else {\n                ones.add(arr.get(i));\n\
  \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
  \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n  \
  \          int num = arr.get(i);\n            while (num > 0) {\n              \
  \  if (num % 2 == 1) {\n                    count++;\n                }\n      \
  \          num /= 2;\n            }\n            if (count == 0) {\n           \
  \     zeros.add(arr.get(i));\n            } else {\n                ones.add(arr.get(i));\n\
  \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
  \        for (int i = 0; i < zeros.size(); i++) {\n            result.add(zeros.get(i));\n\
  \        }\n        for (int i = 0; i < ones.size(); i++) {\n            result.add(ones.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> twos = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ threes = new ArrayList<Integer>();\n        ArrayList<Integer> fours = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fives = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixes = new ArrayList<Integer>();\n        ArrayList<Integer> sevens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> eights = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nines = new ArrayList<Integer>();\n        ArrayList<Integer> tens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> elevens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twelves = new ArrayList<Integer>();\n        ArrayList<Integer> thirteens = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> fourteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fifteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixteens = new ArrayList<Integer>();\n        ArrayList<Integer> seventeens =\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> eighteens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> nineteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ twenties = new ArrayList<Integer>();\n        ArrayList<Integer> thirty = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> forty = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> fifty = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ sixty = new ArrayList<Integer>();\n        ArrayList<Integer> seventy = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> eighty = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ninety = new ArrayList<Integer>();\n        ArrayList<Integer> hundred = new ArrayList<Integer>();\n\
  \        ArrayList<"
- "        // Your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ oneCount = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int count = 0;\n            int num = arr.get(i);\n      \
  \      while (num > 0) {\n                if (num % 2 == 1) {\n                \
  \    count++;\n                }\n                num /= 2;\n            }\n   \
  \         oneCount.add(count);\n        }\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int min = Integer.MAX_VALUE;\n            int minIndex = -1;\n\
  \            for (int j = 0; j < arr.size(); j++) {\n                if (oneCount.get(j)\
  \ < min) {\n                    min = oneCount.get(j);\n                    minIndex\
  \ = j;\n                }\n            }\n            sorted.add(arr.get(minIndex));\n\
  \            oneCount.set(minIndex, Integer.MAX_VALUE);\n        }\n        return\
  \ sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n\
  \            int count = 0;\n            for (int j = 0; j < binary.length(); j++)\
  \ {\n                if (binary.charAt(j) == '1') {\n                    count++;\n\
  \                }\n            }\n            if (count == 0) {\n             \
  \   zeros.add(arr.get(i));\n            } else {\n                ones.add(arr.get(i));\n\
  \            }\n        }\n        Collections.sort(zeros);\n        Collections.sort(ones);\n\
  \        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones * 10000000 + arr.get(i));\n        }\n        Collections.sort(sorted);\n\
  \        for (int i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i)\
  \ % 10000000);\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(ones);\n\
  \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
  \        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int index = 0;\n            for (int j = 0;\
  \ j < sorted.size(); j++) {\n                if (Integer.bitCount(arr.get(i)) <\
  \ Integer.bitCount(sorted.get(j))) {\n                    index = j;\n         \
  \           break;\n                }\n                if (Integer.bitCount(arr.get(i))\
  \ == Integer.bitCount(sorted.get(j))) {\n                    if (arr.get(i) < sorted.get(j))\
  \ {\n                        index = j;\n                        break;\n      \
  \              }\n                }\n            }\n            sorted.add(index,\
  \ arr.get(i));\n        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < ones.size(); i++)\
  \ {\n            sorted.add(ones.get(i));\n        }\n        for (int i = 0; i\
  \ < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n        }\n   \
  \     return sorted;"
- "        return arr.stream().sorted(new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                int aOnes\
  \ = Integer.bitCount(a);\n                int bOnes = Integer.bitCount(b);\n   \
  \             if (aOnes == bOnes) {\n                    return a - b;\n       \
  \         }\n                return aOnes - bOnes;\n            }\n        }).collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num\
  \ = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 1)\
  \ {\n                    count++;\n                }\n                num /= 2;\n\
  \            }\n            sorted.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted2 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted.size();\
  \ j++) {\n                if (sorted.get(i) == sorted.get(j)) {\n              \
  \      count++;\n                }\n            }\n            sorted2.add(count);\n\
  \        }\n        ArrayList<Integer> sorted3 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted.size(); i++) {\n            int count = 0;\n  \
  \          for (int j = 0; j < sorted.size(); j++) {\n                if (sorted.get(i)\
  \ == sorted.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted3.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted4 = new ArrayList<Integer>();\n        for (int i = 0; i < sorted.size();\
  \ i++) {\n            int count = 0;\n            for (int j = 0; j < sorted.size();\
  \ j++) {\n                if (sorted.get(i) == sorted.get(j)) {\n              \
  \      count++;\n                }\n            }\n            sorted4.add(count);\n\
  \        }\n        ArrayList<Integer> sorted5 = new ArrayList<Integer>();\n   \
  \     for (int i = 0; i < sorted.size(); i++) {\n            int count = 0;\n  \
  \          for (int j = 0; j < sorted.size(); j++) {\n                if (sorted.get(i)\
  \ == sorted.get(j)) {\n                    count++;\n                }\n       \
  \     }\n            sorted5.add(count);\n        }\n        ArrayList<Integer>\
  \ sorted"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
  \        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n     \
  \       @Override\n            public int compare(Integer a, Integer b) {\n    \
  \            int aOnes = Integer.bitCount(a);\n                int bOnes = Integer.bitCount(b);\n\
  \                if (aOnes == bOnes) {\n                    return a - b;\n    \
  \            }\n                return aOnes - bOnes;\n            }\n        });\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- "        // your code here\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (arr.get(i) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n  \
  \      for (int i = 0; i < ones.size(); i++) {\n            sorted.add(ones.get(i));\n\
  \        }\n        for (int i = 0; i < zeros.size(); i++) {\n            sorted.add(zeros.get(i));\n\
  \        }\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        return arr.stream().sorted(\n            (a, b) -> {\n                int\
  \ aOnes = Integer.bitCount(a);\n                int bOnes = Integer.bitCount(b);\n\
  \                return aOnes == bOnes ? a - b : aOnes - bOnes;\n            }\n\
  \        ).collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (Integer.bitCount(arr.get(i)) == 0) {\n                zeros.add(arr.get(i));\n\
  \            } else {\n                ones.add(arr.get(i));\n            }\n  \
  \      }\n        Collections.sort(ones);\n        Collections.sort(zeros);\n  \
  \      result.addAll(ones);\n        result.addAll(zeros);\n        return result;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
  \            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n \
  \       return sorted;"
- '        return arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Integer::compareTo)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        // your code here\n        return arr;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n\
  \        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                int o1Ones\
  \ = Integer.bitCount(o1);\n                int o2Ones = Integer.bitCount(o2);\n\
  \                if (o1Ones == o2Ones) {\n                    return o1 - o2;\n\
  \                }\n                return o1Ones - o2Ones;\n            }\n   \
  \     });\n        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ zeros = new ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        for (int i = 0; i < zeros.size(); i++)\
  \ {\n            sorted.add(zeros.get(i));\n        }\n        for (int i = 0; i\
  \ < ones.size(); i++) {\n            sorted.add(ones.get(i));\n        }\n     \
  \   return sorted;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (Integer.bitCount(arr.get(i))\
  \ == 0) {\n                zeros.add(arr.get(i));\n            } else {\n      \
  \          ones.add(arr.get(i));\n            }\n        }\n        Collections.sort(zeros);\n\
  \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
  \        return sorted;"
- "        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            pairs.add(new Pair<>(arr.get(i),\
  \ Integer.bitCount(arr.get(i))));\n        }\n        Collections.sort(pairs, new\
  \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
  \ int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n        \
  \        if (o1.getValue1() == o2.getValue1()) {\n                    return o1.getValue0().compareTo(o2.getValue0());\n\
  \                }\n                return o1.getValue1().compareTo(o2.getValue1());\n\
  \            }\n        });\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        for (int i = 0; i < pairs.size(); i++) {\n            result.add(pairs.get(i).getValue0());\n\
  \        }\n        return result;"
language: java
name: HumanEval_116_sort_array
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // In this Kata, you have to sort an array of non-negative\
  \ integers according to\n    // number of ones in their binary representation in\
  \ ascending order.\n    // For similar number of ones, sort based on decimal value.\n\
  \    // It must be implemented like this:\n    public static ArrayList<Integer>\
  \ sortArray(ArrayList<Integer> arr) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
  \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3, (int)-4,\
  \ (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-2,\
  \ (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
  \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
  \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
