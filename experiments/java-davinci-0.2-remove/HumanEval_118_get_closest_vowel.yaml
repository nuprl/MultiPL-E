completions:
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        int index = word.length() - 1;\n     \
  \   while (index >= 0) {\n            if (isVowel(word.charAt(index))) {\n     \
  \           if (index == word.length() - 1) {\n                    return \"\";\n\
  \                }\n                if (isConsonant(word.charAt(index + 1))) {\n\
  \                    return word.substring(index, index + 1);\n                }\n\
  \            }\n            index--;\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
  \ i + 1))) {\n                sb.append(word.substring(i, i + 1));\n           \
  \ } else {\n                if (sb.length() > 0) {\n                    return sb.reverse().toString();\n\
  \                }\n            }\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        String result = \"\";\n        int min = Integer.MAX_VALUE;\n       \
  \ for (int i = word.length() - 1; i >= 0; i--) {\n            if (consonants.contains(word.substring(i,\
  \ i + 1))) {\n                for (int j = i + 1; j < word.length(); j++) {\n  \
  \                  if (vowels.contains(word.substring(j, j + 1))) {\n          \
  \              if (j - i < min) {\n                            min = j - i;\n  \
  \                          result = word.substring(j, j + 1);\n                \
  \        }\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int index = word.length() - 1;\n  \
  \      while (index >= 0) {\n            char c = word.charAt(index);\n        \
  \    if (vowels.indexOf(c) >= 0) {\n                if (index == word.length() -\
  \ 1) {\n                    return \"\";\n                }\n                if\
  \ (vowels.indexOf(word.charAt(index + 1)) < 0) {\n                    return \"\"\
  \ + c;\n                }\n            }\n            index--;\n        }\n    \
  \    return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        // You may assume that the given string\
  \ contains English letter only.\n        // Example:\n        // Input: \"babab\"\
  \n        // Output: \"a\"\n        // Input: \"bababab\"\n        // Output: \"\
  a\"\n        // Input: \"babababa\"\n        // Output: \"a\"\n        // Input:\
  \ \"babababab\"\n        // Output: \"a\"\n        // Input: \"bababababa\"\n  \
  \      // Output: \"a\"\n        // Input: \"bababababab\"\n        // Output: \"\
  a\"\n        // Input: \"babababababa\"\n        // Output: \"a\"\n        // Input:\
  \ \"babababababab\"\n        // Output: \"a\"\n        // Input: \"bababababababa\"\
  \n        // Output: \"a\"\n        // Input: \"bababababababab\"\n        // Output:\
  \ \"a\"\n        // Input: \"babababababababa\"\n        // Output: \"a\"\n    \
  \    // Input: \"babababababababab\"\n        // Output: \"a\"\n        // Input:\
  \ \"bababababababababa\"\n        // Output: \"a\"\n        // Input: \"bababababababababab\"\
  \n        // Output: \"a\"\n        // Input: \"babababababababababa\"\n       \
  \ // Output: \"a\"\n        // Input: \"babababababababababab\"\n        // Output:\
  \ \"a\"\n        // Input: \"bababababababababababa\"\n        // Output: \"a\"\n\
  \        // Input: \"bababababababababababab\"\n        // Output: \"a\"\n     \
  \   // Input: \"babababababababababababa\"\n        // Output: \"a\"\n        //\
  \ Input: \"babababababababababababab\"\n        // Output: \"a\"\n        // Input:\
  \ \"bababababababababababababa\"\n        // Output:"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int closestVowelIndex = -1;\n     \
  \   for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
  \ i + 1))) {\n                closestVowelIndex = i;\n                break;\n \
  \           }\n        }\n        if (closestVowelIndex == -1) {\n            return\
  \ \"\";\n        }\n        for (int i = closestVowelIndex - 1; i >= 0; i--) {\n\
  \            if (!vowels.contains(word.substring(i, i + 1))) {\n               \
  \ return word.substring(closestVowelIndex, closestVowelIndex + 1);\n           \
  \ }\n        }\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return null;"
- "        int len = word.length();\n        if (len < 3) return \"\";\n        int\
  \ i = len - 1;\n        while (i >= 0 && !isVowel(word.charAt(i))) i--;\n      \
  \  if (i < 2) return \"\";\n        int j = i - 1;\n        while (j >= 0 && isVowel(word.charAt(j)))\
  \ j--;\n        if (j < 1) return \"\";\n        return word.substring(i, i + 1);"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // TODO: Implement this method\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (vowels.contains(word.substring(i, i + 1))) {\n            \
  \    int j = i - 1;\n                while (j >= 0 && !vowels.contains(word.substring(j,\
  \ j + 1))) {\n                    j--;\n                }\n                if (j\
  \ >= 0) {\n                    int k = i + 1;\n                    while (k < word.length()\
  \ && !vowels.contains(word.substring(k, k + 1))) {\n                        k++;\n\
  \                    }\n                    if (k < word.length()) {\n         \
  \               if (min > k - j) {\n                            min = k - j;\n \
  \                           result = word.substring(i, i + 1);\n               \
  \         }\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        String\
  \ result = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        for (int\
  \ i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i))\
  \ != -1) {\n                int distance = word.length() - i;\n                if\
  \ (distance < minDistance) {\n                    minDistance = distance;\n    \
  \                result = word.charAt(i) + \"\";\n                }\n          \
  \  }\n        }\n        return result;"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (vowels.contains(word.substring(i, i + 1))) {\n            \
  \    int j = i - 1;\n                while (j >= 0 && !vowels.contains(word.substring(j,\
  \ j + 1))) {\n                    j--;\n                }\n                if (j\
  \ >= 0) {\n                    int k = i + 1;\n                    while (k < word.length()\
  \ && !vowels.contains(word.substring(k, k + 1))) {\n                        k++;\n\
  \                    }\n                    if (k < word.length()) {\n         \
  \               if (k - j < min) {\n                            min = k - j;\n \
  \                           result = word.substring(i, i + 1);\n               \
  \         }\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        int closestVowelIndex = -1;\n        int closestVowelDistance = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
  \            if (vowels.indexOf(c) != -1) {\n                int distance = 0;\n\
  \                for (int j = i + 1; j < word.length(); j++) {\n               \
  \     char c2 = word.charAt(j);\n                    if (consonants.indexOf(c2)\
  \ != -1) {\n                        distance = j - i;\n                        break;\n\
  \                    }\n                }\n                if (distance < closestVowelDistance)\
  \ {\n                    closestVowelDistance = distance;\n                    closestVowelIndex\
  \ = i;\n                }\n            }\n        }\n        if (closestVowelIndex\
  \ == -1) {\n            return \"\";\n        }\n        return word.substring(closestVowelIndex,\
  \ closestVowelIndex + 1);"
- "        // Write your code here\n        return \"\";"
- "        // return \"\";\n        // return \"e\";\n        // return \"u\";\n \
  \       // return \"a\";\n        // return \"\";\n        // return \"\";\n   \
  \     // return \"\";\n        // return \"\";\n        // return \"\";\n      \
  \  // return \"\";\n        // return \"\";\n        // return \"\";\n        //\
  \ return \"\";\n        // return \"\";\n        // return \"\";\n        // return\
  \ \"\";\n        // return \"\";\n        // return \"\";\n        // return \"\"\
  ;\n        // return \"\";\n        // return \"\";\n        // return \"\";\n \
  \       // return \"\";\n        // return \"\";\n        // return \"\";\n    \
  \    // return \"\";\n        // return \"\";\n        // return \"\";\n       \
  \ // return \"\";\n        // return \"\";\n        // return \"\";\n        //\
  \ return \"\";\n        // return \"\";\n        // return \"\";\n        // return\
  \ \"\";\n        // return \"\";\n        // return \"\";\n        // return \"\"\
  ;\n        // return \"\";\n        // return \"\";\n        // return \"\";\n \
  \       // return \"\";\n        // return \"\";\n        // return \"\";\n    \
  \    // return \"\";\n        // return \"\";\n        // return \"\";\n       \
  \ // return \"\";\n        // return \"\";\n        // return \"\";\n        //\
  \ return \"\";\n        // return \"\";\n        // return \"\";\n        // return\
  \ \"\";\n        // return \"\";\n        // return \"\";\n        // return \"\"\
  ;\n        // return \"\";\n        // return \"\";\n        // return \"\";\n \
  \       // return \"\";\n        // return \"\";\n        // return \"\";\n    \
  \    // return \"\";\n        // return \"\";\n        // return \"\";\n       \
  \ // return \"\";\n        // return \"\";\n        // return \"\";\n        //\
  \ return \"\";\n        // return \"\";\n        // return \"\";\n        // return\
  \ \"\";\n        // return \"\";\n        // return \"\";\n        // return \"\"\
  ;\n        // return \"\";\n        // return \"\";\n        // return \"\";\n \
  \       // return \"\";\n        // return \"\";\n        // return \"\";\n    \
  \    // return \"\";\n        // return \"\";\n        // return \""
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        // return \"\";\n        int i = word.length()\
  \ - 1;\n        while (i >= 0) {\n            if (isVowel(word.charAt(i))) {\n \
  \               if (i == word.length() - 1) {\n                    return \"\";\n\
  \                } else if (i == 0) {\n                    return \"\";\n      \
  \          } else if (isConsonant(word.charAt(i + 1)) && isConsonant(word.charAt(i\
  \ - 1))) {\n                    return Character.toString(word.charAt(i));\n   \
  \             }\n            }\n            i--;\n        }\n        return \"\"\
  ;"
- "        // Write your code here\n        return null;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int closest = word.length();\n    \
  \    String result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n\
  \            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (i\
  \ > 0 && i < word.length() - 1) {\n                    if (vowels.indexOf(word.charAt(i\
  \ - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                 \
  \       if (closest > i) {\n                            closest = i;\n         \
  \                   result = word.charAt(i) + \"\";\n                        }\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            if (vowels.indexOf(word.charAt(i)) >= 0) {\n                int\
  \ distance = 0;\n                for (int j = i + 1; j < word.length(); j++) {\n\
  \                    if (vowels.indexOf(word.charAt(j)) >= 0) {\n              \
  \          break;\n                    }\n                    distance++;\n    \
  \            }\n                if (distance < minDistance) {\n                \
  \    minDistance = distance;\n                    result = word.substring(i, i +\
  \ 1);\n                }\n            }\n        }\n        return result;"
- "        // write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        int n = word.length();\n        int i = n - 1;\n        while (i >= 0)\
  \ {\n            char c = word.charAt(i);\n            if (isVowel(c)) {\n     \
  \           if (i == n - 1) {\n                    return \"\";\n              \
  \  }\n                if (i == 0) {\n                    return \"\";\n        \
  \        }\n                if (isConsonant(word.charAt(i - 1)) && isConsonant(word.charAt(i\
  \ + 1))) {\n                    return String.valueOf(c);\n                }\n \
  \           }\n            i--;\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int n = word.length();\n        int i = n - 1;\n        while (i >= 0)\
  \ {\n            char c = word.charAt(i);\n            if (isVowel(c)) {\n     \
  \           int j = i - 1;\n                while (j >= 0) {\n                 \
  \   char d = word.charAt(j);\n                    if (!isVowel(d)) {\n         \
  \               return Character.toString(c);\n                    }\n         \
  \           j--;\n                }\n            }\n            i--;\n        }\n\
  \        return \"\";"
- "        String vowels = \"aeiou\";\n        int pos = word.length() - 1;\n    \
  \    while (pos >= 0) {\n            if (vowels.indexOf(word.charAt(pos)) >= 0)\
  \ {\n                return word.substring(pos, pos + 1);\n            }\n     \
  \       pos--;\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int idx = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (isVowel(word.charAt(i))) {\n                idx = i;\n        \
  \        break;\n            }\n        }\n        if (idx == -1) {\n          \
  \  return \"\";\n        }\n        for (int i = idx - 1; i >= 0; i--) {\n     \
  \       if (!isVowel(word.charAt(i))) {\n                return word.substring(i\
  \ + 1, idx + 1);\n            }\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (vowels.contains(word.substring(i, i + 1))) {\n            \
  \    int j = i - 1;\n                while (j >= 0 && !vowels.contains(word.substring(j,\
  \ j + 1))) {\n                    j--;\n                }\n                if (j\
  \ >= 0) {\n                    int k = i + 1;\n                    while (k < word.length()\
  \ && !vowels.contains(word.substring(k, k + 1))) {\n                        k++;\n\
  \                    }\n                    if (k < word.length()) {\n         \
  \               if (min > k - j) {\n                            min = k - j;\n \
  \                           result = word.substring(i, i + 1);\n               \
  \         }\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // 1. Find the last consonant\n        // 2. Find the closest vowel to\
  \ the right of the last consonant\n        // 3. If there is no vowel to the right\
  \ of the last consonant, return empty string\n        // 4. If there is no consonant\
  \ to the right of the last consonant, return empty string\n        // 5. If there\
  \ is no consonant to the left of the last consonant, return empty string\n     \
  \   // 6. If there is no vowel to the left of the last consonant, return empty string\n\
  \        // 7. If there is no consonant to the left of the last consonant, return\
  \ empty string\n        // 8. If there is no consonant to the right of the last\
  \ consonant, return empty string\n        // 9. If there is no vowel to the right\
  \ of the last consonant, return empty string\n        // 10. If there is no consonant\
  \ to the right of the last consonant, return empty string\n        // 11. If there\
  \ is no consonant to the left of the last consonant, return empty string\n     \
  \   // 12. If there is no vowel to the left of the last consonant, return empty\
  \ string\n        // 13. If there is no consonant to the left of the last consonant,\
  \ return empty string\n        // 14. If there is no consonant to the right of the\
  \ last consonant, return empty string\n        // 15. If there is no vowel to the\
  \ right of the last consonant, return empty string\n        // 16. If there is no\
  \ consonant to the right of the last consonant, return empty string\n        //\
  \ 17. If there is no consonant to the left of the last consonant, return empty string\n\
  \        // 18. If there is no vowel to the left of the last consonant, return empty\
  \ string\n        // 19. If there is no consonant to the left of the last consonant,\
  \ return empty string\n        // 20. If there is no consonant to the right of the\
  \ last consonant, return empty string\n        // 21. If there is no vowel to the\
  \ right of the last consonant, return empty string\n        // 22. If there is no\
  \ consonant to the right of the last consonant, return empty string\n        //\
  \ 23. If there is no consonant to the left of the last consonant, return empty string\n\
  \        // 24. If there is no"
- "        if (word.length() == 0) {\n            return \"\";\n        }\n      \
  \  int index = word.length() - 1;\n        while (index >= 0) {\n            char\
  \ c = word.charAt(index);\n            if (isVowel(c)) {\n                return\
  \ String.valueOf(c);\n            }\n            index--;\n        }\n        return\
  \ \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int\
  \ distance = 0;\n                for (int j = i + 1; j < word.length(); j++) {\n\
  \                    if (vowels.indexOf(word.charAt(j)) != -1) {\n             \
  \           break;\n                    }\n                    distance++;\n   \
  \             }\n                if (distance < minDistance) {\n               \
  \     minDistance = distance;\n                    result = word.substring(i, i\
  \ + 1);\n                }\n            }\n        }\n        return result;"
- "        if (word.length() < 3) return \"\";\n        int index = word.length()\
  \ - 2;\n        while (index >= 0) {\n            char c = word.charAt(index);\n\
  \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
  \               if (word.charAt(index + 1) != 'a' && word.charAt(index + 1) != 'e'\
  \ && word.charAt(index + 1) != 'i' && word.charAt(index + 1) != 'o' && word.charAt(index\
  \ + 1) != 'u') {\n                    return String.valueOf(c);\n              \
  \  }\n            }\n            index--;\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++) {\n\
  \            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int j\
  \ = i + 1;\n                while (j < word.length() && vowels.indexOf(word.charAt(j))\
  \ != -1) {\n                    j++;\n                }\n                if (j <\
  \ word.length()) {\n                    int k = j + 1;\n                    while\
  \ (k < word.length() && vowels.indexOf(word.charAt(k)) != -1) {\n              \
  \          k++;\n                    }\n                    if (k < word.length())\
  \ {\n                        int distance = k - i;\n                        if (distance\
  \ < min) {\n                            min = distance;\n                      \
  \      result = word.substring(i, i + 1);\n                        }\n         \
  \           }\n                }\n            }\n        }\n        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        String result = \"\";\n        int min = Integer.MAX_VALUE;\n       \
  \ for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
  \            if (vowels.indexOf(c) != -1) {\n                int j = i - 1;\n  \
  \              while (j >= 0 && consonants.indexOf(word.charAt(j)) != -1) {\n  \
  \                  j--;\n                }\n                if (j == -1) {\n   \
  \                 j = word.length() - 1;\n                    while (j > i && consonants.indexOf(word.charAt(j))\
  \ != -1) {\n                        j--;\n                    }\n              \
  \      if (j == i) {\n                        continue;\n                    }\n\
  \                }\n                if (i - j < min) {\n                    min\
  \ = i - j;\n                    result = \"\" + c;\n                }\n        \
  \    }\n        }\n        return result;"
- '        return "";'
- "        int len = word.length();\n        for (int i = len - 1; i >= 0; i--) {\n\
  \            char c = word.charAt(i);\n            if (isVowel(c)) {\n         \
  \       int j = i - 1;\n                while (j >= 0 && isVowel(word.charAt(j)))\
  \ {\n                    j--;\n                }\n                if (j >= 0) {\n\
  \                    return word.substring(i, i + 1);\n                }\n     \
  \       }\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        int\
  \ index = -1;\n        int min = Integer.MAX_VALUE;\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n\
  \                if (i == word.length() - 1) {\n                    continue;\n\
  \                }\n                if (vowels.indexOf(word.charAt(i + 1)) != -1)\
  \ {\n                    continue;\n                }\n                int j = i\
  \ - 1;\n                while (j >= 0 && vowels.indexOf(word.charAt(j)) != -1) {\n\
  \                    j--;\n                }\n                if (j < 0) {\n   \
  \                 continue;\n                }\n                if (min > i - j)\
  \ {\n                    min = i - j;\n                    index = i;\n        \
  \        }\n            }\n        }\n        if (index == -1) {\n            return\
  \ \"\";\n        }\n        return word.substring(index, index + 1);"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int index = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (isVowel(word.charAt(i))) {\n                index = i;\n      \
  \          break;\n            }\n        }\n        if (index == -1) {\n      \
  \      return \"\";\n        }\n        for (int i = index - 1; i >= 0; i--) {\n\
  \            if (!isVowel(word.charAt(i))) {\n                return word.substring(index,\
  \ index + 1);\n            }\n        }\n        return \"\";"
- "        // Write your code here\n        // return \"\";\n        // System.out.println(word);\n\
  \        int i = word.length() - 1;\n        for (; i >= 0; i--) {\n           \
  \ if (isVowel(word.charAt(i))) {\n                if (i == word.length() - 1) {\n\
  \                    continue;\n                }\n                if (isConsonant(word.charAt(i\
  \ + 1))) {\n                    return String.valueOf(word.charAt(i));\n       \
  \         }\n            }\n        }\n        return \"\";"
- "        // Write your code here\n        // if the word is empty, return empty\
  \ string\n        if (word.length() == 0) {\n            return \"\";\n        }\n\
  \        // if the word is a single letter, return empty string\n        if (word.length()\
  \ == 1) {\n            return \"\";\n        }\n        // if the word is two letters,\
  \ return empty string\n        if (word.length() == 2) {\n            return \"\"\
  ;\n        }\n        // if the word is three letters, return empty string\n   \
  \     if (word.length() == 3) {\n            return \"\";\n        }\n        //\
  \ if the word is four letters, return empty string\n        if (word.length() ==\
  \ 4) {\n            return \"\";\n        }\n        // if the word is five letters,\
  \ return empty string\n        if (word.length() == 5) {\n            return \"\"\
  ;\n        }\n        // if the word is six letters, return empty string\n     \
  \   if (word.length() == 6) {\n            return \"\";\n        }\n        // if\
  \ the word is seven letters, return empty string\n        if (word.length() == 7)\
  \ {\n            return \"\";\n        }\n        // if the word is eight letters,\
  \ return empty string\n        if (word.length() == 8) {\n            return \"\"\
  ;\n        }\n        // if the word is nine letters, return empty string\n    \
  \    if (word.length() == 9) {\n            return \"\";\n        }\n        //\
  \ if the word is ten letters, return empty string\n        if (word.length() ==\
  \ 10) {\n            return \"\";\n        }\n        // if the word is eleven letters,\
  \ return empty string\n        if (word.length() == 11) {\n            return \"\
  \";\n        }\n        // if the word is twelve letters, return empty string\n\
  \        if (word.length() == 12) {\n            return \"\";\n        }\n     \
  \   // if the word is thirteen letters, return empty string\n        if (word.length()\
  \ == 13) {\n            return \"\";\n        }\n        // if the word is fourteen\
  \ letters, return empty string\n        if (word.length() == 14) {\n           \
  \ return \"\";\n        }\n        // if the word is fifteen letters,"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int closestVowelIndex = -1;\n     \
  \   int closestVowelDistance = Integer.MAX_VALUE;\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c)\
  \ != -1) {\n                int distance = word.length() - i;\n                if\
  \ (distance < closestVowelDistance) {\n                    closestVowelDistance\
  \ = distance;\n                    closestVowelIndex = i;\n                }\n \
  \           }\n        }\n        if (closestVowelIndex == -1) {\n            return\
  \ \"\";\n        }\n        return word.substring(closestVowelIndex, closestVowelIndex\
  \ + 1);"
- "        String vowels = \"aeiou\";\n        int index = word.length() - 1;\n  \
  \      while (index >= 0) {\n            if (vowels.contains(word.substring(index,\
  \ index + 1))) {\n                if (index == 0) {\n                    return\
  \ \"\";\n                }\n                if (index == word.length() - 1) {\n\
  \                    return \"\";\n                }\n                if (!vowels.contains(word.substring(index\
  \ - 1, index)) && !vowels.contains(word.substring(index + 1, index + 2))) {\n  \
  \                  return word.substring(index, index + 1);\n                }\n\
  \            }\n            index--;\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        // return \"\";\n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        // \n        // \n        // \n       \
  \ // \n        // \n        // \n        //"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int index = word.length() - 1;\n        while (index >= 0) {\n        \
  \    if (isVowel(word.charAt(index))) {\n                if (index == word.length()\
  \ - 1) {\n                    return \"\";\n                } else if (index ==\
  \ 0) {\n                    return \"\";\n                } else if (isConsonant(word.charAt(index\
  \ - 1)) && isConsonant(word.charAt(index + 1))) {\n                    return word.substring(index,\
  \ index + 1);\n                }\n            }\n            index--;\n        }\n\
  \        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        String\
  \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String result = \"\";\n     \
  \   int min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0;\
  \ i--) {\n            if (consonants.contains(word.substring(i, i + 1))) {\n   \
  \             for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.contains(word.substring(j,\
  \ j + 1))) {\n                        if (i - j < min) {\n                     \
  \       min = i - j;\n                            result = word.substring(j, j +\
  \ 1);\n                        }\n                    }\n                }\n   \
  \         }\n        }\n        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        String\
  \ result = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i))\
  \ != -1) {\n                int distance = word.length() - i;\n                if\
  \ (distance < minDistance) {\n                    minDistance = distance;\n    \
  \                result = word.substring(i, i + 1);\n                }\n       \
  \     }\n        }\n        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1))) {\n    \
  \            if (i == word.length() - 1) {\n                    return \"\";\n \
  \               }\n                if (i == 0) {\n                    return \"\"\
  ;\n                }\n                if (!vowels.contains(word.substring(i - 1,\
  \ i)) && !vowels.contains(word.substring(i + 1, i + 2))) {\n                   \
  \ return word.substring(i, i + 1);\n                }\n            }\n        }\n\
  \        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // find the closest vowel that stands between two consonants from the right\
  \ side of the word\n        // case sensitive\n        // vowels in the beginning\
  \ and ending doesn't count\n        // return empty string if you didn't find any\
  \ vowel met the above condition\n        // you may assume that the given string\
  \ contains English letter only\n        // Example:\n        // \"abcd\" -> \"a\"\
  \n        // \"abcdc\" -> \"c\"\n        // \"abcdcba\" -> \"c\"\n        // \"\
  abcdcbac\" -> \"c\"\n        // \"abcdcbacd\" -> \"a\"\n        // \"abcdcbacde\"\
  \ -> \"e\"\n        // \"abcdcbacdea\" -> \"e\"\n        // \"abcdcbacdeab\" ->\
  \ \"a\"\n        // \"abcdcbacdeabc\" -> \"a\"\n        // \"abcdcbacdeabcd\" ->\
  \ \"\"\n        // \"abcdcbacdeabcde\" -> \"\"\n        // \"abcdcbacdeabcdea\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeab\" -> \"\"\n        // \"abcdcbacdeabcdeabc\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcd\" -> \"\"\n        // \"abcdcbacdeabcdeabcde\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdea\" -> \"\"\n        // \"abcdcbacdeabcdeabcdeab\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdeabc\" -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcd\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcde\" -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdea\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdeab\" -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdeabc\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdeabcd\" -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdeabcde\"\
  \ -> \"\"\n        // \"abcdcbacdeabcdeabcdeabcdeabcdea\" -> \"\"\n        // \"\
  abcd"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int index = word.length() - 1;\n        while (index >= 0) {\n        \
  \    char c = word.charAt(index);\n            if (isVowel(c)) {\n             \
  \   return Character.toString(c);\n            }\n            index--;\n       \
  \ }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
  \ i + 1))) {\n                sb.append(word.substring(i, i + 1));\n           \
  \ } else {\n                if (sb.length() > 0) {\n                    return sb.reverse().toString();\n\
  \                }\n            }\n        }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) !=\
  \ -1) {\n                int distance = 0;\n                for (int j = i + 1;\
  \ j < word.length(); j++) {\n                    char c2 = word.charAt(j);\n   \
  \                 if (vowels.indexOf(c2) == -1) {\n                        distance++;\n\
  \                    } else {\n                        break;\n                \
  \    }\n                }\n                if (distance < minDistance) {\n     \
  \               minDistance = distance;\n                    result = \"\" + c;\n\
  \                }\n            }\n        }\n        return result;"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int\
  \ distance = 0;\n                int j = i;\n                while (j < word.length()\
  \ && vowels.indexOf(word.charAt(j)) != -1) {\n                    j++;\n       \
  \         }\n                if (j < word.length()) {\n                    distance\
  \ = j - i;\n                }\n                if (distance < minDistance) {\n \
  \                   minDistance = distance;\n                    result = word.substring(i,\
  \ i + 1);\n                }\n            }\n        }\n        return result;"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ index = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n        \
  \    if (vowels.contains(word.substring(i, i + 1))) {\n                if (index\
  \ == -1) {\n                    index = i;\n                } else {\n         \
  \           if (i + 1 == index) {\n                        return word.substring(i,\
  \ i + 1);\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // TODO: Implement your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        int index = word.length() - 1;\n        while (index >= 0) {\n        \
  \    if (isVowel(word.charAt(index))) {\n                if (index == word.length()\
  \ - 1) {\n                    return \"\";\n                }\n                if\
  \ (isConsonant(word.charAt(index + 1))) {\n                    return String.valueOf(word.charAt(index));\n\
  \                }\n            }\n            index--;\n        }\n        return\
  \ \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int len = word.length();\n        for\
  \ (int i = len - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n     \
  \       if (vowels.indexOf(c) != -1) {\n                if (i == len - 1) {\n  \
  \                  return \"\";\n                }\n                if (vowels.indexOf(word.charAt(i\
  \ + 1)) == -1) {\n                    return \"\" + c;\n                }\n    \
  \        }\n        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (vowels.contains(word.substring(i, i + 1))) {\n            \
  \    int j = i - 1;\n                while (j >= 0 && !vowels.contains(word.substring(j,\
  \ j + 1))) {\n                    j--;\n                }\n                if (j\
  \ >= 0) {\n                    int k = i + 1;\n                    while (k < word.length()\
  \ && !vowels.contains(word.substring(k, k + 1))) {\n                        k++;\n\
  \                    }\n                    if (k < word.length()) {\n         \
  \               if (k - j < min) {\n                            min = k - j;\n \
  \                           result = word.substring(i, i + 1);\n               \
  \         }\n                    }\n                }\n            }\n        }\n\
  \        return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        String\
  \ result = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        for (int\
  \ i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i))\
  \ != -1) {\n                int distance = 0;\n                for (int j = i +\
  \ 1; j < word.length(); j++) {\n                    if (vowels.indexOf(word.charAt(j))\
  \ != -1) {\n                        break;\n                    }\n            \
  \        distance++;\n                }\n                if (distance < minDistance)\
  \ {\n                    minDistance = distance;\n                    result = word.substring(i,\
  \ i + 1);\n                }\n            }\n        }\n        return result;"
- "        // \"a\" => \"a\"\n        // \"b\" => \"\"\n        // \"c\" => \"\"\n\
  \        // \"d\" => \"\"\n        // \"e\" => \"e\"\n        // \"f\" => \"\"\n\
  \        // \"g\" => \"\"\n        // \"h\" => \"\"\n        // \"i\" => \"i\"\n\
  \        // \"j\" => \"\"\n        // \"k\" => \"\"\n        // \"l\" => \"\"\n\
  \        // \"m\" => \"\"\n        // \"n\" => \"\"\n        // \"o\" => \"o\"\n\
  \        // \"p\" => \"\"\n        // \"q\" => \"\"\n        // \"r\" => \"\"\n\
  \        // \"s\" => \"\"\n        // \"t\" => \"\"\n        // \"u\" => \"u\"\n\
  \        // \"v\" => \"\"\n        // \"w\" => \"\"\n        // \"x\" => \"\"\n\
  \        // \"y\" => \"\"\n        // \"z\" => \"\"\n        // \"ab\" => \"a\"\n\
  \        // \"ba\" => \"a\"\n        // \"bc\" => \"\"\n        // \"cb\" => \"\"\
  \n        // \"cd\" => \"\"\n        // \"dc\" => \"\"\n        // \"de\" => \"\
  e\"\n        // \"ed\" => \"e\"\n        // \"ef\" => \"\"\n        // \"fe\" =>\
  \ \"\"\n        // \"fg\" => \"\"\n        // \"gf\" => \"\"\n        // \"gh\"\
  \ => \"\"\n        // \"hg\" => \"\"\n        // \"hi\" => \"i\"\n        // \"\
  ih\" => \"i\"\n        // \"ij\" => \"\"\n        // \"ji\" => \"\"\n        //\
  \ \"jk\" => \"\"\n        // \"kj\" => \"\"\n        // \"kl\" => \"\"\n       \
  \ // \"lk\" => \"\"\n        // \"lm\" => \"\"\n        // \"ml\" => \"\"\n    \
  \    // \"mn\" => \"\"\n        // \"nm\" => \"\"\n        // \"no\" => \"o\"\n\
  \        // \"on\" => \"o\"\n        // \"op\" => \"\"\n        // \"po\" => \"\"\
  \n        // \"pq\" => \"\"\n        // \"qp\" => \"\"\n        // \"qr\" => \"\"\
  \n        // \"rq"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ index = word.length() - 1;\n        while (index >= 0) {\n            if (vowels.contains(word.substring(index,\
  \ index + 1))) {\n                result = word.substring(index, index + 1);\n \
  \               break;\n            }\n            index--;\n        }\n       \
  \ return result;"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        String vowels = \"aeiou\";\n        int\
  \ index = word.length() - 1;\n        while (index >= 0) {\n            if (vowels.indexOf(word.charAt(index))\
  \ != -1) {\n                if (index == word.length() - 1) {\n                \
  \    return \"\";\n                }\n                if (vowels.indexOf(word.charAt(index\
  \ + 1)) == -1) {\n                    return word.substring(index, index + 1);\n\
  \                }\n            }\n            index--;\n        }\n        return\
  \ \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        int closest = -1;\n        int distance\
  \ = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            char c = word.charAt(i);\n            if (isVowel(c)) {\n         \
  \       int d = word.length() - i;\n                if (d < distance) {\n      \
  \              distance = d;\n                    closest = i;\n               \
  \ }\n            }\n        }\n        if (closest == -1) {\n            return\
  \ \"\";\n        }\n        return word.substring(closest, closest + 1);"
- "        // Write your code here\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int lastConsonantIndex = -1;\n    \
  \    for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i))\
  \ == -1) {\n                lastConsonantIndex = i;\n                break;\n  \
  \          }\n        }\n        if (lastConsonantIndex == -1) {\n            return\
  \ \"\";\n        }\n        int closestVowelIndex = -1;\n        for (int i = lastConsonantIndex\
  \ - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n\
  \                closestVowelIndex = i;\n                break;\n            }\n\
  \        }\n        if (closestVowelIndex == -1) {\n            return \"\";\n \
  \       }\n        return word.substring(closestVowelIndex, closestVowelIndex +\
  \ 1);"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        // return \"\";\n        String vowels\
  \ = \"aeiou\";\n        int index = word.length() - 1;\n        while (index >=\
  \ 0) {\n            if (vowels.indexOf(word.charAt(index)) >= 0) {\n           \
  \     return word.substring(index, index + 1);\n            }\n            index--;\n\
  \        }\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- "        // Write your code here\n        return \"\";"
language: java
name: HumanEval_118_get_closest_vowel
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    public static String getClosestVowel(String word) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
