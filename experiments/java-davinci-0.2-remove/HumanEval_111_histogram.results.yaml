language: java
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\"\")) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1);\n            }\n \
    \       }\n        return histogram;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1z7qbo0g.java:25)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1cip67k.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1);\n           \
    \ } else {\n                result.put(letter, 1);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k9ox9oi.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = Character.toString(test.charAt(i));\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4ohtq2i.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (map.containsKey(key)) {\n                map.put(key,map.get(key)+1);\n\
    \            } else {\n                map.put(key,1);\n            }\n      \
    \  }\n        return map;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfj3h9dsi.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (map.containsKey(key)) {\n                map.put(key, map.get(key)\
    \ + 1);\n            } else {\n                map.put(key, 1);\n            }\n\
    \        }\n        return map;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcysvs9i.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = String.valueOf(test.charAt(i));\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1);\n            }\n \
    \       }\n        return histogram;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3c9a_cyh.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = Character.toString(test.charAt(i));\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c, hist.get(c)\
    \ + 1);\n            } else {\n                hist.put(c, 1);\n            }\n\
    \        }\n        return hist;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp499rehgk.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\"\")) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1);\n            }\n \
    \       }\n        return histogram;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1z7qbo0g.java:25)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbyirfo3.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (map.containsKey(letter)) {\n     \
    \           map.put(letter,map.get(letter)+1);\n            } else {\n       \
    \         map.put(letter,1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgfzfr4a.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (map.containsKey(key)) {\n                map.put(key,map.get(key)+1);\n\
    \            } else {\n                map.put(key,1);\n            }\n      \
    \  }\n        return map;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfj3h9dsi.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (histogram.containsKey(letter)) {\n\
    \                histogram.put(letter, histogram.get(letter) + 1);\n         \
    \   } else {\n                histogram.put(letter, 1);\n            }\n     \
    \   }\n        return histogram;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsk47oak.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\"\")) {\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthjz41ij.java:25)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = String.valueOf(test.charAt(i));\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c, hist.get(c)\
    \ + 1);\n            } else {\n                hist.put(c, 1);\n            }\n\
    \        }\n        return hist;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v3nigfs.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1cip67k.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (result.containsKey(c)) {\n                result.put(c,result.get(c)+1);\n\
    \            } else {\n                result.put(c,1);\n            }\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0t1djag9.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwexp2ox.java:27)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = Character.toString(test.charAt(i));\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4ohtq2i.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (h.containsKey(c)) {\n                h.put(c,h.get(c)+1);\n \
    \           } else {\n                h.put(c,1);\n            }\n        }\n\
    \        return h;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9y26dclb.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\"\")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3twvr_h.java:25)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\"\")) {\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthjz41ij.java:25)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (res.containsKey(letter)) {\n     \
    \           res.put(letter, res.get(letter) + 1);\n            } else {\n    \
    \            res.put(letter, 1);\n            }\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_00070hp.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = String.valueOf(test.charAt(i));\n            if (hist.containsKey(letter))\
    \ {\n                hist.put(letter, hist.get(letter) + 1);\n            } else\
    \ {\n                hist.put(letter, 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wwrmjy3.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = String.valueOf(test.charAt(i));\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key, hist.get(key)\
    \ + 1);\n            } else {\n                hist.put(key, 1);\n           \
    \ }\n        }\n        return hist;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkjttui6.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (hist.containsKey(word)) {\n                hist.put(word,\
    \ hist.get(word) + 1);\n            } else {\n                hist.put(word, 1);\n\
    \            }\n        }\n        return hist;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ikwog09.java:27)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwexp2ox.java:27)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkn5ha00y.java:27)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (result.containsKey(letter)) {\n \
    \               result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft7vfejw.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwexp2ox.java:27)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = String.valueOf(test.charAt(i));\n\
    \            if (h.containsKey(c)) {\n                h.put(c, h.get(c) + 1);\n\
    \            } else {\n                h.put(c, 1);\n            }\n        }\n\
    \        return h;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ac_nb51.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = String.valueOf(test.charAt(i));\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c, hist.get(c)\
    \ + 1);\n            } else {\n                hist.put(c, 1);\n            }\n\
    \        }\n        return hist;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v3nigfs.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1cip67k.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (hist.containsKey(word)) {\n                hist.put(word,\
    \ hist.get(word) + 1);\n            } else {\n                hist.put(word, 1);\n\
    \            }\n        }\n        return hist;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ikwog09.java:27)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = Character.toString(test.charAt(i));\n\
    \            if (map.containsKey(key)) {\n                map.put(key, map.get(key)\
    \ + 1);\n            } else {\n                map.put(key, 1);\n            }\n\
    \        }\n        return map;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u6r7x5l.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwexp2ox.java:27)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = String.valueOf(test.charAt(i));\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key, hist.get(key)\
    \ + 1);\n            } else {\n                hist.put(key, 1);\n           \
    \ }\n        }\n        return hist;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkjttui6.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String key = test.substring(i,i+1);\n\
    \            if (hist.containsKey(key)) {\n                hist.put(key,hist.get(key)+1);\n\
    \            } else {\n                hist.put(key,1);\n            }\n     \
    \   }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwro9557.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1cip67k.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1cip67k.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\"\")) {\n            if (hist.containsKey(s))\
    \ {\n                hist.put(s, hist.get(s) + 1);\n            } else {\n   \
    \             hist.put(s, 1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3twvr_h.java:25)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String c = test.substring(i,i+1);\n\
    \            if (hist.containsKey(c)) {\n                hist.put(c,hist.get(c)+1);\n\
    \            } else {\n                hist.put(c,1);\n            }\n       \
    \ }\n        return hist;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5shx1yck.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter, result.get(letter) + 1);\n            } else\
    \ {\n                result.put(letter, 1);\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3_y6w8x.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            if (map.containsKey(letter)) {\n    \
    \            map.put(letter, map.get(letter) + 1);\n            } else {\n   \
    \             map.put(letter, 1);\n            }\n        }\n        return map;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3e9gbbv4.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                result.put(s, 1);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdm296151.java:26)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (hist.containsKey(letter)) {\n    \
    \            hist.put(letter,hist.get(letter)+1);\n            } else {\n    \
    \            hist.put(letter,1);\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvdkgb32.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i,i+1);\n            if (result.containsKey(letter)) {\n  \
    \              result.put(letter,result.get(letter)+1);\n            } else {\n\
    \                result.put(letter,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64dqm2av.java:26)\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (hist.containsKey(letter)) {\n                hist.put(letter,\
    \ hist.get(letter) + 1);\n            } else {\n                hist.put(letter,\
    \ 1);\n            }\n        }\n        return hist;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6f_5550.java:27)\n"
  stdout: ''
  timestamp: 1660011489
