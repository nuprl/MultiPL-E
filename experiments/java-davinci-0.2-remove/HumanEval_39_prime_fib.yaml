name: HumanEval_39_prime_fib
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n    public static long primeFib(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(primeFib((1l))\
  \ == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n\
  \    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n  \
  \  assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n \
  \   assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n\
  \    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"
completions: ["        long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1]\
    \ = 1;\n        int i = 2;\n        while (true) {\n            fib[i] = fib[i\
    \ - 1] + fib[i - 2];\n            if (isPrime(fib[i])) {\n                n--;\n\
    \                if (n == 0) {\n                    return fib[i];\n         \
    \       }\n            }\n            i++;\n        }", "        long a = 1;\n\
    \        long b = 1;\n        long c = 0;\n        long i = 2;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long[] fib = new long[100];\n        fib[0] = 1;\n\
    \        fib[1] = 1;\n        for (int i = 2; i < 100; i++) {\n            fib[i]\
    \ = fib[i - 1] + fib[i - 2];\n        }\n        long[] prime = new long[100];\n\
    \        int count = 0;\n        for (int i = 0; i < 100; i++) {\n           \
    \ if (isPrime(fib[i])) {\n                prime[count] = fib[i];\n           \
    \     count++;\n            }\n        }\n        return prime[(int) n - 1];",
  "        long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 3;\n        while (i <= n) {\n            a = b;\n            b = c;\n \
    \           c = a + b;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 2;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 1;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 1;\n        long i = 0;\n        while (i < n) {\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        \
    \    a = b;\n            b = c;\n            c = a + b;\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = a + b;\n  \
    \      long i = 2;\n        while (i < n) {\n            a = b;\n            b\
    \ = c;\n            c = a + b;\n            if (isPrime(c)) {\n              \
    \  i++;\n            }\n        }\n        return c;", "        long a = 0;\n\
    \        long b = 1;\n        long c = 1;\n        long i = 2;\n        while\
    \ (true) {\n            c = a + b;\n            a = b;\n            b = c;\n \
    \           if (isPrime(c)) {\n                i++;\n                if (i ==\
    \ n) {\n                    return c;\n                }\n            }\n    \
    \    }", "        long[] fibs = new long[100];\n        fibs[0] = 1;\n       \
    \ fibs[1] = 1;\n        int i = 2;\n        while (i < 100) {\n            fibs[i]\
    \ = fibs[i - 1] + fibs[i - 2];\n            i++;\n        }\n        int j = 0;\n\
    \        while (j < 100) {\n            if (isPrime(fibs[j])) {\n            \
    \    n--;\n            }\n            if (n == 0) {\n                return fibs[j];\n\
    \            }\n            j++;\n        }\n        return -1;", "        long\
    \ a = 0;\n        long b = 1;\n        long c = 0;\n        long i = 0;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c))\n                i++;\n        }\n     \
    \   return c;", "        long a = 1;\n        long b = 1;\n        long c = a\
    \ + b;\n        long count = 2;\n        while (count < n) {\n            a =\
    \ b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                count++;\n            }\n        }\n        return c;", " \
    \       long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n  \
    \          c = a + b;\n            if (isPrime(c)) {\n                i++;\n \
    \           }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 0;\n        long count = 0;\n        while (count <\
    \ n) {\n            c = a + b;\n            a = b;\n            b = c;\n     \
    \       if (isPrime(c)) {\n                count++;\n            }\n        }\n\
    \        return c;", "        long[] fib = new long[100];\n        fib[0] = 1;\n\
    \        fib[1] = 1;\n        int i = 2;\n        while (true) {\n           \
    \ fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i])) {\n    \
    \            n--;\n                if (n == 0) {\n                    return fib[i];\n\
    \                }\n            }\n            i++;\n        }", "        long\
    \ a = 1;\n        long b = 1;\n        long c = a + b;\n        long i = 3;\n\
    \        while (i <= n) {\n            a = b;\n            b = c;\n          \
    \  c = a + b;\n            if (isPrime(c)) {\n                i++;\n         \
    \   }\n        }\n        return c;", "        long[] fib = new long[100];\n \
    \       fib[0] = 1;\n        fib[1] = 1;\n        int i = 2;\n        while (true)\
    \ {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i]))\
    \ {\n                n--;\n                if (n == 0) {\n                   \
    \ return fib[i];\n                }\n            }\n            i++;\n       \
    \ }", "        long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1]\
    \ = 1;\n        for (int i = 2; i < 100; i++) {\n            fib[i] = fib[i -\
    \ 1] + fib[i - 2];\n        }\n        int count = 0;\n        for (int i = 0;\
    \ i < 100; i++) {\n            if (isPrime(fib[i])) {\n                count++;\n\
    \            }\n            if (count == n) {\n                return fib[i];\n\
    \            }\n        }\n        return 0;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long count = 2;\n        while (count\
    \ < n) {\n            a = b;\n            b = c;\n            c = a + b;\n   \
    \         if (isPrime(c)) {\n                count++;\n            }\n       \
    \ }\n        return c;", "        long a = 1;\n        long b = 1;\n        long\
    \ c = 0;\n        long i = 2;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 0;\n        long i = 2;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = 0;\n        long i = 2;\n        while (i < n) {\n           \
    \ c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long[] fib = new long[(int)n];\n        fib[0] = 1;\n        fib[1] = 1;\n\
    \        int i = 2;\n        while (i < n) {\n            fib[i] = fib[i-1] +\
    \ fib[i-2];\n            i++;\n        }\n        return fib[i-1];", "       \
    \ long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n    \
    \    int i = 2;\n        while (true) {\n            fib[i] = fib[i - 1] + fib[i\
    \ - 2];\n            if (isPrime(fib[i])) {\n                n--;\n          \
    \      if (n == 0) {\n                    return fib[i];\n                }\n\
    \            }\n            i++;\n        }", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n)\
    \ {\n            a = b;\n            b = c;\n            c = a + b;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long[] fibs = new long[(int)n];\n        fibs[0] = 1;\n\
    \        fibs[1] = 2;\n        int i = 2;\n        while (i < n) {\n         \
    \   fibs[i] = fibs[i-1] + fibs[i-2];\n            i++;\n        }\n        return\
    \ fibs[i-1];", "        long[] fib = new long[(int)n];\n        fib[0] = 1;\n\
    \        fib[1] = 1;\n        for (int i = 2; i < n; i++) {\n            fib[i]\
    \ = fib[i-1] + fib[i-2];\n        }\n        for (int i = 0; i < n; i++) {\n \
    \           if (isPrime(fib[i])) {\n                return fib[i];\n         \
    \   }\n        }\n        return -1;", "        long a = 0;\n        long b =\
    \ 1;\n        long c = 0;\n        long i = 0;\n        while (i < n) {\n    \
    \        c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 2;\n        long i =\
    \ 3;\n        while (i <= n) {\n            c = a + b;\n            a = b;\n \
    \           b = c;\n            if (isPrime(c)) {\n                i++;\n    \
    \        }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 0;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = a + b;\n  \
    \      long i = 3;\n        while (i <= n) {\n            a = b;\n           \
    \ b = c;\n            c = a + b;\n            if (isPrime(c)) {\n            \
    \    i++;\n            }\n        }\n        return c;", "        long[] fib =\
    \ new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n        int i = 2;\n\
    \        while (i < 100) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n  \
    \          i++;\n        }\n        long[] prime = new long[100];\n        int\
    \ j = 0;\n        for (int k = 0; k < 100; k++) {\n            if (isPrime(fib[k]))\
    \ {\n                prime[j] = fib[k];\n                j++;\n            }\n\
    \        }\n        return prime[(int) n - 1];", "        long a = 1;\n      \
    \  long b = 1;\n        long c = a + b;\n        long i = 2;\n        while (i\
    \ < n) {\n            a = b;\n            b = c;\n            c = a + b;\n   \
    \         if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 0;\n        long count = 0;\n        while (count < n) {\n            c =\
    \ a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\n\
    \                count++;\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = a + b;\n        long i = 3;\n        while\
    \ (i <= n) {\n            a = b;\n            b = c;\n            c = a + b;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 1;\n        long b = 1;\n        long c\
    \ = a + b;\n        long i = 2;\n        while (i < n) {\n            a = b;\n\
    \            b = c;\n            c = a + b;\n            if (isPrime(c)) {\n \
    \               i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n    \
    \    while (i < n) {\n            a = b;\n            b = c;\n            c =\
    \ a + b;\n            i++;\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = a + b;\n        long i = 3;\n        while\
    \ (i <= n) {\n            a = b;\n            b = c;\n            c = a + b;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 1;\n        long b = 1;\n        long c\
    \ = a + b;\n        long i = 3;\n        while (i <= n) {\n            a = b;\n\
    \            b = c;\n            c = a + b;\n            if (isPrime(c)) {\n \
    \               i++;\n            }\n        }\n        return c;", "        long[]\
    \ fib = new long[100];\n        fib[0] = 0;\n        fib[1] = 1;\n        fib[2]\
    \ = 2;\n        int i = 3;\n        while (i < 100) {\n            fib[i] = fib[i\
    \ - 1] + fib[i - 2];\n            i++;\n        }\n        long[] prime = new\
    \ long[100];\n        prime[0] = 2;\n        prime[1] = 3;\n        prime[2] =\
    \ 5;\n        int j = 3;\n        int k = 5;\n        while (j < 100) {\n    \
    \        k += 2;\n            if (isPrime(k)) {\n                prime[j] = k;\n\
    \                j++;\n            }\n        }\n        long[] primeFib = new\
    \ long[100];\n        int l = 0;\n        for (int m = 0; m < 100; m++) {\n  \
    \          if (isPrime(fib[m])) {\n                primeFib[l] = fib[m];\n   \
    \             l++;\n            }\n        }\n        return primeFib[(int) n\
    \ - 1];", "        long a = 1;\n        long b = 1;\n        long c = 0;\n   \
    \     long i = 2;\n        while (i < n) {\n            c = a + b;\n         \
    \   a = b;\n            b = c;\n            i++;\n        }\n        return c;",
  "        long a = 0;\n        long b = 1;\n        long c = 1;\n        long i =\
    \ 2;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long a = 1;\n        long b\
    \ = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = 2;\n      \
    \  long i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n\
    \            c = a + b;\n            i++;\n        }\n        return c;", "  \
    \      long[] fib = new long[(int)n];\n        fib[0] = 1;\n        fib[1] = 1;\n\
    \        int i = 2;\n        while (i < n) {\n            fib[i] = fib[i-1] +\
    \ fib[i-2];\n            i++;\n        }\n        return fib[i-1];", "       \
    \ long a = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n\
    \        while (i < n) {\n            c = a + b;\n            a = b;\n       \
    \     b = c;\n            if (isPrime(c)) {\n                i++;\n          \
    \  }\n        }\n        return c;", "        long a = 1;\n        long b = 1;\n\
    \        long c = a + b;\n        long i = 3;\n        while (i < n) {\n     \
    \       a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 0;\n        long i =\
    \ 2;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long a = 1;\n        long b\
    \ = 1;\n        long c = 2;\n        long i = 3;\n        while (i < n) {\n  \
    \          a = b;\n            b = c;\n            c = a + b;\n            i++;\n\
    \        }\n        return c;", "        // TODO: Implement this function.\n \
    \       long a = 0;\n        long b = 1;\n        long c = 0;\n        long count\
    \ = 0;\n        while(count < n) {\n            c = a + b;\n            a = b;\n\
    \            b = c;\n            if(isPrime(c)) {\n                count++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 2;\n        long i = 3;\n        while (i < n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            i++;\n\
    \        }\n        return c;", "        long a = 0;\n        long b = 1;\n  \
    \      long c = 1;\n        long i = 0;\n        while (i < n) {\n           \
    \ if (isPrime(c)) {\n                i++;\n            }\n            a = b;\n\
    \            b = c;\n            c = a + b;\n        }\n        return c;", " \
    \       long a = 0;\n        long b = 1;\n        long c = 1;\n        long i\
    \ = 1;\n        while (i < n) {\n            c = a + b;\n            a = b;\n\
    \            b = c;\n            if (isPrime(c)) {\n                i++;\n   \
    \         }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n)\
    \ {\n            a = b;\n            b = c;\n            c = a + b;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long f1 = 1, f2 = 1, f3 = 2;\n        long i = 3;\n \
    \       while (i < n) {\n            f1 = f2;\n            f2 = f3;\n        \
    \    f3 = f1 + f2;\n            if (isPrime(f3)) {\n                i++;\n   \
    \         }\n        }\n        return f3;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 2;\n        while (i < n)\
    \ {\n            a = b;\n            b = c;\n            c = a + b;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long a = 1;\n        long b = 1;\n        long c = 2;\n\
    \        long i = 3;\n        while (i < n) {\n            a = b;\n          \
    \  b = c;\n            c = a + b;\n            i++;\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = 2;\n      \
    \  long i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n\
    \            c = a + b;\n            i++;\n        }\n        return c;", "  \
    \      long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n\
    \        for (int i = 2; i < 100; i++) {\n            fib[i] = fib[i - 1] + fib[i\
    \ - 2];\n        }\n        long[] prime = new long[100];\n        int j = 0;\n\
    \        for (int i = 0; i < 100; i++) {\n            if (isPrime(fib[i])) {\n\
    \                prime[j] = fib[i];\n                j++;\n            }\n   \
    \     }\n        return prime[(int)n - 1];", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 2;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = 0;\n      \
    \  long i = 2;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 2;\n        long i = 3;\n        while (i <= n) {\n\
    \            c = a + b;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n            a = b;\n            b = c;\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 1;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 1;\n        long i = 1;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = 0;\n      \
    \  long i = 2;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long[] fib = new long[100];\n\
    \        fib[0] = 1;\n        fib[1] = 1;\n        int i = 2;\n        while (true)\
    \ {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i]))\
    \ {\n                n--;\n                if (n == 0) {\n                   \
    \ return fib[i];\n                }\n            }\n            i++;\n       \
    \ }", "        long a = 0;\n        long b = 1;\n        long c = 0;\n       \
    \ long i = 0;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 2;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 0;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 2;\n        while (i < n)\
    \ {\n            if (isPrime(c)) {\n                i++;\n            }\n    \
    \        a = b;\n            b = c;\n            c = a + b;\n        }\n     \
    \   return c;", "        long a = 1;\n        long b = 1;\n        long c = 0;\n\
    \        long i = 2;\n        while (i <= n) {\n            c = a + b;\n     \
    \       a = b;\n            b = c;\n            if (isPrime(c)) {\n          \
    \      i++;\n            }\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = a + b;\n        long i = 3;\n        while\
    \ (i <= n) {\n            if (isPrime(c)) {\n                i++;\n          \
    \  }\n            a = b;\n            b = c;\n            c = a + b;\n       \
    \ }\n        return c;", "        long a = 0;\n        long b = 1;\n        long\
    \ c = 1;\n        long i = 1;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n    \
    \    while (i < n) {\n            a = b;\n            b = c;\n            c =\
    \ a + b;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long[] fibs = new long[100];\n      \
    \  fibs[0] = 1;\n        fibs[1] = 1;\n        int i = 2;\n        while (true)\
    \ {\n            fibs[i] = fibs[i - 1] + fibs[i - 2];\n            if (isPrime(fibs[i]))\
    \ {\n                n--;\n                if (n == 0) {\n                   \
    \ return fibs[i];\n                }\n            }\n            i++;\n      \
    \  }", "        long[] fib = new long[(int)n];\n        fib[0] = 1;\n        fib[1]\
    \ = 1;\n        int i = 2;\n        while (i < n) {\n            fib[i] = fib[i-1]\
    \ + fib[i-2];\n            i++;\n        }\n        return fib[i-1];", "     \
    \   long a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n\
    \        while (i <= n) {\n            c = a + b;\n            a = b;\n      \
    \      b = c;\n            if (isPrime(c)) {\n                i++;\n         \
    \   }\n        }\n        return c;", "        long a = 1;\n        long b = 1;\n\
    \        long c = a + b;\n        long i = 2;\n        while (i < n) {\n     \
    \       a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 2;\n        while (i < n) {\n            a = b;\n            b = c;\n  \
    \          c = a + b;\n            if (isPrime(c)) {\n                i++;\n \
    \           }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 2;\n        long i = 3;\n        while (i < n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            i++;\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = a + b;\n        long i = 2;\n        while (i < n) {\n       \
    \     a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 0;\n        long i =\
    \ 2;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long a = 1;\n        long b\
    \ = 1;\n        long c = 0;\n        long i = 2;\n        while (i < n) {\n  \
    \          c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        // TODO: Implement this method.\n        return 0;", "       \
    \ long[] fib = new long[(int)n];\n        fib[0] = 1;\n        fib[1] = 1;\n \
    \       for (int i = 2; i < n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n\
    \        }\n        long[] primes = new long[(int)n];\n        primes[0] = 2;\n\
    \        int count = 1;\n        for (int i = 3; i < fib[(int)n-1]; i++) {\n \
    \           boolean isPrime = true;\n            for (int j = 0; j < count; j++)\
    \ {\n                if (i % primes[j] == 0) {\n                    isPrime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (isPrime) {\n                primes[count] = i;\n                count++;\n\
    \            }\n        }\n        for (int i = 0; i < n; i++) {\n           \
    \ for (int j = 0; j < count; j++) {\n                if (fib[i] == primes[j])\
    \ {\n                    return fib[i];\n                }\n            }\n  \
    \      }\n        return 0;", "        long a = 1;\n        long b = 1;\n    \
    \    long c = 0;\n        long count = 0;\n        while (count < n) {\n     \
    \       c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                count++;\n            }\n        }\n        return c;", " \
    \       long a = 0;\n        long b = 1;\n        long c = 1;\n        long i\
    \ = 1;\n        while (i < n) {\n            c = a + b;\n            a = b;\n\
    \            b = c;\n            if (isPrime(c)) {\n                i++;\n   \
    \         }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 1;\n        long i = 1;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 0;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long i = 0;\n        long\
    \ j = 1;\n        long k = 0;\n        long count = 0;\n        while (count <\
    \ n) {\n            k = i + j;\n            i = j;\n            j = k;\n     \
    \       if (isPrime(k)) {\n                count++;\n            }\n        }\n\
    \        return k;", "        long[] fib = new long[100];\n        fib[0] = 1;\n\
    \        fib[1] = 1;\n        int i = 1;\n        while (fib[i] < 1000000000000L)\
    \ {\n            i++;\n            fib[i] = fib[i - 1] + fib[i - 2];\n       \
    \ }\n        int j = 0;\n        while (n > 0) {\n            if (isPrime(fib[j]))\
    \ {\n                n--;\n            }\n            j++;\n        }\n      \
    \  return fib[j - 1];", "        long a = 0;\n        long b = 1;\n        long\
    \ c = 1;\n        long i = 1;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n    \
    \    while (i < n) {\n            a = b;\n            b = c;\n            c =\
    \ a + b;\n            i++;\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = 2;\n        long i = 3;\n        while\
    \ (i < n) {\n            a = b;\n            b = c;\n            c = a + b;\n\
    \            i++;\n        }\n        return c;", "        long a = 1;\n     \
    \   long b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i\
    \ <= n) {\n            a = b;\n            b = c;\n            c = a + b;\n  \
    \          if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 0;\n        long i = 0;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long[] fib = new long[(int) n];\n   \
    \     fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < n; i++) {\n\
    \            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        long[] primes\
    \ = new long[(int) n];\n        primes[0] = 2;\n        primes[1] = 3;\n     \
    \   int p = 2;\n        for (int i = 5; p < n; i += 2) {\n            boolean\
    \ isPrime = true;\n            for (int j = 0; j < p; j++) {\n               \
    \ if (i % primes[j] == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                primes[p] = i;\n                p++;\n            }\n   \
    \     }\n        long[] primeFib = new long[(int) n];\n        int f = 0;\n  \
    \      for (int i = 0; i < n; i++) {\n            if (Arrays.binarySearch(primes,\
    \ fib[i]) >= 0) {\n                primeFib[f] = fib[i];\n                f++;\n\
    \            }\n        }\n        return primeFib[(int) n - 1];", "        long[]\
    \ fibs = new long[100];\n        fibs[0] = 1;\n        fibs[1] = 1;\n        int\
    \ i = 2;\n        while (true) {\n            fibs[i] = fibs[i - 1] + fibs[i -\
    \ 2];\n            if (isPrime(fibs[i])) {\n                n--;\n           \
    \     if (n == 0) {\n                    return fibs[i];\n                }\n\
    \            }\n            i++;\n        }", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n)\
    \ {\n            a = b;\n            b = c;\n            c = a + b;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long[] fib = new long[100];\n        fib[0] = 1;\n  \
    \      fib[1] = 1;\n        for (int i = 2; i < 100; i++) {\n            fib[i]\
    \ = fib[i - 1] + fib[i - 2];\n        }\n        long[] prime = new long[100];\n\
    \        prime[0] = 2;\n        int j = 1;\n        for (int i = 3; i < 100; i++)\
    \ {\n            boolean isPrime = true;\n            for (int k = 2; k < i; k++)\
    \ {\n                if (i % k == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                prime[j] = i;\n                j++;\n         \
    \   }\n        }\n        long[] primeFib = new long[100];\n        int k = 0;\n\
    \        for (int i = 0; i < 100; i++) {\n            for (int l = 0; l < 100;\
    \ l++) {\n                if (fib[i] == prime[l]) {\n                    primeFib[k]\
    \ = fib[i];\n                    k++;\n                }\n            }\n    \
    \    }\n        return primeFib[(int) n - 1];", "        long a = 0;\n       \
    \ long b = 1;\n        long c = 1;\n        long i = 1;\n        while (i < n)\
    \ {\n            c = a + b;\n            a = b;\n            b = c;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long[] fibs = new long[(int) n + 1];\n        fibs[0]\
    \ = 0;\n        fibs[1] = 1;\n        for (int i = 2; i <= n; i++) {\n       \
    \     fibs[i] = fibs[i - 1] + fibs[i - 2];\n        }\n        long[] primes =\
    \ new long[(int) n + 1];\n        primes[0] = 0;\n        primes[1] = 0;\n   \
    \     for (int i = 2; i <= n; i++) {\n            primes[i] = i;\n        }\n\
    \        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n \
    \               continue;\n            }\n            for (int j = i + i; j <=\
    \ n; j += i) {\n                primes[j] = 0;\n            }\n        }\n   \
    \     long ans = 0;\n        for (int i = 1; i <= n; i++) {\n            if (primes[i]\
    \ != 0) {\n                ans = fibs[i];\n            }\n        }\n        return\
    \ ans;", "        long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1]\
    \ = 1;\n        int i = 2;\n        while (true) {\n            fib[i] = fib[i\
    \ - 1] + fib[i - 2];\n            if (fib[i] > 10000000000L) {\n             \
    \   break;\n            }\n            i++;\n        }\n        long[] prime =\
    \ new long[100];\n        int j = 0;\n        for (int k = 0; k < i; k++) {\n\
    \            if (isPrime(fib[k])) {\n                prime[j] = fib[k];\n    \
    \            j++;\n            }\n        }\n        return prime[(int) n - 1];",
  "        long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n\
    \        for (int i = 2; i < 100; i++) {\n            fib[i] = fib[i - 1] + fib[i\
    \ - 2];\n        }\n        int count = 0;\n        for (int i = 0; i < 100; i++)\
    \ {\n            if (isPrime(fib[i])) {\n                count++;\n          \
    \  }\n            if (count == n) {\n                return fib[i];\n        \
    \    }\n        }\n        return -1;", "        long a = 0;\n        long b =\
    \ 1;\n        long c = 0;\n        long i = 0;\n        while (i < n) {\n    \
    \        c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 0;\n        long i =\
    \ 2;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long a = 1;\n        long b\
    \ = 1;\n        long c = 0;\n        long count = 2;\n        while (count < n)\
    \ {\n            c = a + b;\n            a = b;\n            b = c;\n        \
    \    if (isPrime(c)) {\n                count++;\n            }\n        }\n \
    \       return c;", "        long[] fib = new long[100];\n        fib[0] = 1;\n\
    \        fib[1] = 1;\n        int i = 2;\n        while (true) {\n           \
    \ fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i])) {\n    \
    \            n--;\n                if (n == 0) {\n                    return fib[i];\n\
    \                }\n            }\n            i++;\n        }", "        long\
    \ a = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 0;\n        long b = 1;\n  \
    \      long c = 1;\n        long i = 0;\n        while (i < n) {\n           \
    \ if (isPrime(c)) {\n                i++;\n            }\n            a = b;\n\
    \            b = c;\n            c = a + b;\n        }\n        return c;", " \
    \       long a = 0;\n        long b = 1;\n        long c = 1;\n        long i\
    \ = 0;\n        while (i < n) {\n            if (isPrime(c)) {\n             \
    \   i++;\n            }\n            a = b;\n            b = c;\n            c\
    \ = a + b;\n        }\n        return c;", "        // TODO: implement this function\n\
    \        return 0;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 1;\n        long i = 0;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = a + b;\n        long i = 2;\n\
    \        while (i < n) {\n            a = b;\n            b = c;\n           \
    \ c = a + b;\n            if (isPrime(c)) {\n                i++;\n          \
    \  }\n        }\n        return c;", "        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        while (n > 0) {\n            k = i + j;\n      \
    \      i = j;\n            j = k;\n            if (isPrime(k)) {\n           \
    \     n--;\n            }\n        }\n        return k;", "        long a = 0;\n\
    \        long b = 1;\n        long c = 0;\n        long i = 0;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        // TODO: Implement this function.\n        return\
    \ 0;", "        long a = 1;\n        long b = 1;\n        long c = 2;\n      \
    \  long i = 3;\n        while (i <= n) {\n            if (isPrime(c)) {\n    \
    \            i++;\n            }\n            a = b;\n            b = c;\n   \
    \         c = a + b;\n        }\n        return c;", "        long a = 0;\n  \
    \      long b = 1;\n        long c = 1;\n        long i = 2;\n        while (i\
    \ < n) {\n            c = a + b;\n            a = b;\n            b = c;\n   \
    \         if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 1;\n        long i = 1;\n        while (i < n) {\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n            c = a + b;\n           \
    \ a = b;\n            b = c;\n        }\n        return c;", "        long a =\
    \ 1;\n        long b = 1;\n        long c = a + b;\n        long i = 3;\n    \
    \    while (i <= n) {\n            a = b;\n            b = c;\n            c =\
    \ a + b;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 0;\n        long b = 1;\n  \
    \      long c = 0;\n        long i = 0;\n        while (i < n) {\n           \
    \ c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 0;\n        long b = 1;\n        long c = 1;\n        long i =\
    \ 1;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long i = 0;\n        long j\
    \ = 1;\n        long k = 0;\n        long c = 0;\n        while (c < n) {\n  \
    \          k = i + j;\n            i = j;\n            j = k;\n            if\
    \ (isPrime(k)) {\n                c++;\n            }\n        }\n        return\
    \ k;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 1;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 2;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = a + b;\n  \
    \      long i = 3;\n        while (i <= n) {\n            a = b;\n           \
    \ b = c;\n            c = a + b;\n            if (isPrime(c)) {\n            \
    \    i++;\n            }\n        }\n        return c;", "        long a = 0;\n\
    \        long b = 1;\n        long c = 1;\n        long i = 1;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = a + b;\n        long i = 0;\n        while (i < n) {\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n            a = b;\n            b =\
    \ c;\n            c = a + b;\n        }\n        return c;", "        long a =\
    \ 0;\n        long b = 1;\n        long c = 0;\n        long i = 0;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 1;\n        long b = 1;\n        long c\
    \ = 0;\n        long i = 2;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = a + b;\n        long i = 3;\n\
    \        while (i <= n) {\n            a = b;\n            b = c;\n          \
    \  c = a + b;\n            if (isPrime(c)) {\n                i++;\n         \
    \   }\n        }\n        return c;", "        long[] fib = new long[(int) n +\
    \ 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <=\
    \ n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n      \
    \  long[] prime = new long[(int) n + 1];\n        prime[0] = 0;\n        prime[1]\
    \ = 0;\n        for (int i = 2; i <= n; i++) {\n            prime[i] = 1;\n  \
    \      }\n        for (int i = 2; i <= n; i++) {\n            if (prime[i] ==\
    \ 1) {\n                for (int j = 2; j * i <= n; j++) {\n                 \
    \   prime[j * i] = 0;\n                }\n            }\n        }\n        long[]\
    \ primeFib = new long[(int) n + 1];\n        primeFib[0] = 0;\n        primeFib[1]\
    \ = 0;\n        for (int i = 2; i <= n; i++) {\n            primeFib[i] = primeFib[i\
    \ - 1];\n            if (prime[i] == 1 && fib[i] == i) {\n                primeFib[i]++;\n\
    \            }\n        }\n        return primeFib[(int) n];", "        long a\
    \ = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n      \
    \  while (i < n) {\n            c = a + b;\n            a = b;\n            b\
    \ = c;\n            if (isPrime(c)) {\n                i++;\n            }\n \
    \       }\n        return c;", "        long a = 1;\n        long b = 1;\n   \
    \     long c = a + b;\n        long i = 2;\n        while (i < n) {\n        \
    \    a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 0;\n        long b = 1;\n        long c = 0;\n        long i =\
    \ 0;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            if (isPrime(c)) {\n                i++;\n     \
    \       }\n        }\n        return c;", "        long a = 1;\n        long b\
    \ = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n) {\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        \
    \    a = b;\n            b = c;\n            c = a + b;\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 0;\n        while (i < n) {\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n            a = b;\n            b = c;\n    \
    \        c = a + b;\n        }\n        return c;", "        long a = 1;\n   \
    \     long b = 1;\n        long c = a + b;\n        long count = 2;\n        while\
    \ (count < n) {\n            if (isPrime(c)) {\n                count++;\n   \
    \         }\n            a = b;\n            b = c;\n            c = a + b;\n\
    \        }\n        return c;", "        long[] fib = new long[100];\n       \
    \ fib[0] = 1;\n        fib[1] = 1;\n        int i = 2;\n        while (i < 100)\
    \ {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            i++;\n       \
    \ }\n        i = 0;\n        long count = 0;\n        while (count < n) {\n  \
    \          if (isPrime(fib[i])) {\n                count++;\n            }\n \
    \           i++;\n        }\n        return fib[i - 1];", "        long a = 1;\n\
    \        long b = 1;\n        long c = 2;\n        long count = 2;\n        while\
    \ (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                count++;\n            }\n    \
    \    }\n        return c;", "        // TODO: Implement this method.\n       \
    \ return 0;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n\
    \        long i = 0;\n        while (i < n) {\n            if (isPrime(c)) {\n\
    \                i++;\n            }\n            a = b;\n            b = c;\n\
    \            c = a + b;\n        }\n        return c;", "        long[] fib =\
    \ new long[(int)n];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n\
    \        for (int i = 0; i < n; i++) {\n            if (isPrime(fib[i])) {\n \
    \               return fib[i];\n            }\n        }\n        return -1;",
  "        long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 3;\n        while (i <= n) {\n            if (isPrime(c)) {\n          \
    \      i++;\n            }\n            a = b;\n            b = c;\n         \
    \   c = a + b;\n        }\n        return c;", "        long[] fib = new long[100];\n\
    \        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < 100; i++)\
    \ {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        long count\
    \ = 0;\n        for (int i = 0; i < 100; i++) {\n            if (isPrime(fib[i]))\
    \ {\n                count++;\n            }\n            if (count == n) {\n\
    \                return fib[i];\n            }\n        }\n        return -1;",
  "        long a = 1;\n        long b = 1;\n        long c = 0;\n        long i =\
    \ 2;\n        while (i < n) {\n            c = a + b;\n            a = b;\n  \
    \          b = c;\n            i++;\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = a + b;\n        long i = 3;\n\
    \        while (i <= n) {\n            a = b;\n            b = c;\n          \
    \  c = a + b;\n            if (isPrime(c)) {\n                i++;\n         \
    \   }\n        }\n        return c;", "        long[] fib = new long[100];\n \
    \       fib[0] = 1;\n        fib[1] = 1;\n        int i = 2;\n        while (true)\
    \ {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i]))\
    \ {\n                n--;\n                if (n == 0) {\n                   \
    \ return fib[i];\n                }\n            }\n            i++;\n       \
    \ }", "        long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1]\
    \ = 1;\n        int i = 2;\n        while (true) {\n            fib[i] = fib[i\
    \ - 1] + fib[i - 2];\n            if (isPrime(fib[i])) {\n                n--;\n\
    \                if (n == 0) {\n                    return fib[i];\n         \
    \       }\n            }\n            i++;\n        }", "        long a = 1;\n\
    \        long b = 1;\n        long c = 2;\n        long i = 3;\n        while\
    \ (true) {\n            if (isPrime(c)) {\n                if (i == n) {\n   \
    \                 return c;\n                }\n                i++;\n       \
    \     }\n            a = b;\n            b = c;\n            c = a + b;\n    \
    \    }", "        long a = 1;\n        long b = 1;\n        long c = a + b;\n\
    \        long i = 3;\n        while (i <= n) {\n            a = b;\n         \
    \   b = c;\n            c = a + b;\n            if (isPrime(c)) {\n          \
    \      i++;\n            }\n        }\n        return c;", "        long[] fib\
    \ = new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int\
    \ i = 2; i < 100; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n    \
    \    }\n        long count = 0;\n        for (int i = 0; i < 100; i++) {\n   \
    \         if (isPrime(fib[i])) {\n                count++;\n            }\n  \
    \          if (count == n) {\n                return fib[i];\n            }\n\
    \        }\n        return -1;", "        long a = 0;\n        long b = 1;\n \
    \       long c = 0;\n        long count = 0;\n        while (count < n) {\n  \
    \          c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                count++;\n            }\n        }\n       \
    \ return c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n\
    \        long i = 0;\n        while (i < n) {\n            if (isPrime(c)) {\n\
    \                i++;\n            }\n            c = a + b;\n            a =\
    \ b;\n            b = c;\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = 0;\n        long i = 2;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 1;\n        long b = 1;\n        long c\
    \ = 2;\n        long i = 3;\n        while (i <= n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 0;\n        long i = 2;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = a + b;\n        long i = 3;\n        while (i <= n) {\n      \
    \      a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 3;\n        while (i <= n) {\n            a = b;\n            b = c;\n \
    \           c = a + b;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = 2;\n        long i = 3;\n        while (i < n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            i++;\n\
    \        }\n        return c;", "        long a = 0;\n        long b = 1;\n  \
    \      long c = 1;\n        long i = 0;\n        while (i < n) {\n           \
    \ if (isPrime(c)) {\n                i++;\n            }\n            a = b;\n\
    \            b = c;\n            c = a + b;\n        }\n        return c;", " \
    \       // TODO: Implement this function.\n        return 0;", "        long a\
    \ = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n      \
    \  while (i < n) {\n            c = a + b;\n            a = b;\n            b\
    \ = c;\n            if (isPrime(c)) {\n                i++;\n            }\n \
    \       }\n        return c;", "        long a = 1;\n        long b = 1;\n   \
    \     long c = 0;\n        long i = 2;\n        while (i < n) {\n            c\
    \ = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 2;\n        while (i < n) {\n            a = b;\n            b = c;\n  \
    \          c = a + b;\n            if (isPrime(c)) {\n                i++;\n \
    \           }\n        }\n        return c;", "        long a = 0;\n        long\
    \ b = 1;\n        long c = 0;\n        long i = 0;\n        while (i < n) {\n\
    \            c = a + b;\n            a = b;\n            b = c;\n            if\
    \ (isPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 0;\n        long b = 1;\n        long c = 1;\n      \
    \  long i = 1;\n        while (i < n) {\n            c = a + b;\n            a\
    \ = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n)\
    \ {\n            if (isPrime(c)) {\n                i++;\n            }\n    \
    \        a = b;\n            b = c;\n            c = a + b;\n        }\n     \
    \   return c;", "        long a = 1;\n        long b = 1;\n        long c = 0;\n\
    \        long count = 2;\n        while (count < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           count++;\n            }\n        }\n        return c;", "        long\
    \ a = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = 2;\n        long i = 3;\n        while (i < n) {\n           \
    \ a = b;\n            b = c;\n            c = a + b;\n            i++;\n     \
    \   }\n        return c;", "        long a = 1;\n        long b = 1;\n       \
    \ long c = a + b;\n        long i = 3;\n        while (i <= n) {\n           \
    \ a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = a + b;\n        long\
    \ i = 3;\n        while (i <= n) {\n            if (isPrime(c)) {\n          \
    \      i++;\n            }\n            a = b;\n            b = c;\n         \
    \   c = a + b;\n        }\n        return c;", "        long a = 1;\n        long\
    \ b = 1;\n        long c = a + b;\n        long i = 3;\n        while (i <= n)\
    \ {\n            a = b;\n            b = c;\n            c = a + b;\n        \
    \    if (isPrime(c)) {\n                i++;\n            }\n        }\n     \
    \   return c;", "        long a = 1;\n        long b = 1;\n        long c = 0;\n\
    \        long i = 2;\n        while (i < n) {\n            c = a + b;\n      \
    \      a = b;\n            b = c;\n            i++;\n        }\n        return\
    \ c;", "        long a = 1;\n        long b = 1;\n        long c = 2;\n      \
    \  long i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n\
    \            c = a + b;\n            i++;\n        }\n        return c;", "  \
    \      long a = 1;\n        long b = 1;\n        long c = 2;\n        long i =\
    \ 3;\n        while (i < n) {\n            a = b;\n            b = c;\n      \
    \      c = a + b;\n            i++;\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 0;\n        long i = 2;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long[] fib = new long[100];\n       \
    \ fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < 100; i++) {\n\
    \            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        long[] prime\
    \ = new long[100];\n        int count = 0;\n        for (int i = 0; i < 100; i++)\
    \ {\n            if (isPrime(fib[i])) {\n                prime[count] = fib[i];\n\
    \                count++;\n            }\n        }\n        return prime[(int)\
    \ n - 1];", "        long a = 1;\n        long b = 1;\n        long c = a + b;\n\
    \        long i = 3;\n        while (i <= n) {\n            if (isPrime(c)) {\n\
    \                a = b;\n                b = c;\n                c = a + b;\n\
    \                i++;\n            } else {\n                a = b;\n        \
    \        b = c;\n                c = a + b;\n            }\n        }\n      \
    \  return c;", "        long a = 1;\n        long b = 1;\n        long c = a +\
    \ b;\n        long i = 2;\n        while (i < n) {\n            a = b;\n     \
    \       b = c;\n            c = a + b;\n            if (isPrime(c)) {\n      \
    \          i++;\n            }\n        }\n        return c;", "        long a\
    \ = 1;\n        long b = 1;\n        long c = 0;\n        long i = 2;\n      \
    \  while (i < n) {\n            c = a + b;\n            a = b;\n            b\
    \ = c;\n            if (isPrime(c)) {\n                i++;\n            }\n \
    \       }\n        return c;", "        long a = 1;\n        long b = 1;\n   \
    \     long c = 2;\n        long i = 3;\n        while (i < n) {\n            a\
    \ = b;\n            b = c;\n            c = a + b;\n            i++;\n       \
    \ }\n        return c;", "        long a = 0;\n        long b = 1;\n        long\
    \ c = 1;\n        long i = 2;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n    \
    \    while (true) {\n            if (isPrime(c)) {\n                if (i == n)\
    \ {\n                    return c;\n                }\n                i++;\n\
    \            }\n            a = b;\n            b = c;\n            c = a + b;\n\
    \        }", "        long a = 0;\n        long b = 1;\n        long c = 0;\n\
    \        long i = 0;\n        while (i < n) {\n            c = a + b;\n      \
    \      a = b;\n            b = c;\n            if (isPrime(c)) {\n           \
    \     i++;\n            }\n        }\n        return c;", "        long a = 1;\n\
    \        long b = 1;\n        long c = 0;\n        long i = 2;\n        while\
    \ (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n\
    \            if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 1;\n        long i = 1;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 2;\n        long i = 3;\n    \
    \    while (i <= n) {\n            if (isPrime(c)) {\n                i++;\n \
    \           }\n            a = b;\n            b = c;\n            c = a + b;\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = a + b;\n        long i = 3;\n        while (i <= n) {\n      \
    \      a = b;\n            b = c;\n            c = a + b;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 2;\n        long i =\
    \ 3;\n        while (i < n) {\n            a = b;\n            b = c;\n      \
    \      c = a + b;\n            i++;\n        }\n        return c;", "        long\
    \ a = 1;\n        long b = 1;\n        long c = 0;\n        long i = 2;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 1;\n        long b = 1;\n  \
    \      long c = 0;\n        long i = 2;\n        while (i < n) {\n           \
    \ c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long[] fib = new long[100];\n        fib[0] = 1;\n        fib[1] = 1;\n\
    \        int i = 2;\n        while (true) {\n            fib[i] = fib[i - 1] +\
    \ fib[i - 2];\n            if (isPrime(fib[i])) {\n                n--;\n    \
    \            if (n == 0) {\n                    return fib[i];\n             \
    \   }\n            }\n            i++;\n        }", "        long a = 1;\n   \
    \     long b = 1;\n        long c = 0;\n        long i = 2;\n        while (i\
    \ < n) {\n            c = a + b;\n            a = b;\n            b = c;\n   \
    \         if (isPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 0;\n        long b = 1;\n        long c\
    \ = 1;\n        long i = 1;\n        while (i < n) {\n            c = a + b;\n\
    \            a = b;\n            b = c;\n            if (isPrime(c)) {\n     \
    \           i++;\n            }\n        }\n        return c;", "        long\
    \ a = 0;\n        long b = 1;\n        long c = 1;\n        long i = 1;\n    \
    \    while (i < n) {\n            c = a + b;\n            a = b;\n           \
    \ b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long[] fib = new long[100];\n       \
    \ fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < 100; i++) {\n\
    \            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        long count\
    \ = 0;\n        for (int i = 0; i < 100; i++) {\n            if (isPrime(fib[i]))\
    \ {\n                count++;\n            }\n            if (count == n) {\n\
    \                return fib[i];\n            }\n        }\n        return -1;"]
stop_tokens:
- "\n    }\n"
