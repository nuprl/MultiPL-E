language: java
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < array.size();\
    \ i++) {\n            result.add(array.get(i));\n        }\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(result,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(result);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpcfgdwq_n.java:20)\n\tat Problem.main(tmpcfgdwq_n.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp0fa5yfxm.java:17)\n\tat Problem.main(tmp0fa5yfxm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>(array);\n        if (sum % 2 == 0) {\n       \
    \     Collections.sort(copy, Collections.reverseOrder());\n        } else {\n\
    \            Collections.sort(copy);\n        }\n        return copy;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpez939zuz.java:16)\n\tat Problem.main(tmpez939zuz.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (sum % 2 == 0) {\n            for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp46u9qai4.java:16)\n\tat Problem.main(tmp46u9qai4.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>(array);\n        if ((copy.get(0) + copy.get(copy.size()\
    \ - 1)) % 2 == 0) {\n            Collections.sort(copy, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(copy);\n        }\n        return\
    \ copy;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpoi99uram.java:17)\n\tat Problem.main(tmpoi99uram.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>(array);\n        if (sum % 2 == 0) {\n       \
    \     Collections.sort(copy, Collections.reverseOrder());\n        } else {\n\
    \            Collections.sort(copy);\n        }\n        return copy;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpez939zuz.java:16)\n\tat Problem.main(tmpez939zuz.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ firstIndex = array.get(0);\n        int lastIndex = array.get(array.size() -\
    \ 1);\n        int sum = firstIndex + lastIndex;\n        if (sum % 2 == 0) {\n\
    \            Collections.sort(array, Collections.reverseOrder());\n        } else\
    \ {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpu3uya6xl.java:16)\n\tat Problem.main(tmpu3uya6xl.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
    \        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp4_da7alu.java:16)\n\tat Problem.main(tmp4_da7alu.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        if\
    \ (array == null || array.size() == 0) return array;\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int first = array.get(0);\n    \
    \    int last = array.get(array.size() - 1);\n        int sum = first + last;\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ sorted = new ArrayList<Integer>(array);\n        if (sum % 2 == 0) {\n     \
    \       Collections.sort(sorted, Collections.reverseOrder());\n        } else\
    \ {\n            Collections.sort(sorted);\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp3sj5qbcm.java:16)\n\tat Problem.main(tmp3sj5qbcm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        int sum = first + last;\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (sum % 2 == 0) {\n            for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp46u9qai4.java:16)\n\tat Problem.main(tmp46u9qai4.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
    \          Collections.sort(array);\n        }\n        for (int i = 0; i < array.size();\
    \ i++) {\n            result.add(array.get(i));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp8qznt2x1.java:16)\n\tat Problem.main(tmp8qznt2x1.java:29)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>(array);\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            Collections.sort(copy, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(copy);\n        }\n        return\
    \ copy;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpctvhxjm4.java:17)\n\tat Problem.main(tmpctvhxjm4.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int first = array.get(0);\n    \
    \    int last = array.get(array.size() - 1);\n        int sum = first + last;\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp446zqs70.java:17)\n\tat Problem.main(tmp446zqs70.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        int sum = first + last;\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
    \        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp4_da7alu.java:16)\n\tat Problem.main(tmp4_da7alu.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here.\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpd1p4ql0u.java:17)\n\tat Problem.main(tmpd1p4ql0u.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpjay4kxhi.java:17)\n\tat Problem.main(tmpjay4kxhi.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        return array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7chgr10s.java:22)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (sum % 2 == 0) {\n            for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp46u9qai4.java:16)\n\tat Problem.main(tmp46u9qai4.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ sorted = new ArrayList<Integer>(array);\n        if (sum % 2 == 0) {\n     \
    \       Collections.sort(sorted, Collections.reverseOrder());\n        } else\
    \ {\n            Collections.sort(sorted);\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp3sj5qbcm.java:16)\n\tat Problem.main(tmp3sj5qbcm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int first = array.get(0);\n        int\
    \ last = array.get(array.size() - 1);\n        int sum = first + last;\n     \
    \   if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpbxl3f2pl.java:17)\n\tat Problem.main(tmpbxl3f2pl.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here.\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpd1p4ql0u.java:17)\n\tat Problem.main(tmpd1p4ql0u.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        int first = array.get(0);\n        int last =\
    \ array.get(array.size() - 1);\n        if ((first + last) % 2 == 0) {\n     \
    \       Collections.sort(array, Collections.reverseOrder());\n        } else {\n\
    \            Collections.sort(array);\n        }\n        return array;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmps198njfn.java:17)\n\tat Problem.main(tmps198njfn.java:27)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ sortedArray = new ArrayList<Integer>();\n        int first = array.get(0);\n\
    \        int last = array.get(array.size() - 1);\n        if ((first + last) %\
    \ 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpi7zc5wh9.java:17)\n\tat Problem.main(tmpi7zc5wh9.java:27)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
    \ % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpwc6sgtt9.java:18)\n\tat Problem.main(tmpwc6sgtt9.java:27)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp0fa5yfxm.java:17)\n\tat Problem.main(tmp0fa5yfxm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
    \          Collections.sort(array);\n        }\n        return array;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpay_616rj.java:16)\n\tat Problem.main(tmpay_616rj.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpxmru_33m.java:17)\n\tat Problem.main(tmpxmru_33m.java:29)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ copy = new ArrayList<Integer>(array);\n        if (sum % 2 == 0) {\n       \
    \     Collections.sort(copy, Collections.reverseOrder());\n        } else {\n\
    \            Collections.sort(copy);\n        }\n        return copy;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpez939zuz.java:16)\n\tat Problem.main(tmpez939zuz.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
    \          Collections.sort(array);\n        }\n        return array;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpay_616rj.java:16)\n\tat Problem.main(tmpay_616rj.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpjay4kxhi.java:17)\n\tat Problem.main(tmpjay4kxhi.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ sortedArray = new ArrayList<Integer>();\n        int firstIndex = array.get(0);\n\
    \        int lastIndex = array.get(array.size() - 1);\n        int sum = firstIndex\
    \ + lastIndex;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpsq5isjwj.java:17)\n\tat Problem.main(tmpsq5isjwj.java:28)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        if\
    \ (array == null || array.size() == 0) {\n            return array;\n        }\n\
    \        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
    \ % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ sorted = new ArrayList<>(array);\n        if (sum % 2 == 0) {\n            Collections.sort(sorted,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(sorted);\n\
    \        }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpb34qlwok.java:16)\n\tat Problem.main(tmpb34qlwok.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int first = array.get(0);\n    \
    \    int last = array.get(array.size() - 1);\n        int sum = first + last;\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp446zqs70.java:17)\n\tat Problem.main(tmp446zqs70.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        return array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7chgr10s.java:22)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpjay4kxhi.java:17)\n\tat Problem.main(tmpjay4kxhi.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp0fa5yfxm.java:17)\n\tat Problem.main(tmp0fa5yfxm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        if (array.size() == 1) {\n        \
    \    result.add(array.get(0));\n            return result;\n        }\n      \
    \  if (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2\
    \ == 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            result.add(array.get(array.size() - 1));\n    \
    \        result.addAll(sortArray(new ArrayList<Integer>(array.subList(1, array.size()\
    \ - 1))));\n            result.add(array.get(0));\n        } else {\n        \
    \    result.add(array.get(0));\n            result.addAll(sortArray(new ArrayList<Integer>(array.subList(1,\
    \ array.size() - 1))));\n            result.add(array.get(array.size() - 1));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0jpmnwl.java:49)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int first = array.get(0);\n        int\
    \ last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0) {\n\
    \            Collections.sort(array, Collections.reverseOrder());\n        } else\
    \ {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpxjzsr58w.java:17)\n\tat Problem.main(tmpxjzsr58w.java:27)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp0fa5yfxm.java:17)\n\tat Problem.main(tmp0fa5yfxm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        int sum = first + last;\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int firstIndex = array.get(0);\n\
    \        int lastIndex = array.get(array.size() - 1);\n        int sum = firstIndex\
    \ + lastIndex;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmppzruxj91.java:17)\n\tat Problem.main(tmppzruxj91.java:28)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ copy = new ArrayList<>(array);\n        if (sum % 2 == 0) {\n            Collections.sort(copy,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(copy);\n\
    \        }\n        return copy;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpsa6o3drq.java:16)\n\tat Problem.main(tmpsa6o3drq.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
    \        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp4_da7alu.java:16)\n\tat Problem.main(tmp4_da7alu.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        return array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7chgr10s.java:22)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int first = array.get(0);\n        int\
    \ last = array.get(array.size() - 1);\n        int sum = first + last;\n     \
    \   if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpbxl3f2pl.java:17)\n\tat Problem.main(tmpbxl3f2pl.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        //\
    \ Write your code here\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n     \
    \   if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp31hlw5kj.java:17)\n\tat Problem.main(tmp31hlw5kj.java:27)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int first = array.get(0);\n        int\
    \ last = array.get(array.size() - 1);\n        int sum = first + last;\n     \
    \   if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpbxl3f2pl.java:17)\n\tat Problem.main(tmpbxl3f2pl.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp0fa5yfxm.java:17)\n\tat Problem.main(tmp0fa5yfxm.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        int sum = first + last;\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n   \
    \     int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1dbhlmkt.java:16)\n\tat Problem.main(tmp1dbhlmkt.java:27)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        int sum = first + last;\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int first = array.get(0);\n       \
    \ int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        if (array.size() == 1) {\n        \
    \    result.add(array.get(0));\n            return result;\n        }\n      \
    \  int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\
    \        if ((first + last) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
    \          Collections.sort(array);\n        }\n        return array;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpay_616rj.java:16)\n\tat Problem.main(tmpay_616rj.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
    \          Collections.sort(array);\n        }\n        return array;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpay_616rj.java:16)\n\tat Problem.main(tmpay_616rj.java:26)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int first = array.get(0);\n        int\
    \ last = array.get(array.size() - 1);\n        int sum = first + last;\n     \
    \   if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpbxl3f2pl.java:17)\n\tat Problem.main(tmpbxl3f2pl.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (array.size() == 0) {\n     \
    \       return result;\n        }\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ sortedArray = new ArrayList<Integer>();\n        int firstIndex = array.get(0);\n\
    \        int lastIndex = array.get(array.size() - 1);\n        int sum = firstIndex\
    \ + lastIndex;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpsq5isjwj.java:17)\n\tat Problem.main(tmpsq5isjwj.java:28)\n"
  stdout: ''
  timestamp: 1660011620
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0)\
    \ {\n            Collections.sort(array, Collections.reverseOrder());\n      \
    \  } else {\n            Collections.sort(array);\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpytrlpo4_.java:16)\n\tat Problem.main(tmpytrlpo4_.java:25)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        int\
    \ sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n          \
    \  for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp05u8lfrt.java:16)\n\tat Problem.main(tmp05u8lfrt.java:30)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
    \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
    \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
    \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)21, (int)14, (int)23, (int)11)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)23, (int)21, (int)14, (int)11)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpkl6tmgyn.java:17)\n\tat Problem.main(tmpkl6tmgyn.java:26)\n"
  stdout: ''
  timestamp: 1660011618
