language: java
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ d2 = d - i;\n        if (d2 < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpcqpqw4dd.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int)Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpl0u5nur7.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7_jt388f.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // This is a placeholder\n        return 0;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpfyy0z44h.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i == 0.5) {\n            return d >\
    \ 0 ? i + 1 : i - 1;\n        }\n        return (int) Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpbgl5_flb.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_1el4xho.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmppx37dtlr.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ val = Double.parseDouble(value);\n        int floor = (int) Math.floor(val);\n\
    \        int ceil = (int) Math.ceil(val);\n        if (Math.abs(val - floor) <\
    \ Math.abs(val - ceil)) {\n            return floor;\n        } else {\n     \
    \       return ceil;\n        }\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpwnrqeuh1.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int)d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3cb0irbe.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        if (d\
    \ >= 0) {\n            return (int) Math.ceil(d);\n        } else {\n        \
    \    return (int) Math.floor(d);\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpfjl8dvjw.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ f = d - i;\n        if (f < 0.5) {\n            return i;\n        } else {\n\
    \            return i + 1;\n        }\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpfatcwvww.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        if (d > 0) {\n            return (int)Math.ceil(d);\n\
    \        } else {\n            return (int)Math.floor(d);\n        }\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8_ebg444.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int) Math.round(d);\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpf8f46x5e.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        double diff = d\
    \ - i;\n        if (diff < 0.5) {\n            return i;\n        } else {\n \
    \           return i + 1;\n        }\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc06v9j6l.java:30: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        if (Math.abs(d - i) == 0.5) {\n\
    \            if (d > 0) {\n                return i + 1;\n            } else {\n\
    \                return i - 1;\n            }\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpl2m__lsz.java:30: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d > 0) {\n            return\
    \ (int) Math.ceil(d);\n        } else {\n            return (int) Math.floor(d);\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpt_95mdta.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double val = Double.parseDouble(value);\n\
    \        int floor = (int) Math.floor(val);\n        int ceil = (int) Math.ceil(val);\n\
    \        if (val - floor < ceil - val) {\n            return floor;\n        }\
    \ else {\n            return ceil;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphbgsam4e.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) Math.round(d);\n        return\
    \ i;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8j37oj35.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3zpwxis_.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement solution\n  \
    \      return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpa9tetnc2.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement me\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpg_22rt13.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i > 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_7nstzpl.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmppx37dtlr.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i > 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpobayt3qc.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ d2 = d - i;\n        if (d2 < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpcqpqw4dd.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6umdqtnb.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ diff = d - i;\n        if (diff < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpwqwcfxxx.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int)Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpl0u5nur7.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i < 0.5) {\n            return i;\n\
    \        } else {\n            return i + 1;\n        }\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpg2s8uj_4.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7_jt388f.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if(d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7ou2k7mi.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >=\
    \ 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5etocnmf.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpzlpq9eb0.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n     \
    \   return i;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpzk4quv0i.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_1el4xho.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        double f = d - i;\n        if (f < 0.5) {\n\
    \            return i;\n        } else {\n            return i + 1;\n        }\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp52ixdnua.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i > 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_7nstzpl.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpao358mje.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpao358mje.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) d;\n        if (d - i < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp461ntgb5.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int)Math.round(d);\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmps8er892o.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i > 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpobayt3qc.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9iwpfs83.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int)Math.round(d);\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmps8er892o.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmppx37dtlr.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3zpwxis_.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d > 0) {\n            return\
    \ (int)Math.ceil(d);\n        } else {\n            return (int)Math.floor(d);\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmph2tyaeg0.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphipb6fu6.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double v = Double.parseDouble(value);\n        int i = (int) v;\n        if\
    \ (v - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmptduzfsha.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3zpwxis_.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        return 0;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpinkhoj0j.java:20: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmptcoe7j7b.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmph_4tofsf.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphipb6fu6.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmppx37dtlr.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        BigDecimal bd = new BigDecimal(value);\n\
    \        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpqw3rtwat.java:21: error: unreachable statement

    return 0;

    ^

    Note: /tmp/tmpqw3rtwat.java uses or overrides a deprecated API.

    Note: Recompile with -Xlint:deprecation for details.

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ > 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpprgjbfyn.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_qt_xhmc.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_1el4xho.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7_jt388f.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7_jt388f.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code goes here\n       \
    \ double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp1961m6cc.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double val = Double.parseDouble(value);\n        int intVal = (int) val;\n\
    \        if (val - intVal >= 0.5) {\n            return intVal + 1;\n        }\
    \ else {\n            return intVal;\n        }\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpi9zfk7bh.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9iwpfs83.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) Math.round(d);\n        return\
    \ i;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8j37oj35.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpc0m50siu.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        double d2\
    \ = d - i;\n        if (d2 >= 0.5) {\n            return i + 1;\n        } else\
    \ {\n            return i;\n        }\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp3em2l33s.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        double d = Double.parseDouble(value);\n        int i = (int) d;\n   \
    \     double diff = d - i;\n        if (diff == 0.5) {\n            return i +\
    \ 1;\n        }\n        return i;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5ouyw9_k.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        if (d > 0) {\n            return (int) Math.ceil(d);\n\
    \        } else {\n            return (int) Math.floor(d);\n        }\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpvavg_vhp.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        double diff = d - i;\n        if (diff >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_cpjruca.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_qt_xhmc.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (Math.abs(d - i) >= 0.5) {\n           \
    \ return d > 0 ? i + 1 : i - 1;\n        }\n        return i;\nreturn 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_xs2_nea.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpao358mje.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpv57v5zr3.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9_ultej4.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_qt_xhmc.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        // Hint: You may want to use the Math.round() function\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5gqztlas.java:22: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        return 0;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpinkhoj0j.java:20: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double num = Double.parseDouble(value);\n        int intNum = (int) num;\n\
    \        if (num - intNum > 0.5) {\n            return intNum + 1;\n        }\
    \ else {\n            return intNum;\n        }\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_80f5p7n.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphipb6fu6.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9_ultej4.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_qt_xhmc.java:23: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i < 0.5) {\n            return i;\n\
    \        } else {\n            return i + 1;\n        }\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpg2s8uj_4.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        double d2 = d -\
    \ i;\n        if (d2 < 0.5) {\n            return i;\n        } else {\n     \
    \       return i + 1;\n        }\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpsyfoi7ra.java:30: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        try {\n  \
    \          BigDecimal bd = new BigDecimal(value);\n            return bd.setScale(0,\
    \ RoundingMode.HALF_UP).intValue();\n        } catch (Exception e) {\n       \
    \     return 0;\n        }\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp2q5mxh77.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d < 0) {\n            return\
    \ (int) Math.ceil(d);\n        } else {\n            return (int) Math.floor(d);\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp05flpih0.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double val = Double.parseDouble(value);\n\
    \        int intVal = (int) val;\n        if (val - intVal >= 0.5) {\n       \
    \     return intVal + 1;\n        } else {\n            return intVal;\n     \
    \   }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpynr25s50.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnv5fg0h7.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) d;\n        if (d - i >= 0.5) {\n            return i + 1;\n       \
    \ } else {\n            return i;\n        }\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp0jg3l2qq.java:28: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9iwpfs83.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp9_ultej4.java:27: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp6umdqtnb.java:29: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphipb6fu6.java:24: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpao358mje.java:25: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgzs24rvp.java:26: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpurkt50e0.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphmldkg4i.java:21: error: unreachable statement

    return 0;

    ^

    1 error

    '
  stdout: ''
  timestamp: 1659805256
