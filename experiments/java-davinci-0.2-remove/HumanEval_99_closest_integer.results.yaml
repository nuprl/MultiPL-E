language: java
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ d2 = d - i;\n        if (d2 < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_19x17z2.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int)Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk28klbf.java:28)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9xs3l2l.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // This is a placeholder\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4g6sn3_u.java:24)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i == 0.5) {\n            return d >\
    \ 0 ? i + 1 : i - 1;\n        }\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdq5yvka7.java:29)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacndpe6y.java:25)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss4c0gyo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ val = Double.parseDouble(value);\n        int floor = (int) Math.floor(val);\n\
    \        int ceil = (int) Math.ceil(val);\n        if (Math.abs(val - floor) <\
    \ Math.abs(val - ceil)) {\n            return floor;\n        } else {\n     \
    \       return ceil;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphi_ttwv6.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int)d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppr_60gap.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        if (d\
    \ >= 0) {\n            return (int) Math.ceil(d);\n        } else {\n        \
    \    return (int) Math.floor(d);\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cr8e3pe.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ f = d - i;\n        if (f < 0.5) {\n            return i;\n        } else {\n\
    \            return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3ju8au6.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        if (d > 0) {\n            return (int)Math.ceil(d);\n\
    \        } else {\n            return (int)Math.floor(d);\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3jb7_hy.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int) Math.round(d);\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7y88tm_.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        double diff = d\
    \ - i;\n        if (diff < 0.5) {\n            return i;\n        } else {\n \
    \           return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61b64yjt.java:34)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        if (Math.abs(d - i) == 0.5) {\n\
    \            if (d > 0) {\n                return i + 1;\n            } else {\n\
    \                return i - 1;\n            }\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2luwjwm.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d > 0) {\n            return\
    \ (int) Math.ceil(d);\n        } else {\n            return (int) Math.floor(d);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoz5pvui.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double val = Double.parseDouble(value);\n\
    \        int floor = (int) Math.floor(val);\n        int ceil = (int) Math.ceil(val);\n\
    \        if (val - floor < ceil - val) {\n            return floor;\n        }\
    \ else {\n            return ceil;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjz8a4341.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) Math.round(d);\n        return\
    \ i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvwbwjwf.java:29)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03g96abk.java:33)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement solution\n  \
    \      return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmtfcf_zh.java:23)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement me\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnu67fne6.java:23)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i > 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyo4mp949.java:29)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss4c0gyo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i > 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo5vv10c.java:30)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ d2 = d - i;\n        if (d2 < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_19x17z2.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pxbzs9c.java:33)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        double\
    \ diff = d - i;\n        if (diff < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8df5tnpz.java:32)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int)Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk28klbf.java:28)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i < 0.5) {\n            return i;\n\
    \        } else {\n            return i + 1;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8dnc_g6.java:30)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9xs3l2l.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if(d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9erirup.java:32)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >=\
    \ 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeiaq1p45.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) Math.round(d);\n        return i;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0aamt8td.java:28)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n     \
    \   return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dhfzyxx.java:27)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacndpe6y.java:25)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        double f = d - i;\n        if (f < 0.5) {\n\
    \            return i;\n        } else {\n            return i + 1;\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmftzlsy.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i > 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyo4mp949.java:29)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) d;\n        if (d - i < 0.5) {\n            return i;\n        } else\
    \ {\n            return i + 1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpis3o5_7n.java:32)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int)Math.round(d);\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhsvyyfo.java:26)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i > 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo5vv10c.java:30)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpriz2yrs7.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        return (int)Math.round(d);\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhsvyyfo.java:26)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss4c0gyo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03g96abk.java:33)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d > 0) {\n            return\
    \ (int)Math.ceil(d);\n        } else {\n            return (int)Math.floor(d);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71pq73pp.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01r_bh5e.java:28)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double v = Double.parseDouble(value);\n        int i = (int) v;\n        if\
    \ (v - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp844_ymrb.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i < 0.5)\
    \ {\n            return i;\n        } else {\n            return i + 1;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03g96abk.java:33)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeyq1n31x.java:22)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4b58vms.java:32)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2f5baapa.java:25)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01r_bh5e.java:28)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss4c0gyo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        BigDecimal bd = new BigDecimal(value);\n\
    \        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ > 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pfm6f_b.java:30)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e1bwzcr.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        return (int) Math.round(d);\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacndpe6y.java:25)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9xs3l2l.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i > 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9xs3l2l.java:32)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code goes here\n       \
    \ double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7y52mjx.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double val = Double.parseDouble(value);\n        int intVal = (int) val;\n\
    \        if (val - intVal >= 0.5) {\n            return intVal + 1;\n        }\
    \ else {\n            return intVal;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpupuntlum.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpriz2yrs7.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) Math.round(d);\n        return\
    \ i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvwbwjwf.java:29)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) Math.round(d);\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qwntfgu.java:26)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        double d2\
    \ = d - i;\n        if (d2 >= 0.5) {\n            return i + 1;\n        } else\
    \ {\n            return i;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wo_0iao.java:32)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        double d = Double.parseDouble(value);\n        int i = (int) d;\n   \
    \     double diff = d - i;\n        if (diff == 0.5) {\n            return i +\
    \ 1;\n        }\n        return i;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmutt78_.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        if (d > 0) {\n            return (int) Math.ceil(d);\n\
    \        } else {\n            return (int) Math.floor(d);\n        }\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ufi5w7f.java:33)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        double diff = d - i;\n        if (diff >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprtlxf_94.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e1bwzcr.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (Math.abs(d - i) >= 0.5) {\n           \
    \ return d > 0 ? i + 1 : i - 1;\n        }\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011780
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fusfo_j.java:33)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua2fc1y5.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e1bwzcr.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // TODO: Implement this function\n\
    \        // Hint: You may want to use the Math.round() function\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09r1jpl1.java:24)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeyq1n31x.java:22)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double num = Double.parseDouble(value);\n        int intNum = (int) num;\n\
    \        if (num - intNum > 0.5) {\n            return intNum + 1;\n        }\
    \ else {\n            return intNum;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0xwbo78f.java:30)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01r_bh5e.java:28)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua2fc1y5.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) Math.round(d);\n\
    \        return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9e1bwzcr.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i < 0.5) {\n            return i;\n\
    \        } else {\n            return i + 1;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8dnc_g6.java:30)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        double d2 = d -\
    \ i;\n        if (d2 < 0.5) {\n            return i;\n        } else {\n     \
    \       return i + 1;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qax49zo.java:34)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        try {\n  \
    \          BigDecimal bd = new BigDecimal(value);\n            return bd.setScale(0,\
    \ RoundingMode.HALF_UP).intValue();\n        } catch (Exception e) {\n       \
    \     return 0;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        if (d < 0) {\n            return\
    \ (int) Math.ceil(d);\n        } else {\n            return (int) Math.floor(d);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0pc3vgd.java:29)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double val = Double.parseDouble(value);\n\
    \        int intVal = (int) val;\n        if (val - intVal >= 0.5) {\n       \
    \     return intVal + 1;\n        } else {\n            return intVal;\n     \
    \   }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmoi2i4mo.java:30)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i >= 0.5) {\n            return i + 1;\n        } else {\n            return\
    \ i;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7njqryut.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // Good luck!\n        double d = Double.parseDouble(value);\n        int i\
    \ = (int) d;\n        if (d - i >= 0.5) {\n            return i + 1;\n       \
    \ } else {\n            return i;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpufcq9mdz.java:32)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  double d = Double.parseDouble(value);\n        int i = (int) d;\n        if\
    \ (d - i < 0.5) {\n            return i;\n        } else {\n            return\
    \ i + 1;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpriz2yrs7.java:31)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        double\
    \ d = Double.parseDouble(value);\n        int i = (int) d;\n        if (d - i\
    \ >= 0.5) {\n            return i + 1;\n        } else {\n            return i;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua2fc1y5.java:31)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i >= 0.5)\
    \ {\n            return i + 1;\n        } else {\n            return i;\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pxbzs9c.java:33)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        double d =\
    \ Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01r_bh5e.java:28)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n\
    \        int i = (int) d;\n        if (d - i >= 0.5) {\n            return i +\
    \ 1;\n        } else {\n            return i;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohlryv9v.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Write your code here\n      \
    \  return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy580yeqo.java:23)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
    \    // Rounding away from zero means that if the given number is equidistant\n\
    \    // from two integers, the one you should return is the one that is the\n\
    \    // farthest from zero. For example closest_integer(\"14.5\") should\n   \
    \ // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static\
    \ int closestInteger(String value) {\n        // Your code here\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxb60v4c.java:23)\n"
  stdout: ''
  timestamp: 1660011778
