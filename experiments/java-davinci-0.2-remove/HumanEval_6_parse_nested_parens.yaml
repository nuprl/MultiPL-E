completions:
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int curr_depth = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    curr_depth++;\n                    max_depth = Math.max(max_depth,\
  \ curr_depth);\n                } else if (group.charAt(i) == ')') {\n         \
  \           curr_depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_depth = 0;\n            int depth = 0;\n            for\
  \ (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n        \
  \            depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here\n        String[] groups = paren_string.split(\" \");\n       \
  \ for (String group : groups) {\n            int max = 0;\n            int current\
  \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n               \
  \ if (group.charAt(i) == '(') {\n                    current++;\n              \
  \      max = Math.max(max, current);\n                } else {\n               \
  \     current--;\n                }\n            }\n            result.add(max);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Implement this function.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int current = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current++;\n\
  \                max = Math.max(max, current);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                current--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          current = 0;\n            }\n        }\n        result.add(max);\n  \
  \      return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int current_nesting = 0;\n       \
  \     for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_nesting--;\n                }\n       \
  \     }\n            result.add(max_nesting);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int curr_nesting = 0;\n          \
  \  for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    curr_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, curr_nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    curr_nesting--;\n                }\n          \
  \  }\n            result.add(max_nesting);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        int\
  \ max_nesting_count = 0;\n        int nesting_count = 0;\n        for (int i = 0;\
  \ i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(')\
  \ {\n                nesting_count++;\n                if (nesting_count > max_nesting_count)\
  \ {\n                    max_nesting_count = nesting_count;\n                }\n\
  \            } else if (paren_string.charAt(i) == ')') {\n                nesting_count--;\n\
  \            }\n        }\n        max_nesting.add(max_nesting_count);\n       \
  \ return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        String[] parens = paren_string.split(\" \");\n      \
  \  for (String paren : parens) {\n            int max = 0;\n            int curr\
  \ = 0;\n            for (int i = 0; i < paren.length(); i++) {\n               \
  \ if (paren.charAt(i) == '(') {\n                    curr++;\n                 \
  \   max = Math.max(max, curr);\n                } else {\n                    curr--;\n\
  \                }\n            }\n            result.add(max);\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        int\
  \ max_nesting_so_far = 0;\n        int current_nesting = 0;\n        for (int i\
  \ = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
  \ == '(') {\n                current_nesting++;\n                if (current_nesting\
  \ > max_nesting_so_far) {\n                    max_nesting_so_far = current_nesting;\n\
  \                }\n            } else if (paren_string.charAt(i) == ')') {\n  \
  \              current_nesting--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                max_nesting.add(max_nesting_so_far);\n            \
  \    max_nesting_so_far = 0;\n                current_nesting = 0;\n           \
  \ }\n        }\n        max_nesting.add(max_nesting_so_far);\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int current_nesting = 0;\n       \
  \     for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_nesting--;\n                }\n       \
  \     }\n            result.add(max_nesting);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_depth = 0;\n            int depth = 0;\n            for\
  \ (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n        \
  \            depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n \
  \           int max_nesting = 0;\n            int nesting = 0;\n            for\
  \ (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) ==\
  \ '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (paren.charAt(i) == ')') {\n            \
  \        nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int curr_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_depth++;\n\
  \                max_depth = Math.max(max_depth, curr_depth);\n            } else\
  \ if (paren_string.charAt(i) == ')') {\n                curr_depth--;\n        \
  \    } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                curr_depth = 0;\n            }\n\
  \        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> max_depth = new ArrayList<Integer>();\n        int depth\
  \ = 0;\n        int max = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                if (depth > max) {\n                    max = depth;\n        \
  \        }\n            } else if (paren_string.charAt(i) == ')') {\n          \
  \      depth--;\n            } else if (paren_string.charAt(i) == ' ') {\n     \
  \           max_depth.add(max);\n                max = 0;\n                depth\
  \ = 0;\n            }\n        }\n        max_depth.add(max);\n        return max_depth;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Write your code here\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> max_depth = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int curr = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr++;\n\
  \                max = Math.max(max, curr);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                curr--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                max_depth.add(max);\n                max = 0;\n   \
  \             curr = 0;\n            }\n        }\n        max_depth.add(max);\n\
  \        return max_depth;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Write your code here\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            }\n        }\n        result.add(max);\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (paren.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int curr_depth = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    curr_depth++;\n                    max_depth = Math.max(max_depth,\
  \ curr_depth);\n                } else if (group.charAt(i) == ')') {\n         \
  \           curr_depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        int\
  \ max_nesting_so_far = 0;\n        int current_nesting = 0;\n        for (int i\
  \ = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
  \ == '(') {\n                current_nesting++;\n                if (current_nesting\
  \ > max_nesting_so_far) {\n                    max_nesting_so_far = current_nesting;\n\
  \                }\n            } else if (paren_string.charAt(i) == ')') {\n  \
  \              current_nesting--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                max_nesting.add(max_nesting_so_far);\n            \
  \    max_nesting_so_far = 0;\n                current_nesting = 0;\n           \
  \ }\n        }\n        max_nesting.add(max_nesting_so_far);\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Write your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Write your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Implement your code here\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String\
  \ s : paren_string.split(\" \")) {\n            int max_depth = 0;\n           \
  \ int curr_depth = 0;\n            for (int i = 0; i < s.length(); i++) {\n    \
  \            if (s.charAt(i) == '(') {\n                    curr_depth++;\n    \
  \                max_depth = Math.max(max_depth, curr_depth);\n                }\
  \ else if (s.charAt(i) == ')') {\n                    curr_depth--;\n          \
  \      }\n            }\n            result.add(max_depth);\n        }\n       \
  \ return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String\
  \ group : paren_string.split(\" \")) {\n            int max_depth = 0;\n       \
  \     int curr_depth = 0;\n            for (char c : group.toCharArray()) {\n  \
  \              if (c == '(') {\n                    curr_depth++;\n            \
  \        max_depth = Math.max(max_depth, curr_depth);\n                } else if\
  \ (c == ')') {\n                    curr_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n \
  \           int max = 0;\n            int curr = 0;\n            for (int i = 0;\
  \ i < paren.length(); i++) {\n                if (paren.charAt(i) == '(') {\n  \
  \                  curr++;\n                    max = Math.max(max, curr);\n   \
  \             } else {\n                    curr--;\n                }\n       \
  \     }\n            result.add(max);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Implement this function.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Implement this function.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int current_nesting = 0;\n       \
  \     for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_nesting--;\n                }\n       \
  \     }\n            result.add(max_nesting);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max = 0;\n            int count = 0;\n            for (int i = 0;\
  \ i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n  \
  \                  count++;\n                    max = Math.max(max, count);\n \
  \               } else if (group.charAt(i) == ')') {\n                    count--;\n\
  \                }\n            }\n            result.add(max);\n        }\n   \
  \     return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        //\
  \ TODO: Implement this function.\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_level\
  \ = 0;\n        int cur_level = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                cur_level++;\n\
  \                max_level = Math.max(max_level, cur_level);\n            } else\
  \ if (paren_string.charAt(i) == ')') {\n                cur_level--;\n         \
  \   } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_level);\n\
  \                max_level = 0;\n                cur_level = 0;\n            }\n\
  \        }\n        result.add(max_level);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int nesting = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (group.charAt(i) == ')') {\n            \
  \        nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String\
  \ group : paren_string.split(\" \")) {\n            int max_depth = 0;\n       \
  \     int curr_depth = 0;\n            for (char c : group.toCharArray()) {\n  \
  \              if (c == '(') {\n                    curr_depth++;\n            \
  \        max_depth = Math.max(max_depth, curr_depth);\n                } else if\
  \ (c == ')') {\n                    curr_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> max_levels = new ArrayList<Integer>();\n        int\
  \ max_level = 0;\n        int level = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n\
  \                if (level > max_level) {\n                    max_level = level;\n\
  \                }\n            } else if (paren_string.charAt(i) == ')') {\n  \
  \              level--;\n            } else if (paren_string.charAt(i) == ' ') {\n\
  \                max_levels.add(max_level);\n                max_level = 0;\n  \
  \              level = 0;\n            }\n        }\n        max_levels.add(max_level);\n\
  \        return max_levels;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Your\
  \ code here\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_depth = 0;\n            int current_depth = 0;\n      \
  \      for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (paren_group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_level\
  \ = 0;\n        int level = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n\
  \                max_level = Math.max(max_level, level);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                level--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_level);\n\
  \                max_level = 0;\n                level = 0;\n            }\n   \
  \     }\n        result.add(max_level);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_nesting = 0;\n            int nesting = 0;\n          \
  \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (paren_group.charAt(i) == ')') {\n      \
  \              nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int nesting = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (group.charAt(i) == ')') {\n            \
  \        nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int current_depth = 0;\n           \
  \ for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int current_nesting = 0;\n       \
  \     for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    current_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    current_nesting--;\n                }\n       \
  \     }\n            result.add(max_nesting);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting = 0;\n            int nesting = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (group.charAt(i) == ')') {\n            \
  \        nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        String[] paren_groups\
  \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_nesting = 0;\n            int cur_nesting = 0;\n      \
  \      for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    cur_nesting++;\n                    max_nesting\
  \ = Math.max(max_nesting, cur_nesting);\n                } else if (paren_group.charAt(i)\
  \ == ')') {\n                    cur_nesting--;\n                }\n           \
  \ }\n            ret.add(max_nesting);\n        }\n        return ret;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int curr_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_depth++;\n\
  \                max_depth = Math.max(max_depth, curr_depth);\n            } else\
  \ if (paren_string.charAt(i) == ')') {\n                curr_depth--;\n        \
  \    } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                curr_depth = 0;\n            }\n\
  \        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
  \ {\n                depth++;\n                max_depth = Math.max(max_depth, depth);\n\
  \            } else if (c == ')') {\n                depth--;\n            } else\
  \ if (c == ' ') {\n                result.add(max_depth);\n                max_depth\
  \ = 0;\n                depth = 0;\n            }\n        }\n        result.add(max_depth);\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            }\n        }\n        result.add(max);\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_depth = 0;\n            int current_depth = 0;\n      \
  \      for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    current_depth++;\n                    max_depth\
  \ = Math.max(max_depth, current_depth);\n                } else if (paren_group.charAt(i)\
  \ == ')') {\n                    current_depth--;\n                }\n         \
  \   }\n            result.add(max_depth);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_nesting = 0;\n            int nesting = 0;\n          \
  \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    nesting++;\n                    max_nesting = Math.max(max_nesting,\
  \ nesting);\n                } else if (paren_group.charAt(i) == ')') {\n      \
  \              nesting--;\n                }\n            }\n            result.add(max_nesting);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
  \ Write your code here.\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_nesting\
  \ = 0;\n        int current_nesting = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_nesting++;\n\
  \                max_nesting = Math.max(max_nesting, current_nesting);\n       \
  \     } else if (paren_string.charAt(i) == ')') {\n                current_nesting--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_nesting);\n\
  \                max_nesting = 0;\n                current_nesting = 0;\n      \
  \      }\n        }\n        result.add(max_nesting);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        // Write your code here.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        String[] groups = paren_string.split(\" \");\n        for (String group\
  \ : groups) {\n            int max_depth = 0;\n            int depth = 0;\n    \
  \        for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int nesting = 0;\n            int max_nesting_so_far = 0;\n        \
  \    for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
  \ == '(') {\n                    nesting++;\n                    max_nesting_so_far\
  \ = Math.max(max_nesting_so_far, nesting);\n                } else if (group.charAt(i)\
  \ == ')') {\n                    nesting--;\n                }\n            }\n\
  \            max_nesting.add(max_nesting_so_far);\n        }\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
  \ {\n            int max_depth = 0;\n            int depth = 0;\n            for\
  \ (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
  \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n        \
  \            depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int curr_depth = 0;\n            for\
  \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) ==\
  \ '(') {\n                    curr_depth++;\n                    max_depth = Math.max(max_depth,\
  \ curr_depth);\n                } else if (group.charAt(i) == ')') {\n         \
  \           curr_depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                current_depth++;\n\
  \                max_depth = Math.max(max_depth, current_depth);\n            }\
  \ else if (paren_string.charAt(i) == ')') {\n                current_depth--;\n\
  \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                current_depth = 0;\n          \
  \  }\n        }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        for\
  \ (String paren_group : paren_string.split(\" \")) {\n            int max_nest =\
  \ 0;\n            int curr_nest = 0;\n            for (int i = 0; i < paren_group.length();\
  \ i++) {\n                if (paren_group.charAt(i) == '(') {\n                \
  \    curr_nest++;\n                    max_nest = Math.max(max_nest, curr_nest);\n\
  \                } else if (paren_group.charAt(i) == ')') {\n                  \
  \  curr_nest--;\n                }\n            }\n            max_nesting.add(max_nest);\n\
  \        }\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> max_depth = new ArrayList<Integer>();\n        int depth\
  \ = 0;\n        int max = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                if (depth > max) {\n                    max = depth;\n        \
  \        }\n            } else if (paren_string.charAt(i) == ')') {\n          \
  \      depth--;\n            } else if (paren_string.charAt(i) == ' ') {\n     \
  \           max_depth.add(max);\n                max = 0;\n                depth\
  \ = 0;\n            }\n        }\n        max_depth.add(max);\n        return max_depth;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_level\
  \ = 0;\n        int level = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n\
  \                max_level = Math.max(max_level, level);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                level--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_level);\n\
  \                max_level = 0;\n                level = 0;\n            }\n   \
  \     }\n        result.add(max_level);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_nesting_level = 0;\n            int current_nesting_level =\
  \ 0;\n            for (int i = 0; i < group.length(); i++) {\n                if\
  \ (group.charAt(i) == '(') {\n                    current_nesting_level++;\n   \
  \                 max_nesting_level = Math.max(max_nesting_level, current_nesting_level);\n\
  \                } else if (group.charAt(i) == ')') {\n                    current_nesting_level--;\n\
  \                }\n            }\n            max_nesting.add(max_nesting_level);\n\
  \        }\n        return max_nesting;"
- "        ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_level = 0;\n            int level = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    level++;\n                    max_level = Math.max(max_level,\
  \ level);\n                } else if (group.charAt(i) == ')') {\n              \
  \      level--;\n                }\n            }\n            max_nesting.add(max_level);\n\
  \        }\n        return max_nesting;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_depth\
  \ = 0;\n        int depth = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n\
  \                max_depth = Math.max(max_depth, depth);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                depth--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_depth);\n\
  \                max_depth = 0;\n                depth = 0;\n            }\n   \
  \     }\n        result.add(max_depth);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max_level\
  \ = 0;\n        int level = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n\
  \                max_level = Math.max(max_level, level);\n            } else if\
  \ (paren_string.charAt(i) == ')') {\n                level--;\n            } else\
  \ if (paren_string.charAt(i) == ' ') {\n                result.add(max_level);\n\
  \                max_level = 0;\n                level = 0;\n            }\n   \
  \     }\n        result.add(max_level);\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int max\
  \ = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.length();\
  \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
  \                max = Math.max(max, count);\n            } else if (paren_string.charAt(i)\
  \ == ')') {\n                count--;\n            } else if (paren_string.charAt(i)\
  \ == ' ') {\n                result.add(max);\n                max = 0;\n      \
  \          count = 0;\n            }\n        }\n        result.add(max);\n    \
  \    return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
  \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n \
  \           int max_depth = 0;\n            int depth = 0;\n            for (int\
  \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
  \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
  \ depth);\n                } else if (group.charAt(i) == ')') {\n              \
  \      depth--;\n                }\n            }\n            result.add(max_depth);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        return result;"
language: java
name: HumanEval_6_parse_nested_parens
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n    public static ArrayList<Integer>\
  \ parseNestedParens(String paren_string) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
  )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
  \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
  \    }\n\n}\n"
