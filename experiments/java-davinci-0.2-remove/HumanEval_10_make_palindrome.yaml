name: HumanEval_10_make_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find the shortest palindrome that begins with a supplied\
  \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of\
  \ supplied string that is a palindrome.\n    // - Append to the end of the string\
  \ reverse of a string prefix that comes before the palindromic suffix.\n    public\
  \ static String makePalindrome(String string) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        int n = string.length();\n        int[] z = new int[n];\n \
    \       z[0] = 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        int length = string.length();\n        int i = 0;\n        while (i <\
    \ length) {\n            if (isPalindrome(string.substring(i))) {\n          \
    \      builder.append(reverse(string.substring(0, i)));\n                break;\n\
    \            }\n            i++;\n        }\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        z[0] =\
    \ n;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n     \
    \       if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        int\
    \ n = string.length();\n        int i = 0;\n        int j = n - 1;\n        while\
    \ (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n       \
    \         break;\n            }\n            i++;\n            j--;\n        }\n\
    \        if (i >= j) {\n            return string;\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        builder.append(string.substring(0, i));\n\
    \        builder.append(new StringBuilder(string.substring(i)).reverse());\n \
    \       return builder.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string);\n        reverse.reverse();\n\
    \        int n = string.length();\n        int i = 0;\n        for (; i < n; i++)\
    \ {\n            if (string.substring(i).equals(reverse.substring(0, n - i)))\
    \ {\n                break;\n            }\n        }\n        builder.append(reverse.substring(n\
    \ - i));\n        return builder.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (z[i] == n - i) {\n                max\
    \ = z[i];\n                break;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n \
    \           builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        int n = string.length();\n    \
    \    int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  int i = 0;\n        for (; i < string.length(); i++) {\n            if (string.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return builder.append(reverse.substring(string.length() - i)).toString();",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      int longestPalindromeSuffix = longestPalindromeSuffix(string);\n      \
    \  StringBuilder builder = new StringBuilder(string);\n        builder.append(reverse(string.substring(0,\
    \ string.length() - longestPalindromeSuffix)));\n        return builder.toString();",
  "        if (string.length() == 0) return string;\n        int maxPalindromeLength\
    \ = 0;\n        int maxPalindromeStart = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            int palindromeLength = 0;\n            int palindromeStart\
    \ = 0;\n            int j = i;\n            int k = string.length() - 1;\n   \
    \         while (j >= 0 && k >= 0 && string.charAt(j) == string.charAt(k)) {\n\
    \                palindromeLength++;\n                palindromeStart = j;\n \
    \               j--;\n                k--;\n            }\n            if (palindromeLength\
    \ > maxPalindromeLength) {\n                maxPalindromeLength = palindromeLength;\n\
    \                maxPalindromeStart = palindromeStart;\n            }\n      \
    \  }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < string.length() - maxPalindromeLength; i++) {\n            sb.append(string.charAt(string.length()\
    \ - 1 - i));\n        }\n        sb.append(string);\n        return sb.toString();",
  "        StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reverse = new StringBuilder(string).reverse();\n        int i = 0;\n       \
    \ for (; i < string.length(); i++) {\n            if (string.charAt(i) != reverse.charAt(i))\
    \ {\n                break;\n            }\n        }\n        builder.append(reverse.substring(i));\n\
    \        return builder.toString();", "        int n = string.length();\n    \
    \    int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < n - max; i++) {\n            sb.append(string.charAt(n\
    \ - i - 1));\n        }\n        sb.append(string);\n        return sb.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        z[0] =\
    \ 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n     \
    \       if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = max + 1; i < n; i++) {\n            sb.append(string.charAt(i));\n       \
    \ }\n        sb.append(string);\n        return sb.toString();", "        int\
    \ length = string.length();\n        int[] z = new int[length];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < length; i++) {\n            if (i <=\
    \ r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n\
    \            while (i + z[i] < length && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < length;\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        StringBuilder builder = new StringBuilder();\n       \
    \ for (int i = max + 1; i < length; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int maxPalindromeLength = 0;\n        int maxPalindromeStartIndex = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            for (int j =\
    \ 0; j <= i; j++) {\n                if (isPalindrome(string, j, i)) {\n     \
    \               if (i - j + 1 > maxPalindromeLength) {\n                     \
    \   maxPalindromeLength = i - j + 1;\n                        maxPalindromeStartIndex\
    \ = j;\n                    }\n                }\n            }\n        }\n \
    \       StringBuilder builder = new StringBuilder();\n        builder.append(string);\n\
    \        for (int i = maxPalindromeStartIndex - 1; i >= 0; i--) {\n          \
    \  builder.append(string.charAt(i));\n        }\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\n\
    \                z[i] = Math.min(r - i + 1, z[i - l]);\n            while (i +\
    \ z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\n              \
    \  z[i]++;\n            if (i + z[i] - 1 > r) {\n                l = i;\n    \
    \            r = i + z[i] - 1;\n            }\n        }\n        int max = 0;\n\
    \        for (int i = 1; i < n; i++)\n            if (z[i] == n - i)\n       \
    \         max = Math.max(max, z[i]);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = n - max - 1; i >= 0; i--)\n            builder.append(string.charAt(i));\n\
    \        builder.append(string);\n        return builder.toString();", "     \
    \   int len = string.length();\n        int[] z = new int[len];\n        int left\
    \ = 0;\n        int right = 0;\n        for (int i = 1; i < len; i++) {\n    \
    \        if (i > right) {\n                left = right = i;\n               \
    \ while (right < len && string.charAt(right) == string.charAt(right - left)) {\n\
    \                    right++;\n                }\n                z[i] = right\
    \ - left;\n                right--;\n            } else {\n                int\
    \ k = i - left;\n                if (z[k] < right - i + 1) {\n               \
    \     z[i] = z[k];\n                } else {\n                    left = i;\n\
    \                    while (right < len && string.charAt(right) == string.charAt(right\
    \ - left)) {\n                        right++;\n                    }\n      \
    \              z[i] = right - left;\n                    right--;\n          \
    \      }\n            }\n        }\n        int max = 0;\n        int maxIndex\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (z[i] > max) {\n\
    \                max = z[i];\n                maxIndex = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = maxIndex + max; i < len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n     \
    \   int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     } else {\n                i = 0;\n                j--;\n            }\n\
    \        }\n        return sb.append(sb.reverse().substring(0, string.length()\
    \ - i)).toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        String reverse = new StringBuilder(string).reverse().toString();\n  \
    \      StringBuilder result = new StringBuilder();\n        int length = string.length();\n\
    \        int i = 0;\n        while (i < length) {\n            if (string.substring(i).equals(reverse.substring(0,\
    \ length - i))) {\n                result.append(reverse.substring(length - i));\n\
    \                break;\n            }\n            i++;\n        }\n        result.append(string);\n\
    \        return result.toString();", "        int n = string.length();\n     \
    \   int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = n - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n   \
    \     int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     } else {\n                i = 0;\n                j--;\n            }\n\
    \        }\n        sb.append(sb.reverse().substring(string.length() - i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        int i = 0;\n        while (i < n) {\n        \
    \    if (sb.substring(i).equals(rev.substring(0, n - i))) {\n                break;\n\
    \            }\n            i++;\n        }\n        return sb.append(rev.substring(n\
    \ - i)).toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        int length = string.length();\n        for (int i = 0; i < length; i++)\
    \ {\n            if (isPalindrome(string.substring(i))) {\n                builder.append(reverse(string.substring(0,\
    \ i)));\n                break;\n            }\n        }\n        return builder.toString();",
  "        StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reversed = new StringBuilder(string);\n        reversed.reverse();\n       \
    \ int i = 0;\n        while (i < reversed.length()) {\n            if (string.startsWith(reversed.substring(i)))\
    \ {\n                break;\n            }\n            i++;\n        }\n    \
    \    builder.append(reversed.substring(0, i));\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int i = 0;\n        while (i\
    \ < sb.length() && sb.charAt(i) == rev.charAt(i)) {\n            i++;\n      \
    \  }\n        StringBuilder prefix = new StringBuilder(string.substring(0, i));\n\
    \        prefix.reverse();\n        return sb.append(prefix).toString();", " \
    \       int length = string.length();\n        int[] z = new int[length];\n  \
    \      int left = 0;\n        int right = 0;\n        for (int i = 1; i < length;\
    \ i++) {\n            if (i > right) {\n                left = right = i;\n  \
    \              while (right < length && string.charAt(right) == string.charAt(right\
    \ - left)) {\n                    right++;\n                }\n              \
    \  z[i] = right - left;\n                right--;\n            } else {\n    \
    \            int k = i - left;\n                if (z[k] < right - i + 1) {\n\
    \                    z[i] = z[k];\n                } else {\n                \
    \    left = i;\n                    while (right < length && string.charAt(right)\
    \ == string.charAt(right - left)) {\n                        right++;\n      \
    \              }\n                    z[i] = right - left;\n                 \
    \   right--;\n                }\n            }\n        }\n        int maxZ =\
    \ 0;\n        int maxZIndex = 0;\n        for (int i = 0; i < length; i++) {\n\
    \            if (z[i] > maxZ) {\n                maxZ = z[i];\n              \
    \  maxZIndex = i;\n            }\n        }\n        StringBuilder builder = new\
    \ StringBuilder();\n        for (int i = maxZIndex + maxZ; i < length; i++) {\n\
    \            builder.append(string.charAt(i));\n        }\n        for (int i\
    \ = 0; i < maxZIndex; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        return builder.toString();", "        StringBuilder builder\
    \ = new StringBuilder(string);\n        int length = string.length();\n      \
    \  int i = 0;\n        while (i < length) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                break;\n            }\n            i++;\n        }\n    \
    \    builder.append(new StringBuilder(string.substring(0, i)).reverse());\n  \
    \      return builder.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        int i = 0;\n        while (i < n) {\n        \
    \    if (sb.substring(i).equals(rev.substring(0, n - i))) {\n                break;\n\
    \            }\n            i++;\n        }\n        return sb.append(rev.substring(n\
    \ - i)).toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        StringBuilder\
    \ result = new StringBuilder();\n        int i = 0;\n        while (i < string.length())\
    \ {\n            if (sb.substring(i).equals(rev.substring(0, string.length() -\
    \ i))) {\n                result.append(rev.substring(string.length() - i));\n\
    \                result.append(string);\n                return result.toString();\n\
    \            }\n            i++;\n        }\n        return \"\";", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        String rev = new StringBuilder(string).reverse().toString();\n\
    \        int n = string.length();\n        for (int i = 0; i < n; i++) {\n   \
    \         if (string.substring(i).equals(rev.substring(0, n - i))) {\n       \
    \         return sb.append(rev.substring(n - i)).toString();\n            }\n\
    \        }\n        return \"\";", "        int n = string.length();\n       \
    \ int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i\
    \ < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r -\
    \ i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        String reverse = new\
    \ StringBuilder(string).reverse().toString();\n        StringBuilder result =\
    \ new StringBuilder();\n        int length = string.length();\n        int i =\
    \ 0;\n        for (; i < length; i++) {\n            if (string.substring(i).equals(reverse.substring(0,\
    \ length - i))) {\n                break;\n            }\n        }\n        result.append(string.substring(0,\
    \ i));\n        result.append(reverse);\n        return result.toString();", " \
    \       StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       int i = 0;\n        for (i = 0; i < n; i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ n - i))) {\n                break;\n            }\n        }\n        sb.append(rev.substring(n\
    \ - i));\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = max + 1; i < n; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    int n = string.length();\n        int[] z = new int[n];\n        int l =\
    \ 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = max + 1;\
    \ i < n; i++) {\n            sb.append(string.charAt(i));\n        }\n       \
    \ sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int i = 0;\n        for (i = string.length() - 1; i >= 0; i--) {\n  \
    \          if (z[i] == i + 1) {\n                break;\n            }\n     \
    \   }\n        StringBuilder sb = new StringBuilder(string.substring(i + 1));\n\
    \        sb.reverse();\n        sb.append(string);\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder reverse\
    \ = new StringBuilder(string).reverse();\n        int i = 0;\n        for (; i\
    \ < string.length(); i++) {\n            if (sb.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(reverse.substring(string.length() - i)).toString();",
  "        // Find the longest postfix that is a palindrome.\n        int longestPalindromePostfixLength\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                longestPalindromePostfixLength = string.length() - i;\n \
    \               break;\n            }\n        }\n        // Append reverse of\
    \ prefix to the end of the string.\n        String prefix = string.substring(0,\
    \ string.length() - longestPalindromePostfixLength);\n        StringBuilder sb\
    \ = new StringBuilder(string);\n        sb.append(reverse(prefix));\n        return\
    \ sb.toString();", "        int n = string.length();\n        int[] z = new int[n];\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (i + z[i] == n) {\n                max = Math.max(max, z[i]);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        StringBuilder reversed\
    \ = new StringBuilder(string).reverse();\n        StringBuilder result = new StringBuilder();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < string.length() &&\
    \ j < string.length()) {\n            if (sb.charAt(i) == reversed.charAt(j))\
    \ {\n                i++;\n                j++;\n            } else {\n      \
    \          i = 0;\n                j++;\n            }\n        }\n        result.append(string.substring(j));\n\
    \        result.reverse();\n        result.append(string);\n        return result.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int longestPalindrome = z[string.length() - 1];\n        if (longestPalindrome\
    \ == string.length()) {\n            return string;\n        }\n        StringBuilder\
    \ builder = new StringBuilder(string);\n        builder.append(reverse(string.substring(0,\
    \ string.length() - longestPalindrome)));\n        return builder.toString();",
  "        int n = string.length();\n        int[] f = new int[n];\n        for (int\
    \ i = 1; i < n; i++) {\n            int j = f[i - 1];\n            while (j >\
    \ 0 && string.charAt(i) != string.charAt(j)) {\n                j = f[j - 1];\n\
    \            }\n            if (string.charAt(i) == string.charAt(j)) {\n    \
    \            j++;\n            }\n            f[i] = j;\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n - f[n - 1]; i++) {\n\
    \            sb.append(string.charAt(n - 1 - i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        // Find the longest palindromic suffix.\n\
    \        int longestPalindromeSuffix = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (isPalindrome(string.substring(i))) {\n             \
    \   longestPalindromeSuffix = i;\n                break;\n            }\n    \
    \    }\n        // Reverse the prefix and append it to the end of the string.\n\
    \        StringBuilder reversedPrefix = new StringBuilder(string.substring(0,\
    \ string.length() - longestPalindromeSuffix));\n        return string + reversedPrefix.reverse().toString();",
  "        StringBuilder builder = new StringBuilder(string);\n        int length\
    \ = string.length();\n        int i = 0;\n        int j = length - 1;\n      \
    \  while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n\
    \                break;\n            }\n            i++;\n            j--;\n \
    \       }\n        if (i >= j) {\n            return string;\n        }\n    \
    \    StringBuilder prefix = new StringBuilder(string.substring(0, i));\n     \
    \   prefix.reverse();\n        builder.append(prefix);\n        return builder.toString();",
  "        int length = string.length();\n        int[] z = new int[length];\n   \
    \     for (int i = 1, l = 0, r = 0; i < length; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < length && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int longestPalindrome = 0;\n        for (int i\
    \ = 1; i < length; i++) {\n            if (i + z[i] == length) {\n           \
    \     longestPalindrome = z[i];\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = length - longestPalindrome\
    \ - 1; i >= 0; i--) {\n            builder.append(string.charAt(i));\n       \
    \ }\n        builder.append(string);\n        return builder.toString();", " \
    \       int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = n\
    \ - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n     \
    \   }\n        builder.append(string);\n        return builder.toString();", " \
    \       // Find the longest palindromic suffix.\n        int suffixLength = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                suffixLength = string.length() - i;\n                break;\n\
    \            }\n        }\n        // Append the reverse of the prefix to the\
    \ end of the string.\n        String prefix = string.substring(0, string.length()\
    \ - suffixLength);\n        return string + reverse(prefix);", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int longestPalindromeSuffix\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                longestPalindromeSuffix = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder(string);\n        for (int i = 0;\
    \ i < string.length() - longestPalindromeSuffix; i++) {\n            sb.append(string.charAt(string.length()\
    \ - 1 - i));\n        }\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n          \
    \      z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n            while\
    \ (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i])) {\n       \
    \         z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n      \
    \          l = i;\n                r = i + z[i] - 1;\n            }\n        }\n\
    \        int max = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i]\
    \ == i) {\n                max = i;\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = n - 1; i >= max; i--) {\n\
    \            builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        int longestPalindromeSuffixLength\
    \ = longestPalindromeSuffixLength(string);\n        String prefix = string.substring(0,\
    \ string.length() - longestPalindromeSuffixLength);\n        String reversePrefix\
    \ = new StringBuilder(prefix).reverse().toString();\n        return reversePrefix\
    \ + string;", "        StringBuilder builder = new StringBuilder(string);\n  \
    \      StringBuilder reverse = new StringBuilder(string).reverse();\n        int\
    \ length = string.length();\n        for (int i = length; i >= 0; i--) {\n   \
    \         if (string.substring(0, i).equals(reverse.substring(length - i))) {\n\
    \                return builder.append(reverse.substring(0, length - i)).toString();\n\
    \            }\n        }\n        return null;", "        int length = string.length();\n\
    \        int[] z = new int[length];\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < length; i++) {\n            if (i <= r) {\n                z[i] =\
    \ Math.min(r - i + 1, z[i - l]);\n            }\n            while (i + z[i] <\
    \ length && string.charAt(z[i]) == string.charAt(i + z[i])) {\n              \
    \  z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n             \
    \   l = i;\n                r = i + z[i] - 1;\n            }\n        }\n    \
    \    int max = 0;\n        for (int i = 1; i < length; i++) {\n            if\
    \ (z[i] == i) {\n                max = i;\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = max + 1; i < length; i++)\
    \ {\n            builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        if (string.length() == 0) {\n \
    \           return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int longestPalindrome = z[string.length() - 1];\n        if (longestPalindrome\
    \ == string.length()) {\n            return string;\n        }\n        String\
    \ prefix = string.substring(0, string.length() - longestPalindrome);\n       \
    \ StringBuilder sb = new StringBuilder(prefix);\n        sb.reverse();\n     \
    \   return string + sb.toString();", "        int length = string.length();\n\
    \        int[] z = new int[length];\n        int left = 0;\n        int right\
    \ = 0;\n        for (int i = 1; i < length; i++) {\n            if (i > right)\
    \ {\n                left = right = i;\n                while (right < length\
    \ && string.charAt(right) == string.charAt(right - left)) {\n                \
    \    right++;\n                }\n                z[i] = right - left;\n     \
    \           right--;\n            } else {\n                int k = i - left;\n\
    \                if (z[k] < right - i + 1) {\n                    z[i] = z[k];\n\
    \                } else {\n                    left = i;\n                   \
    \ while (right < length && string.charAt(right) == string.charAt(right - left))\
    \ {\n                        right++;\n                    }\n               \
    \     z[i] = right - left;\n                    right--;\n                }\n\
    \            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n \
    \       for (int i = 0; i < length; i++) {\n            if (z[i] > max) {\n  \
    \              max = z[i];\n                maxIndex = i;\n            }\n   \
    \     }\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = maxIndex + max; i < length; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int length = string.length();\n        int[] z = new int[length];\n   \
    \     int left = 0;\n        int right = 0;\n        for (int i = 1; i < length;\
    \ i++) {\n            if (i > right) {\n                left = right = i;\n  \
    \              while (right < length && string.charAt(right) == string.charAt(right\
    \ - left)) {\n                    right++;\n                }\n              \
    \  z[i] = right - left;\n                right--;\n            } else {\n    \
    \            int k = i - left;\n                if (z[k] < right - i + 1) {\n\
    \                    z[i] = z[k];\n                } else {\n                \
    \    left = i;\n                    while (right < length && string.charAt(right)\
    \ == string.charAt(right - left)) {\n                        right++;\n      \
    \              }\n                    z[i] = right - left;\n                 \
    \   right--;\n                }\n            }\n        }\n        int max = 0;\n\
    \        int index = 0;\n        for (int i = 0; i < length; i++) {\n        \
    \    if (z[i] > max) {\n                max = z[i];\n                index = i;\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = length - 1; i >= index + max; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int longestPalindrome = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (i + z[i] == n) {\n                longestPalindrome\
    \ = z[i];\n                break;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - longestPalindrome - 1; i\
    \ >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  int i = 0;\n        for (; i < string.length(); i++) {\n            if (sb.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(reverse.substring(string.length() - i)).toString();",
  "        StringBuilder builder = new StringBuilder(string);\n        String reverse\
    \ = builder.reverse().toString();\n        StringBuilder result = new StringBuilder();\n\
    \        int n = string.length();\n        int i = 0;\n        while (i < n) {\n\
    \            if (string.substring(0, n - i).equals(reverse.substring(i))) {\n\
    \                break;\n            }\n            i++;\n        }\n        result.append(string);\n\
    \        result.append(reverse.substring(i));\n        return result.toString();",
  "        StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reverse = new StringBuilder(string).reverse();\n        int length = string.length();\n\
    \        for (int i = length; i >= 0; i--) {\n            if (string.substring(0,\
    \ i).equals(reverse.substring(length - i))) {\n                builder.append(reverse.substring(0,\
    \ length - i));\n                break;\n            }\n        }\n        return\
    \ builder.toString();", "        int longestPalindromeLength = longestPalindromeLength(string);\n\
    \        String prefix = string.substring(0, string.length() - longestPalindromeLength);\n\
    \        StringBuilder builder = new StringBuilder(string);\n        builder.append(new\
    \ StringBuilder(prefix).reverse());\n        return builder.toString();", "  \
    \      StringBuilder sb = new StringBuilder(string);\n        StringBuilder reverse\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       int[] prefix = new int[n];\n        int[] suffix = new int[n];\n     \
    \   for (int i = 1; i < n; i++) {\n            int j = prefix[i - 1];\n      \
    \      while (j > 0 && string.charAt(i) != string.charAt(j)) {\n             \
    \   j = prefix[j - 1];\n            }\n            if (string.charAt(i) == string.charAt(j))\
    \ {\n                j++;\n            }\n            prefix[i] = j;\n       \
    \ }\n        for (int i = 1; i < n; i++) {\n            int j = suffix[i - 1];\n\
    \            while (j > 0 && reverse.charAt(i) != reverse.charAt(j)) {\n     \
    \           j = suffix[j - 1];\n            }\n            if (reverse.charAt(i)\
    \ == reverse.charAt(j)) {\n                j++;\n            }\n            suffix[i]\
    \ = j;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            if (prefix[i] == suffix[n - i - 1]) {\n                max = Math.max(max,\
    \ prefix[i]);\n            }\n        }\n        sb.append(reverse.substring(max));\n\
    \        return sb.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reversed = new StringBuilder(string);\n        reversed.reverse();\n\
    \        int i = 0;\n        while (i < string.length()) {\n            if (string.startsWith(reversed.substring(i)))\
    \ {\n                break;\n            }\n            i++;\n        }\n    \
    \    builder.append(reversed.substring(0, i));\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int i = string.length() - 1;\n        while (i > 0 && z[i] != i) {\n\
    \            i--;\n        }\n        StringBuilder sb = new StringBuilder(string.substring(0,\
    \ i));\n        sb.reverse();\n        return string + sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        int length = string.length();\n\
    \        int i = 0;\n        for (i = length - 1; i >= 0; i--) {\n           \
    \ if (isPalindrome(string.substring(i))) {\n                break;\n         \
    \   }\n        }\n        sb.append(new StringBuilder(string.substring(0, i)).reverse());\n\
    \        return sb.toString();", "        StringBuilder stringBuilder = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  StringBuilder result = new StringBuilder();\n        int index = 0;\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            if (stringBuilder.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n                index = i;\n                break;\n\
    \            }\n        }\n        result.append(string);\n        result.append(reverse.substring(index));\n\
    \        return result.toString();", "        int n = string.length();\n     \
    \   int[] z = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n    \
    \    for (int i = 1; i < n; i++) {\n            if (i <= r) {\n              \
    \  z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n            while (i\
    \ + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i])) {\n          \
    \      z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n         \
    \       l = i;\n                r = i + z[i] - 1;\n            }\n        }\n\
    \        int max = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i]\
    \ == i) {\n                max = i;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n - max; i++) {\n   \
    \         sb.append(string.charAt(n - i - 1));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        int i = 0;\n        while (i < n) {\n        \
    \    if (sb.substring(i).equals(rev.substring(0, n - i))) {\n                break;\n\
    \            }\n            i++;\n        }\n        return sb.append(rev.substring(n\
    \ - i)).toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n   \
    \             while (r < n && string.charAt(r) == string.charAt(r - l)) {\n  \
    \                  r++;\n                }\n                z[i] = r - l;\n  \
    \              r--;\n            } else {\n                int k = i - l;\n  \
    \              if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n   \
    \             } else {\n                    l = i;\n                    while\
    \ (r < n && string.charAt(r) == string.charAt(r - l)) {\n                    \
    \    r++;\n                    }\n                    z[i] = r - l;\n        \
    \            r--;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == i) {\n\
    \                max = i;\n            }\n        }\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = max + 1; i < n; i++) {\n      \
    \      builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        if (string.length() == 0) {\n \
    \           return string;\n        }\n        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string);\n        rev.reverse();\n\
    \        int n = string.length();\n        int[] lps = new int[n];\n        int\
    \ i = 1;\n        int j = 0;\n        while (i < n) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                lps[i] = j + 1;\n                i++;\n\
    \                j++;\n            } else {\n                if (j != 0) {\n \
    \                   j = lps[j - 1];\n                } else {\n              \
    \      lps[i] = 0;\n                    i++;\n                }\n            }\n\
    \        }\n        int suffixLength = lps[n - 1];\n        sb.append(rev.substring(suffixLength));\n\
    \        return sb.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  int i = 0;\n        for (; i < string.length(); i++) {\n            if (string.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        builder.append(reverse.substring(string.length() - i));\n        return\
    \ builder.toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i + z[i] == n) {\n                max = Math.max(max, z[i]);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reverse = new StringBuilder(string).reverse();\n        int n = string.length();\n\
    \        int i = 0;\n        while (i < n) {\n            if (builder.toString().equals(reverse.toString()))\
    \ {\n                break;\n            }\n            builder.append(reverse.charAt(i));\n\
    \            i++;\n        }\n        return builder.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder rev = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        for (; i < string.length(); i++) {\n            if\
    \ (string.substring(i).equals(rev.substring(0, string.length() - i))) {\n    \
    \            break;\n            }\n        }\n        return sb.append(rev.substring(string.length()\
    \ - i)).toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder rev = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        for (; i < sb.length(); i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ sb.length() - i))) {\n                break;\n            }\n        }\n   \
    \     return sb.append(rev.substring(sb.length() - i)).toString();", "       \
    \ StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev = new\
    \ StringBuilder(string).reverse();\n        int n = string.length();\n       \
    \ int i = 0;\n        for (; i < n; i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ n - i))) {\n                break;\n            }\n        }\n        return\
    \ sb.append(rev.substring(n - i)).toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int longestPalindrome = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n   \
    \             longestPalindrome = Math.max(longestPalindrome, z[i]);\n       \
    \     }\n        }\n        StringBuilder builder = new StringBuilder();\n   \
    \     for (int i = n - longestPalindrome - 1; i >= 0; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder sb2\
    \ = new StringBuilder(string);\n        StringBuilder sb3 = new StringBuilder(string);\n\
    \        int max = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
    \           sb.setLength(0);\n            sb.append(string.substring(0, i));\n\
    \            sb2.setLength(0);\n            sb2.append(string.substring(i, string.length()));\n\
    \            sb2.reverse();\n            if (sb.toString().equals(sb2.toString()))\
    \ {\n                max = i;\n            }\n        }\n        sb.setLength(0);\n\
    \        sb.append(string.substring(0, max));\n        sb.reverse();\n       \
    \ sb3.append(sb.toString());\n        return sb3.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder rev = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        for (; i < string.length(); i++) {\n            if\
    \ (sb.substring(i).equals(rev.substring(0, string.length() - i))) {\n        \
    \        break;\n            }\n        }\n        return sb.append(rev.substring(string.length()\
    \ - i)).toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        for (int i = 0; i < n; i++) {\n            if\
    \ (sb.substring(i).equals(rev.substring(0, n - i))) {\n                return\
    \ sb.append(rev.substring(n - i)).toString();\n            }\n        }\n    \
    \    return \"\";", "        int longestPalindromeSuffixLength = longestPalindromeSuffixLength(string);\n\
    \        String prefix = string.substring(0, string.length() - longestPalindromeSuffixLength);\n\
    \        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\
    \        return reversedPrefix + string;", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  int len = string.length();\n        for (int i = 0; i < len; i++) {\n     \
    \       if (sb.substring(i).equals(reverse.substring(0, len - i))) {\n       \
    \         return sb.append(reverse.substring(len - i)).toString();\n         \
    \   }\n        }\n        return sb.append(reverse.substring(1)).toString();",
  "        int n = string.length();\n        int i = 0;\n        int j = n - 1;\n\
    \        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        if (i >= j) {\n            return string;\n        }\n   \
    \     StringBuilder sb = new StringBuilder();\n        sb.append(string.substring(i,\
    \ n));\n        sb.reverse();\n        sb.append(string);\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       for (int i = 0; i < n; i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ n - i))) {\n                return sb.append(rev.substring(n - i)).toString();\n\
    \            }\n        }\n        return null;", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int palindromeLength = z[string.length() - 1];\n        if (palindromeLength\
    \ == string.length()) {\n            return string;\n        }\n        String\
    \ prefix = string.substring(0, string.length() - palindromeLength);\n        StringBuilder\
    \ builder = new StringBuilder(prefix);\n        builder.reverse();\n        return\
    \ string + builder.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        String reverse = new\
    \ StringBuilder(string).reverse().toString();\n        StringBuilder result =\
    \ new StringBuilder();\n        int i = 0;\n        while (i < string.length())\
    \ {\n            if (string.substring(i).equals(reverse.substring(0, string.length()\
    \ - i))) {\n                result.append(reverse.substring(string.length() -\
    \ i));\n                result.append(string);\n                return result.toString();\n\
    \            }\n            i++;\n        }\n        return null;", "        int\
    \ n = string.length();\n        int[] z = new int[n];\n        int l = 0, r =\
    \ 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n     \
    \           z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n           \
    \ while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i])) {\n \
    \               z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int longestPalindrome = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                longestPalindrome = i;\n  \
    \          }\n        }\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = longestPalindrome; i < n; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    if (string.length() == 0) {\n            return string;\n        }\n    \
    \    int n = string.length();\n        int[] z = new int[n];\n        int l =\
    \ 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i > r) {\n\
    \                l = r = i;\n                while (r < n && string.charAt(r -\
    \ l) == string.charAt(r)) {\n                    r++;\n                }\n   \
    \             z[i] = r - l;\n                r--;\n            } else {\n    \
    \            int k = i - l;\n                if (z[k] < r - i + 1) {\n       \
    \             z[i] = z[k];\n                } else {\n                    l =\
    \ i;\n                    while (r < n && string.charAt(r - l) == string.charAt(r))\
    \ {\n                        r++;\n                    }\n                   \
    \ z[i] = r - l;\n                    r--;\n                }\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = n\
    \ - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n     \
    \   }\n        builder.append(string);\n        return builder.toString();", " \
    \       StringBuilder result = new StringBuilder(string);\n        StringBuilder\
    \ reversed = new StringBuilder(string);\n        reversed.reverse();\n       \
    \ int i = 0;\n        for (; i < string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        result.append(reversed.substring(string.length() - i));\n        return\
    \ result.toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = n - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       int i = 0;\n        for (i = 0; i < n; i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ n - i))) {\n                break;\n            }\n        }\n        return\
    \ sb.append(rev.substring(n - i)).toString();", "        int n = string.length();\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        for (int i = 1; i < n; i++) {\n         \
    \   int j = p[i - 1];\n            while (j > 0 && string.charAt(i) != string.charAt(j))\
    \ {\n                j = p[j - 1];\n            }\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                j++;\n            }\n            p[i]\
    \ = j;\n        }\n        int suffixLength = p[n - 1];\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < n - suffixLength;\
    \ i++) {\n            builder.append(string.charAt(n - 1 - i));\n        }\n \
    \       builder.append(string);\n        return builder.toString();", "      \
    \  int length = string.length();\n        int[] z = new int[length];\n       \
    \ z[0] = 0;\n        int left = 0;\n        int right = 0;\n        for (int i\
    \ = 1; i < length; i++) {\n            if (i > right) {\n                left\
    \ = right = i;\n                while (right < length && string.charAt(right)\
    \ == string.charAt(right - left)) {\n                    right++;\n          \
    \      }\n                z[i] = right - left;\n                right--;\n   \
    \         } else {\n                int k = i - left;\n                if (z[k]\
    \ < right - i + 1) {\n                    z[i] = z[k];\n                } else\
    \ {\n                    left = i;\n                    while (right < length\
    \ && string.charAt(right) == string.charAt(right - left)) {\n                \
    \        right++;\n                    }\n                    z[i] = right - left;\n\
    \                    right--;\n                }\n            }\n        }\n \
    \       int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (z[i] > max) {\n                max = z[i];\n       \
    \         maxIndex = i;\n            }\n        }\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = maxIndex + max; i < length; i++)\
    \ {\n            builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        int n = string.length();\n    \
    \    int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = max + 1; i < n; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        z[0] =\
    \ n;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n     \
    \       if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ builder = new StringBuilder(string);\n        StringBuilder reversed = new StringBuilder(string);\n\
    \        reversed.reverse();\n        int i = 0;\n        for (; i < string.length();\
    \ i++) {\n            if (string.substring(i).equals(reversed.substring(0, string.length()\
    \ - i))) {\n                break;\n            }\n        }\n        builder.append(reversed.substring(string.length()\
    \ - i));\n        return builder.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        for (int i = 1, l = 0, r = 0; i < n; ++i)\
    \ {\n            if (i <= r)\n                z[i] = Math.min(r - i + 1, z[i -\
    \ l]);\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i]))\n                ++z[i];\n            if (i + z[i] - 1 > r) {\n   \
    \             l = i;\n                r = i + z[i] - 1;\n            }\n     \
    \   }\n        int max = 0;\n        for (int i = 1; i < n; ++i) {\n         \
    \   if (z[i] == n - i && i > max)\n                max = i;\n        }\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n - max;\
    \ ++i)\n            sb.append(string.charAt(i));\n        return sb.reverse().toString()\
    \ + string;", "        int n = string.length();\n        int[] z = new int[n];\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        int\
    \ n = string.length();\n        int[] z = new int[n];\n        for (int i = 1,\
    \ l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i] =\
    \ Math.min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i]))\n                ++z[i];\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; ++i)\
    \ {\n            if (i + z[i] == n) {\n                max = Math.max(max, z[i]);\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = n - max - 1; i >= 0; --i) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder reverse\
    \ = new StringBuilder(string).reverse();\n        int length = string.length();\n\
    \        int i = 0;\n        while (i < length) {\n            if (string.substring(i).equals(reverse.substring(0,\
    \ length - i))) {\n                break;\n            }\n            i++;\n \
    \       }\n        return sb.append(reverse.substring(i)).toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int i = 0;\n        for (; i\
    \ < string.length(); i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(rev.substring(string.length() - i)).toString();", " \
    \       if (string.length() == 0) {\n            return string;\n        }\n \
    \       int[] z = new int[string.length()];\n        int l = 0, r = 0;\n     \
    \   for (int i = 1; i < string.length(); i++) {\n            if (i <= r) {\n \
    \               z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n       \
    \     while (i + z[i] < string.length() && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < string.length();\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        StringBuilder builder = new StringBuilder();\n       \
    \ for (int i = string.length() - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = n\
    \ - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n     \
    \   }\n        builder.append(string);\n        return builder.toString();", " \
    \       StringBuilder sb = new StringBuilder(string);\n        StringBuilder reverse\
    \ = new StringBuilder(string);\n        reverse.reverse();\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (sb.substring(i).equals(reverse.substring(0, string.length()\
    \ - i))) {\n                result.append(reverse.substring(string.length() -\
    \ i));\n                result.append(string);\n                return result.toString();\n\
    \            }\n        }\n        return \"\";", "        StringBuilder sb =\
    \ new StringBuilder(string);\n        StringBuilder rev = new StringBuilder(string).reverse();\n\
    \        int n = string.length();\n        for (int i = 0; i < n; i++) {\n   \
    \         if (sb.substring(i).equals(rev.substring(0, n - i))) {\n           \
    \     return sb.append(rev.substring(n - i)).toString();\n            }\n    \
    \    }\n        return \"\";", "        StringBuilder builder = new StringBuilder(string);\n\
    \        int i = 0;\n        int j = string.length() - 1;\n        while (i <\
    \ j) {\n            if (string.charAt(i) == string.charAt(j)) {\n            \
    \    i++;\n                j--;\n            } else {\n                i = 0;\n\
    \                j--;\n            }\n        }\n        return builder.append(builder.substring(0,\
    \ i).reverse()).toString();", "        if (string.length() == 0) {\n         \
    \   return string;\n        }\n        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reversed = new StringBuilder(string);\n        reversed.reverse();\n\
    \        int[] z = zFunction(string + \"$\" + reversed.toString());\n        int\
    \ longestPalindrome = z[string.length() + 1];\n        builder.append(reversed.substring(0,\
    \ string.length() - longestPalindrome));\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        z[0] =\
    \ 0;\n        int left = 0;\n        int right = 0;\n        for (int i = 1; i\
    \ < n; i++) {\n            if (i <= right) {\n                z[i] = Math.min(z[i\
    \ - left], right - i + 1);\n            }\n            while (i + z[i] < n &&\
    \ string.charAt(z[i]) == string.charAt(i + z[i])) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > right) {\n                left\
    \ = i;\n                right = i + z[i] - 1;\n            }\n        }\n    \
    \    int max = 0;\n        int maxIndex = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == n - i && z[i] > max) {\n                max = z[i];\n\
    \                maxIndex = i;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - 1; i >= maxIndex; i--) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        for (int i = 0; i < n; i++) {\n            if\
    \ (sb.substring(i).equals(rev.substring(0, n - i))) {\n                return\
    \ sb.append(rev.substring(n - i)).toString();\n            }\n        }\n    \
    \    return sb.append(rev.substring(1)).toString();", "        StringBuilder sb\
    \ = new StringBuilder(string);\n        String reverse = sb.reverse().toString();\n\
    \        StringBuilder result = new StringBuilder();\n        int i = 0;\n   \
    \     while (i < string.length() && !string.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n            i++;\n        }\n        result.append(string.substring(0,\
    \ i));\n        result.append(reverse);\n        return result.toString();", " \
    \       int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int longestPalindromeSuffix = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i + z[i] == n) {\n                longestPalindromeSuffix\
    \ = Math.max(longestPalindromeSuffix, z[i]);\n            }\n        }\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = n - longestPalindromeSuffix\
    \ - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n \
    \       sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder reversed = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        while (i < sb.length() && sb.charAt(i) != reversed.charAt(i))\
    \ {\n            i++;\n        }\n        return sb.substring(0, i) + reversed.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int longestPalindrome = z[string.length() - 1];\n        StringBuilder\
    \ builder = new StringBuilder(string);\n        for (int i = string.length() -\
    \ longestPalindrome - 1; i >= 0; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        return builder.toString();", "        StringBuilder builder\
    \ = new StringBuilder(string);\n        String reverse = new StringBuilder(string).reverse().toString();\n\
    \        int n = string.length();\n        for (int i = 0; i < n; i++) {\n   \
    \         if (string.startsWith(reverse.substring(i))) {\n                return\
    \ builder.append(reverse.substring(0, i)).toString();\n            }\n       \
    \ }\n        return builder.append(reverse).toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < n - max; i++) {\n        \
    \    sb.append(string.charAt(i));\n        }\n        sb.reverse();\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = z[i];\n            }\n        }\n        return string + new StringBuilder(string.substring(0,\
    \ n - max)).reverse().toString();", "        if (string.length() == 0) {\n   \
    \         return string;\n        }\n        int[] z = getZ(string);\n       \
    \ int palindromeLength = z[string.length() - 1];\n        if (palindromeLength\
    \ == string.length()) {\n            return string;\n        }\n        return\
    \ string + reverse(string.substring(0, string.length() - palindromeLength));",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder reversed\
    \ = new StringBuilder(string);\n        reversed.reverse();\n        int i = 0;\n\
    \        for (i = 0; i < string.length(); i++) {\n            if (sb.substring(i).equals(reversed.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(reversed.substring(string.length() - i)).toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ n - max - 1; i++) {\n            sb.append(string.charAt(i));\n        }\n \
    \       sb.reverse();\n        sb.append(string);\n        return sb.toString();",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      int maxPalindromeLength = 0;\n        int maxPalindromeStart = 0;\n   \
    \     for (int i = 0; i < string.length(); i++) {\n            int palindromeLength\
    \ = 0;\n            int palindromeStart = i;\n            int j = i;\n       \
    \     int k = i + 1;\n            while (j >= 0 && k < string.length() && string.charAt(j)\
    \ == string.charAt(k)) {\n                palindromeLength += 2;\n           \
    \     palindromeStart = j;\n                j--;\n                k++;\n     \
    \       }\n            if (palindromeLength > maxPalindromeLength) {\n       \
    \         maxPalindromeLength = palindromeLength;\n                maxPalindromeStart\
    \ = palindromeStart;\n            }\n            palindromeLength = 1;\n     \
    \       palindromeStart = i;\n            j = i - 1;\n            k = i + 1;\n\
    \            while (j >= 0 && k < string.length() && string.charAt(j) == string.charAt(k))\
    \ {\n                palindromeLength += 2;\n                palindromeStart =\
    \ j;\n                j--;\n                k++;\n            }\n            if\
    \ (palindromeLength > maxPalindromeLength) {\n                maxPalindromeLength\
    \ = palindromeLength;\n                maxPalindromeStart = palindromeStart;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < maxPalindromeStart; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        for (int i = string.length() - 1; i >= maxPalindromeStart\
    \ + maxPalindromeLength; i--) {\n            sb.append(string.charAt(i));\n  \
    \      }\n        for (int i = maxPalindromeStart + maxPalindromeLength; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        return\
    \ sb.toString();", "        // Find the longest postfix that is a palindrome.\n\
    \        int longestPalindromeLength = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (isPalindrome(string.substring(i))) {\n             \
    \   longestPalindromeLength = string.length() - i;\n                break;\n \
    \           }\n        }\n        // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n        String prefix\
    \ = string.substring(0, string.length() - longestPalindromeLength);\n        StringBuilder\
    \ sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse());\n\
    \        return sb.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        String reverse = builder.reverse().toString();\n        int i = 0;\n\
    \        while (i < string.length() && string.charAt(i) == reverse.charAt(i))\
    \ {\n            i++;\n        }\n        return string + reverse.substring(i);",
  "        // Find the longest palindromic suffix.\n        String suffix = findLongestPalindromicSuffix(string);\n\
    \        // Find the prefix that comes before the palindromic suffix.\n      \
    \  String prefix = string.substring(0, string.length() - suffix.length());\n \
    \       // Reverse the prefix.\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\
    \        // Return the palindrome.\n        return reversedPrefix + string;",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (i + z[i] == n) {\n                max = Math.max(max, z[i]);\n  \
    \          }\n        }\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    int length = string.length();\n        int[] z = new int[length];\n     \
    \   int l = 0, r = 0;\n        for (int i = 1; i < length; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < length && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < length;\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = length - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reversed = new StringBuilder(string);\n        reversed.reverse();\n       \
    \ int i = 0;\n        for (; i < string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return builder.append(reversed.substring(string.length() - i)).toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder sb2\
    \ = new StringBuilder(string);\n        int max = 0;\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            if (isPalindrome(sb.substring(i)))\
    \ {\n                max = i;\n            }\n        }\n        sb.append(sb2.reverse().substring(0,\
    \ string.length() - max));\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder prefix = new StringBuilder();\n\
    \        StringBuilder suffix = new StringBuilder();\n        int i = 0;\n   \
    \     int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                prefix.append(string.charAt(i));\n \
    \               suffix.append(string.charAt(j));\n                i++;\n     \
    \           j--;\n            } else {\n                prefix.setLength(0);\n\
    \                suffix.setLength(0);\n                i = 0;\n              \
    \  j--;\n            }\n        }\n        return sb.append(prefix.reverse()).toString();",
  "        String reverse = new StringBuilder(string).reverse().toString();\n    \
    \    String lcs = longestCommonSubstring(string, reverse);\n        return string\
    \ + reverse.substring(lcs.length());", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        StringBuilder\
    \ result = new StringBuilder();\n        int i = 0;\n        for (; i < string.length();\
    \ i++) {\n            if (sb.substring(i).equals(rev.substring(0, string.length()\
    \ - i))) {\n                break;\n            }\n        }\n        result.append(string);\n\
    \        result.append(rev.substring(string.length() - i));\n        return result.toString();",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      int[] z = zFunction(string);\n        int longestPalindromeSuffix = z[string.length()];\n\
    \        String prefix = string.substring(0, string.length() - longestPalindromeSuffix);\n\
    \        String reversePrefix = new StringBuilder(prefix).reverse().toString();\n\
    \        return reversePrefix + string;", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string).reverse();\n      \
    \  int i = 0;\n        for (; i < sb.length(); i++) {\n            if (sb.substring(i).equals(reverse.substring(0,\
    \ sb.length() - i))) {\n                break;\n            }\n        }\n   \
    \     return sb.append(reverse.substring(sb.length() - i)).toString();", "   \
    \     int n = string.length();\n        int[] z = new int[n];\n        int l =\
    \ 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i <\
    \ z.length; i++) {\n            if (z[i] > max) {\n                max = z[i];\n\
    \                maxIndex = i;\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = string.length() - 1; i\
    \ >= maxIndex + max; i--) {\n            builder.append(string.charAt(i));\n \
    \       }\n        builder.append(string);\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        z[0] =\
    \ 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n     \
    \       if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (i + z[i] == n) {\n                max = z[i];\n         \
    \   }\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder builder = new StringBuilder(string);\n        StringBuilder\
    \ reversed = new StringBuilder(string);\n        reversed.reverse();\n       \
    \ int index = string.length();\n        while (index > 0) {\n            String\
    \ suffix = string.substring(index);\n            String prefix = reversed.substring(0,\
    \ string.length() - index);\n            if (suffix.equals(prefix)) {\n      \
    \          builder.append(reversed.substring(string.length() - index));\n    \
    \            break;\n            }\n            index--;\n        }\n        return\
    \ builder.toString();", "        StringBuilder result = new StringBuilder(string);\n\
    \        int length = string.length();\n        int i = 0;\n        while (i <\
    \ length) {\n            if (isPalindrome(string.substring(i))) {\n          \
    \      result.append(reverse(string.substring(0, i)));\n                break;\n\
    \            }\n            i++;\n        }\n        return result.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ n - max - 1; i++) {\n            sb.append(string.charAt(i));\n        }\n \
    \       sb.append(string);\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        String reverse = sb.reverse().toString();\n\
    \        String result = string + reverse.substring(reverse.indexOf(string) +\
    \ string.length());\n        return result;", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int longestPalindrome = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            if (i + z[i] == n) {\n   \
    \             longestPalindrome = z[i];\n                break;\n            }\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = n - longestPalindrome - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        StringBuilder sb2\
    \ = new StringBuilder(string);\n        int i = 0;\n        int j = string.length()\
    \ - 1;\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j))\
    \ {\n                i++;\n                j--;\n            } else {\n      \
    \          i = 0;\n                j--;\n                sb.append(sb2.charAt(j));\n\
    \            }\n        }\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    int n = string.length();\n        int[] z = new int[n];\n        int l =\
    \ 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n    \
    \        if (z[i] == n - i) {\n                max = Math.max(max, z[i]);\n  \
    \          }\n        }\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = 0; i < n - max; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        sb.append(string);\n        return\
    \ sb.toString();", "        StringBuilder result = new StringBuilder(string);\n\
    \        int length = string.length();\n        int i = 0;\n        int j = length\
    \ - 1;\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j))\
    \ {\n                i++;\n                j--;\n            } else {\n      \
    \          i = 0;\n                j--;\n            }\n        }\n        result.append(result.substring(0,\
    \ length - i).reverse());\n        return result.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int longestPalindromeSuffixLength\
    \ = 0;\n        for (int i = string.length() - 1; i >= 0; i--) {\n           \
    \ if (isPalindrome(string, i, string.length() - 1)) {\n                longestPalindromeSuffixLength\
    \ = string.length() - i;\n                break;\n            }\n        }\n \
    \       StringBuilder stringBuilder = new StringBuilder(string);\n        stringBuilder.append(reverse(string.substring(0,\
    \ string.length() - longestPalindromeSuffixLength)));\n        return stringBuilder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder reversed\
    \ = new StringBuilder(string);\n        reversed.reverse();\n        int i = 0;\n\
    \        for (; i < string.length(); i++) {\n            if (sb.substring(i).equals(reversed.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(reversed.substring(string.length() - i)).toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       int[] lps = new int[n];\n        int i = 1;\n        int j = 0;\n    \
    \    while (i < n) {\n            if (rev.charAt(i) == rev.charAt(j)) {\n    \
    \            lps[i] = j + 1;\n                i++;\n                j++;\n   \
    \         } else {\n                if (j != 0) {\n                    j = lps[j\
    \ - 1];\n                } else {\n                    lps[i] = 0;\n         \
    \           i++;\n                }\n            }\n        }\n        sb.append(rev.substring(lps[n\
    \ - 1]));\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n \
    \               while (r < n && string.charAt(r - l) == string.charAt(r)) {\n\
    \                    r++;\n                }\n                z[i] = r - l;\n\
    \                r--;\n            } else {\n                int k = i - l;\n\
    \                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n \
    \               } else {\n                    l = i;\n                    while\
    \ (r < n && string.charAt(r - l) == string.charAt(r)) {\n                    \
    \    r++;\n                    }\n                    z[i] = r - l;\n        \
    \            r--;\n                }\n            }\n        }\n        int longestPalindrome\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == i) {\n\
    \                longestPalindrome = i;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = longestPalindrome; i < n; i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        StringBuilder rev = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        for (; i < string.length(); i++) {\n            if\
    \ (sb.substring(i).equals(rev.substring(0, string.length() - i))) {\n        \
    \        break;\n            }\n        }\n        return sb.append(rev.substring(string.length()\
    \ - i)).toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i < n - max - 1; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        int n = string.length();\n        int[] z = ZAlgorithm.zAlgorithm(string);\n\
    \        int[] z2 = ZAlgorithm.zAlgorithm(new StringBuilder(string).reverse().toString());\n\
    \        int[] z3 = new int[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       z3[i] = Math.min(z[i], z2[n - i - 1]);\n        }\n        int max = 0;\n\
    \        int maxIndex = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  if (z3[i] > max) {\n                max = z3[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        StringBuilder sb = new StringBuilder(string);\n\
    \        for (int i = maxIndex - max; i < maxIndex; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ i = 0;\n        for (; i < string.length(); i++) {\n            if (sb.substring(i).equals(rev.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(rev.substring(string.length() - i)).toString();", " \
    \       StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n  \
    \      int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     } else {\n                i = 0;\n                j--;\n            }\n\
    \        }\n        return sb.append(sb.reverse().substring(0, string.length()\
    \ - i)).toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder reversed = new StringBuilder(string).reverse();\n     \
    \   int i = 0;\n        for (; i < string.length(); i++) {\n            if (sb.substring(i).equals(reversed.substring(0,\
    \ string.length() - i))) {\n                break;\n            }\n        }\n\
    \        return sb.append(reversed.substring(string.length() - i)).toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < n - max - 1; i++) {\n            builder.append(string.charAt(i));\n   \
    \     }\n        builder.append(string);\n        return builder.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n   \
    \     int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     } else {\n                i = 0;\n                j--;\n            }\n\
    \        }\n        sb.append(sb.reverse().substring(0, string.length() - i));\n\
    \        return sb.toString();", "        int length = string.length();\n    \
    \    int i = 0;\n        int j = length - 1;\n        while (i < j) {\n      \
    \      if (string.charAt(i) != string.charAt(j)) {\n                break;\n \
    \           }\n            i++;\n            j--;\n        }\n        if (i >=\
    \ j) {\n            return string;\n        }\n        StringBuilder builder =\
    \ new StringBuilder();\n        builder.append(string);\n        for (int k =\
    \ i; k >= 0; k--) {\n            builder.append(string.charAt(k));\n        }\n\
    \        return builder.toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        StringBuilder reverse = new StringBuilder(string);\n        reverse.reverse();\n\
    \        int n = string.length();\n        int i = 0;\n        for (; i < n; i++)\
    \ {\n            if (string.substring(i).equals(reverse.substring(0, n - i)))\
    \ {\n                break;\n            }\n        }\n        builder.append(reverse.substring(n\
    \ - i));\n        return builder.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (z[i] == n - i) {\n                max\
    \ = z[i];\n                break;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int length = string.length();\n    \
    \    int[] dp = new int[length];\n        int i = 0;\n        int j = 1;\n   \
    \     while (j < length) {\n            if (string.charAt(i) == string.charAt(j))\
    \ {\n                dp[j] = i + 1;\n                i++;\n                j++;\n\
    \            } else {\n                if (i == 0) {\n                    dp[j]\
    \ = 0;\n                    j++;\n                } else {\n                 \
    \   i = dp[i - 1];\n                }\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int k = length - 1; k >= dp[length\
    \ - 1]; k--) {\n            builder.append(string.charAt(k));\n        }\n   \
    \     builder.append(string);\n        return builder.toString();", "        int\
    \ n = string.length();\n        int[] z = new int[n];\n        z[0] = 0;\n   \
    \     int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if\
    \ (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n        \
    \    }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (i + z[i] == n) {\n                max = Math.max(max, z[i]);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder builder = new StringBuilder(string);\n        String reverse\
    \ = new StringBuilder(string).reverse().toString();\n        int length = string.length();\n\
    \        for (int i = 0; i < length; i++) {\n            if (string.startsWith(reverse.substring(length\
    \ - i))) {\n                return builder.append(reverse.substring(0, length\
    \ - i)).toString();\n            }\n        }\n        return builder.append(reverse).toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n    \
    \        if (z[i] == n - i) {\n                max = z[i];\n                break;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    if (string.length() == 0) {\n            return string;\n        }\n    \
    \    int longestPalindromeSuffix = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (isPalindrome(string.substring(i))) {\n             \
    \   longestPalindromeSuffix = i;\n            }\n        }\n        String prefix\
    \ = string.substring(0, string.length() - longestPalindromeSuffix);\n        String\
    \ reversedPrefix = new StringBuilder(prefix).reverse().toString();\n        return\
    \ string + reversedPrefix;", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + z[i] == n) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = n - max - 1; i >= 0; i--) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.append(string);\n\
    \        return sb.toString();", "        int n = string.length();\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    if (string.length() == 0) {\n            return string;\n        }\n    \
    \    int maxPalindromeLength = 0;\n        int palindromeStartIndex = 0;\n   \
    \     for (int i = 0; i < string.length(); i++) {\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (string.charAt(i - j) != string.charAt(i\
    \ + j)) {\n                    break;\n                }\n                if (2\
    \ * j + 1 > maxPalindromeLength) {\n                    maxPalindromeLength =\
    \ 2 * j + 1;\n                    palindromeStartIndex = i - j;\n            \
    \    }\n            }\n            for (int j = 0; j <= i; j++) {\n          \
    \      if (string.charAt(i - j) != string.charAt(i + j + 1)) {\n             \
    \       break;\n                }\n                if (2 * j + 2 > maxPalindromeLength)\
    \ {\n                    maxPalindromeLength = 2 * j + 2;\n                  \
    \  palindromeStartIndex = i - j;\n                }\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ string.length() - maxPalindromeLength; i++) {\n            sb.append(string.charAt(string.length()\
    \ - 1 - i));\n        }\n        sb.append(string);\n        return sb.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ n - max; i++) {\n            sb.append(string.charAt(i));\n        }\n     \
    \   sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ builder = new StringBuilder(string);\n        StringBuilder reversed = new StringBuilder(string).reverse();\n\
    \        int length = string.length();\n        int i = 0;\n        while (i <\
    \ length) {\n            if (string.substring(i).equals(reversed.substring(0,\
    \ length - i))) {\n                builder.append(reversed.substring(length -\
    \ i));\n                break;\n            }\n            i++;\n        }\n \
    \       return builder.toString();", "        int n = string.length();\n     \
    \   int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    int longestPalindromeSuffixLength = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (isPalindrome(string.substring(i))) {\n             \
    \   longestPalindromeSuffixLength = string.length() - i;\n                break;\n\
    \            }\n        }\n        String prefix = string.substring(0, string.length()\
    \ - longestPalindromeSuffixLength);\n        StringBuilder sb = new StringBuilder(prefix);\n\
    \        sb.reverse();\n        sb.append(string);\n        return sb.toString();",
  "        int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max = i;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.append(string);\n        return sb.toString();", "    \
    \    StringBuilder sb = new StringBuilder(string);\n        StringBuilder rev\
    \ = new StringBuilder(string).reverse();\n        int n = string.length();\n \
    \       int i = 0;\n        while (i < n) {\n            if (string.substring(i).equals(rev.substring(0,\
    \ n - i))) {\n                break;\n            }\n            i++;\n      \
    \  }\n        return sb.append(rev.substring(n - i)).toString();", "        int\
    \ longestPalindrome = longestPalindrome(string);\n        String prefix = string.substring(0,\
    \ string.length() - longestPalindrome);\n        StringBuilder builder = new StringBuilder(string);\n\
    \        builder.append(new StringBuilder(prefix).reverse());\n        return\
    \ builder.toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        if\
    \ (string.length() == 0) {\n            return string;\n        }\n        int\
    \ longestPalindromeSuffixLength = longestPalindromeSuffixLength(string);\n   \
    \     String prefix = string.substring(0, string.length() - longestPalindromeSuffixLength);\n\
    \        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\
    \        return reversedPrefix + string;", "        StringBuilder sb = new StringBuilder(string);\n\
    \        StringBuilder rev = new StringBuilder(string).reverse();\n        int\
    \ n = string.length();\n        int i = 0;\n        while (i < n) {\n        \
    \    if (sb.substring(i).equals(rev.substring(0, n - i))) {\n                break;\n\
    \            }\n            i++;\n        }\n        return sb.append(rev.substring(n\
    \ - i)).toString();", "        int n = string.length();\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (i + z[i] == n) {\n                max = z[i];\n         \
    \   }\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = n - max - 1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return string + sb.toString();", "        StringBuilder sb\
    \ = new StringBuilder(string);\n        int length = string.length();\n      \
    \  int i = 0;\n        for (i = length - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                break;\n            }\n        }\n        sb.append(new StringBuilder(string.substring(0,\
    \ i)).reverse());\n        return sb.toString();", "        int n = string.length();\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > r) {\n                l = i;\n                r =\
    \ i + z[i] - 1;\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (z[i] == n - i) {\n                max\
    \ = Math.max(max, z[i]);\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = max; i < n; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        sb.append(string);\n        return\
    \ sb.toString();", "        int n = string.length();\n        int[] z = new int[n];\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n      \
    \  }\n        sb.append(string);\n        return sb.toString();", "        int\
    \ n = string.length();\n        int[] z = new int[n];\n        int l = 0, r =\
    \ 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n     \
    \           z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n           \
    \ while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i])) {\n \
    \               z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.append(string.charAt(i));\n        }\n    \
    \    sb.append(string);\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        int[] z = zFunction(string);\n\
    \        int longestPalindromeSuffix = z[string.length() - 1];\n        String\
    \ prefix = string.substring(0, string.length() - longestPalindromeSuffix);\n \
    \       String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\
    \        return reversedPrefix + string;", "        StringBuilder builder = new\
    \ StringBuilder(string);\n        StringBuilder reverse = new StringBuilder(string).reverse();\n\
    \        int i = 0;\n        while (i < string.length() && !string.substring(i).equals(reverse.substring(0,\
    \ string.length() - i))) {\n            i++;\n        }\n        return builder.append(reverse.substring(string.length()\
    \ - i)).toString();", "        StringBuilder builder = new StringBuilder(string);\n\
    \        int i = 0;\n        int j = string.length() - 1;\n        while (i <\
    \ j) {\n            if (string.charAt(i) == string.charAt(j)) {\n            \
    \    i++;\n                j--;\n            } else {\n                i = 0;\n\
    \                j--;\n            }\n        }\n        builder.append(builder.substring(0,\
    \ string.length() - i).reverse());\n        return builder.toString();", "   \
    \     int length = string.length();\n        int[] z = new int[length];\n    \
    \    int l = 0, r = 0;\n        for (int i = 1; i < length; i++) {\n         \
    \   if (i <= r) {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n   \
    \         }\n            while (i + z[i] < length && string.charAt(z[i]) == string.charAt(i\
    \ + z[i])) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (z[i] == length - i) {\n                max = length\
    \ - i;\n                break;\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < length - max; i++)\
    \ {\n            builder.append(string.charAt(i));\n        }\n        builder.append(string);\n\
    \        return builder.toString();", "        String reversed = new StringBuilder(string).reverse().toString();\n\
    \        String palindrome = string + \"#\" + reversed;\n        int[] prefixFunction\
    \ = prefixFunction(palindrome);\n        int palindromeLength = prefixFunction[prefixFunction.length\
    \ - 1];\n        String prefix = string.substring(0, string.length() - palindromeLength);\n\
    \        return reversed + prefix;", "        int length = string.length();\n\
    \        int[] z = new int[length];\n        z[0] = 0;\n        int left = 0;\n\
    \        int right = 0;\n        for (int i = 1; i < length; i++) {\n        \
    \    if (i <= right) {\n                z[i] = Math.min(z[i - left], right - i\
    \ + 1);\n            }\n            while (i + z[i] < length && string.charAt(z[i])\
    \ == string.charAt(i + z[i])) {\n                z[i]++;\n            }\n    \
    \        if (i + z[i] - 1 > right) {\n                left = i;\n            \
    \    right = i + z[i] - 1;\n            }\n        }\n        int max = 0;\n \
    \       int index = 0;\n        for (int i = 1; i < length; i++) {\n         \
    \   if (z[i] == i) {\n                max = z[i];\n                index = i;\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = length - 1; i >= index; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        builder.append(string);\n        return builder.toString();",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      int n = string.length();\n        int[] z = new int[n];\n        int l\
    \ = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && string.charAt(z[i]) == string.charAt(i + z[i]))\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == n - i && i > max) {\n                max = i;\n         \
    \   }\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = n - 1; i >= max; i--) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return sb.append(string).toString();", "        int length\
    \ = string.length();\n        int[] prefix = new int[length];\n        int[] suffix\
    \ = new int[length];\n        for (int i = 0; i < length; i++) {\n           \
    \ prefix[i] = i;\n            suffix[i] = length - i - 1;\n        }\n       \
    \ int[] palindrome = new int[length];\n        for (int i = 0; i < length; i++)\
    \ {\n            palindrome[i] = 0;\n        }\n        int max = 0;\n       \
    \ for (int i = 0; i < length; i++) {\n            int j = 0;\n            while\
    \ (j < length - i) {\n                if (string.charAt(prefix[i + j]) == string.charAt(suffix[j]))\
    \ {\n                    palindrome[i]++;\n                } else {\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \            if (palindrome[i] > max) {\n                max = palindrome[i];\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < length - max; i++) {\n            builder.append(string.charAt(i));\n\
    \        }\n        for (int i = length - 1; i >= max; i--) {\n            builder.append(string.charAt(i));\n\
    \        }\n        return builder.toString();"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
