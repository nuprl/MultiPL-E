language: java
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        if (q.size() == 1) {\n          \
    \  return true;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n\
    \            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int l = 0;\n        int r = q.size() - 1;\n     \
    \   while (l < r) {\n            if (q.get(l) != q.get(r)) {\n               \
    \ return false;\n            }\n            l++;\n            r--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) {\n            return true;\n        }\n     \
    \   int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum\
    \ += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i\
    \ < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) return true;\n        if (q.size() == 1) return\
    \ q.get(0) <= w;\n        if (q.size() == 2) return q.get(0) + q.get(1) <= w;\n\
    \        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        if (sum\
    \ > w) return false;\n        ArrayList<Integer> q1 = new ArrayList<Integer>(q.subList(0,\
    \ q.size()/2));\n        ArrayList<Integer> q2 = new ArrayList<Integer>(q.subList(q.size()/2,\
    \ q.size()));\n        Collections.reverse(q2);\n        return q1.equals(q2)\
    \ && willItFly(q1, w) && willItFly(q2, w);\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nqc6j0h.java:30)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q).stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()))\
    \ && q.stream().mapToInt(Integer::intValue).sum() <= w;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6z9_fsk.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int left = 0;\n        int right\
    \ = q.size() - 1;\n        while (left < right) {\n            if (q.get(left)\
    \ != q.get(right)) {\n                return false;\n            }\n         \
    \   left++;\n            right--;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q).stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()))\
    \ && q.stream().mapToInt(Integer::intValue).sum() <= w;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6z9_fsk.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkvyluf.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size()\
    \ - 1 - i)) {\n                return false;\n            }\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkvyluf.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) {\n            return true;\n        }\n     \
    \   int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum\
    \ += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i\
    \ < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) {\n            return true;\n        }\n     \
    \   if (q.size() == 1) {\n            return q.get(0) <= w;\n        }\n     \
    \   int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum\
    \ += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i\
    \ < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int left = 0;\n        int right = q.size() - 1;\n\
    \        while (left < right) {\n            if (q.get(left) != q.get(right))\
    \ {\n                return false;\n            }\n            left++;\n     \
    \       right--;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int left = 0;\n        int right\
    \ = q.size() - 1;\n        while (left < right) {\n            if (q.get(left)\
    \ != q.get(right)) {\n                return false;\n            }\n         \
    \   left++;\n            right--;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8yfbiee6.java:25)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkvyluf.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return isBalanced(q) && sum(q) <= w;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovhkcuaq.java:19: error: cannot find symbol\n        return isBalanced(q)\
    \ && sum(q) <= w;\n               ^\n  symbol:   method isBalanced(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpovhkcuaq.java:19: error: cannot find symbol\n\
    \        return isBalanced(q) && sum(q) <= w;\n                              \
    \  ^\n  symbol:   method sum(ArrayList<Integer>)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()))\
    \ && q.stream().mapToInt(Integer::intValue).sum() <= w;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5o0y0sm.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) {\n            return true;\n        }\n     \
    \   int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum\
    \ += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i\
    \ < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        boolean isBalanced = true;\n \
    \       for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n \
    \           if (q.get(i) != q.get(q.size() - 1 - i)) {\n                isBalanced\
    \ = false;\n            }\n        }\n        if (sum <= w && isBalanced) {\n\
    \            return true;\n        }\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int left = 0;\n        int right\
    \ = q.size() - 1;\n        while (left < right) {\n            if (q.get(left)\
    \ != q.get(right)) {\n                return false;\n            }\n         \
    \   left++;\n            right--;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q.stream().sorted().collect(Collectors.toList())))\
    \ && q.stream().mapToInt(Integer::intValue).sum() <= w;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdv3zs6x.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return isBalanced(q) && getSum(q) <= w;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp437bbyap.java:19: error: cannot find symbol\n        return isBalanced(q)\
    \ && getSum(q) <= w;\n               ^\n  symbol:   method isBalanced(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmp437bbyap.java:19: error: cannot find symbol\n\
    \        return isBalanced(q) && getSum(q) <= w;\n                           \
    \     ^\n  symbol:   method getSum(ArrayList<Integer>)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        int sum = 0;\n        for (int\
    \ i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n     \
    \   if (sum > w) {\n            return false;\n        }\n        int i = 0;\n\
    \        int j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i)\
    \ != q.get(j)) {\n                return false;\n            }\n            i++;\n\
    \            j--;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkvyluf.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        for (int i = 0; i < q.size() / 2;\
    \ i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n           \
    \     return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxkvyluf.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here.\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__zyzszm.java:23)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        if (q.size() == 0) {\n            return true;\n        }\n     \
    \   int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum\
    \ += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i)\
    \ != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qt7mu7i.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        for (int i = 0; i < q.size() / 2;\
    \ i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n           \
    \     return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here.\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__zyzszm.java:23)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n      \
    \      if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q).stream().sorted().collect(Collectors.toList()))\
    \ && q.stream().reduce(0, (a, b) -> a + b) <= w;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad3c0mfk.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jlir02l.java:23)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return q.equals(new ArrayList<Integer>(q).stream().sorted().collect(Collectors.toList()))\
    \ && q.stream().reduce(0, (a, b) -> a + b) <= w;\n}\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad3c0mfk.java:22)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))),\
    \ (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrmv6ko2.java:22)\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n    \
    \        sum += q.get(i);\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n     \
    \   while (i < j) {\n            if (q.get(i) != q.get(j)) {\n               \
    \ return false;\n            }\n            i++;\n            j--;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
    \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))),\
    \ (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int sum = 0;\n        for (int i = 0; i < q.size();\
    \ i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n  \
    \          return false;\n        }\n        int i = 0;\n        int j = q.size()\
    \ - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n   \
    \             return false;\n            }\n            i++;\n            j--;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
    \ (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2],\
    \ 5) \n    // False \n    // # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n    // # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n    // # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n    // # 3 is less than the maximum possible weight, and it's\
    \ balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w)\
    \ {\n        // Write your code here.\n        int sum = 0;\n        for (int\
    \ i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n     \
    \   if (sum > w) {\n            return false;\n        }\n        int i = 0;\n\
    \        int j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i)\
    \ != q.get(j)) {\n                return false;\n            }\n            i++;\n\
    \            j--;\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (9)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2))), (5)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
    \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
    \ (5)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011632
