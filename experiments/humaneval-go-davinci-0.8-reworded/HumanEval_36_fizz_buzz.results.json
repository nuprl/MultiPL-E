{
  "language": "go_test.go",
  "name": "HumanEval_36_fizz_buzz",
  "results": [
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            // fmt.Println(i)\n            if i / 10 == 7 {\n                count += 1\n            }\n            if i % 10 == 7 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var cnt int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            var digits []int\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n                digits = append(digits, int(c)-'0')\n            }\n            if digits[0] == 7 || digits[1] == 7 {\n                cnt++\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.fizz_buzz(0x32)\n\t/tmp/tmp8mz7zpuc_test.go:23 +0x212\ncommand-line-arguments_test.TestFizz_Buzz(0x0?)\n\t/tmp/tmp8mz7zpuc_test.go:38 +0x46\ntesting.tRunner(0xc0000cc1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var numTimes int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            numTimes += digitCount(i, 7)\n        }\n    }\n    return numTimes\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph4babbjn_test.go:20:25: undefined: digitCount\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if digit == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075019
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += count_7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp78brl76g_test.go:19:22: undefined: count_7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074981
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    number := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count := digit_count(i, 7)\n            number += count\n        }\n    }\n    return number\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5knm1r__test.go:19:22: undefined: digit_count\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += number_of_sevens(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6n8qh9gr_test.go:19:22: undefined: number_of_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, ch := range fmt.Sprintf(\"%d\", i) {\n                if string(ch) == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    num := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && seven_count(i) > 0 {\n            num++\n        }\n    }\n    return num\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa9u5g7wn_test.go:18:44: undefined: seven_count\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range(fmt.Sprintf(\"%d\", i)) {\n                if c == '7' {\n                    sum += 1\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        // If i is divisible by 11 or 13, then check if it contains a 7.\n        if i % 11 == 0 || i % 13 == 0 {\n            if has_seven(i) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcztce31u_test.go:20:16: undefined: has_seven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += num_sevens(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6ptz4k_d_test.go:19:22: undefined: num_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var res int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            res += numOf(i, 7)\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp39xyoeui_test.go:19:20: undefined: numOf\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    m := n % 11 * n % 13\n    if m == 0 {\n        return fizz_buzz(n - 1) + 1\n    } else {\n        return fizz_buzz(n - 1)\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992 +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101 +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547 +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0xfffffffffeaaab1b?)\n\t/tmp/tmpe_vwefy5_test.go:15 +0xa5 fp=0xc020160398 sp=0xc020160390 pc=0x4ef705\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603b0 sp=0xc020160398 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603c8 sp=0xc0201603b0 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603e0 sp=0xc0201603c8 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603f8 sp=0xc0201603e0 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc020160410 sp=0xc0201603f8 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:18 +0x7b fp=0xc020160428 sp=0xc020160410 pc=0x4ef6db\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc020160440 sp=0xc020160428 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:18 +0x7b fp=0xc020160458 sp=0xc020160440 pc=0x4ef6db\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc020160470 sp=0xc020160458 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc020160488 sp=0xc020160470 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201604a0 sp=0xc020160488 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc",
      "timestamp": 1660075133
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=192)', got '%!s(int=91)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=8026)', got '%!s(int=2297)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            // convert to string, check if a 7 is present\n            digits := fmt.Sprintf(\"%d\", i)\n            for _, digit := range digits {\n                if string(digit) == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += number_of_sevens(i)\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp713kj7ys_test.go:19:20: undefined: number_of_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    var k int\n\n    for i := 0; i < n; i++ {\n        k = i\n        for k > 0 {\n            if k % 10 == 7 {\n                count++\n            }\n            k /= 10\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=2)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=3)', got '%!s(int=20)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=6)', got '%!s(int=40)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=192)', got '%!s(int=1200)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=639)', got '%!s(int=4000)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=8026)', got '%!s(int=50000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // function 7_num() returns the number of 7s in the given value of x\n    // >>> 7_num(7)\n    // 1\n    // >>> 7_num(77)\n    // 2\n    // >>> 7_num(777)\n    // 3\n    // >>> 7_num(78)\n    // 1\n    // >>> 7_num(778)\n    // 2\n    // >>> 7_num(7777)\n    // 4\n    // >>> 7_num(7877)\n    // 2\n    // >>> 7_num(177777777777)\n    // 8\n    // >>> 7_num(123765)\n    // 1\n    // >>> 7_num(877)\n    // 1\n    // >>> 7_num(787777777777777777)\n    // 10\n    seven_count := 0\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            seven_count += seven_num(i)\n        }\n    }\n    return seven_count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgriqj0hy_test.go:42:28: undefined: seven_num\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075131
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    var c = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int\n    var count int\n    count = 0\n    for i = 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=192)', got '%!s(int=91)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=8026)', got '%!s(int=2297)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := 0; j < len(fmt.Sprintf(\"%d\", i)); j++ {\n                if fmt.Sprintf(\"%d\", i)[j] == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.030s\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    s := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if (i % 10) % 7 == 0 {\n                s++\n            }\n            if i / 10 % 7 == 0 {\n                s++\n            }\n        }\n    }\n    return s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=192)', got '%!s(int=218)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=639)', got '%!s(int=550)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=8026)', got '%!s(int=5514)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && count_digit(i, 7) > 0 {\n            count += count_digit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpexv57css_test.go:18:44: undefined: count_digit\n/tmp/tmpexv57css_test.go:19:22: undefined: count_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075135
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            r = r + numOf7(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdkevcz8x_test.go:19:21: undefined: numOf7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075135
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075136
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num7s = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if (i % 10) == 7 {\n                num7s++\n            }\n            if (i / 10) == 7 {\n                num7s++\n            }\n        }\n    }\n    return num7s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075136
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n        return 0\n    }\n    cnt := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                cnt++\n            }\n            if i / 10 % 10 == 7 {\n                cnt++\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpkfk_34nc_test.go:53: expected '%!s(int=192)', got '%!s(int=128)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkfk_34nc_test.go:53: expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpkfk_34nc_test.go:53: expected '%!s(int=8026)', got '%!s(int=3216)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075136
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += count7(i)\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwqiu4s6_test.go:19:20: undefined: count7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075135
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += strconv.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcth881rl_test.go:19:22: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075135
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tcount := 0\n\tfor i := 11; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tstr := fmt.Sprintf(\"%d\", i)\n\t\t\tfor _, c := range str {\n\t\t\t\tif c == '7' {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075136
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\ttotal := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\ttotal += how_many_7(i)\n\t\t}\n\t}\n\treturn total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9newsf_test.go:19:13: undefined: how_many_7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075135
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    out := 0\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            digits := Digits(i)\n            for _, digit := range digits {\n                if digit == 7 {\n                    out += 1\n                }\n            }\n        }\n    }\n    return out\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkxiyxr6p_test.go:19:23: undefined: Digits\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: fix this so that it's a simple loop\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            num := i\n            for num > 0 {\n                if num % 10 == 7 {\n                    count++\n                }\n                num /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=192)', got '%!s(int=29)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=639)', got '%!s(int=95)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=8026)', got '%!s(int=1167)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        divisible_by_11 := (i % 11) == 0\n        divisible_by_13 := (i % 13) == 0\n        divisible_by_11_or_13 := divisible_by_11 || divisible_by_13\n        if divisible_by_11_or_13 {\n            count += count_7s(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0lim4d__test.go:22:22: undefined: count_7s\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i / 10 == 7 {\n                result += 1\n            }\n            if i % 10 == 7 {\n                result += 1\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result int\n    var limit int = n - n % 11\n    var test int = 11\n    for test < limit {\n        if test % 11 == 0 || test % 13 == 0 {\n            var count int = 0\n            var value int = test\n            for value > 0 {\n                var digit int = value % 10\n                if digit == 7 {\n                    count++\n                }\n                value = value / 10\n            }\n            result += count\n        }\n        test += 11\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=192)', got '%!s(int=109)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=639)', got '%!s(int=364)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=8026)', got '%!s(int=4545)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            for j := 0; j < len(fmt.Sprintf(\"%d\", i)); j++ {\n                if string(fmt.Sprintf(\"%d\", i)[j]) == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.056s\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_7(i) {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf9qh1e9p_test.go:18:44: undefined: contains_7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // write your code here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // For each integer in the range, we will store the number of 7s in it in this variable.\n    // This is necessary because we need to check the amount of 7s in multiple numbers (11-13)\n    sevenCount := 0\n    // Loop through all numbers less than n\n    for i := 0; i < n; i++ {\n        // Get the number of 7s in each number divisible by 11 or 13\n        // If the number is divisible by 11, it is also divisible by 13\n        if i % 11 == 0 {\n            sevenCount += 7sInNumber(i)\n        }\n    }\n    return sevenCount\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpyvatte2x_test.go:24:28: expected ';', found sInNumber\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660075136
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += count_digit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7lqvii26_test.go:19:22: undefined: count_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            var num = i\n            for num > 0 {\n                if num % 10 == 7 {\n                    count += 1\n                }\n                num /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    digitCount := 0\n    for i := 1; i < n; i++ {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            for j := i; j > 0; j /= 10 {\n                digit := j % 10\n                if digit == 7 {\n                    digitCount++\n                }\n            }\n        }\n    }\n    return digitCount\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return -1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=192)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=639)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=8026)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075138
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8y58g2xy_test.go:19:22: undefined: strings\n/tmp/tmp8y58g2xy_test.go:19:36: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && has_digit(i, 7) {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt1jzsjux_test.go:18:44: undefined: has_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075140
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_ex(n, 7, 11, 13)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyb942efn_test.go:16:12: undefined: fizz_buzz_ex\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075140
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=2)', got '%!s(int=12)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=6)', got '%!s(int=32)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=639)', got '%!s(int=1609)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075141
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && has_seven(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2q42obih_test.go:18:44: undefined: has_seven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075140
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            c := countOnes(i)\n            fmt.Println(c)\n            count += c\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbrj3shy_test.go:20:18: undefined: countOnes\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075140
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ans := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, d := range fmt.Sprintf(\"%d\", i) {\n                if d == '7' {\n                    ans++\n                }\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075141
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            str := fmt.Sprintf(\"%d\", i)\n            for _, c := range str {\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075142
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    var i int\n    for i = 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += CountDigit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9b0belcr_test.go:20:22: undefined: CountDigit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075141
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var a, b int\n    var count int\n\n    a = n / 11\n    b = n / 13\n\n    for i := a; i > 0; i-- {\n        t := i * 11\n        if t < n {\n            if has_seven(t) {\n                count++\n            }\n        }\n    }\n\n    for i := b; i > 0; i-- {\n        t := i * 13\n        if t < n {\n            if has_seven(t) {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzivls_qx_test.go:25:16: undefined: has_seven\n/tmp/tmpzivls_qx_test.go:34:16: undefined: has_seven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075141
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            num := i\n            for num > 0 {\n                if num % 10 == 7 {\n                    total += 1\n                }\n                num /= 10\n            }\n        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075142
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += count_digit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnn7qarg9_test.go:19:22: undefined: count_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\ta := 0\n\tif n <= 0 {\n\t\treturn a\n\t}\n\n\t// initialize x to 11 and y to 13\n\tx := 11\n\ty := 13\n\n\t// use a for loop to iterate until either x or y exceeds n\n\tfor i := 0; i < n; i++ {\n\t\t// if x is less than y, then increment a by the count of 7s in x\n\t\tif x < y {\n\t\t\t// count the number of 7s in x\n\t\t\t// use another for loop to iterate through each digit of x\n\t\t\tfor j := 0; j < len(strconv.Itoa(x)); j++ {\n\t\t\t\t// check the ith digit to see if it is 7\n\t\t\t\tif strconv.Itoa(x)[j] == \"7\" {\n\t\t\t\t\t// if it is 7, increment a by 1\n\t\t\t\t\ta++\n\t\t\t\t}\n\t\t\t}\n\t\t\t// increment x by 11\n\t\t\tx += 11\n\t\t// if y is less than x, then increment a by the count of 7s in y\n\t\t} else if y < x {\n\t\t\t// count the number of 7s in y\n\t\t\t// use another for loop to iterate through each digit of y\n\t\t\tfor j := 0; j < len(strconv.Itoa(y)); j++ {\n\t\t\t\t// check the ith digit to see if it is 7\n\t\t\t\tif strconv.Itoa(y)[j] == \"7\" {\n\t\t\t\t\t// if it is 7, increment a by 1\n\t\t\t\t\ta++\n\t\t\t\t}\n\t\t\t}\n\t\t\t// increment y by 13\n\t\t\ty += 13\n\t\t// if x equals y, then increment a by the count of 7s in x\n\t\t} else if x == y {\n\t\t\t// count the number of 7s in x\n\t\t\t// use another for loop to iterate through each digit of x\n\t\t\tfor j := 0; j < len(strconv.Itoa(x)); j++ {\n\t\t\t\t// check the\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpuamb51m5_test.go:59:6: expected '(', found TestFizz_Buzz\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660075139
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075019
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075143
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    var base11, base13 int = 11, 13\n    for i := 0; i < n; i += 11 {\n        if i % 13 == 0 {\n            i = base13\n            base13 += 13\n        }\n        for x := i; x > 0; x /= 10 {\n            if x % 10 == 7 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq7mljxze_test.go:17:9: base11 declared but not used\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075142
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sevens int = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) {\n            sevens += count_sevens(i)\n        }\n    }\n    return sevens\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbtsra3a3_test.go:19:23: undefined: count_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075142
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            s := fmt.Sprintf(\"%d\", i)\n            for _, c := range s {\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            m := i\n            for m > 0 {\n                digit := m % 10\n                if digit == 7 {\n                    count += 1\n                }\n                m /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, r := range fmt.Sprintf(\"%d\", i) {\n                if r == '7' {\n                    sum++\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 11 {\n        return 0\n    }\n\n    var count int\n    var last_digit int\n    var last_digit_of_last_digit int\n    var i int\n\n    for i = 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            last_digit = i % 10\n            last_digit_of_last_digit = i % 100 % 10\n            if last_digit == 7 || last_digit_of_last_digit == 7 {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": null,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n        return 0\n    }\n\n    // Find how many times the digit 7 appears in the numbers from 7 to n - 1.\n    total := 0\n    for i := 7; i < n; i++ {\n        // Increment count when the number contains the digit 7.\n        if i % 11 == 0 || i % 13 == 0 {\n            nums := []int{}\n            for i > 0 {\n                nums = append(nums, i % 10)\n                i /= 10\n            }\n            for _, num := range nums {\n                if num == 7 {\n                    total++\n                }\n            }\n        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Timeout",
      "stderr": "None",
      "stdout": "None",
      "timestamp": 1660075153
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    // Create a list of numbers divisible by 11 or 13\n    divisible := []int{}\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            divisible = append(divisible, i)\n        }\n    }\n    for _, i := range divisible {\n        // Convert the integer to a string and check for 7's\n        for _, j := range(fmt.Sprintf(\"%d\", i)) {\n            if j == '7' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var times int\n    var num int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            num = i\n            for num > 0 {\n                if num % 10 == 7 {\n                    times++\n                }\n                num /= 10\n            }\n        }\n    }\n    return times\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075144
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // initialize a counter to zero\n    count := 0\n    // loop through all integers less than n\n    for i := 1; i < n; i++ {\n        // if the number is divisible by 11 or 13\n        if i % 11 == 0 || i % 13 == 0 {\n            // increment the counter by the number of times 7 appears in the number\n            count += num_sevens(i)\n        }\n    }\n    // return the counter\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp816xcehg_test.go:23:22: undefined: num_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075143
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && has_seven(i) {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9jkqfvtm_test.go:18:44: undefined: has_seven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075143
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            str := fmt.Sprintf(\"%d\", i)\n            for j := 0; j < len(str); j++ {\n                if str[j] == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n    if n < 11 || n < 13 {\n        return 0\n    }\n\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += i / 100 + i / 10 % 10\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=0)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=2)', got '%!s(int=45)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=3)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=6)', got '%!s(int=171)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=192)', got '%!s(int=15472)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=639)', got '%!s(int=86992)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=8026)', got '%!s(int=8105964)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += countDigit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoxehnpmd_test.go:19:22: undefined: countDigit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075054
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && isContain7(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd2jehbbw_test.go:18:44: undefined: isContain7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += count_digits(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7pgh2y3_test.go:19:22: undefined: count_digits\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n        return 0\n    }\n    return fizz_buzz(n-11) + fizz_buzz(n-13) + countSeven(n)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1vvxwaiq_test.go:19:48: undefined: countSeven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075145
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: implement me!\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075146
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        switch {\n        case i % 11 == 0 && i % 13 == 0:\n            if i % 10 == 7 {\n                count++\n            }\n            if i % 100 == 7 {\n                count++\n            }\n            if i % 1000 == 7 {\n                count++\n            }\n        case i % 11 == 0:\n            if i % 10 == 7 {\n                count++\n            }\n            if i % 100 == 7 {\n                count++\n            }\n        case i % 13 == 0:\n            if i % 10 == 7 {\n                count++\n            }\n            if i % 100 == 7 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=192)', got '%!s(int=71)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=639)', got '%!s(int=178)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=8026)', got '%!s(int=1770)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075146
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += occurrences(i, 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9fv_p234_test.go:19:22: undefined: occurrences\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075146
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tfor _, c := range fmt.Sprintf(\"%d\", i) {\n\t\t\t\tif c == '7' {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075146
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code goes here\n    var count int\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i < n {\n            str := fmt.Sprintf(\"%d\", i)\n            fmt.Println(str)\n            for _, char := range str {\n                if string(char) == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.031s\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += digits_of_7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp40efof_d_test.go:19:22: undefined: digits_of_7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            var str string = fmt.Sprintf(\"%d\", i)\n            for _, c := range str {\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && divisibleBySeven(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpejs8ojaa_test.go:18:44: undefined: divisibleBySeven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            s += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpth5dj55m_test.go:19:18: undefined: strings\n/tmp/tmpth5dj55m_test.go:19:32: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Step 1: Search number\n    // Step 2: Convert number to string\n    // Step 3: Count \"7\"\n    // Step 4: Add count to total\n    // Step 5: Repeat until n\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && hasDigit7(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjk6ez4ql_test.go:18:44: undefined: hasDigit7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075147
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075132
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += (i % 10 == 7) + (i / 10 % 10 == 7)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzr0ze4hc_test.go:19:22: invalid operation: operator + not defined on (i % 10 == 7) (untyped bool value)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, char := range fmt.Sprintf(\"%d\", i) {\n                if char == '7' {\n                    result += 1\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 13 {\n        return 0\n    }\n\n    if n < 111 {\n        return 7\n    }\n\n    return 7 + fizz_buzz(n / 11) + fizz_buzz(n / 13)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=6)', got '%!s(int=21)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=192)', got '%!s(int=49)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=639)', got '%!s(int=49)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=8026)', got '%!s(int=105)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 10 {\n        return 0\n    }\n    digit_7_count := 0\n    for i := 1; i <= n; i++ {\n        if (i % 11 == 0) || (i % 13 == 0) {\n            if has_digit(i, 7) {\n                digit_7_count += 1\n            }\n        }\n    }\n    return digit_7_count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdnuicxmh_test.go:25:16: undefined: has_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 42\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=0)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=2)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=3)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=3)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=6)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=192)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=639)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=8026)', got '%!s(int=42)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += NumOf7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8b7_cqm8_test.go:19:22: undefined: NumOf7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075148
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n        return 0\n    }\n    sevens := 0\n    for i := 7; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for d := i; d > 0; d /= 10 {\n                if d % 10 == 7 {\n                    sevens++\n                }\n            }\n        }\n    }\n    return sevens\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            s := fmt.Sprintf(\"%d\", i)\n            for j := 0; j < len(s); j++ {\n                if s[j] == '7' {\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            b := fmt.Sprintf(\"%b\", i)\n            res += strings.Count(b, \"111\")\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_ux85cc_test.go:20:20: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            str := fmt.Sprintf(\"%d\", i)\n            for _, c := range str {\n                if c == '7' {\n                    result++\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // define a variable to count the number of 7s\n    count := 0\n    // loop through all the numbers\n    for i := 1; i < n; i++ {\n        // first check if they are divisible by 11 or 13\n        if i % 11 == 0 || i % 13 == 0 {\n            // if they are, loop through each digit, checking if it's 7\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075149
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            x := i\n            for x > 0 {\n                if x % 10 == 7 {\n                    sum += 1\n                }\n                x /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075150
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            s := fmt.Sprintf(\"%d\", i)\n            for _, v := range s {\n                if byte(v) == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075150
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 {\n        return 0\n    }\n    buzz, fizz := 0, 0\n    for i := 11; i < n; i++ {\n        switch {\n        case i % 11 == 0:\n            buzz++\n        case i % 13 == 0:\n            fizz++\n        }\n    }\n    return buzz + fizz\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=2)', got '%!s(int=12)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=6)', got '%!s(int=32)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=639)', got '%!s(int=1609)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075150
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var counter int\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            counter += strings.Count(i, \"7\")\n        }\n    }\n    return counter\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplz4i261e_test.go:19:24: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075150
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && divisible_by_seven(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1_87q7v_test.go:18:44: undefined: divisible_by_seven\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075150
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num_of_7s int = 0\n    var i int = 1\n    for i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            str := fmt.Sprintf(\"%d\", i)\n            for _, v := range str {\n                if v == '7' {\n                    num_of_7s += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return num_of_7s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.035s\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=639)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            x := i\n            for {\n                if x % 10 == 7 {\n                    count += 1\n                }\n                x /= 10\n                if x == 0 {\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075019
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // start with a count of 0\n    count := 0\n    // go through the numbers 0 - n\n    for i := 0; i < n; i++ {\n        // if the number is divisible by 11 or 13\n        if i % 11 == 0 || i % 13 == 0 {\n            // get the number as a string\n            s := fmt.Sprintf(\"%d\", i)\n            // for each digit in the string\n            for _, c := range s {\n                // if it's a 7, increment the count\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    // return the count\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // \u4f7f\u7528\u4ece1\u5230n\u7684\u6570\u5b57\u7684\u8fed\u4ee3\u5668\uff0c\u7b26\u5408\u6761\u4ef6\u7684\u6570\u5b57\u4e2d\u6570\u5b577\u7684\u4e2a\u6570\u76f8\u52a0\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            s := fmt.Sprintf(\"%d\", i)\n            for _, c := range s {\n                if c == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var res int\n    for i := 7; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            res += 1\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=192)', got '%!s(int=91)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=8026)', got '%!s(int=2297)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            j := i\n            for j > 0 {\n                if j % 10 == 7 {\n                    count += 1\n                }\n                j /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += numDigit7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn7s96a_8_test.go:19:22: undefined: numDigit7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            str := fmt.Sprintf(\"%d\", i)\n            for i := 0; i < len(str); i++ {\n                if str[i] == '7' {\n                    result++\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075152
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 100 {\n        return 0\n    }\n\n    return fizz_buzz(n/10) + fizz_buzz(n/100) + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=192)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=639)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=8026)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075152
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, v := range fmt.Sprintf(\"%d\", i) {\n                if v == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "timestamp": 1660075019
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            r += fizz_buzz_aux(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpts0byicd_test.go:19:18: undefined: fizz_buzz_aux\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            fmt.Println(i)\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "77\n77\n77\n91\n77\n91\n154\n182\n77\n91\n154\n182\n231\n273\n308\n364\n385\n455\n462\n539\n546\n616\n637\n693\n728\n770\n819\n847\n910\n924\n1001\n1078\n1092\n1155\n1183\n1232\n1274\n1309\n1365\n1386\n1456\n1463\n1540\n1547\n1617\n1638\n1694\n1729\n1771\n1820\n1848\n1911\n1925\n2002\n2079\n2093\n2156\n2184\n2233\n2275\n2310\n2366\n2387\n2457\n2464\n2541\n2548\n2618\n2639\n2695\n2730\n2772\n2821\n2849\n2912\n2926\n3003\n3080\n3094\n3157\n3185\n3234\n3276\n3311\n3367\n3388\n3458\n3465\n3542\n3549\n3619\n3640\n3696\n3731\n3773\n3822\n3850\n3913\n3927\n77\n91\n154\n182\n231\n273\n308\n364\n385\n455\n462\n539\n546\n616\n637\n693\n728\n770\n819\n847\n910\n924\n1001\n1078\n1092\n1155\n1183\n1232\n1274\n1309\n1365\n1386\n1456\n1463\n1540\n1547\n1617\n1638\n1694\n1729\n1771\n1820\n1848\n1911\n1925\n2002\n2079\n2093\n2156\n2184\n2233\n2275\n2310\n2366\n2387\n2457\n2464\n2541\n2548\n2618\n2639\n2695\n2730\n2772\n2821\n2849\n2912\n2926\n3003\n3080\n3094\n3157\n3185\n3234\n3276\n3311\n3367\n3388\n3458\n3465\n3542\n3549\n3619\n3640\n3696\n3731\n3773\n3822\n3850\n3913\n3927\n4004\n4081\n4095\n4158\n4186\n4235\n4277\n4312\n4368\n4389\n4459\n4466\n4543\n4550\n4620\n4641\n4697\n4732\n4774\n4823\n4851\n4914\n4928\n5005\n5082\n5096\n5159\n5187\n5236\n5278\n5313\n5369\n5390\n5460\n5467\n5544\n5551\n5621\n5642\n5698\n5733\n5775\n5824\n5852\n5915\n5929\n6006\n6083\n6097\n6160\n6188\n6237\n6279\n6314\n6370\n6391\n6461\n6468\n6545\n6552\n6622\n6643\n6699\n6734\n6776\n6825\n6853\n6916\n6930\n7007\n7084\n7098\n7161\n7189\n7238\n7280\n7315\n7371\n7392\n7462\n7469\n7546\n7553\n7623\n7644\n7700\n7735\n7777\n7826\n7854\n7917\n7931\n8008\n8085\n8099\n8162\n8190\n8239\n8281\n8316\n8372\n8393\n8463\n8470\n8547\n8554\n8624\n8645\n8701\n8736\n8778\n8827\n8855\n8918\n8932\n9009\n9086\n9100\n9163\n9191\n9240\n9282\n9317\n9373\n9394\n9464\n9471\n9548\n9555\n9625\n9646\n9702\n9737\n9779\n9828\n9856\n9919\n9933\n77\n91\n154\n182\n231\n273\n308\n364\n385\n455\n462\n539\n546\n616\n637\n693\n728\n770\n819\n847\n910\n924\n1001\n1078\n1092\n1155\n1183\n1232\n1274\n1309\n1365\n1386\n1456\n1463\n1540\n1547\n1617\n1638\n1694\n1729\n1771\n1820\n1848\n1911\n1925\n2002\n2079\n2093\n2156\n2184\n2233\n2275\n2310\n2366\n2387\n2457\n2464\n2541\n2548\n2618\n2639\n2695\n2730\n2772\n2821\n2849\n2912\n2926\n3003\n3080\n3094\n3157\n3185\n3234\n3276\n3311\n3367\n3388\n3458\n3465\n3542\n3549\n3619\n3640\n3696\n3731\n3773\n3822\n3850\n3913\n3927\n4004\n4081\n4095\n4158\n4186\n4235\n4277\n4312",
      "timestamp": 1660075152
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_digit(i, 7) {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplfzoh2i__test.go:18:44: undefined: contains_digit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075152
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tvar count int\n\tfor i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tval := fmt.Sprintf(\"%d\", i)\n\t\t\tfor _, r := range val {\n\t\t\t\tif r == '7' {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660075152
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=639)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660075151
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        var d11, d13 bool\n        d11 = (i % 11) == 0\n        d13 = (i % 13) == 0\n        if d11 || d13 {\n            count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp133zw196_test.go:22:22: undefined: strings\n/tmp/tmp133zw196_test.go:22:36: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075152
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 70 {\n        return 0\n    }\n\n    count := 0\n    for i := 70; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 100 == 77 {\n                count += 2\n            }\n            if i % 10 == 7 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=192)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=639)', got '%!s(int=195)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=8026)', got '%!s(int=1930)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075153
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for x := range fmt.Sprintf(\"%d\", i) {\n                char := fmt.Sprintf(\"%c\", x)\n                if char == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.01s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "timestamp": 1660075153
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // for i := 0; i < n; i += 11 {\n    //     if i % 13 == 0 {\n    //         fmt.Println(i)\n    //     }\n    // }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := 0\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for x = i; x > 0; x /= 10 {\n                if x % 10 == 7 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    i := 1\n    result := 0\n    for ; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            result += i % 10\n            if i % 100 == 0 {\n                result += i % 100\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=0)', got '%!s(int=28)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=2)', got '%!s(int=53)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=3)', got '%!s(int=61)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=3)', got '%!s(int=79)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=6)', got '%!s(int=148)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=192)', got '%!s(int=2886)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=639)', got '%!s(int=7245)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=8026)', got '%!s(int=72369)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // if n < 11 {\n    //     return 0\n    // }\n    // return fizz_buzz(n - 1) + fizz_buzz(n / 11) + fizz_buzz(n / 13)\n    count := 0\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += i\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=0)', got '%!s(int=188)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=2)', got '%!s(int=503)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=3)', got '%!s(int=581)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=3)', got '%!s(int=859)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=6)', got '%!s(int=3298)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=192)', got '%!s(int=1287286)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=639)', got '%!s(int=8053045)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=8026)', got '%!s(int=804154209)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if digit == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ret := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            ret += 1\n        }\n    }\n    return ret\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int = 0\n    var i int = 1\n    for i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += count7(i)\n        }\n        i++\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkmuk8lyt_test.go:20:20: undefined: count7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                res++\n            }\n            if i / 10 == 7 {\n                res++\n            }\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            tmp := i\n            for tmp > 0 {\n                if tmp % 10 == 7 {\n                    count++\n                }\n                tmp /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    const fizz = 11\n    const buzz = 13\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i % fizz == 0 || i % buzz == 0 {\n            sum += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps0w6c92c_test.go:21:20: undefined: strings\n/tmp/tmps0w6c92c_test.go:21:34: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3no7pez_test.go:19:22: undefined: strings\n/tmp/tmpy3no7pez_test.go:19:36: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074981
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num, total int\n    if n <= 0 {\n        return 0\n    }\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            num = i\n            for num > 0 {\n                if num % 10 == 7 {\n                    total++\n                }\n                num /= 10\n            }\n        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_6tk7k94_test.go:19:20: undefined: strings\n/tmp/tmp_6tk7k94_test.go:19:34: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    cnt++\n                }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    res++\n                }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            count += 7_count(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp8hx6g579_test.go:20:23: '_' must separate successive digits\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660075154
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            // find out how many digits the number i has\n            // and then convert it to a string and count the number of 7's\n            iStr := fmt.Sprintf(\"%d\", i)\n            for j := 0; j < len(iStr); j++ {\n                if iStr[j] == '7' {\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    var count int\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_recur(n, 0)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qio_88s_test.go:16:12: undefined: fizz_buzz_recur\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Fill me in!\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075157
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && is_contain_7(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxxti08vl_test.go:18:44: undefined: is_contain_7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075156
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    divisors := []int{11, 13}\n    count := 0\n    for i := 0; i < n; i++ {\n        result := true\n        for _, divisor := range divisors {\n            if i % divisor != 0 {\n                result = false\n                break\n            }\n        }\n        if result {\n            fmt.Println(i)\n            count += counter(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2z8ffmdg_test.go:28:22: undefined: counter\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075157
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            var j int = i\n            for j > 0 {\n                if j % 10 == 7 {\n                    count++\n                }\n                j /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n        return 0\n    }\n    count := 0\n    for i := 7; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                count++\n            }\n            if i / 10 % 10 == 7 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp4agjaj8c_test.go:53: expected '%!s(int=192)', got '%!s(int=128)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp4agjaj8c_test.go:53: expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp4agjaj8c_test.go:53: expected '%!s(int=8026)', got '%!s(int=3216)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            // convert to string so we can loop over each char\n            str := fmt.Sprintf(\"%d\", i)\n            for _, char := range str {\n                if char == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var c int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int = 1\n    var sum int = 0\n    for ; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                sum++\n            }\n            if i / 10 % 10 == 7 {\n                sum++\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpze9q7wjc_test.go:51: expected '%!s(int=192)', got '%!s(int=128)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpze9q7wjc_test.go:51: expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpze9q7wjc_test.go:51: expected '%!s(int=8026)', got '%!s(int=3216)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074982
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                c += 1\n            }\n            if i / 10 == 7 {\n                c += 1\n            }\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += CountDigit(i, 7)\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpthoi9q6s_test.go:19:20: undefined: CountDigit\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ans := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    ans++\n                }\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "11\n13\n22\n26\n33\n39\n44\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n77\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n77\n78\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n77\n78\n88\n91\n99\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n77\n78\n88\n91\n99\n104\n110\n117\n121\n130\n132\n143\n154\n156\n165\n169\n176\n182\n187\n195\n198\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n77\n78\n88\n91\n99\n104\n110\n117\n121\n130\n132\n143\n154\n156\n165\n169\n176\n182\n187\n195\n198\n208\n209\n220\n221\n231\n234\n242\n247\n253\n260\n264\n273\n275\n286\n297\n299\n308\n312\n319\n325\n330\n338\n341\n351\n352\n363\n364\n374\n377\n385\n390\n396\n403\n407\n416\n418\n429\n440\n442\n451\n455\n462\n468\n473\n481\n484\n494\n495\n506\n507\n517\n520\n528\n533\n539\n546\n550\n559\n561\n572\n583\n585\n594\n598\n605\n611\n616\n624\n627\n637\n638\n649\n650\n660\n663\n671\n676\n682\n689\n693\n702\n704\n715\n726\n728\n737\n741\n748\n754\n759\n767\n770\n780\n781\n792\n793\n803\n806\n814\n819\n825\n832\n836\n845\n847\n858\n869\n871\n880\n884\n891\n897\n902\n910\n913\n923\n924\n935\n936\n946\n949\n957\n962\n968\n975\n979\n988\n990\n1001\n1012\n1014\n1023\n1027\n1034\n1040\n1045\n1053\n1056\n1066\n1067\n1078\n1079\n1089\n1092\n1100\n1105\n1111\n1118\n1122\n1131\n1133\n1144\n1155\n1157\n1166\n1170\n1177\n1183\n1188\n1196\n1199\n1209\n1210\n1221\n1222\n1232\n1235\n1243\n1248\n1254\n1261\n1265\n1274\n1276\n1287\n1298\n1300\n1309\n1313\n1320\n1326\n1331\n1339\n1342\n1352\n1353\n1364\n1365\n1375\n1378\n1386\n1391\n1397\n1404\n1408\n1417\n1419\n1430\n1441\n1443\n1452\n1456\n1463\n1469\n1474\n1482\n1485\n1495\n1496\n1507\n1508\n1518\n1521\n1529\n1534\n1540\n1547\n1551\n1560\n1562\n1573\n1584\n1586\n1595\n1599\n1606\n1612\n1617\n1625\n1628\n1638\n1639\n1650\n1651\n1661\n1664\n1672\n1677\n1683\n1690\n1694\n1703\n1705\n1716\n1727\n1729\n1738\n1742\n1749\n1755\n1760\n1768\n1771\n1781\n1782\n1793\n1794\n1804\n1807\n1815\n1820\n1826\n1833\n1837\n1846\n1848\n1859\n1870\n1872\n1881\n1885\n1892\n1898\n1903\n1911\n1914\n1924\n1925\n1936\n1937\n1947\n1950\n1958\n1963\n1969\n1976\n1980\n1989\n1991\n2002\n2013\n2015\n2024\n2028\n2035\n2041\n2046\n2054\n2057\n2067\n2068\n2079\n2080\n2090\n2093\n2101\n2106\n2112\n2119\n2123\n2132\n2134\n2145\n2156\n2158\n2167\n2171\n2178\n2184\n2189\n2197\n2200\n2210\n2211\n2222\n2223\n2233\n2236\n2244\n2249\n2255\n2262\n2266\n2275\n2277\n2288\n2299\n2301\n2310\n2314\n2321\n2327\n2332\n2340\n2343\n2353\n2354\n2365\n2366\n2376\n2379\n2387\n2392\n2398\n2405\n2409\n2418\n2420\n2431\n2442\n2444\n245",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    var mod11 int = 0\n    var mod13 int = 0\n    for i := 1; i < n; i++ {\n        mod11 = i % 11\n        mod13 = i % 13\n        if mod11 == 0 || mod13 == 0 {\n            count = count + mod11 + mod13\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=0)', got '%!s(int=44)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=3)', got '%!s(int=79)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=3)', got '%!s(int=100)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=6)', got '%!s(int=188)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=192)', got '%!s(int=3724)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=639)', got '%!s(int=9310)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=8026)', got '%!s(int=93006)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains7(i) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyj5bcq6k_test.go:18:44: undefined: contains7\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if digit == '7' {\n                    total += 1\n                }\n            }\n        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if string(digit) == \"7\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n            fmt.Println(countSevens(i))\n            count += countSevens(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cg5lwem_test.go:20:25: undefined: countSevens\n/tmp/tmp4cg5lwem_test.go:21:22: undefined: countSevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075158
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                count += 1\n            }\n            if i > 10 && i / 10 % 10 == 7 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpvf5xbum2_test.go:50: expected '%!s(int=192)', got '%!s(int=128)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpvf5xbum2_test.go:50: expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpvf5xbum2_test.go:50: expected '%!s(int=8026)', got '%!s(int=3216)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for n <= 0 {\n        return -1\n    }\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += i / 7\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=0)', got '%!s(int=23)'\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=2)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=3)', got '%!s(int=77)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=3)', got '%!s(int=116)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=6)', got '%!s(int=457)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=192)', got '%!s(int=183622)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=639)', got '%!s(int=1149745)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=8026)', got '%!s(int=114872280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            r += number_of_sevens(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjog119f3_test.go:19:18: undefined: number_of_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && seven_count(i) > 0 {\n            count += seven_count(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_rci7gy3_test.go:18:44: undefined: seven_count\n/tmp/tmp_rci7gy3_test.go:19:22: undefined: seven_count\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                count++\n            }\n            if i / 10 == 7 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660075155
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for t := i; t > 0; t /= 10 {\n                if t % 10 == 7 {\n                    r++\n                }\n            }\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var r int\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && fmt.Sprintf(\"%d\", i).Contains(\"7\") {\n            r++\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxzdn8e2_test.go:18:65: fmt.Sprintf(\"%d\", i).Contains undefined (type string has no field or method Contains)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, v := range fmt.Sprintf(\"%d\", i) {\n                if v == '7' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "timestamp": 1660074983
    },
    {
      "exit_code": 1,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n    for x := 0; x < n; x++ {\n        if (x % 11 == 0 || x % 13 == 0) && x % 10 == 7 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": null,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 {\n        return 0\n    }\n    if n < 13 {\n        return fizz_buzz(n - 1)\n    }\n    return fizz_buzz(n - 11) + fizz_buzz(n - 13) + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Timeout",
      "stderr": "None",
      "stdout": "None",
      "timestamp": 1660075172
    },
    {
      "exit_code": 0,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "timestamp": 1660075159
    },
    {
      "exit_code": 2,
      "program": "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += number_of_sevens(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5iag0wbw_test.go:19:22: undefined: number_of_sevens\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660075159
    }
  ]
}