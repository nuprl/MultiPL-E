name: HumanEval_99_closest_integer
language: jl
prompt: "\"\"\"\n    Create a function that takes a value (string) representing a\
  \ number\n    and returns the closest integer to it. If the number is equidistant\n\
  \    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"\
  10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding\
  \ away from zero means that if the given number is equidistant\n    from two integers,\
  \ the one you should return is the one that is the\n    farthest from zero. For\
  \ example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"\
  -14.5\") should return -15.\n    \"\"\"\nfunction closest_integer(value::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"\
  10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") ==\
  \ -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n"
completions: ["    value = parse(Float64, value)\n    if value - floor(value) < 0.5\n\
    \        return floor(value)\n    else\n        return ceil(value)\n    end\n\
    end", "    return parse(Int64, value)\nend", "    return parse(Int64, value)\n\
    end", "    value = parse(Float64, value)\n    if value == trunc(value)\n     \
    \   return trunc(value)\n    elseif value > trunc(value)\n        return trunc(value)\
    \ + 1\n    else\n        return trunc(value) - 1\n    end\nend", "    value =\
    \ parse(Float64, value)\n    if value - floor(value) < 0.5\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    return Int64(round(parse(Float64,\
    \ value)))\nend", "    value = parse(Float64, value)\n    if value < 0\n     \
    \   return floor(value)\n    else\n        return ceil(value)\n    end\nend",
  "    return round(parse(Float64, value))\nend", "    value = parse(Float64, value)\n\
    \    if value > 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    return round(parse(Float64, value))\nend", "    num = parse(Float64,\
    \ value)\n    if num > 0\n        return round(Int64, num)\n    else\n       \
    \ return round(Int64, num - 1)\n    end\nend", "    return parse(Int64, value)\n\
    end", "    return round(parse(Float64, value))\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) < 0.5\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) == 0.5\n        if value > 0\n         \
    \   return ceil(value)\n        else\n            return floor(value)\n      \
    \  end\n    else\n        return round(value)\n    end\nend", "    return round(parse(Float64,\
    \ value))\nend", "    return round(parse(Float64, value))\nend", "    return parse(Int64,\
    \ value)\nend", "    return round(parse(Float64, value))\nend", "    return round(parse(Float64,\
    \ value))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
