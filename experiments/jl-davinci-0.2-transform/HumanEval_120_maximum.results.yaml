language: jl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0\n        return []\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == length(arr)\n        return sort(arr)\n    end\n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp4cx4k6gc.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp4cx4k6gc.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp4cx4k6gc.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp4cx4k6gc.jl:30\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4cx4k6gc.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cx4k6gc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp4cx4k6gc.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp4cx4k6gc.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4cx4k6gc.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4cx4k6gc.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cx4k6gc.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    9      2     11\n"
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    sorted\
    \ = sort(arr)\n    return sorted[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if k == 1\n\
    \        return [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr),\
    \ minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)])])\n    end\n    if k == 4\n        return\
    \ sort([maximum(arr), minimum(arr), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr\
    \ .!= minimum(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]),\
    \ maximum(arr[arr .!= maximum(arr)][arr .!= minimum(arr)])])\n    end\n    if\
    \ k == 6\n        return sort([maximum(arr), minimum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)][arr\
    \ .!= minimum(arr)]), minimum(arr[arr .!= maximum(arr)][arr .!= minimum(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!=\
    \ maximum(arr)][arr .!= minimum(arr)]), minimum(arr[arr .!= maximum(arr)][arr\
    \ .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)][arr .!= minimum(arr)][arr\
    \ .!= maximum(arr[arr .!= maximum(arr)][arr .!= minimum(arr)])])])\n    end\n\
    \    if k == 8\n        return sort([maximum(arr), minimum(arr), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!=\
    \ maximum(arr)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jeh935q.jl:1\nin expression starting at /tmp/tmp7jeh935q.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create\
    \ a heap of size k\n    heap = Heap(k)\n    # Iterate through the array\n    for\
    \ i in 1:length(arr)\n        # If the heap is not full, push the element to the\
    \ heap\n        if !isfull(heap)\n            push!(heap, arr[i])\n        # If\
    \ the heap is full and the top element is smaller than the current element,\n\
    \        # pop the top element and push the current element\n        elseif peek(heap)\
    \ < arr[i]\n            pop!(heap)\n            push!(heap, arr[i])\n        end\n\
    \    end\n    # Return the heap as a sorted array\n    return sort(collect(heap))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp9z5j1q66.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp9z5j1q66.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp9z5j1q66.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z5j1q66.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z5j1q66.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp9z5j1q66.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9z5j1q66.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z5j1q66.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z5j1q66.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp9z5j1q66.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9z5j1q66.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z5j1q66.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z5j1q66.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp9z5j1q66.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int6"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements of the\
    \ sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgrdwss0s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpgrdwss0s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgrdwss0s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpgrdwss0s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements of the\
    \ sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if n == k\n        return sort(arr)\n    end\n    if k == 1\n\
    \        return [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr),\
    \ minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr), median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n  \
    \      return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!=\
    \ median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k == 6\n\
    \        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 8\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n\
    \    if k == 9\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkq0g6yf.jl:56\nin expression starting at\
    \ /tmp/tmplkq0g6yf.jl:56\n"
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sort!(arr)\n    # Return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if n == k\n        return sort(arr)\n    end\n    heap = zeros(Int64,\
    \ k)\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n    heapify(heap)\n\
    \    for i in k+1:n\n        if arr[i] > heap[1]\n            heap[1] = arr[i]\n\
    \            heapify(heap)\n        end\n    end\n    return sort(heap)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpox87hl1u.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpox87hl1u.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: heapify not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpox87hl1u.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox87hl1u.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox87hl1u.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpox87hl1u.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: heapify not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpox87hl1u.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox87hl1u.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox87hl1u.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpox87hl1u.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ heapify not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpox87hl1u.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox87hl1u.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox87hl1u.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpox87hl1u.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: heapify\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n "
  timestamp: 1659793365
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted = sort(arr)\n    # return the last k elements\n    return\
    \ sorted[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    sort(arr)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprofi3v3n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprofi3v3n.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements of the array\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_ax23xzu.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp_ax23xzu.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    # return the first k elements\n    sort(arr,\
    \ rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4wr9kbqv.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp4wr9kbqv.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:41\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap\
    \ = MaxHeap()\n    for i in 1:k\n        push!(heap, arr[i])\n    end\n    for\
    \ i in k+1:length(arr)\n        if arr[i] > heap[1]\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(heap,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp8_dwapop.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp8_dwapop.jl:43\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp8_dwapop.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_dwapop.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_dwapop.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp8_dwapop.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp8_dwapop.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_dwapop.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_dwapop.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp8_dwapop.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp8_dwapop.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_dwapop.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_dwapop.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp8_dwapop.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659793365
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpueha2p48.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpueha2p48.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements of the array\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_ax23xzu.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp_ax23xzu.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ax23xzu.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ax23xzu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ax23xzu.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgrdwss0s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpgrdwss0s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array and return the last k elements\n    return sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in ascending order\n    sorted_arr = sort(arr)\n    # Return the last\
    \ k elements of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements of the\
    \ sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz0q0i87k.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpz0q0i87k.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    sort(arr)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprofi3v3n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprofi3v3n.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    return arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbzuve8f5.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpbzuve8f5.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzuve8f5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzuve8f5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbzuve8f5.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzuve8f5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzuve8f5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbzuve8f5.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzuve8f5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzuve8f5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbzuve8f5.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzuve8f5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzuve8f5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbzuve8f5.jl:41\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgrdwss0s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpgrdwss0s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz0q0i87k.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpz0q0i87k.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz0q0i87k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz0q0i87k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpz0q0i87k.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # get the last k elements\n    return\
    \ sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    sort(arr)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprofi3v3n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprofi3v3n.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpueha2p48.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpueha2p48.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap\
    \ = MaxHeap(arr)\n    return [pop!(heap) for _ in 1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp4rcfgnbw.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp4rcfgnbw.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp4rcfgnbw.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rcfgnbw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rcfgnbw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4rcfgnbw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4rcfgnbw.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rcfgnbw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rcfgnbw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4rcfgnbw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp4rcfgnbw.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rcfgnbw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rcfgnbw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4rcfgnbw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659793365
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if k == 1\n\
    \        return [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr),\
    \ minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr), median(arr[1:end-1])])\n    end\n    if k == 5\n        return\
    \ sort([maximum(arr), minimum(arr), median(arr), median(arr[1:end-1]), median(arr[2:end])])\n\
    \    end\n    if k == 6\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2])])\n    end\n\
    \    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-3])])\n\
    \    end\n    if k == 8\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-3]),\
    \ median(arr[5:end-4])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]),\
    \ median(arr[4:end-3]), median(arr[5:end-4]), median(arr[6:end-5])])\n    end\n\
    \    if k == 10\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hn4vyn0.jl:1\nin expression starting at /tmp/tmp1hn4vyn0.jl:1\n"
  stdout: ''
  timestamp: 1659793363
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in reverse order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3wdcvkvy.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp3wdcvkvy.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wdcvkvy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wdcvkvy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3wdcvkvy.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wdcvkvy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wdcvkvy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3wdcvkvy.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wdcvkvy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wdcvkvy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3wdcvkvy.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wdcvkvy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wdcvkvy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3wdcvkvy.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0\n        return []\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == length(arr)\n        return sort(arr)\n    end\n    max_arr\
    \ = maximum(arr)\n    max_arr_index = findall(arr .== max_arr)[1]\n    return\
    \ [max_arr] .* vcat(maximum(arr[1:max_arr_index-1], k-1), maximum(arr[max_arr_index+1:end],\
    \ k-1))\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpmaihxf3l.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpmaihxf3l.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpmaihxf3l.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmaihxf3l.jl:35\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaihxf3l.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaihxf3l.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpmaihxf3l.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpmaihxf3l.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmaihxf3l.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaihxf3l.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaihxf3l.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpmaihxf3l.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmpmaihxf3l.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpmaihxf3l.jl:35\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1."
  timestamp: 1659793365
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap\
    \ = MaxHeap(arr)\n    return heap.get_max_k(k)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpl36klyu3.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpl36klyu3.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpl36klyu3.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl36klyu3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl36klyu3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl36klyu3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpl36klyu3.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl36klyu3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl36klyu3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl36klyu3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpl36klyu3.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl36klyu3.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl36klyu3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl36klyu3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659793365
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    # and return the first k elements\n    sort(arr,\
    \ rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp24qisaks.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp24qisaks.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24qisaks.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24qisaks.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp24qisaks.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24qisaks.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24qisaks.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp24qisaks.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24qisaks.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24qisaks.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp24qisaks.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24qisaks.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24qisaks.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp24qisaks.jl:41\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements of the\
    \ sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in ascending order\n    sorted_arr = sort(arr)\n    # return the last\
    \ k elements of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793363
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    # return the first k elements\n    return\
    \ sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp936fg28w.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp936fg28w.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp936fg28w.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp936fg28w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp936fg28w.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp936fg28w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp936fg28w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp936fg28w.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp936fg28w.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp936fg28w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp936fg28w.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp936fg28w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp936fg28w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp936fg28w.jl:41\n  Expression: "
  timestamp: 1659793365
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpueha2p48.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpueha2p48.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    sort(arr)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprofi3v3n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprofi3v3n.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test Failed at /tmp/tmprofi3v3n.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprofi3v3n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprofi3v3n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprofi3v3n.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    # return the first k elements\n    return sort(arr)[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzg6porav.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpzg6porav.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzg6porav.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzg6porav.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzg6porav.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sort!(arr)\n    # Return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if k == 1\n\
    \        return [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr),\
    \ minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr),\
    \ median(arr), median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n  \
    \      return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!=\
    \ median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k == 6\n\
    \        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 8\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n\
    \    if k == 9\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95lzj764.jl:56\nin expression starting at\
    \ /tmp/tmp95lzj764.jl:56\n"
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sort!(arr, rev=true)\n    # Return the first\
    \ k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgrdwss0s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpgrdwss0s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrdwss0s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrdwss0s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgrdwss0s.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize\
    \ a heap with the first k elements of arr\n    heap = Heap(arr[1:k])\n    # Iterate\
    \ through the rest of the array\n    for i in k+1:length(arr)\n        # If the\
    \ current element is greater than the root of the heap,\n        # pop the root\
    \ and push the current element\n        if arr[i] > heap.root\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    # Return the heap\
    \ as a sorted array\n    return sort(heap)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmprfxwp7ck.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmprfxwp7ck.jl:45\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmprfxwp7ck.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfxwp7ck.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfxwp7ck.jl:44\ntest set:\
    \ Error During Test at /tmp/tmprfxwp7ck.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprfxwp7ck.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfxwp7ck.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfxwp7ck.jl:44\ntest set:\
    \ Error During Test at /tmp/tmprfxwp7ck.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprfxwp7ck.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfxwp7ck.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfxwp7ck.jl:44\ntest set:\
    \ Error During Test at /tmp/tmprfxwp7ck.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmprfxwp7c"
  timestamp: 1659793365
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize\
    \ a heap\n    heap = Heap()\n    for i in arr\n        push!(heap, i)\n      \
    \  if length(heap) > k\n            pop!(heap)\n        end\n    end\n    return\
    \ sort(heap, rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmph_6pklik.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmph_6pklik.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmph_6pklik.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_6pklik.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_6pklik.jl:40\ntest set:\
    \ Error During Test at /tmp/tmph_6pklik.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmph_6pklik.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_6pklik.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_6pklik.jl:40\ntest set:\
    \ Error During Test at /tmp/tmph_6pklik.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmph_6pklik.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_6pklik.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_6pklik.jl:40\ntest set:\
    \ Error During Test at /tmp/tmph_6pklik.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmph_6pkli"
  timestamp: 1659793365
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqct1nk0v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqct1nk0v.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqct1nk0v.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqct1nk0v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqct1nk0v.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    # return the first k elements\n    sort(arr,\
    \ rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4wr9kbqv.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp4wr9kbqv.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wr9kbqv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wr9kbqv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wr9kbqv.jl:41\n  Expression: "
  timestamp: 1659793364
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n  \
    \  return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n =\
    \ length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if k == 1\n\
    \        return [maximum(arr)]\n    end\n    if k == 0\n        return []\n  \
    \  end\n    if k > n\n        return []\n    end\n    if k == 2\n        return\
    \ sort(arr)[n-1:n]\n    end\n    if k == 3\n        return sort(arr)[n-2:n]\n\
    \    end\n    if k == 4\n        return sort(arr)[n-3:n]\n    end\n    if k ==\
    \ 5\n        return sort(arr)[n-4:n]\n    end\n    if k == 6\n        return sort(arr)[n-5:n]\n\
    \    end\n    if k == 7\n        return sort(arr)[n-6:n]\n    end\n    if k ==\
    \ 8\n        return sort(arr)[n-7:n]\n    end\n    if k == 9\n        return sort(arr)[n-8:n]\n\
    \    end\n    if k == 10\n        return sort(arr)[n-9:n]\n    end\n    if k ==\
    \ 11\n        return sort(arr)[n-10:n]\n    end\n    if k == 12\n        return\
    \ sort(arr)[n-11:n]\n    end\n    if k == 13\n        return sort(arr)[n-12:n]\n\
    \    end\n    if k == 14\n        return sort(arr)[n-13:n]\n    end\n    if k\
    \ == 15\n        return sort(arr)[n-14:n]\n    end\n    if k == 16\n        return\
    \ sort(arr)[n-15:n]\n    end\n    if k == 17\n        return sort(arr)[n-16:n]\n\
    \    end\n    if k == 18\n        return sort(arr)[n-17:n]\n    end\n    if k\
    \ == 19\n        return sort(arr)[n-18:n]\n    end\n    if k == 20\n        return\
    \ sort(arr)[n-19:n]\n    end\n    if k == 21\n        return sort(arr)[n-20:n]\n\
    \    end\n    if k ==\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3sbpag0.jl:1\nin expression starting at /tmp/tmpu3sbpag0.jl:1\n"
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoec5tq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoec5tq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjsoec5tq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoec5tq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoec5tq.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array\n    sorted_arr = sort(arr)\n    # return the last k elements of the\
    \ sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements of the sorted array\n    return sorted_arr[1:k]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpueha2p48.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpueha2p48.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueha2p48.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueha2p48.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpueha2p48.jl:42\n  Expression: "
  timestamp: 1659793364
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize\
    \ a new array to store the maximum k numbers\n    max_arr = zeros(Int64, k)\n\
    \    # Initialize a new array to store the indices of the maximum k numbers\n\
    \    max_indices = zeros(Int64, k)\n    # Initialize the first k elements of the\
    \ max_arr to the first k elements of arr\n    for i in 1:k\n        max_arr[i]\
    \ = arr[i]\n        max_indices[i] = i\n    end\n    # Sort the max_arr in descending\
    \ order\n    sort!(max_arr, rev=true)\n    # Iterate through the rest of the elements\
    \ in arr\n    for i in k+1:length(arr)\n        # If the current element is greater\
    \ than the minimum element in max_arr\n        if arr[i] > max_arr[k]\n      \
    \      # Replace the minimum element in max_arr with the current element\n   \
    \         max_arr[k] = arr[i]\n            # Replace the index of the minimum\
    \ element in max_indices with the index of the current element\n            max_indices[k]\
    \ = i\n            # Sort the max_arr in descending order\n            sort!(max_arr,\
    \ rev=true)\n        end\n    end\n    # Initialize a new array to store the maximum\
    \ k numbers\n    max_k_arr = zeros(Int64, k)\n    # Iterate through the max_indices\
    \ array\n    for i in 1:k\n        # Add the element at the index in max_indices\
    \ to the max_k_arr\n        max_k_arr[i] = arr[max_indices[i]]\n    end\n    #\
    \ Return the max_k_arr\n    return max_k_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp3ffnur8s.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp3ffnur8s.jl:64\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ffnur8s.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ffnur8s.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp3ffnur8s.jl:67\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ffnur8s.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ffnur8s.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp3ffnur8s.jl:68\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, 20, 0, 2] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ffnur8s.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ffnur8s.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp3ffnur8s.jl:69\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8,\
    \ 0] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ffnur8s.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ffnur8s.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp3ffnur8s.jl:70\n  Express"
  timestamp: 1659793366
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort\
    \ the array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4qyh20q.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd4qyh20q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd4qyh20q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4qyh20q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4qyh20q.jl:35\ntest set: Test\
    \ Failed "
- exit_code: 0
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return\
    \ sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659793362
