name: HumanEval_61_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
  (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
  ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
  ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
  (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\")\
  \ == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
  ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
completions: ["    open_brackets = 0\n    for b in brackets\n        if b == '('\n\
    \            open_brackets += 1\n        elseif b == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '('\n            open_brackets +=\
    \ 1\n        elseif bracket == ')'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '('\n            open_brackets += 1\n   \
    \     elseif bracket == ')'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n \
    \       if i == '('\n            count += 1\n        elseif i == ')'\n       \
    \     count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            open_brackets += 1\n        elseif bracket\
    \ == ')'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '('\n            open_brackets += 1\n        elseif bracket == ')'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '('\n            open_brackets += 1\n        elseif bracket == ')'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for bracket in brackets\n        if bracket == '('\n\
    \            open_brackets += 1\n        elseif bracket == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            open_brackets += 1\n        elseif bracket\
    \ == ')'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '('\n            open_brackets += 1\n        elseif bracket == ')'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for c in brackets\n        if c == '('\n   \
    \         open_brackets += 1\n        elseif c == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '('\n            open_brackets += 1\n        elseif\
    \ brackets[i] == ')'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '('\n            open_brackets += 1\n        elseif\
    \ brackets[i] == ')'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    n = length(brackets)\n    if n == 0\n       \
    \ return true\n    end\n    if brackets[1] == \")\"\n        return false\n  \
    \  end\n    if n == 1\n        return false\n    end\n    if brackets[n] == \"\
    (\"\n        return false\n    end\n    if n == 2\n        return true\n    end\n\
    \    if brackets[1] == \"(\" && brackets[n] == \")\"\n        return correct_bracketing(brackets[2:n-1])\n\
    \    end\n    return false\nend", "    open_brackets = 0\n    for c in brackets\n\
    \        if c == '('\n            open_brackets += 1\n        elseif c == ')'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    count = 0\n    for i in brackets\n        if i == '('\n           \
    \ count += 1\n        elseif i == ')'\n            count -= 1\n        end\n \
    \       if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    count = 0\n    for i in brackets\n        if i == '('\n\
    \            count += 1\n        elseif i == ')'\n            count -= 1\n   \
    \     end\n        if count < 0\n            return false\n        end\n    end\n\
    \    return count == 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
