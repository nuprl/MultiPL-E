language: jl
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplsbtfr_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplsbtfr_7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplsbtfr_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* (length(numbers) - 1) .+ [delimeter]\
    \ .* (length(numbers) - 1) .+ numbers[2:end]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaxm1sw1z.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpaxm1sw1z.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [45, 42, 41] == [5, 8,\
    \ 6, 8, 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxm1sw1z.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxm1sw1z.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpaxm1sw1z.jl:21\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [10, 10] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxm1sw1z.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxm1sw1z.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkrbiphcn.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpkrbiphcn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkrbiphcn.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkrbiphcn.jl:18\ntest set: Error
    During Test at /tmp/tmpkrbiphcn.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, d'
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n\
    \        push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, length(numbers) * 2 - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* append(intersperse(numbers[2:end],\
    \ delimeter), [numbers[end]])\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgmzrl0ws.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpgmzrl0ws.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64) (repeats 4 times)\n     @ Main /tmp/tmpgmzrl0ws.jl:11\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmzrl0ws.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmzrl0ws.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpgmzrl0ws.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  UndefVarError: append not defined\n\
    \  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats\
    \ 3 times)\n     @ Main /tmp/tmpgmzrl0ws.jl:11\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgmzrl0ws.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmzrl0ws.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
