language: jl
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplsbtfr_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplsbtfr_7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplsbtfr_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* (length(numbers) - 1) .+ [delimeter]\
    \ .* (length(numbers) - 1) .+ numbers[2:end]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaxm1sw1z.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpaxm1sw1z.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [45, 42, 41] == [5, 8,\
    \ 6, 8, 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxm1sw1z.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxm1sw1z.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpaxm1sw1z.jl:21\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [10, 10] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxm1sw1z.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxm1sw1z.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkrbiphcn.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpkrbiphcn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkrbiphcn.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkrbiphcn.jl:18\ntest set: Error
    During Test at /tmp/tmpkrbiphcn.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, d'
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n\
    \        push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, length(numbers) * 2 - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* append(intersperse(numbers[2:end],\
    \ delimeter), [numbers[end]])\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgmzrl0ws.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpgmzrl0ws.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64) (repeats 4 times)\n     @ Main /tmp/tmpgmzrl0ws.jl:11\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmzrl0ws.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmzrl0ws.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpgmzrl0ws.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  UndefVarError: append not defined\n\
    \  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats\
    \ 3 times)\n     @ Main /tmp/tmpgmzrl0ws.jl:11\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgmzrl0ws.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmzrl0ws.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    new_numbers = [numbers[1]]\n    for i in 2:length(numbers)\n\
    \        push!(new_numbers, delimeter)\n        push!(new_numbers, numbers[i])\n\
    \    end\n    return new_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i = 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-2] = delimeter\n\
    \        result[2*i-1] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-2] = delimeter\n\
    \        result[2*i-1] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = []\n    for i in 1:length(numbers)-1\n        push!(result, numbers[i])\n\
    \        push!(result, delimeter)\n    end\n    push!(result, numbers[end])\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     result = [result; delimeter; numbers[i]]\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793796
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        result[2*i-1] = numbers[i]\n        if\
    \ i < length(numbers)\n            result[2*i] = delimeter\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4ltafn7e.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp4ltafn7e.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmp4ltafn7e.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ltafn7e.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ltafn7e.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = zeros(Int64, 2*length(numbers) - 1)\n    result[1] = numbers[1]\n\
    \    result[2:2:end] = delimeter\n    result[3:2:end] = numbers[2:end]\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp650lvqry.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp650lvqry.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::StepRange{Int64, Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp650lvqry.jl:16\n   [6] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp650lvqry.jl:26 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp650lvqry.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp650lvqry.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::StepRange{Int64, Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp650lvqry.jl:16\n   [6] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp650lvqry.jl:27 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        if i == 1\n            push!(result, numbers[i])\n\
    \        else\n            push!(result, delimeter)\n            push!(result,\
    \ numbers[i])\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        result[2*i-1] = numbers[i]\n        if\
    \ i != length(numbers)\n            result[2*i] = delimeter\n        end\n   \
    \ end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpoz1ggua0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpoz1ggua0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmpoz1ggua0.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoz1ggua0.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoz1ggua0.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    output = []\n    for i in 1:length(numbers)-1\n\
    \        push!(output, numbers[i])\n        push!(output, delimeter)\n    end\n\
    \    push!(output, numbers[end])\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkidjg7_5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpkidjg7_5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpkidjg7_5.jl:13\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpkidjg7_5.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkidjg7_5.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i != length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    output = []\n    for i in 1:length(numbers)-1\n\
    \        push!(output, numbers[i])\n        push!(output, delimeter)\n    end\n\
    \    push!(output, numbers[end])\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkidjg7_5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpkidjg7_5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpkidjg7_5.jl:13\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpkidjg7_5.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkidjg7_5.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkrbiphcn.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpkrbiphcn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkrbiphcn.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkrbiphcn.jl:18\ntest set: Error
    During Test at /tmp/tmpkrbiphcn.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, d'
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplsbtfr_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplsbtfr_7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplsbtfr_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .+ intersperse(numbers[2:end], delimeter)\
    \ .+ [delimeter]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppypp2lic.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmppypp2lic.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: Int64[] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppypp2lic.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppypp2lic.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppypp2lic.jl:21\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: Int64[] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppypp2lic.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppypp2lic.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[2*i - 2] = delimeter\n       \
    \ result[2*i - 1] = numbers[i]\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if isempty(numbers)\n        return []\n\
    \    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzjy1t071.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpzjy1t071.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjy1t071.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjy1t071.jl:18\ntest set: Error
    During Test at /tmp/tmpzjy1t071.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 3 times)\n    '
  timestamp: 1659793799
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = []\n    for i in 1:length(numbers)-1\n        push!(result, numbers[i])\n\
    \        push!(result, delimeter)\n    end\n    push!(result, numbers[end])\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = zeros(Int64, 2*length(numbers) - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i - 1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptjnk4vd4.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmptjnk4vd4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmptjnk4vd4.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmptjnk4vd4.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptjnk4vd4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptjnk4vd4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmptjnk4vd4.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptjnk4vd4.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptjnk4vd4.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if isempty(numbers)\n        return []\n\
    \    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzjy1t071.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpzjy1t071.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjy1t071.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjy1t071.jl:18\ntest set: Error
    During Test at /tmp/tmpzjy1t071.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 3 times)\n    '
  timestamp: 1659793799
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* append(intersperse(numbers[2:end],\
    \ delimeter), [delimeter])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp1dontfev.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp1dontfev.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64) (repeats 4 times)\n     @ Main /tmp/tmp1dontfev.jl:11\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1dontfev.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1dontfev.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1dontfev.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  UndefVarError: append not defined\n\
    \  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats\
    \ 3 times)\n     @ Main /tmp/tmp1dontfev.jl:11\n   [2] macro expansion\n     @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1dontfev.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1dontfev.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        result[2*i-1] = numbers[i]\n        if\
    \ i < length(numbers)\n            result[2*i] = delimeter\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4ltafn7e.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp4ltafn7e.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmp4ltafn7e.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ltafn7e.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ltafn7e.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, length(numbers) * 2 - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[(i\
    \ - 1) * 2] = delimeter\n        result[(i - 1) * 2 + 1] = numbers[i]\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplsbtfr_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplsbtfr_7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplsbtfr_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        result[2*i-1] = numbers[i]\n        if\
    \ i < length(numbers)\n            result[2*i] = delimeter\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4ltafn7e.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp4ltafn7e.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmp4ltafn7e.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ltafn7e.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ltafn7e.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .* vcat(intersperse(numbers[2:end],\
    \ delimeter), [delimeter])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqx66zgno.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpqx66zgno.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [1440, 720, 240, 40] ==\
    \ [5, 8, 6, 8, 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqx66zgno.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqx66zgno.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqx66zgno.jl:21\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [16, 8, 4] == [2, 2, 2, 2, 2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqx66zgno.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqx66zgno.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659793797
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(length(numbers) + length(numbers)\
    \ - 1)\n    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpcv10wj76.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpcv10wj76.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpcv10wj76.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv10wj76.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv10wj76.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcv10wj76.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpcv10wj76.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv10wj76.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv10wj76.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   "
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers) - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i - 1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmppos2tby_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmppos2tby_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmppos2tby_.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmppos2tby_.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppos2tby_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmppos2tby_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmppos2tby_.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppos2tby_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppos2tby_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] .+ [delimeter] .+ intersperse(numbers[2:end],\
    \ delimeter)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8d7j72d0.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp8d7j72d0.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: Int64[] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d7j72d0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d7j72d0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8d7j72d0.jl:21\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: Int64[] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d7j72d0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d7j72d0.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(length(numbers) + length(numbers)\
    \ - 1)\n    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpcv10wj76.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpcv10wj76.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpcv10wj76.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv10wj76.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv10wj76.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcv10wj76.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpcv10wj76.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv10wj76.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv10wj76.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   "
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, length(numbers) * 2 - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp71w3ov6o.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp71w3ov6o.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp71w3ov6o.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp71w3ov6o.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp71w3ov6o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp71w3ov6o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmp71w3ov6o.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp71w3ov6o.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp71w3ov6o.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n\
    \        push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkrbiphcn.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpkrbiphcn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkrbiphcn.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkrbiphcn.jl:18\ntest set: Error
    During Test at /tmp/tmpkrbiphcn.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, d'
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(length(numbers) * 2 - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuye21jru.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpuye21jru.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpuye21jru.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuye21jru.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuye21jru.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuye21jru.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpuye21jru.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuye21jru.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuye21jru.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   "
  timestamp: 1659793798
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if isempty(numbers)\n        return []\n\
    \    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzjy1t071.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpzjy1t071.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjy1t071.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjy1t071.jl:18\ntest set: Error
    During Test at /tmp/tmpzjy1t071.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 3 times)\n    '
  timestamp: 1659793799
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    else\n        return [numbers[1]] * delimeter * intersperse(numbers[2:end],\
    \ delimeter)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmphulbea7b.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphulbea7b.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    *(!Matched::StridedMatrix{T}, ::StridedVector{S}) where {T<:Union{Float32,\
    \ Float64, ComplexF32, ComplexF64}, S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n\
    \    *(::StridedVecOrMat, !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ})\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n\
    \    ...\n  Stacktrace:\n   [1] *(::Vector{Int64}, ::Int64, ::Vector{Int64})\n\
    \     @ Base ./operators.jl:655\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\
    \ (repeats 4 times)\n     @ Main /tmp/tmphulbea7b.jl:11\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmphulbea7b.jl:20 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphulbea7b.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphulbea7b.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching\
    \ *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    *(!Matched::StridedMatrix{T}, ::StridedVector{S}) where {T<:Union{Float32,\
    \ Float64, ComplexF32, ComplexF64}, S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n\
    \    *(::StridedVecOrMat, !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ})\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n\
    \    ...\n  Stacktrace:\n   [1] *(::Vector{Int64}, ::Int64"
  timestamp: 1659793800
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] + intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpx_t7peiz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpx_t7peiz.jl:22\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(2),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64) (repeats 3 times)\n     @ Main /tmp/tmpx_t7peiz.jl:13\n  \
    \ [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx_t7peiz.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx_t7peiz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_t7peiz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(2),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64) (repeats 2 times)\n     @ Main /tmp/tmpx_t7peiz.jl:13\n  \
    \ [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx_t7peiz.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx_t7peiz.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplsbtfr_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplsbtfr_7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplsbtfr_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmplsbtfr_7.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsbtfr_7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsbtfr_7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: -1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if isempty(numbers)\n        return []\n\
    \    else\n        return [numbers[1]] * intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzjy1t071.jl:20\n  Test threw
    exception\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 4 times)\n     @
    Main /tmp/tmpzjy1t071.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjy1t071.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjy1t071.jl:18\ntest set: Error
    During Test at /tmp/tmpzjy1t071.jl:21\n  Test threw exception\n  Expression: candidate([2,
    2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching *(::Vector{Int64},
    ::Vector{Int64})\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    intersperse(numbers::Vector{Int64}, delimeter::Int64) (repeats 3 times)\n    '
  timestamp: 1659793799
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i != length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1] =\
    \ numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpla5nuc0v.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpla5nuc0v.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpla5nuc0v.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpla5nuc0v.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpla5nuc0v.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpla5nuc0v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpla5nuc0v.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpla5nuc0v.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpla5nuc0v.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i - 1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpayjzkuxx.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpayjzkuxx.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpayjzkuxx.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpayjzkuxx.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpayjzkuxx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpayjzkuxx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpayjzkuxx.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpayjzkuxx.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpayjzkuxx.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = zeros(Int64, 2*length(numbers) - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i - 1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptjnk4vd4.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmptjnk4vd4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmptjnk4vd4.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmptjnk4vd4.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptjnk4vd4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptjnk4vd4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmptjnk4vd4.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptjnk4vd4.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptjnk4vd4.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793797
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     result = [result, delimeter, numbers[i]]\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpnz1gb3o2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpnz1gb3o2.jl:23\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Any}, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n      @ Main /tmp/tmpnz1gb3o2.jl:15\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpnz1gb3o2.jl:23 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpnz1gb3o2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnz1gb3o2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Any} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Mat"
  timestamp: 1659793798
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     result = [result, delimeter, numbers[i]]\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpnz1gb3o2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpnz1gb3o2.jl:23\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Any}, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n      @ Main /tmp/tmpnz1gb3o2.jl:15\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpnz1gb3o2.jl:23 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpnz1gb3o2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnz1gb3o2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Any} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Mat"
  timestamp: 1659793798
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i < length(numbers)\n         \
    \   push!(result, delimeter)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        result = [result,\
    \ delimeter, numbers[i]]\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp3pm6x4rc.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp3pm6x4rc.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Any}, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n      @ Main /tmp/tmp3pm6x4rc.jl:18\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp3pm6x4rc.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp3pm6x4rc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3pm6x4rc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Any} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Mat"
  timestamp: 1659793799
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i < length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n \
    \   result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i-1]\
    \ = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpynt8agl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpynt8agl_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpynt8agl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpynt8agl_.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpynt8agl_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpynt8agl_.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i != length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    elseif length(numbers) == 1\n        return numbers\n    else\n    \
    \    return [numbers[1], delimeter] .+ intersperse(numbers[2:end], delimeter)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj795ghvg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj795ghvg.jl:22\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj795ghvg.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj795ghvg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj795ghvg.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i in\
    \ 1:length(numbers)\n        if i == 1\n            push!(result, numbers[i])\n\
    \        else\n            push!(result, delimeter)\n            push!(result,\
    \ numbers[i])\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 2] = delimeter\n        result[2*i - 1] = numbers[i]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = zeros(Int64, 2*length(numbers)-1)\n    result[1:2:end]\
    \ = numbers\n    result[2:2:end] = delimeter\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftj8g5t.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1ftj8g5t.jl:22\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::StepRange{Int64, Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp1ftj8g5t.jl:13\n   [6] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp1ftj8g5t.jl:22 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1ftj8g5t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1ftj8g5t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::StepRange{Int64, Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp1ftj8g5t.jl:13\n   [6] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp1ftj8g5t.jl:23 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  timestamp: 1659793798
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 1
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n    result[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i - 1] = delimeter\n\
    \        result[2*i] = numbers[i]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpayjzkuxx.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpayjzkuxx.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpayjzkuxx.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpayjzkuxx.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpayjzkuxx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpayjzkuxx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpayjzkuxx.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpayjzkuxx.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpayjzkuxx.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659793798
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = [numbers[1]]\n    for i in 2:length(numbers)\n   \
    \     push!(result, delimeter)\n        push!(result, numbers[i])\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659793795
