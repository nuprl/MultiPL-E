name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
  \ different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    max_word = \"\"\n    max_count = 0\n    for word in words\n   \
    \     if length(unique(word)) > max_count\n            max_count = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_word = \"\"\n    max_count = 0\n    for word in words\n        count =\
    \ length(unique(word))\n        if count > max_count\n            max_count =\
    \ count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = \"\"\n    max_count = 0\n    for word in words\n       \
    \ count = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words\n\
    \        unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend", "    max_word = \"\"\n    max_unique_chars\
    \ = 0\n    for word in words\n        unique_chars = length(unique(word))\n  \
    \      if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_word = \"\"\n    max_unique_char = 0\n    for word in words\n        unique_char\
    \ = length(unique(word))\n        if unique_char > max_unique_char\n         \
    \   max_unique_char = unique_char\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    max_word = \"\"\n    max_unique_chars\
    \ = 0\n    for word in words\n        unique_chars = length(unique(word))\n  \
    \      if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_word = \"\"\n    max_count = 0\n    for word in words\n        count =\
    \ length(unique(word))\n        if count > max_count\n            max_count =\
    \ count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = \"\"\n    max_word_len = 0\n    for word in words\n    \
    \    if length(unique(word)) > max_word_len\n            max_word = word\n   \
    \         max_word_len = length(unique(word))\n        end\n    end\n    return\
    \ max_word\nend", "    max_word = \"\"\n    max_count = 0\n    for word in words\n\
    \        count = length(unique(word))\n        if count > max_count\n        \
    \    max_count = count\n            max_word = word\n        end\n    end\n  \
    \  return max_word\nend", "    max_word = \"\"\n    max_count = 0\n    for word\
    \ in words\n        count = length(unique(word))\n        if count > max_count\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "    max_word = \"\"\n    max_len = 0\n    for\
    \ word in words\n        if length(unique(word)) > max_len\n            max_len\
    \ = length(unique(word))\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    max_word = \"\"\n    max_len = 0\n    for word\
    \ in words\n        if length(unique(word)) > max_len\n            max_len = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_word = \"\"\n    max_count = 0\n    for word in words\n        count =\
    \ length(unique(word))\n        if count > max_count\n            max_count =\
    \ count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = \"\"\n    max_count = 0\n    for word in words\n       \
    \ count = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = \"\"\n    max_count = 0\n    for word in words\n       \
    \ count = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_unique = 0\n    max_word = \"\"\n    for word in words\n      \
    \  unique = length(unique(word))\n        if unique > max_unique\n           \
    \ max_unique = unique\n            max_word = word\n        end\n    end\n   \
    \ return max_word\nend", "    max_word = \"\"\n    max_unique_chars = 0\n    for\
    \ word in words\n        unique_chars = length(unique(word))\n        if unique_chars\
    \ > max_unique_chars\n            max_unique_chars = unique_chars\n          \
    \  max_word = word\n        end\n    end\n    return max_word\nend", "    max_word\
    \ = \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
