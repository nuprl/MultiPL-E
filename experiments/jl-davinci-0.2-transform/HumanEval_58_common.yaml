name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two lists.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    return unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    l1 = sort(l1)\n    l2 = sort(l2)\n\
    \    common = []\n    i = 1\n    j = 1\n    while i <= length(l1) && j <= length(l2)\n\
    \        if l1[i] == l2[j]\n            push!(common, l1[i])\n            i +=\
    \ 1\n            j += 1\n        elseif l1[i] < l2[j]\n            i += 1\n  \
    \      else\n            j += 1\n        end\n    end\n    return common\nend",
  "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    l1 = sort(unique(l1))\n    l2 = sort(unique(l2))\n    common_list\
    \ = []\n    i = 1\n    j = 1\n    while i <= length(l1) && j <= length(l2)\n \
    \       if l1[i] == l2[j]\n            push!(common_list, l1[i])\n           \
    \ i += 1\n            j += 1\n        elseif l1[i] < l2[j]\n            i += 1\n\
    \        else\n            j += 1\n        end\n    end\n    return common_list\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    l1_set = Set(l1)\n\
    \    l2_set = Set(l2)\n    return sort(collect(intersect(l1_set, l2_set)))\nend",
  "    return unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    l1_set\
    \ = Set(l1)\n    l2_set = Set(l2)\n    return sort(collect(intersect(l1_set, l2_set)))\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    l1_set\
    \ = Set(l1)\n    l2_set = Set(l2)\n    return sort(collect(intersect(l1_set, l2_set)))\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    # your code here\n    return intersect(l1, l2)\nend", "  \
    \  return unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    # your code here\n    return intersect(l1, l2)\nend", "  \
    \  return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    # create\
    \ a set of the first list\n    s1 = Set(l1)\n    # create a set of the second\
    \ list\n    s2 = Set(l2)\n    # create a set of the intersection of the two sets\n\
    \    s3 = intersect(s1, s2)\n    # return a sorted vector of the set\n    return\
    \ sort(collect(s3))\nend", "    return sort(unique(intersect(l1, l2)))\nend",
  "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    s1 = Set(l1)\n\
    \    s2 = Set(l2)\n    return sort(collect(intersect(s1, s2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    # sort both lists\n    l1 = sort(l1)\n\
    \    l2 = sort(l2)\n    # initialize empty vector\n    common_elements = Int64[]\n\
    \    # iterate over both lists\n    for i in 1:length(l1)\n        for j in 1:length(l2)\n\
    \            # if elements are equal and not already in common_elements, add to\
    \ common_elements\n            if l1[i] == l2[j] && l1[i] \u2209 common_elements\n\
    \                push!(common_elements, l1[i])\n            end\n        end\n\
    \    end\n    return common_elements\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    l1_set\
    \ = Set(l1)\n    l2_set = Set(l2)\n    return sort(collect(intersect(l1_set, l2_set)))\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    # your code here\n    return unique(sort(intersect(l1, l2)))\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    l1_set = Set(l1)\n    l2_set = Set(l2)\n\
    \    return sort(collect(intersect(l1_set, l2_set)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ unique(sort(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    # TODO: implement this function\n\
    \    return intersect(l1, l2)\nend", "    return sort(unique(intersect(l1, l2)))\n\
    end", "    return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    l1 = sort(l1)\n    l2 = sort(l2)\n    i = 1\n    j = 1\n \
    \   common = []\n    while i <= length(l1) && j <= length(l2)\n        if l1[i]\
    \ == l2[j]\n            push!(common, l1[i])\n            i += 1\n           \
    \ j += 1\n        elseif l1[i] < l2[j]\n            i += 1\n        else\n   \
    \         j += 1\n        end\n    end\n    return common\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
