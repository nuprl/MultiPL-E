name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    if n == 2\n        return 2\n    end\n    for i in 2:n\n      \
    \  if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n        \
    \    n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend", "    for i = 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # YOUR CODE HERE\n    return 0\n\
    end", "    if n == 1\n        return 1\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n / i)\n        end\n  \
    \  end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend", "    if n < 2\n        return\
    \ 0\n    end\n    if isprime(n)\n        return n\n    end\n    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\nend", "    # your code here\nend", "    factor = 2\n    while\
    \ n > 1\n        while n % factor == 0\n            n /= factor\n        end\n\
    \        factor += 1\n    end\n    return factor - 1\nend", "    i = 2\n    while\
    \ i <= n\n        if n % i == 0\n            n /= i\n        else\n          \
    \  i += 1\n        end\n    end\n    return i\nend", "    # TODO: implement this\
    \ function\n    return 0\nend", "    if n == 2\n        return 2\n    end\n  \
    \  for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    if n == 2\n        return 2\n    end\n    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    # TODO: Implement this function\n    return\
    \ 0\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n            n\
    \ /= i\n        else\n            i += 1\n        end\n    end\n    return i\n\
    end", "    if n == 2\n        return 2\n    end\n    if n % 2 == 0\n        return\
    \ largest_prime_factor(n/2)\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    # TODO:\
    \ Implement me!\n    return 0\nend", "    for i in 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
