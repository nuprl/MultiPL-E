language: jl
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    # create a dictionary\n    dict = Dict(\"1\" => \"One\", \"2\"\
    \ => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\"\
    \ => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\")\n   \
    \ # create an empty array\n    new_arr = []\n    # iterate through the reversed\
    \ array\n    for i in reversed_arr\n        # if the number is between 1 and 9\
    \ inclusive\n        if i >= 1 && i <= 9\n            # push the corresponding\
    \ name to the new array\n            push!(new_arr, dict[string(i)])\n       \
    \ end\n    end\n    # return the new array\n    return new_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqkflz8x3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpqkflz8x3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkflz8x3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkflz8x3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqkflz8x3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpapy45wqu.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpapy45wqu.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ Sort the array\n    sorted_arr = sort(arr)\n    # Reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # Replace each digit by its corresponding name\n\
    \    result = []\n    for i in reversed_arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpapy45wqu.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpapy45wqu.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapy45wqu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpapy45wqu.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapy45wqu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqkflz8x3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpqkflz8x3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkflz8x3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkflz8x3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqkflz8x3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ filter out the numbers that are not between 1 and 9\n    # sort the numbers\n\
    \    # reverse the numbers\n    # map the numbers to their corresponding names\n\
    \    # return the result\n    return map(x -> Dict(\"One\" => 1, \"Two\" => 2,\
    \ \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7,\
    \ \"Eight\" => 8, \"Nine\" => 9)[string(x)], reverse(sort(filter(x -> x >= 1 &&\
    \ x <= 9, arr))))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7h_jqte2.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp7h_jqte2.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key \"8\"\
    \ not found\n  Stacktrace:\n    [1] getindex\n      @ ./dict.jl:481 [inlined]\n\
    \    [2] #1\n      @ /tmp/tmp7h_jqte2.jl:24 [inlined]\n    [3] iterate\n     \
    \ @ ./generator.jl:47 [inlined]\n    [4] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [5] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [6] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp7h_jqte2.jl:24\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp7h_jqte2.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7h_jqte2.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7h_jqte2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key \"1\" not found\n  Stacktrace:\n\
    \    [1] getindex\n      @ ./dict.jl:481 [inlined]\n    [2] #1\n      @ /tmp/tmp7h_jqte2.jl:24\
    \ [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#3\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [5] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [6] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [7] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp7h_jqte2.jl:24\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp7h_jqte2.jl:33 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ Filter the array to only include numbers between 1 and 9 inclusive\n    # Sort\
    \ the array\n    # Reverse the array\n    # Map each number to its corresponding\
    \ name\n    # Return the resulting array\n    return map(x -> number_to_name(x),\
    \ reverse(sort(filter(x -> x >= 1 && x <= 9, arr))))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmjdeax6o.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpmjdeax6o.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#3\")(x::Int64)\n      @ Main\
    \ /tmp/tmpmjdeax6o.jl:24\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#3\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpmjdeax6o.jl:24\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmjdeax6o.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmjdeax6o.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmjdeax6o.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_name not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#3\")(x::Int64)\n      @ Main /tmp/tmpmjdeax6o.jl:24\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#3\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpmjdeax6o.jl:24\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmjdeax6o.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name\n\
    \    result = []\n    for i in reversed_arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqkflz8x3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpqkflz8x3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkflz8x3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkflz8x3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqkflz8x3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ Sort the array\n    sorted_arr = sort(arr)\n    # Reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # Replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    result = []\n    for i in reversed_arr\n        if i == 1\n  \
    \          push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    result = []\n    for i in reversed_arr\n        if i == 1\n  \
    \          push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqkflz8x3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpqkflz8x3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkflz8x3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkflz8x3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqkflz8x3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqkflz8x3.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    result = []\n    for i in reversed_arr\n        if i == 1\n  \
    \          push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    # create a dictionary\n    d = Dict(\"1\" => \"One\", \"2\" =>\
    \ \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" =>\
    \ \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\")\n    # create\
    \ a new array\n    new_arr = []\n    # iterate through the array\n    for i in\
    \ reversed_arr\n        # if the number is between 1 and 9 inclusive\n       \
    \ if i in 1:9\n            # append the corresponding name to the new array\n\
    \            push!(new_arr, d[string(i)])\n        end\n    end\n    # return\
    \ the new array\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name\n\
    \    # create an empty array\n    new_arr = []\n    # iterate over the array\n\
    \    for i in reversed_arr\n        # check if the number is between 1 and 9\n\
    \        if i >= 1 && i <= 9\n            # if it is, append the corresponding\
    \ name to the new array\n            push!(new_arr, number_to_name(i))\n     \
    \   end\n    end\n    # return the new array\n    return new_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfuvid1m3.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpfuvid1m3.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfuvid1m3.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfuvid1m3.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuvid1m3.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfuvid1m3.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfuvid1m3.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfuvid1m3.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuvid1m3.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfuvid1m3.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ number_to_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpfuvid1m3.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfuvid1m3.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuvid1m3.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfuvid1m3.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: number_to_"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name\n\
    \    result = []\n    for i in reversed_arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name\n\
    \    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n      \
    \      reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n      \
    \      reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n      \
    \      reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n    \
    \        reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n   \
    \         reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n  \
    \          reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n  \
    \          reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphbhdup02.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmphbhdup02.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmphbhdup02.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphbhdup02.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphbhdup02.jl:51\ntest set:\
    \ Error During Test at /tmp/tmphbhdup02.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmphbhdup02.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    result = []\n    for i in reversed_arr\n        if i == 1\n  \
    \          push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    #\
    \ Filter the array to only include numbers between 1 and 9\n    filtered_arr =\
    \ filter(x -> x >= 1 && x <= 9, arr)\n    # Sort the filtered array\n    sorted_arr\
    \ = sort(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = reverse(sorted_arr)\n\
    \    # Replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    replaced_arr\
    \ = replace(reversed_arr, 1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"\
    Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"\
    )\n    return replaced_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
