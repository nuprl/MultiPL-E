language: jl
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return sum, prod\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return sum, prod\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803950
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803950
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803950
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for n in numbers\n        s += n\n      \
    \  p *= n\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
