language: jl
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a == b\n        return [a]\n    elseif a >\
    \ b\n        return [i for i in a:b if i % 2 == 0]\n    else\n        return [i\
    \ for i in a:b if i % 2 == 0]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt_bm93qj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpt_bm93qj.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_bm93qj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_bm93qj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt_bm93qj.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_bm93qj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_bm93qj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt_bm93qj.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_bm93qj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_bm93qj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt_bm93qj.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt_bm93qj.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_bm93qj.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp72heu925.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp72heu925.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72heu925.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72heu925.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp72heu925.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72heu925.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72heu925.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp72heu925.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72heu925.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72heu925.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp72heu925.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp72heu925.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpakll0wty.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpakll0wty.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakll0wty.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakll0wty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpakll0wty.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakll0wty.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakll0wty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpakll0wty.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakll0wty.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakll0wty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpakll0wty.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpakll0wty.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
- exit_code: 1
  program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8imdtfgb.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8imdtfgb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8imdtfgb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8imdtfgb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8imdtfgb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
